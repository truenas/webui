eee863a28f2f1b1057ad2ed2770f7efa
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NfsFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const dataset_enum_1 = require("app/enums/dataset.enum");
const nfs_protocol_enum_1 = require("app/enums/nfs-protocol.enum");
const nfs_security_provider_enum_1 = require("app/enums/nfs-security-provider.enum");
const role_enum_1 = require("app/enums/role.enum");
const service_name_enum_1 = require("app/enums/service-name.enum");
const sharing_1 = require("app/helptext/sharing");
const group_combobox_provider_1 = require("app/modules/forms/ix-forms/classes/group-combobox-provider");
const user_combobox_provider_1 = require("app/modules/forms/ix-forms/classes/user-combobox-provider");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_combobox_component_1 = require("app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.component");
const ix_explorer_component_1 = require("app/modules/forms/ix-forms/components/ix-explorer/ix-explorer.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_ip_input_with_netmask_component_1 = require("app/modules/forms/ix-forms/components/ix-ip-input-with-netmask/ix-ip-input-with-netmask.component");
const ix_list_item_component_1 = require("app/modules/forms/ix-forms/components/ix-list/ix-list-item/ix-list-item.component");
const ix_list_component_1 = require("app/modules/forms/ix-forms/components/ix-list/ix-list.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ip_validation_1 = require("app/modules/forms/ix-forms/validators/ip-validation");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const dataset_service_1 = require("app/services/dataset-service/dataset.service");
const filesystem_service_1 = require("app/services/filesystem.service");
const user_service_1 = require("app/services/user.service");
const ws_service_1 = require("app/services/ws.service");
const services_actions_1 = require("app/store/services/services.actions");
let NfsFormComponent = class NfsFormComponent {
    get isNew() {
        return !this.existingNfsShare;
    }
    get title() {
        return this.isNew
            ? this.translate.instant('Add NFS Share')
            : this.translate.instant('Edit NFS Share');
    }
    constructor(ws, formBuilder, userService, translate, filesystemService, formErrorHandler, cdr, snackbar, datasetService, slideInRef, store$, data) {
        var _a, _b;
        this.ws = ws;
        this.formBuilder = formBuilder;
        this.userService = userService;
        this.translate = translate;
        this.filesystemService = filesystemService;
        this.formErrorHandler = formErrorHandler;
        this.cdr = cdr;
        this.snackbar = snackbar;
        this.datasetService = datasetService;
        this.slideInRef = slideInRef;
        this.store$ = store$;
        this.data = data;
        this.isLoading = false;
        this.isAdvancedMode = false;
        this.hasNfsSecurityField = false;
        this.createDatasetProps = {
            share_type: dataset_enum_1.DatasetPreset.Multiprotocol,
        };
        this.form = this.formBuilder.group({
            path: ['', forms_1.Validators.required],
            comment: [''],
            enabled: [true],
            ro: [false],
            maproot_user: [''],
            maproot_group: [''],
            mapall_user: [''],
            mapall_group: [''],
            security: [[]],
            networks: this.formBuilder.array([]),
            hosts: this.formBuilder.array([]),
        });
        this.requiredRoles = [role_enum_1.Role.SharingNfsWrite, role_enum_1.Role.SharingWrite];
        this.helptext = sharing_1.helptextSharingNfs;
        this.userProvider = new user_combobox_provider_1.UserComboboxProvider(this.userService);
        this.groupProvider = new group_combobox_provider_1.GroupComboboxProvider(this.userService);
        this.treeNodeProvider = this.filesystemService.getFilesystemNodeProvider({ directoriesOnly: true });
        this.securityOptions$ = (0, rxjs_1.of)([
            {
                label: 'SYS',
                value: nfs_security_provider_enum_1.NfsSecurityProvider.Sys,
            },
            {
                label: 'KRB5',
                value: nfs_security_provider_enum_1.NfsSecurityProvider.Krb5,
            },
            {
                label: 'KRB5I',
                value: nfs_security_provider_enum_1.NfsSecurityProvider.Krb5i,
            },
            {
                label: 'KRB5P',
                value: nfs_security_provider_enum_1.NfsSecurityProvider.Krb5p,
            },
        ]);
        this.existingNfsShare = (_a = this.data) === null || _a === void 0 ? void 0 : _a.existingNfsShare;
        this.defaultNfsShare = (_b = this.data) === null || _b === void 0 ? void 0 : _b.defaultNfsShare;
    }
    setNfsShareForEdit() {
        this.existingNfsShare.networks.forEach(() => this.addNetworkControl());
        this.existingNfsShare.hosts.forEach(() => this.addHostControl());
        this.form.patchValue(this.existingNfsShare);
    }
    ngOnInit() {
        this.checkForNfsSecurityField();
        if (this.defaultNfsShare) {
            this.form.patchValue(this.defaultNfsShare);
        }
        if (this.existingNfsShare) {
            this.setNfsShareForEdit();
        }
    }
    addNetworkControl() {
        this.form.controls.networks.push(this.formBuilder.control('', [forms_1.Validators.required, (0, ip_validation_1.ipv4or6cidrValidator)()]));
    }
    removeNetworkControl(index) {
        this.form.controls.networks.removeAt(index);
    }
    addHostControl() {
        this.form.controls.hosts.push(this.formBuilder.control('', forms_1.Validators.required));
    }
    removeHostControl(index) {
        this.form.controls.hosts.removeAt(index);
    }
    toggleAdvancedMode() {
        this.isAdvancedMode = !this.isAdvancedMode;
    }
    onSubmit() {
        const nfsShare = this.form.value;
        let request$;
        if (this.isNew) {
            request$ = this.ws.call('sharing.nfs.create', [nfsShare]);
        }
        else {
            request$ = this.ws.call('sharing.nfs.update', [this.existingNfsShare.id, nfsShare]);
        }
        this.datasetService.rootLevelDatasetWarning(nfsShare.path, this.translate.instant(sharing_1.helptextSharingNfs.root_level_warning), !this.form.controls.path.dirty)
            .pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.tap)(() => {
            this.isLoading = true;
            this.cdr.markForCheck();
        }), (0, rxjs_1.switchMap)(() => request$), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                if (this.isNew) {
                    this.snackbar.success(this.translate.instant('NFS share created'));
                }
                else {
                    this.snackbar.success(this.translate.instant('NFS share updated'));
                }
                this.store$.dispatch((0, services_actions_1.checkIfServiceIsEnabled)({ serviceName: service_name_enum_1.ServiceName.Nfs }));
                this.isLoading = false;
                this.cdr.markForCheck();
                this.slideInRef.close(true);
            },
            error: (error) => {
                this.isLoading = false;
                this.formErrorHandler.handleWsFormError(error, this.form);
                this.cdr.markForCheck();
            },
        });
    }
    checkForNfsSecurityField() {
        this.ws.call('nfs.config')
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((nfsConfig) => {
            var _a;
            this.hasNfsSecurityField = (_a = nfsConfig.protocols) === null || _a === void 0 ? void 0 : _a.includes(nfs_protocol_enum_1.NfsProtocol.V4);
        });
    }
};
exports.NfsFormComponent = NfsFormComponent;
NfsFormComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: reactive_forms_1.FormBuilder },
    { type: user_service_1.UserService },
    { type: core_2.TranslateService },
    { type: filesystem_service_1.FilesystemService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_1.ChangeDetectorRef },
    { type: snackbar_service_1.SnackbarService },
    { type: dataset_service_1.DatasetService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: store_1.Store },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.NfsFormComponent = NfsFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-nfs-form',
        template: require("./nfs-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header_component_1.IxModalHeaderComponent,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_explorer_component_1.IxExplorerComponent,
            ix_input_component_1.IxInputComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            ix_combobox_component_1.IxComboboxComponent,
            ix_select_component_1.IxSelectComponent,
            ix_list_component_1.IxListComponent,
            ix_list_item_component_1.IxListItemComponent,
            ix_ip_input_with_netmask_component_1.IxIpInputWithNetmaskComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
        ],
    })
], NfsFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,