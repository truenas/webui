c25fafcef54015dedee90640657ceef0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsStore = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const component_store_1 = require("@ngrx/component-store");
const rxjs_1 = require("rxjs");
const app_extra_category_enum_1 = require("app/enums/app-extra-category.enum");
const applications_service_1 = require("app/pages/apps/services/applications.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const initialState = {
    availableApps: [],
    recommendedApps: [],
    latestApps: [],
    categories: [],
    isLoading: false,
};
let AppsStore = class AppsStore extends component_store_1.ComponentStore {
    constructor(errorHandler, appsService) {
        super(initialState);
        this.errorHandler = errorHandler;
        this.appsService = appsService;
        this.isLoading$ = this.select((state) => state.isLoading);
        this.recommendedApps$ = this.select((state) => state.recommendedApps);
        this.latestApps$ = this.select((state) => state.latestApps);
        this.appsCategories$ = this.select((state) => [
            ...state.categories,
            app_extra_category_enum_1.AppExtraCategory.NewAndUpdated,
            app_extra_category_enum_1.AppExtraCategory.Recommended,
        ]);
        this.availableApps$ = this.select((state) => state.availableApps);
        this.initialize = this.effect((triggers$) => {
            return triggers$.pipe((0, rxjs_1.switchMap)(() => this.loadCatalog()));
        });
        this.initialize();
    }
    handleError(error) {
        this.errorHandler.showErrorModal(error);
        this.patchState((state) => {
            return Object.assign(Object.assign({}, state), { isLoading: false });
        });
    }
    loadCatalog() {
        return (0, rxjs_1.of)(null).pipe((0, rxjs_1.tap)(() => {
            this.patchState(Object.assign(Object.assign({}, initialState), { isLoading: true }));
        }), (0, rxjs_1.switchMap)(() => {
            return (0, rxjs_1.combineLatest)([
                this.loadLatestApps(),
                this.loadAvailableApps(),
                this.loadCategories(),
            ]);
        }), (0, rxjs_1.tap)(() => {
            this.patchState((state) => {
                return Object.assign(Object.assign({}, state), { isLoading: false });
            });
        }), (0, rxjs_1.catchError)((error) => {
            this.handleError(error);
            return rxjs_1.EMPTY;
        }));
    }
    loadLatestApps() {
        return this.appsService.getLatestApps().pipe((0, rxjs_1.catchError)((error) => {
            this.handleError(error);
            return (0, rxjs_1.of)([]);
        }), (0, rxjs_1.tap)((latestApps) => {
            this.patchState((state) => {
                return Object.assign(Object.assign({}, state), { latestApps });
            });
        }));
    }
    loadAvailableApps() {
        return this.appsService.getAvailableApps().pipe((0, rxjs_1.catchError)((error) => {
            this.handleError(error);
            return (0, rxjs_1.of)([]);
        }), (0, rxjs_1.tap)((availableApps) => {
            this.patchState((state) => {
                return Object.assign(Object.assign({}, state), { availableApps: [...availableApps], recommendedApps: availableApps
                        .filter((app) => app.recommended)
                        .map((app) => (Object.assign(Object.assign({}, app), { categories: [...app.categories, app_extra_category_enum_1.AppExtraCategory.Recommended] }))) });
            });
        }));
    }
    loadCategories() {
        return this.appsService.getAllAppsCategories().pipe((0, rxjs_1.catchError)((error) => {
            this.handleError(error);
            return (0, rxjs_1.of)([]);
        }), (0, rxjs_1.tap)((categories) => {
            this.patchState((state) => {
                return Object.assign(Object.assign({}, state), { categories: [...categories] });
            });
        }));
    }
};
exports.AppsStore = AppsStore;
AppsStore.ctorParameters = () => [
    { type: error_handler_service_1.ErrorHandlerService },
    { type: applications_service_1.ApplicationsService }
];
exports.AppsStore = AppsStore = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)()
], AppsStore);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,