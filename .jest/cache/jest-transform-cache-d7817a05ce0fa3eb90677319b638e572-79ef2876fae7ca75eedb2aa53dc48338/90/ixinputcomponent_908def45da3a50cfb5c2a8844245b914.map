{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-input/ix-input.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-input/ix-input.component.ts"],"sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NgControl,\n} from '@angular/forms';\nimport { MatAutocompleteTrigger, MatAutocomplete } from '@angular/material/autocomplete';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatOption } from '@angular/material/core';\nimport { MatError, MatHint } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\nimport { debounceTime, distinctUntilChanged } from 'rxjs';\nimport { Option } from 'app/interfaces/option.interface';\nimport { IxSimpleChanges } from 'app/interfaces/simple-changes.interface';\nimport { IxErrorsComponent } from 'app/modules/forms/ix-forms/components/ix-errors/ix-errors.component';\nimport { IxLabelComponent } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.component';\nimport { IxFormService } from 'app/modules/forms/ix-forms/services/ix-form.service';\nimport { MarkedIcon } from 'app/modules/ix-icon/icon-marker.util';\nimport { IxIconComponent } from 'app/modules/ix-icon/ix-icon.component';\nimport { TestOverrideDirective } from 'app/modules/test-id/test-override/test-override.directive';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-input',\n  templateUrl: './ix-input.component.html',\n  styleUrls: ['./ix-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    IxLabelComponent,\n    IxIconComponent,\n    MatInput,\n    MatAutocompleteTrigger,\n    MatIconButton,\n    MatTooltip,\n    MatAutocomplete,\n    MatOption,\n    MatError,\n    IxErrorsComponent,\n    MatHint,\n    TranslateModule,\n    TestOverrideDirective,\n    TestDirective,\n  ],\n})\nexport class IxInputComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit, OnDestroy {\n  @Input() label: string;\n  @Input() placeholder: string;\n  @Input() prefixIcon: MarkedIcon;\n  @Input() hint: string;\n  @Input() tooltip: string;\n  @Input() required: boolean;\n  @Input() readonly: boolean;\n  @Input() type: string;\n  @Input() autocomplete = 'off';\n  @Input() autocompleteOptions: Option[];\n  @Input() maxLength = 524288;\n\n  /** If formatted value returned by parseAndFormatInput has non-numeric letters\n   * and input 'type' is a number, the input will stay empty on the form */\n  @Input() format: (value: string | number) => string;\n  @Input() parse: (value: string | number) => string | number;\n\n  @ViewChild('ixInput') inputElementRef: ElementRef<HTMLInputElement>;\n\n  private _value: string | number = this.controlDirective.value as string;\n  formatted: string | number = '';\n\n  isDisabled = false;\n  showPassword = false;\n  invalid = false;\n  filteredOptions: Option[];\n  private lastKnownValue: string | number = this._value;\n\n  onChange: (value: string | number) => void = (): void => {};\n  onTouch: () => void = (): void => {};\n\n  constructor(\n    public controlDirective: NgControl,\n    private translate: TranslateService,\n    private cdr: ChangeDetectorRef,\n    private formService: IxFormService,\n    private elementRef: ElementRef<HTMLElement>,\n  ) {\n    this.controlDirective.valueAccessor = this;\n  }\n\n  ngOnChanges(changes: IxSimpleChanges<this>): void {\n    if ('autocompleteOptions' in changes) {\n      this.filterOptions();\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.autocompleteOptions) {\n      this.handleAutocompleteOptionsOnInit();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.formService.registerControl(this.controlDirective, this.elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.formService.unregisterControl(this.controlDirective);\n  }\n\n  get value(): string | number {\n    return this._value;\n  }\n\n  set value(val: string | number) {\n    if (this.type === 'number') {\n      this._value = (val || val === 0) ? Number(val) : null;\n      return;\n    }\n    this._value = val;\n  }\n\n  writeValue(value: string | number): void {\n    let formatted = value;\n    if (value && this.format) {\n      formatted = this.format(value);\n    }\n    this.formatted = formatted;\n    this.value = value;\n  }\n\n  input(ixInput: HTMLInputElement): void {\n    this.invalid = ixInput.validity?.badInput;\n    const value = ixInput.value;\n    this.value = value;\n    this.formatted = value;\n    if (value && this.parse) {\n      this.value = this.parse(value);\n    }\n    this.onChange(this.value);\n    this.filterOptions();\n  }\n\n  invalidMessage(): string {\n    return this.translate.instant('Value must be a {type}', {\n      type: this.type,\n    });\n  }\n\n  registerOnChange(onChange: (value: string | number) => void): void {\n    this.onChange = (val) => {\n      this.lastKnownValue = val;\n      onChange(val);\n    };\n  }\n\n  registerOnTouched(onTouched: () => void): void {\n    this.onTouch = onTouched;\n  }\n\n  shouldShowResetInput(): boolean {\n    return (\n      !this.isDisabled\n      && this.hasValue()\n      && this.type !== 'password'\n      && !this.readonly\n    );\n  }\n\n  getType(): string {\n    // Mimicking a password field to prevent browsers from remembering passwords.\n    const isFakePassword = this.type === 'password' && (this.autocomplete === 'off' || this.showPassword);\n    return isFakePassword ? 'text' : this.type;\n  }\n\n  isPasswordField(): boolean {\n    return this.type === 'password' && !this.showPassword;\n  }\n\n  hasValue(): boolean {\n    return this.invalid || this.value?.toString()?.length > 0;\n  }\n\n  resetInput(input: HTMLInputElement): void {\n    input.value = '';\n    this.invalid = false;\n    this.value = '';\n    this.formatted = '';\n    this.onChange(this.value);\n    this.filterOptions();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  focus(ixInput: HTMLInputElement): void {\n    this.onTouch();\n    if (this.readonly) {\n      ixInput.select();\n    }\n    this.filterOptions('');\n  }\n\n  blurred(): void {\n    this.onTouch();\n\n    if (this.formatted) {\n      if (this.parse) {\n        this.value = this.parse(this.formatted);\n        this.formatted = this.value;\n      }\n      if (this.format) {\n        this.formatted = this.format(this.value);\n      }\n    }\n\n    if (this.value !== this.lastKnownValue) {\n      this.lastKnownValue = this.value;\n      this.onChange(this.value);\n    }\n\n    if (this.autocompleteOptions && !this.findExistingOption(this.value)) {\n      this.writeValue('');\n      this.onChange('');\n      this.formatted = '';\n    }\n\n    this.cdr.markForCheck();\n  }\n\n  onPasswordToggled(): void {\n    this.showPassword = !this.showPassword;\n  }\n\n  optionSelected(option: Option): void {\n    if (this.inputElementRef?.nativeElement) {\n      this.inputElementRef.nativeElement.value = option.label;\n    }\n\n    this.value = option.value;\n    this.onChange(option.value);\n    this.cdr.markForCheck();\n  }\n\n  filterOptions(customFilterValue?: string): void {\n    const filterValue = (customFilterValue ?? this.value) || '';\n    if (this.autocompleteOptions) {\n      this.filteredOptions = this.autocompleteOptions.filter((option) => {\n        return option.label.toString().toLowerCase().includes((filterValue).toString().toLowerCase());\n      }).slice(0, 50);\n    }\n  }\n\n  private findExistingOption(value: string | number): Option {\n    return this.autocompleteOptions?.find((option) => (option.label === value) || (option.value === value));\n  }\n\n  private handleAutocompleteOptionsOnInit(): void {\n    // handle input value changes for this.autocomplete options\n    this.controlDirective.control.valueChanges.pipe(\n      debounceTime(100),\n      distinctUntilChanged(),\n      untilDestroyed(this),\n    ).subscribe((value: string) => {\n      const existingOption = this.findExistingOption(value);\n\n      if (this.autocompleteOptions && existingOption?.value) {\n        this.value = existingOption.value;\n        this.onChange(existingOption.value);\n        this.cdr.markForCheck();\n      }\n    });\n\n    // handling initial value formatting from value to label\n    if (this.value !== undefined) {\n      this.formatted = this.findExistingOption(this.value)?.label ?? '';\n    }\n\n    this.filterOptions('');\n  }\n}\n"],"version":3}