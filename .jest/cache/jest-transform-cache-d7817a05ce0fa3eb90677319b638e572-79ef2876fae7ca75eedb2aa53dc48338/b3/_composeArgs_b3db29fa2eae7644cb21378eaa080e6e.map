{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_composeArgs.js","mappings":";;AAAA,wFAAwF;AACxF,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;AAEzB;;;;;;;;;;GAUG;AACH,SAAS,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS;IACrD,IAAI,SAAS,GAAG,CAAC,CAAC,EACd,UAAU,GAAG,IAAI,CAAC,MAAM,EACxB,aAAa,GAAG,OAAO,CAAC,MAAM,EAC9B,SAAS,GAAG,CAAC,CAAC,EACd,UAAU,GAAG,QAAQ,CAAC,MAAM,EAC5B,WAAW,GAAG,SAAS,CAAC,UAAU,GAAG,aAAa,EAAE,CAAC,CAAC,EACtD,MAAM,GAAG,KAAK,CAAC,UAAU,GAAG,WAAW,CAAC,EACxC,WAAW,GAAG,CAAC,SAAS,CAAC;IAE7B,OAAO,EAAE,SAAS,GAAG,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IACD,OAAO,EAAE,SAAS,GAAG,aAAa,EAAE,CAAC;QACnC,IAAI,WAAW,IAAI,SAAS,GAAG,UAAU,EAAE,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IACD,OAAO,WAAW,EAAE,EAAE,CAAC;QACrB,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,kBAAe,WAAW,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_composeArgs.js"],"sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nexport default composeArgs;\n"],"version":3}