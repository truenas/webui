016f91d93e122ac694363d9f88d46b25
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxChipsHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/autocomplete/testing");
const testing_3 = require("@angular/material/chips/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxChipsHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getMatChipListHarness = this.locatorFor(testing_3.MatChipGridHarness);
        this.getAutoCompleteHarness = this.locatorFor(testing_2.MatAutocompleteHarness);
        this.getMatChips = this.locatorForAll(testing_3.MatChipHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxChipsHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    selectSuggestionValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setValue([value]);
            const harness = (yield this.getAutoCompleteHarness());
            yield harness.focus();
            yield harness.selectOption({ text: value });
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const chips = yield this.getMatChips();
            if (!chips.length) {
                return [];
            }
            return (0, testing_1.parallel)(() => chips.map((chip) => chip.getText()));
        });
    }
    setValue(values) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.removeAllChips();
            if (values.length) {
                yield this.addChips(values);
            }
        });
    }
    removeAllChips() {
        return __awaiter(this, void 0, void 0, function* () {
            const chips = yield this.getMatChips();
            if (!chips.length) {
                return;
            }
            yield (0, testing_1.parallel)(() => chips.map((chip) => chip.remove()));
        });
    }
    addChips(values) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield (yield this.getMatChipListHarness()).getInput();
            for (const value of values) {
                yield input.setValue(value);
                yield input.sendSeparatorKey(testing_1.TestKey.ENTER);
            }
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatChipListHarness()).isDisabled();
        });
    }
}
exports.IxChipsHarness = IxChipsHarness;
IxChipsHarness.hostSelector = 'ix-chips';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1jaGlwcy9peC1jaGlwcy5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUU4QjtBQUM5QixvRUFBZ0Y7QUFDaEYsNkRBR3lDO0FBQ3pDLHNHQUFpRztBQUVqRyxrRkFBOEU7QUFNOUUsTUFBYSxjQUFlLFNBQVEsMEJBQWdCO0lBQXBEOztRQVFFLDBCQUFxQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsNEJBQWtCLENBQUMsQ0FBQztRQUM1RCwyQkFBc0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGdDQUFzQixDQUFDLENBQUM7UUFDakUsZ0JBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLHdCQUFjLENBQUMsQ0FBQztRQUNqRCxpQkFBWSxHQUFHLDRCQUFZLENBQUM7SUF3RDlCLENBQUM7SUFoRUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUE4QjtRQUN4QyxPQUFPLElBQUksMEJBQWdCLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQzthQUNqRCxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQywwQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUgsQ0FBQztJQU9LLFlBQVk7O1lBQ2hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlDQUFjLENBQUMsRUFBRSxDQUFDO1lBQzlELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDWCxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQixDQUFDO0tBQUE7SUFFSyxxQkFBcUIsQ0FBQyxLQUFhOztZQUN2QyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sT0FBTyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO1lBRXRELE1BQU0sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3RCLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLENBQUM7S0FBQTtJQUVLLFFBQVE7O1lBQ1osTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBRUQsT0FBTyxJQUFBLGtCQUFRLEVBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RCxDQUFDO0tBQUE7SUFFSyxRQUFRLENBQUMsTUFBZ0I7O1lBQzdCLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBRTVCLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNsQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUIsQ0FBQztRQUNILENBQUM7S0FBQTtJQUVLLGNBQWM7O1lBQ2xCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2xCLE9BQU87WUFDVCxDQUFDO1lBRUQsTUFBTSxJQUFBLGtCQUFRLEVBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO0tBQUE7SUFFSyxRQUFRLENBQUMsTUFBZ0I7O1lBQzdCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEUsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUUsQ0FBQztnQkFDM0IsTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixNQUFNLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLENBQUM7UUFDSCxDQUFDO0tBQUE7SUFFSyxVQUFVOztZQUNkLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDM0QsQ0FBQztLQUFBOztBQWxFSCx3Q0FtRUM7QUFsRVEsMkJBQVksR0FBRyxVQUFVLEFBQWIsQ0FBYyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWNoaXBzL2l4LWNoaXBzLmhhcm5lc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQmFzZUhhcm5lc3NGaWx0ZXJzLCBDb21wb25lbnRIYXJuZXNzLCBIYXJuZXNzUHJlZGljYXRlLCBwYXJhbGxlbCwgVGVzdEtleSxcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWF0QXV0b2NvbXBsZXRlSGFybmVzcyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2F1dG9jb21wbGV0ZS90ZXN0aW5nJztcbmltcG9ydCB7XG4gIE1hdENoaXBHcmlkSGFybmVzcyxcbiAgTWF0Q2hpcEhhcm5lc3MsXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NoaXBzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSXhMYWJlbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWxhYmVsL2l4LWxhYmVsLmhhcm5lc3MnO1xuaW1wb3J0IHsgSXhGb3JtQ29udHJvbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9pbnRlcmZhY2VzL2l4LWZvcm0tY29udHJvbC1oYXJuZXNzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBnZXRFcnJvclRleHQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy91dGlscy9oYXJuZXNzLnV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBJeENoaXBzSGFybmVzc0ZpbHRlcnMgZXh0ZW5kcyBCYXNlSGFybmVzc0ZpbHRlcnMge1xuICBsYWJlbDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhDaGlwc0hhcm5lc3MgZXh0ZW5kcyBDb21wb25lbnRIYXJuZXNzIGltcGxlbWVudHMgSXhGb3JtQ29udHJvbEhhcm5lc3Mge1xuICBzdGF0aWMgaG9zdFNlbGVjdG9yID0gJ2l4LWNoaXBzJztcblxuICBzdGF0aWMgd2l0aChvcHRpb25zOiBJeENoaXBzSGFybmVzc0ZpbHRlcnMpOiBIYXJuZXNzUHJlZGljYXRlPEl4Q2hpcHNIYXJuZXNzPiB7XG4gICAgcmV0dXJuIG5ldyBIYXJuZXNzUHJlZGljYXRlKEl4Q2hpcHNIYXJuZXNzLCBvcHRpb25zKVxuICAgICAgLmFkZE9wdGlvbignbGFiZWwnLCBvcHRpb25zLmxhYmVsLCAoaGFybmVzcywgbGFiZWwpID0+IEhhcm5lc3NQcmVkaWNhdGUuc3RyaW5nTWF0Y2hlcyhoYXJuZXNzLmdldExhYmVsVGV4dCgpLCBsYWJlbCkpO1xuICB9XG5cbiAgZ2V0TWF0Q2hpcExpc3RIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yKE1hdENoaXBHcmlkSGFybmVzcyk7XG4gIGdldEF1dG9Db21wbGV0ZUhhcm5lc3MgPSB0aGlzLmxvY2F0b3JGb3IoTWF0QXV0b2NvbXBsZXRlSGFybmVzcyk7XG4gIGdldE1hdENoaXBzID0gdGhpcy5sb2NhdG9yRm9yQWxsKE1hdENoaXBIYXJuZXNzKTtcbiAgZ2V0RXJyb3JUZXh0ID0gZ2V0RXJyb3JUZXh0O1xuXG4gIGFzeW5jIGdldExhYmVsVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGxhYmVsID0gYXdhaXQgdGhpcy5sb2NhdG9yRm9yT3B0aW9uYWwoSXhMYWJlbEhhcm5lc3MpKCk7XG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWwuZ2V0TGFiZWwoKTtcbiAgfVxuXG4gIGFzeW5jIHNlbGVjdFN1Z2dlc3Rpb25WYWx1ZSh2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5zZXRWYWx1ZShbdmFsdWVdKTtcbiAgICBjb25zdCBoYXJuZXNzID0gKGF3YWl0IHRoaXMuZ2V0QXV0b0NvbXBsZXRlSGFybmVzcygpKTtcblxuICAgIGF3YWl0IGhhcm5lc3MuZm9jdXMoKTtcbiAgICBhd2FpdCBoYXJuZXNzLnNlbGVjdE9wdGlvbih7IHRleHQ6IHZhbHVlIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0VmFsdWUoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IGNoaXBzID0gYXdhaXQgdGhpcy5nZXRNYXRDaGlwcygpO1xuXG4gICAgaWYgKCFjaGlwcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYWxsZWwoKCkgPT4gY2hpcHMubWFwKChjaGlwKSA9PiBjaGlwLmdldFRleHQoKSkpO1xuICB9XG5cbiAgYXN5bmMgc2V0VmFsdWUodmFsdWVzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMucmVtb3ZlQWxsQ2hpcHMoKTtcblxuICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICBhd2FpdCB0aGlzLmFkZENoaXBzKHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlQWxsQ2hpcHMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2hpcHMgPSBhd2FpdCB0aGlzLmdldE1hdENoaXBzKCk7XG4gICAgaWYgKCFjaGlwcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhd2FpdCBwYXJhbGxlbCgoKSA9PiBjaGlwcy5tYXAoKGNoaXApID0+IGNoaXAucmVtb3ZlKCkpKTtcbiAgfVxuXG4gIGFzeW5jIGFkZENoaXBzKHZhbHVlczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpbnB1dCA9IGF3YWl0IChhd2FpdCB0aGlzLmdldE1hdENoaXBMaXN0SGFybmVzcygpKS5nZXRJbnB1dCgpO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBhd2FpdCBpbnB1dC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICBhd2FpdCBpbnB1dC5zZW5kU2VwYXJhdG9yS2V5KFRlc3RLZXkuRU5URVIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGlzRGlzYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldE1hdENoaXBMaXN0SGFybmVzcygpKS5pc0Rpc2FibGVkKCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==