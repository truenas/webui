3fd198d24b423897d8ebf05f54f6e965
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuotasSectionComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const lodash_es_1 = require("lodash-es");
const bytes_constant_1 = require("app/constants/bytes.constant");
const dataset_form_1 = require("app/helptext/storage/volumes/datasets/dataset-form");
const ix_formatter_service_1 = require("app/modules/forms/ix-forms/services/ix-formatter.service");
const ix_validators_service_1 = require("app/modules/forms/ix-forms/services/ix-validators.service");
const i0 = __importStar(require("@angular/core"));
const warning = 80;
const critical = 95;
let QuotasSectionComponent = class QuotasSectionComponent {
    constructor(formBuilder, formatter, validators, translate) {
        this.formBuilder = formBuilder;
        this.formatter = formatter;
        this.validators = validators;
        this.translate = translate;
        this.formValidityChange = (0, core_1.output)();
        this.form = this.formBuilder.group({
            refquota: [null, this.validators.withMessage(forms_1.Validators.min(bytes_constant_1.GiB), this.translate.instant(dataset_form_1.helptextDatasetForm.dataset_form_quota_too_small))],
            refquota_warning: [warning, [forms_1.Validators.min(0), forms_1.Validators.max(100)]],
            refquota_warning_inherit: [true],
            refquota_critical: [critical, [forms_1.Validators.min(0), forms_1.Validators.max(100)]],
            refquota_critical_inherit: [true],
            refreservation: [null],
            quota: [null, this.validators.withMessage(forms_1.Validators.min(bytes_constant_1.GiB), this.translate.instant(dataset_form_1.helptextDatasetForm.dataset_form_quota_too_small))],
            quota_warning: [warning, [forms_1.Validators.min(0), forms_1.Validators.max(100)]],
            quota_warning_inherit: [true],
            quota_critical: [critical, [forms_1.Validators.min(0), forms_1.Validators.max(100)]],
            quota_critical_inherit: [true],
            reservation: [null],
        });
        this.helptext = dataset_form_1.helptextDatasetForm;
    }
    ngOnInit() {
        this.setFormRelations();
        this.form.statusChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((status) => {
            this.formValidityChange.emit(status === 'VALID');
        });
    }
    getPayload() {
        const values = this.form.value;
        const payload = (0, lodash_es_1.pickBy)(values, (value, key) => {
            return [
                'refquota',
                'refreservation',
                'quota',
                'reservation',
            ].includes(key) && value !== null;
        });
        if (!values.refquota_warning_inherit) {
            payload.refquota_warning = values.refquota_warning;
        }
        if (!values.refquota_critical_inherit) {
            payload.refquota_critical = values.refquota_critical;
        }
        if (!values.quota_warning_inherit) {
            payload.quota_warning = values.quota_warning;
        }
        if (!values.quota_critical_inherit) {
            payload.quota_critical = values.quota_critical;
        }
        return payload;
    }
    setFormRelations() {
        this.form.controls.refquota_warning_inherit.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isInherit) => {
            this.setDisabledForControl(this.form.controls.refquota_warning, isInherit);
        });
        this.form.controls.refquota_critical_inherit.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isInherit) => {
            this.setDisabledForControl(this.form.controls.refquota_critical, isInherit);
        });
        this.form.controls.quota_warning_inherit.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isInherit) => {
            this.setDisabledForControl(this.form.controls.quota_warning, isInherit);
        });
        this.form.controls.quota_critical_inherit.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isInherit) => {
            this.setDisabledForControl(this.form.controls.quota_critical, isInherit);
        });
        this.form.controls.refquota_warning_inherit.updateValueAndValidity();
        this.form.controls.refquota_critical_inherit.updateValueAndValidity();
        this.form.controls.quota_warning_inherit.updateValueAndValidity();
        this.form.controls.quota_critical_inherit.updateValueAndValidity();
    }
    setDisabledForControl(control, isDisabled) {
        if (isDisabled) {
            control.disable();
        }
        else {
            control.enable();
        }
    }
};
exports.QuotasSectionComponent = QuotasSectionComponent;
QuotasSectionComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: ix_formatter_service_1.IxFormatterService },
    { type: ix_validators_service_1.IxValidatorsService },
    { type: core_2.TranslateService }
];
QuotasSectionComponent.propDecorators = {
    parent: [{ type: core_1.Input }],
    formValidityChange: [{ type: i0.Output, args: ["formValidityChange",] }]
};
exports.QuotasSectionComponent = QuotasSectionComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-quotas-section',
        template: require("./quotas-section.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], QuotasSectionComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,