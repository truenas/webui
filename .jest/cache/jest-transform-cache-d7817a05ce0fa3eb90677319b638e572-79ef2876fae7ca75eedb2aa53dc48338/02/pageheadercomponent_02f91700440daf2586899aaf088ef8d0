22e78cd5c84a211a4bd291ea883e8a4f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageHeaderComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const fake_progress_bar_component_1 = require("app/modules/loader/components/fake-progress-bar/fake-progress-bar.component");
const breadcrumb_component_1 = require("app/modules/page-header/breadcrumb/breadcrumb.component");
const new_page_badge_component_1 = require("app/modules/page-header/is-new-indicator/new-page-badge.component");
const layout_service_1 = require("app/services/layout.service");
const page_title_service_1 = require("app/services/page-title.service");
/**
 * Usage:
 * Use in your template to override default page title.
 * If you don't use this component, the default page title will be shown.
 */
let PageHeaderComponent = class PageHeaderComponent {
    constructor(pageTitleService, layoutService) {
        this.pageTitleService = pageTitleService;
        this.layoutService = layoutService;
        this.loading = false;
        this.default = false;
        this.defaultTitle$ = this.pageTitleService.title$;
        this.hasNewIndicator$ = this.pageTitleService.hasNewIndicator$;
        this.currentTitle$ = this.defaultTitle$.pipe((0, operators_1.map)((defaultTitle) => {
            if (!this.pageTitle) {
                return defaultTitle;
            }
            return this.pageTitle;
        }));
    }
    ngOnInit() {
        if (!this.default) {
            this.layoutService.hasCustomPageHeader$.next(true);
        }
    }
    ngOnDestroy() {
        if (!this.default) {
            this.layoutService.hasCustomPageHeader$.next(false);
        }
    }
};
exports.PageHeaderComponent = PageHeaderComponent;
PageHeaderComponent.ctorParameters = () => [
    { type: page_title_service_1.PageTitleService },
    { type: layout_service_1.LayoutService }
];
PageHeaderComponent.propDecorators = {
    pageTitle: [{ type: core_1.Input }],
    loading: [{ type: core_1.Input }],
    default: [{ type: core_1.Input }]
};
exports.PageHeaderComponent = PageHeaderComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-page-header',
        template: require("./page-header.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            breadcrumb_component_1.BreadcrumbComponent,
            new_page_badge_component_1.NewPageBadgeComponent,
            fake_progress_bar_component_1.FakeProgressBarComponent,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], PageHeaderComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvcGFnZS1oZWFkZXIvcGFnZS10aXRsZS1oZWFkZXIvcGFnZS1oZWFkZXIuY29tcG9uZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDRDQUE0QztBQUM1Qyx3Q0FFdUI7QUFDdkIsOENBQXNEO0FBQ3RELDhDQUFxQztBQUNyQyw2SEFBdUg7QUFDdkgsa0dBQThGO0FBQzlGLGdIQUEwRztBQUMxRyxnRUFBNEQ7QUFDNUQsd0VBQW1FO0FBRW5FOzs7O0dBSUc7QUFlSSxJQUFNLG1CQUFtQixHQUF6QixNQUFNLG1CQUFtQjtJQXNCOUIsWUFDVSxnQkFBa0MsRUFDbEMsYUFBNEI7UUFENUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQXRCN0IsWUFBTyxHQUFHLEtBQUs7UUFNZixZQUFPLEdBQUcsS0FBSztRQUVmLGtCQUFhLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztRQUM3QyxxQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7UUFDMUQsa0JBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDOUMsSUFBQSxlQUFHLEVBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUNwQixPQUFPLFlBQVksQ0FBQztZQUN0QixDQUFDO1lBRUQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFLQyxDQUFDO0lBRUosUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsQ0FBQztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0RCxDQUFDO0lBQ0gsQ0FBQzs7QUFyQ1Usa0RBQW1COzs7Ozs7d0JBQzdCLFlBQUs7c0JBQ0wsWUFBSztzQkFNTCxZQUFLOzs4QkFSSyxtQkFBbUI7SUFkL0IsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixpREFBMkM7UUFFM0MsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFO1lBQ1AsMENBQW1CO1lBQ25CLGdEQUFxQjtZQUNyQixzREFBd0I7WUFDeEIsc0JBQWU7WUFDZixrQkFBUztTQUNWO0tBQ0YsQ0FBQztHQUNXLG1CQUFtQixDQXNDL0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvcGFnZS1oZWFkZXIvcGFnZS10aXRsZS1oZWFkZXIvcGFnZS1oZWFkZXIuY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlTW9kdWxlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGYWtlUHJvZ3Jlc3NCYXJDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9sb2FkZXIvY29tcG9uZW50cy9mYWtlLXByb2dyZXNzLWJhci9mYWtlLXByb2dyZXNzLWJhci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYkNvbXBvbmVudCB9IGZyb20gJ2FwcC9tb2R1bGVzL3BhZ2UtaGVhZGVyL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmV3UGFnZUJhZGdlQ29tcG9uZW50IH0gZnJvbSAnYXBwL21vZHVsZXMvcGFnZS1oZWFkZXIvaXMtbmV3LWluZGljYXRvci9uZXctcGFnZS1iYWRnZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGF5b3V0U2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9sYXlvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdlVGl0bGVTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3BhZ2UtdGl0bGUuc2VydmljZSc7XG5cbi8qKlxuICogVXNhZ2U6XG4gKiBVc2UgaW4geW91ciB0ZW1wbGF0ZSB0byBvdmVycmlkZSBkZWZhdWx0IHBhZ2UgdGl0bGUuXG4gKiBJZiB5b3UgZG9uJ3QgdXNlIHRoaXMgY29tcG9uZW50LCB0aGUgZGVmYXVsdCBwYWdlIHRpdGxlIHdpbGwgYmUgc2hvd24uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LXBhZ2UtaGVhZGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BhZ2UtaGVhZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcGFnZS1oZWFkZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBCcmVhZGNydW1iQ29tcG9uZW50LFxuICAgIE5ld1BhZ2VCYWRnZUNvbXBvbmVudCxcbiAgICBGYWtlUHJvZ3Jlc3NCYXJDb21wb25lbnQsXG4gICAgVHJhbnNsYXRlTW9kdWxlLFxuICAgIEFzeW5jUGlwZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgUGFnZUhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcGFnZVRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGxvYWRpbmcgPSBmYWxzZTtcblxuICAvKipcbiAgICogWW91IHByb2JhYmx5IGRvbid0IG5lZWQgdG8gdXNlIHRoaXMuXG4gICAqIFNldCB0byB0cnVlIGZvciBhdXRvbWF0aWMgaGVhZGVyIHdoZW4gbm8gaGVhZGVyIGlzIHNldC5cbiAgICovXG4gIEBJbnB1dCgpIGRlZmF1bHQgPSBmYWxzZTtcblxuICByZWFkb25seSBkZWZhdWx0VGl0bGUkID0gdGhpcy5wYWdlVGl0bGVTZXJ2aWNlLnRpdGxlJDtcbiAgcmVhZG9ubHkgaGFzTmV3SW5kaWNhdG9yJCA9IHRoaXMucGFnZVRpdGxlU2VydmljZS5oYXNOZXdJbmRpY2F0b3IkO1xuICByZWFkb25seSBjdXJyZW50VGl0bGUkID0gdGhpcy5kZWZhdWx0VGl0bGUkLnBpcGUoXG4gICAgbWFwKChkZWZhdWx0VGl0bGUpID0+IHtcbiAgICAgIGlmICghdGhpcy5wYWdlVGl0bGUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRUaXRsZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucGFnZVRpdGxlO1xuICAgIH0pLFxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcGFnZVRpdGxlU2VydmljZTogUGFnZVRpdGxlU2VydmljZSxcbiAgICBwcml2YXRlIGxheW91dFNlcnZpY2U6IExheW91dFNlcnZpY2UsXG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGVmYXVsdCkge1xuICAgICAgdGhpcy5sYXlvdXRTZXJ2aWNlLmhhc0N1c3RvbVBhZ2VIZWFkZXIkLm5leHQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmRlZmF1bHQpIHtcbiAgICAgIHRoaXMubGF5b3V0U2VydmljZS5oYXNDdXN0b21QYWdlSGVhZGVyJC5uZXh0KGZhbHNlKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==