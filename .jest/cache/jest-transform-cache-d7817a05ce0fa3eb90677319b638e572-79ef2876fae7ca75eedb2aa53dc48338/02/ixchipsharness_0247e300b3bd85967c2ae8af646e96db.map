{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-chips/ix-chips.harness.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-chips/ix-chips.harness.ts"],"sourcesContent":["import {\n  BaseHarnessFilters, ComponentHarness, HarnessPredicate, parallel, TestKey,\n} from '@angular/cdk/testing';\nimport { MatAutocompleteHarness } from '@angular/material/autocomplete/testing';\nimport {\n  MatChipGridHarness,\n  MatChipHarness,\n} from '@angular/material/chips/testing';\nimport { IxLabelHarness } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\n\nexport interface IxChipsHarnessFilters extends BaseHarnessFilters {\n  label: string;\n}\n\nexport class IxChipsHarness extends ComponentHarness implements IxFormControlHarness {\n  static hostSelector = 'ix-chips';\n\n  static with(options: IxChipsHarnessFilters): HarnessPredicate<IxChipsHarness> {\n    return new HarnessPredicate(IxChipsHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getMatChipListHarness = this.locatorFor(MatChipGridHarness);\n  getAutoCompleteHarness = this.locatorFor(MatAutocompleteHarness);\n  getMatChips = this.locatorForAll(MatChipHarness);\n  getErrorText = getErrorText;\n\n  async getLabelText(): Promise<string> {\n    const label = await this.locatorForOptional(IxLabelHarness)();\n    if (!label) {\n      return '';\n    }\n    return label.getLabel();\n  }\n\n  async selectSuggestionValue(value: string): Promise<void> {\n    await this.setValue([value]);\n    const harness = (await this.getAutoCompleteHarness());\n\n    await harness.focus();\n    await harness.selectOption({ text: value });\n  }\n\n  async getValue(): Promise<string[]> {\n    const chips = await this.getMatChips();\n\n    if (!chips.length) {\n      return [];\n    }\n\n    return parallel(() => chips.map((chip) => chip.getText()));\n  }\n\n  async setValue(values: string[]): Promise<void> {\n    await this.removeAllChips();\n\n    if (values.length) {\n      await this.addChips(values);\n    }\n  }\n\n  async removeAllChips(): Promise<void> {\n    const chips = await this.getMatChips();\n    if (!chips.length) {\n      return;\n    }\n\n    await parallel(() => chips.map((chip) => chip.remove()));\n  }\n\n  async addChips(values: string[]): Promise<void> {\n    const input = await (await this.getMatChipListHarness()).getInput();\n    for (const value of values) {\n      await input.setValue(value);\n      await input.sendSeparatorKey(TestKey.ENTER);\n    }\n  }\n\n  async isDisabled(): Promise<boolean> {\n    return (await this.getMatChipListHarness()).isDisabled();\n  }\n}\n"],"version":3}