3bdb3b2607d65fec58396ed04187be6d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketConnectionService = void 0;
const core_1 = require("@angular/core");
const angular2_uuid_1 = require("angular2-uuid");
const environment_1 = require("environments/environment");
const rxjs_1 = require("rxjs");
const api_message_type_enum_1 = require("app/enums/api-message-type.enum");
const websocket_helper_1 = require("app/helpers/websocket.helper");
const window_helper_1 = require("app/helpers/window.helper");
let WebSocketConnectionService = class WebSocketConnectionService {
    get websocket$() {
        return this.wsAsObservable$;
    }
    set isClosed$(value) {
        this._isClosed$.next(value);
    }
    get isClosed$() {
        return this._isClosed$;
    }
    set isAccessRestricted$(value) {
        this._isAccessRestricted$.next(value);
    }
    get isAccessRestricted$() {
        return this._isAccessRestricted$;
    }
    constructor(window, webSocket) {
        this.window = window;
        this.webSocket = webSocket;
        this.pingTimeoutMillis = 20 * 1000;
        this.reconnectTimeoutMillis = 5 * 1000;
        this.pendingCallsBeforeConnectionReady = new Map();
        this.isTryingReconnect = false;
        this.shutDownInProgress = false;
        this.connectionUrl = (this.window.location.protocol === 'https:' ? 'wss://' : 'ws://') + environment_1.environment.remote + '/websocket';
        this.isConnectionReady = false;
        this.isConnected$ = new rxjs_1.BehaviorSubject(false);
        this._isClosed$ = new rxjs_1.BehaviorSubject(false);
        this._isAccessRestricted$ = new rxjs_1.BehaviorSubject(false);
        this.initializeWebSocket();
        this.subscribeToConnectionStatus();
        this.setupPing();
    }
    initializeWebSocket() {
        if (this.ws$) {
            this.ws$.complete();
        }
        performance.mark('WS Init');
        this.ws$ = this.webSocket({
            url: this.connectionUrl,
            openObserver: {
                next: this.onOpen.bind(this),
            },
            closeObserver: {
                next: this.onClose.bind(this),
            },
        });
        this.wsAsObservable$ = this.ws$.asObservable().pipe((0, rxjs_1.switchMap)((data) => {
            if (this.hasAuthError(data)) {
                console.error(data);
                this.ws$.complete();
            }
            return (0, rxjs_1.of)(data);
        }));
        // At least one explicit subscription required to keep the connection open
        this.ws$.pipe((0, rxjs_1.tap)((response) => {
            if (response.msg === api_message_type_enum_1.IncomingApiMessageType.Connected) {
                performance.mark('WS Connected');
                performance.measure('Establishing WS connection', 'WS Init', 'WS Connected');
                this.isConnected$.next(true);
            }
        })).subscribe();
    }
    onOpen() {
        if (this.isTryingReconnect) {
            this.closeWebSocketConnection();
            return;
        }
        this.shutDownInProgress = false;
        this.sendConnectMessage();
    }
    /** TODO: Extract disconnection logic somewhere else */
    onClose(event) {
        if (this.isTryingReconnect) {
            return;
        }
        this.isTryingReconnect = true;
        this.isConnected$.next(false);
        this.isClosed$ = true;
        if (event.code === 1008) {
            this.isAccessRestricted$ = true;
        }
        else {
            this.reconnect();
        }
    }
    reconnect() {
        (0, rxjs_1.timer)(this.reconnectTimeoutMillis).subscribe({
            next: () => {
                this.isTryingReconnect = false;
                this.initializeWebSocket();
            },
        });
    }
    hasAuthError(data) {
        return 'error' in data && data.error.error === 207;
    }
    setupPing() {
        this.isConnected$.pipe((0, rxjs_1.switchMap)((isConnected) => {
            if (!isConnected) {
                return rxjs_1.NEVER;
            }
            return (0, rxjs_1.interval)(this.pingTimeoutMillis);
        })).subscribe(() => {
            this.ws$.next({ msg: api_message_type_enum_1.OutgoingApiMessageType.Ping, id: angular2_uuid_1.UUID.UUID() });
        });
    }
    sendConnectMessage() {
        this.ws$.next({
            msg: api_message_type_enum_1.OutgoingApiMessageType.Connect,
            version: '1',
            support: ['1'],
        });
    }
    buildSubscriber(name) {
        const id = angular2_uuid_1.UUID.UUID();
        return this.ws$.multiplex(() => ({ id, name, msg: api_message_type_enum_1.OutgoingApiMessageType.Sub }), () => ({ id, msg: api_message_type_enum_1.OutgoingApiMessageType.UnSub }), (message) => (message.collection === name && message.msg !== api_message_type_enum_1.IncomingApiMessageType.NoSub));
    }
    send(payload) {
        if (this.isConnectionReady) {
            this.ws$.next(payload);
        }
        else {
            this.pendingCallsBeforeConnectionReady.set(angular2_uuid_1.UUID.UUID(), payload);
        }
    }
    sendPendingCalls() {
        this.pendingCallsBeforeConnectionReady.forEach((value, key) => {
            this.send(value);
            this.pendingCallsBeforeConnectionReady.delete(key);
        });
    }
    closeWebSocketConnection() {
        this.ws$.complete();
    }
    prepareShutdown() {
        this.shutDownInProgress = true;
    }
    setupConnectionUrl(protocol, remote) {
        this.connectionUrl = (protocol === 'https:' ? 'wss://' : 'ws://') + remote + '/websocket';
    }
    subscribeToConnectionStatus() {
        this.isConnected$.subscribe({
            next: (isConnected) => {
                this.isConnectionReady = isConnected;
                if (isConnected) {
                    this.sendPendingCalls();
                }
            },
        });
    }
};
exports.WebSocketConnectionService = WebSocketConnectionService;
WebSocketConnectionService.ctorParameters = () => [
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [websocket_helper_1.WEBSOCKET,] }] }
];
exports.WebSocketConnectionService = WebSocketConnectionService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], WebSocketConnectionService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,