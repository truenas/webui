6f3362bba12e3650e459b592a42d56be
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconErrorHandlerService = void 0;
const core_1 = require("@angular/core");
const environment_1 = require("environments/environment");
/**
 * Special service to augment error message when an icon is not found.
 */
let IconErrorHandlerService = class IconErrorHandlerService {
    constructor(normalErrorHandler) {
        this.normalErrorHandler = normalErrorHandler;
    }
    handleError(error) {
        if (error instanceof Error && error.message.includes('Error retrieving icon') && !environment_1.environment.production) {
            error.message += '. Check spelling and re-run build or use `yarn icons` to include icon in the sprite.';
        }
        this.normalErrorHandler.handleError(error);
    }
};
exports.IconErrorHandlerService = IconErrorHandlerService;
IconErrorHandlerService.ctorParameters = () => [
    { type: core_1.ErrorHandler }
];
exports.IconErrorHandlerService = IconErrorHandlerService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], IconErrorHandlerService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvaXgtaWNvbi9pY29uLWVycm9yLWhhbmRsZXIuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBeUQ7QUFDekQsMERBQXVEO0FBRXZEOztHQUVHO0FBSUksSUFBTSx1QkFBdUIsR0FBN0IsTUFBTSx1QkFBdUI7SUFDbEMsWUFDVSxrQkFBZ0M7UUFBaEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFjO0lBQ3ZDLENBQUM7SUFFSixXQUFXLENBQUMsS0FBYztRQUN4QixJQUFJLEtBQUssWUFBWSxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLHlCQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDekcsS0FBSyxDQUFDLE9BQU8sSUFBSSxzRkFBc0YsQ0FBQztRQUMxRyxDQUFDO1FBRUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDOztBQVhVLDBEQUF1Qjs7OztrQ0FBdkIsdUJBQXVCO0lBSG5DLElBQUEsaUJBQVUsRUFBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyx1QkFBdUIsQ0FZbkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvaXgtaWNvbi9pY29uLWVycm9yLWhhbmRsZXIuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFcnJvckhhbmRsZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnZW52aXJvbm1lbnRzL2Vudmlyb25tZW50JztcblxuLyoqXG4gKiBTcGVjaWFsIHNlcnZpY2UgdG8gYXVnbWVudCBlcnJvciBtZXNzYWdlIHdoZW4gYW4gaWNvbiBpcyBub3QgZm91bmQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBJY29uRXJyb3JIYW5kbGVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbm9ybWFsRXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXIsXG4gICkge31cblxuICBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bik6IHZvaWQge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0Vycm9yIHJldHJpZXZpbmcgaWNvbicpICYmICFlbnZpcm9ubWVudC5wcm9kdWN0aW9uKSB7XG4gICAgICBlcnJvci5tZXNzYWdlICs9ICcuIENoZWNrIHNwZWxsaW5nIGFuZCByZS1ydW4gYnVpbGQgb3IgdXNlIGB5YXJuIGljb25zYCB0byBpbmNsdWRlIGljb24gaW4gdGhlIHNwcml0ZS4nO1xuICAgIH1cblxuICAgIHRoaXMubm9ybWFsRXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9