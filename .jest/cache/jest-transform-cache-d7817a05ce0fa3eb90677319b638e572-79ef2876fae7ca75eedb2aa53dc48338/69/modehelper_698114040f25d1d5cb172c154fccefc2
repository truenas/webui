81aedf319bd6f55b692bbfc268abcd68
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseApiMode = parseApiMode;
exports.parseMode = parseMode;
exports.invertUmask = invertUmask;
const posix_acl_enum_1 = require("app/enums/posix-acl.enum");
/**
 * Converts unix octal permission (usually coming from API) to an object.
 */
function parseApiMode(apiMode) {
    const mode = apiMode.toString(8).substring(2, 5);
    return parseMode(mode);
}
/**
 * Converts unix permissions of 764 to an object.
 */
function parseMode(mode) {
    const canRead = 0b100;
    const canWrite = 0b010;
    const canExecute = 0b001;
    const owner = parseInt(mode[0]);
    const group = parseInt(mode[1]);
    const other = parseInt(mode[2]);
    return {
        owner: {
            [posix_acl_enum_1.PosixPermission.Read]: Boolean(owner & canRead),
            [posix_acl_enum_1.PosixPermission.Write]: Boolean(owner & canWrite),
            [posix_acl_enum_1.PosixPermission.Execute]: Boolean(owner & canExecute),
        },
        group: {
            [posix_acl_enum_1.PosixPermission.Read]: Boolean(group & canRead),
            [posix_acl_enum_1.PosixPermission.Write]: Boolean(group & canWrite),
            [posix_acl_enum_1.PosixPermission.Execute]: Boolean(group & canExecute),
        },
        other: {
            [posix_acl_enum_1.PosixPermission.Read]: Boolean(other & canRead),
            [posix_acl_enum_1.PosixPermission.Write]: Boolean(other & canWrite),
            [posix_acl_enum_1.PosixPermission.Execute]: Boolean(other & canExecute),
        },
    };
}
function invertUmask(umask) {
    const perm = parseInt(umask, 8);
    let mask = (~perm & 0o777).toString(8);
    while (mask.length < 3) {
        mask = '0' + mask;
    }
    return mask;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHBlcnMvbW9kZS5oZWxwZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFNQSxvQ0FJQztBQUtELDhCQTBCQztBQUVELGtDQVFDO0FBbkRELDZEQUEyRDtBQUczRDs7R0FFRztBQUNILFNBQWdCLFlBQVksQ0FBQyxPQUFlO0lBQzFDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVqRCxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixTQUFTLENBQUMsSUFBWTtJQUNwQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdEIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQztJQUV6QixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoQyxPQUFPO1FBQ0wsS0FBSyxFQUFFO1lBQ0wsQ0FBQyxnQ0FBZSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO1lBQ2hELENBQUMsZ0NBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztZQUNsRCxDQUFDLGdDQUFlLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7U0FDdkQ7UUFDRCxLQUFLLEVBQUU7WUFDTCxDQUFDLGdDQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7WUFDaEQsQ0FBQyxnQ0FBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1lBQ2xELENBQUMsZ0NBQWUsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztTQUN2RDtRQUNELEtBQUssRUFBRTtZQUNMLENBQUMsZ0NBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztZQUNoRCxDQUFDLGdDQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7WUFDbEQsQ0FBQyxnQ0FBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1NBQ3ZEO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFnQixXQUFXLENBQUMsS0FBYTtJQUN2QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9oZWxwZXJzL21vZGUuaGVscGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvc2l4UGVybWlzc2lvbiB9IGZyb20gJ2FwcC9lbnVtcy9wb3NpeC1hY2wuZW51bSc7XG5pbXBvcnQgeyBVbml4RmlsZVBlcm1pc3Npb25zIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvcG9zaXgtcGVybWlzc2lvbnMuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBDb252ZXJ0cyB1bml4IG9jdGFsIHBlcm1pc3Npb24gKHVzdWFsbHkgY29taW5nIGZyb20gQVBJKSB0byBhbiBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFwaU1vZGUoYXBpTW9kZTogbnVtYmVyKTogVW5peEZpbGVQZXJtaXNzaW9ucyB7XG4gIGNvbnN0IG1vZGUgPSBhcGlNb2RlLnRvU3RyaW5nKDgpLnN1YnN0cmluZygyLCA1KTtcblxuICByZXR1cm4gcGFyc2VNb2RlKG1vZGUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHVuaXggcGVybWlzc2lvbnMgb2YgNzY0IHRvIGFuIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTW9kZShtb2RlOiBzdHJpbmcpOiBVbml4RmlsZVBlcm1pc3Npb25zIHtcbiAgY29uc3QgY2FuUmVhZCA9IDBiMTAwO1xuICBjb25zdCBjYW5Xcml0ZSA9IDBiMDEwO1xuICBjb25zdCBjYW5FeGVjdXRlID0gMGIwMDE7XG5cbiAgY29uc3Qgb3duZXIgPSBwYXJzZUludChtb2RlWzBdKTtcbiAgY29uc3QgZ3JvdXAgPSBwYXJzZUludChtb2RlWzFdKTtcbiAgY29uc3Qgb3RoZXIgPSBwYXJzZUludChtb2RlWzJdKTtcblxuICByZXR1cm4ge1xuICAgIG93bmVyOiB7XG4gICAgICBbUG9zaXhQZXJtaXNzaW9uLlJlYWRdOiBCb29sZWFuKG93bmVyICYgY2FuUmVhZCksXG4gICAgICBbUG9zaXhQZXJtaXNzaW9uLldyaXRlXTogQm9vbGVhbihvd25lciAmIGNhbldyaXRlKSxcbiAgICAgIFtQb3NpeFBlcm1pc3Npb24uRXhlY3V0ZV06IEJvb2xlYW4ob3duZXIgJiBjYW5FeGVjdXRlKSxcbiAgICB9LFxuICAgIGdyb3VwOiB7XG4gICAgICBbUG9zaXhQZXJtaXNzaW9uLlJlYWRdOiBCb29sZWFuKGdyb3VwICYgY2FuUmVhZCksXG4gICAgICBbUG9zaXhQZXJtaXNzaW9uLldyaXRlXTogQm9vbGVhbihncm91cCAmIGNhbldyaXRlKSxcbiAgICAgIFtQb3NpeFBlcm1pc3Npb24uRXhlY3V0ZV06IEJvb2xlYW4oZ3JvdXAgJiBjYW5FeGVjdXRlKSxcbiAgICB9LFxuICAgIG90aGVyOiB7XG4gICAgICBbUG9zaXhQZXJtaXNzaW9uLlJlYWRdOiBCb29sZWFuKG90aGVyICYgY2FuUmVhZCksXG4gICAgICBbUG9zaXhQZXJtaXNzaW9uLldyaXRlXTogQm9vbGVhbihvdGhlciAmIGNhbldyaXRlKSxcbiAgICAgIFtQb3NpeFBlcm1pc3Npb24uRXhlY3V0ZV06IEJvb2xlYW4ob3RoZXIgJiBjYW5FeGVjdXRlKSxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0VW1hc2sodW1hc2s6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHBlcm0gPSBwYXJzZUludCh1bWFzaywgOCk7XG4gIGxldCBtYXNrID0gKH5wZXJtICYgMG83NzcpLnRvU3RyaW5nKDgpO1xuICB3aGlsZSAobWFzay5sZW5ndGggPCAzKSB7XG4gICAgbWFzayA9ICcwJyArIG1hc2s7XG4gIH1cblxuICByZXR1cm4gbWFzaztcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==