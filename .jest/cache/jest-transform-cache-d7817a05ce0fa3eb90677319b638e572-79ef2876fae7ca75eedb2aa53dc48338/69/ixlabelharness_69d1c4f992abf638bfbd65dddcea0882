335723d984e997a5a8083d41cb667f37
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxLabelHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const tooltip_harness_1 = require("app/modules/tooltip/tooltip.harness");
class IxLabelHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getTooltip = this.locatorFor(tooltip_harness_1.IxTooltipHarness);
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxLabelHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabel(), label));
    }
    getLabel() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional('label')();
            if (!label) {
                return '';
            }
            return label.text({ exclude: '.required' });
        });
    }
    isRequired() {
        return __awaiter(this, void 0, void 0, function* () {
            const required = yield this.locatorForOptional('.required')();
            return Boolean(required);
        });
    }
}
exports.IxLabelHarness = IxLabelHarness;
IxLabelHarness.hostSelector = 'ix-label';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1sYWJlbC9peC1sYWJlbC5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUU4QjtBQUM5Qix5RUFBdUU7QUFNdkUsTUFBYSxjQUFlLFNBQVEsMEJBQWdCO0lBQXBEOztRQUdXLGVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGtDQUFnQixDQUFDLENBQUM7SUFvQjFELENBQUM7SUFsQkMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUF1QjtRQUNqQyxPQUFPLElBQUksMEJBQWdCLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQzthQUNqRCxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQywwQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUVLLFFBQVE7O1lBQ1osTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUN2RCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQzlELE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLENBQUM7S0FBQTs7QUF0Qkgsd0NBdUJDO0FBdEJRLDJCQUFZLEdBQUcsVUFBVSxBQUFiLENBQWMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1sYWJlbC9peC1sYWJlbC5oYXJuZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhc2VIYXJuZXNzRmlsdGVycywgQ29tcG9uZW50SGFybmVzcywgSGFybmVzc1ByZWRpY2F0ZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSXhUb29sdGlwSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL3Rvb2x0aXAvdG9vbHRpcC5oYXJuZXNzJztcblxuZXhwb3J0IGludGVyZmFjZSBJeExhYmVsRmlsdGVycyBleHRlbmRzIEJhc2VIYXJuZXNzRmlsdGVycyB7XG4gIGxhYmVsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBJeExhYmVsSGFybmVzcyBleHRlbmRzIENvbXBvbmVudEhhcm5lc3Mge1xuICBzdGF0aWMgaG9zdFNlbGVjdG9yID0gJ2l4LWxhYmVsJztcblxuICByZWFkb25seSBnZXRUb29sdGlwID0gdGhpcy5sb2NhdG9yRm9yKEl4VG9vbHRpcEhhcm5lc3MpO1xuXG4gIHN0YXRpYyB3aXRoKG9wdGlvbnM6IEl4TGFiZWxGaWx0ZXJzKTogSGFybmVzc1ByZWRpY2F0ZTxJeExhYmVsSGFybmVzcz4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZShJeExhYmVsSGFybmVzcywgb3B0aW9ucylcbiAgICAgIC5hZGRPcHRpb24oJ2xhYmVsJywgb3B0aW9ucy5sYWJlbCwgKGhhcm5lc3MsIGxhYmVsKSA9PiBIYXJuZXNzUHJlZGljYXRlLnN0cmluZ01hdGNoZXMoaGFybmVzcy5nZXRMYWJlbCgpLCBsYWJlbCkpO1xuICB9XG5cbiAgYXN5bmMgZ2V0TGFiZWwoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBsYWJlbCA9IGF3YWl0IHRoaXMubG9jYXRvckZvck9wdGlvbmFsKCdsYWJlbCcpKCk7XG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiBsYWJlbC50ZXh0KHsgZXhjbHVkZTogJy5yZXF1aXJlZCcgfSk7XG4gIH1cblxuICBhc3luYyBpc1JlcXVpcmVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHJlcXVpcmVkID0gYXdhaXQgdGhpcy5sb2NhdG9yRm9yT3B0aW9uYWwoJy5yZXF1aXJlZCcpKCk7XG4gICAgcmV0dXJuIEJvb2xlYW4ocmVxdWlyZWQpO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=