ea1ffe95dd4d4a113d62e75c3de95b78
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BootPoolDeleteDialogComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const role_enum_1 = require("app/enums/role.enum");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const bulk_list_item_component_1 = require("app/modules/lists/bulk-list-item/bulk-list-item.component");
const bulk_list_item_interface_1 = require("app/modules/lists/bulk-list-item/bulk-list-item.interface");
const test_directive_1 = require("app/modules/test-id/test.directive");
const ws_service_1 = require("app/services/ws.service");
let BootPoolDeleteDialogComponent = class BootPoolDeleteDialogComponent {
    get successCount() {
        return [...this.bulkItems.values()].filter((item) => item.state === bulk_list_item_interface_1.BulkListItemState.Success).length;
    }
    get failedCount() {
        return [...this.bulkItems.values()].filter((item) => item.state === bulk_list_item_interface_1.BulkListItemState.Error).length;
    }
    constructor(fb, ws, cdr, dialogRef, bootenvs) {
        this.fb = fb;
        this.ws = ws;
        this.cdr = cdr;
        this.dialogRef = dialogRef;
        this.bootenvs = bootenvs;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.form = this.fb.group({
            confirm: [false, [forms_1.Validators.requiredTrue]],
        });
        this.isJobCompleted = false;
        this.bulkItems = new Map();
        this.trackByKey = (_, entry) => entry.key;
        this.bootenvs.forEach((bootenv) => {
            this.bulkItems.set(bootenv.id, { state: bulk_list_item_interface_1.BulkListItemState.Initial, item: bootenv });
        });
    }
    getSelectedNames(selectedBootenvs) {
        return selectedBootenvs.map((bootenv) => [bootenv.id]);
    }
    onSubmit() {
        const bootenvsToDelete = this.getSelectedNames(this.bootenvs);
        this.bootenvs.forEach((bootenv) => {
            this.bulkItems.set(bootenv.id, { state: bulk_list_item_interface_1.BulkListItemState.Running, item: bootenv });
        });
        this.ws.job('core.bulk', ['bootenv.do_delete', bootenvsToDelete]).pipe((0, operators_1.filter)((job) => !!job.result), (0, until_destroy_1.untilDestroyed)(this)).subscribe((response) => {
            response.arguments[1].forEach((params, index) => {
                const [bootenvId] = params.toString().split(',');
                const bulkItem = this.bulkItems.get(bootenvId);
                if (bulkItem) {
                    const item = response.result[index];
                    if (item.error) {
                        this.bulkItems.set(bootenvId, Object.assign(Object.assign({}, bulkItem), { state: bulk_list_item_interface_1.BulkListItemState.Error, message: item.error
                                .replace('[EFAULT]', '')
                                .replace('\')', '') }));
                    }
                    else {
                        this.bulkItems.set(bootenvId, Object.assign(Object.assign({}, bulkItem), { state: bulk_list_item_interface_1.BulkListItemState.Success, message: null }));
                        if (this.bulkItems.size === 1) {
                            this.dialogRef.close(true);
                        }
                    }
                }
            });
            this.isJobCompleted = true;
            this.cdr.markForCheck();
        });
    }
};
exports.BootPoolDeleteDialogComponent = BootPoolDeleteDialogComponent;
BootPoolDeleteDialogComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: dialog_1.MatDialogRef },
    { type: Array, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.BootPoolDeleteDialogComponent = BootPoolDeleteDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-boot-pool-delete-dialog',
        template: require("./boot-pool-delete-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            forms_1.ReactiveFormsModule,
            bulk_list_item_component_1.BulkListItemComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            dialog_1.MatDialogClose,
            core_2.TranslateModule,
            common_1.KeyValuePipe,
        ],
    })
], BootPoolDeleteDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,