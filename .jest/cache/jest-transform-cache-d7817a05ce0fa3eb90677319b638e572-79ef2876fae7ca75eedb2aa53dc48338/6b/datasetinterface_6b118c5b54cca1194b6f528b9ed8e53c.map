{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/interfaces/dataset.interface.ts","mappings":";;;AAmNA,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,+CAA+B,CAAA;IAC/B,iDAAiC,CAAA;AACnC,CAAC,EAHW,YAAY,4BAAZ,YAAY,QAGvB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/interfaces/dataset.interface.ts"],"sourcesContent":["import { AclMode } from 'app/enums/acl-type.enum';\nimport {\n  DatasetAclType,\n  DatasetCaseSensitivity,\n  DatasetChecksum,\n  DatasetPreset,\n  DatasetRecordSize,\n  DatasetSnapdev,\n  DatasetSnapdir,\n  DatasetSync,\n  DatasetType,\n  DatasetVolumeBlockSize,\n} from 'app/enums/dataset.enum';\nimport { DeduplicationSetting } from 'app/enums/deduplication-setting.enum';\nimport { EncryptionKeyFormat } from 'app/enums/encryption-key-format.enum';\nimport { IscsiExtentType } from 'app/enums/iscsi.enum';\nimport { OnOff } from 'app/enums/on-off.enum';\nimport { WithInherit } from 'app/enums/with-inherit.enum';\nimport { ZfsProperty } from 'app/interfaces/zfs-property.interface';\n\nexport interface Dataset {\n  available: ZfsProperty<string, number>;\n  compression: ZfsProperty<string, string>;\n  compressratio: ZfsProperty<string, string>;\n  deduplication: ZfsProperty<DeduplicationSetting, string>;\n  encrypted: boolean;\n  encryption_algorithm: ZfsProperty<string>;\n  encryption_root: string;\n  id: string;\n  key_format: ZfsProperty<EncryptionKeyFormat>;\n  key_loaded: boolean;\n  locked: boolean;\n  mountpoint: string;\n  name: string;\n  pool: string;\n  readonly: ZfsProperty<OnOff, boolean>;\n  used: ZfsProperty<string, number>;\n  usedbychildren: ZfsProperty<string, number>;\n  usedbydataset: ZfsProperty<string, number>;\n  usedbyrefreservation: ZfsProperty<string, number>;\n  usedbysnapshots: ZfsProperty<string, number>;\n  type: DatasetType;\n  managedby: ZfsProperty<string, string>;\n  aclmode: ZfsProperty<AclMode, string>;\n  acltype: ZfsProperty<DatasetAclType, string>;\n  atime: ZfsProperty<OnOff, boolean>;\n  casesensitivity: ZfsProperty<DatasetCaseSensitivity, string>;\n  copies: ZfsProperty<string, number>;\n  exec: ZfsProperty<OnOff, boolean>;\n  origin: ZfsProperty<string>;\n  pbkdf2iters: ZfsProperty<string, string>;\n  quota: ZfsProperty<number>;\n  recordsize: ZfsProperty<string, number>;\n  refquota: ZfsProperty<number>;\n  refreservation: ZfsProperty<number>;\n  reservation: ZfsProperty<string, number>;\n  snapdev: ZfsProperty<DatasetSnapdev, string>;\n  snapdir: ZfsProperty<DatasetSnapdir, string>;\n  share_type: ZfsProperty<DatasetPreset, string>;\n  special_small_block_size: ZfsProperty<string>;\n  sync: ZfsProperty<DatasetSync, string>;\n  checksum: ZfsProperty<DatasetChecksum>;\n\n  // Absent if extra.retrieve_children is false\n  children?: Dataset[];\n\n  refquota_critical?: ZfsProperty<string, string>;\n  refquota_warning?: ZfsProperty<string, string>;\n  quota_critical?: ZfsProperty<string, string>;\n  quota_warning?: ZfsProperty<string, string>;\n  comments?: ZfsProperty<string>;\n\n  // Present for type === DatasetType.Volume\n  volsize?: ZfsProperty<string, number>;\n  volblocksize?: ZfsProperty<string, number>;\n}\n\nexport interface ExtraDatasetQueryOptions {\n  extra?: {\n    retrieve_children?: boolean;\n    flat?: boolean;\n    properties?: string[];\n  };\n}\n\nexport interface DatasetCreate {\n  name: string;\n  type?: DatasetType;\n  volsize?: number;\n  volblocksize?: DatasetVolumeBlockSize;\n  sparse?: boolean;\n  force_size?: boolean;\n  comments?: string;\n  sync?: WithInherit<DatasetSync>;\n  compression?: string;\n  atime?: OnOff;\n  exec?: WithInherit<OnOff>;\n  managedby?: string;\n  quota?: number;\n  quota_warning?: WithInherit<number>;\n  quota_critical?: WithInherit<number>;\n  refquota?: WithInherit<number>;\n  refquota_warning?: WithInherit<number>;\n  refquota_critical?: WithInherit<number>;\n  reservation?: number;\n  refreservation?: number;\n  special_small_block_size?: WithInherit<number>;\n  copies?: WithInherit<number>;\n  snapdir?: WithInherit<DatasetSnapdir>;\n  snapdev?: WithInherit<DatasetSnapdev>;\n  deduplication?: string;\n  checksum?: DatasetChecksum;\n  readonly?: WithInherit<OnOff>;\n  recordsize?: WithInherit<string>;\n  casesensitivity?: DatasetCaseSensitivity;\n  aclmode?: AclMode;\n  acltype?: DatasetAclType;\n  share_type?: DatasetPreset;\n  encryption_options?: {\n    generate_key?: boolean;\n    pbkdf2iters?: number;\n    algorithm?: string;\n    passphrase?: string;\n    key?: string;\n  };\n  encryption?: boolean;\n  inherit_encryption?: boolean;\n  user_properties?: { key: string; value: string }[];\n  create_ancestors?: boolean;\n}\n\nexport interface DatasetUpdate {\n  volsize?: number;\n  force_size?: boolean;\n  comments?: WithInherit<string>;\n  sync?: WithInherit<DatasetSync>;\n  compression?: WithInherit<string>;\n  atime?: WithInherit<OnOff>;\n  exec?: WithInherit<OnOff>;\n  managedby?: WithInherit<string>;\n  quota?: number;\n  quota_warning?: WithInherit<number>;\n  quota_critical?: WithInherit<number>;\n  refquota?: WithInherit<number>;\n  refquota_warning?: WithInherit<number>;\n  refquota_critical?: WithInherit<number>;\n  reservation?: number;\n  refreservation?: number;\n  special_small_block_size?: WithInherit<number>;\n  copies?: WithInherit<number>;\n  snapdir?: DatasetSnapdir;\n  snapdev?: DatasetSnapdev;\n  deduplication?: DeduplicationSetting;\n  checksum?: WithInherit<DatasetChecksum>;\n  readonly?: WithInherit<OnOff>;\n  recordsize?: WithInherit<DatasetRecordSize>;\n  aclmode?: AclMode;\n  acltype?: DatasetAclType;\n  user_properties?: Record<string, string>;\n  create_ancestors?: boolean;\n  user_properties_update?: { key: string; value: string; remove?: boolean }[];\n}\n\nexport interface DatasetDetails {\n  id: string;\n  encrypted: boolean;\n  available: ZfsProperty<string, number>;\n  encryption_algorithm: ZfsProperty<string>;\n  encryption_root: string;\n  key_format: ZfsProperty<EncryptionKeyFormat>;\n  key_loaded: boolean;\n  locked: boolean;\n  readonly: boolean;\n  mountpoint: string;\n  name: string;\n  pool: string;\n  type: DatasetType;\n  used: ZfsProperty<string, number>;\n  usedbychildren: ZfsProperty<string, number>;\n  usedbydataset: ZfsProperty<string, number>;\n  usedbysnapshots: ZfsProperty<string, number>;\n  quota: ZfsProperty<string, number>;\n  refquota: ZfsProperty<string, number>;\n  refreservation: ZfsProperty<string, number>;\n  reservation: ZfsProperty<string, number>;\n  snapshot_count?: number;\n  replication_tasks_count?: number;\n  snapshot_tasks_count?: number;\n  cloudsync_tasks_count?: number;\n  rsync_tasks_count?: number;\n  smb_shares?: { enabled: boolean; path: string; share_name: string }[];\n  nfs_shares?: { enabled: boolean; path: string }[];\n  iscsi_shares?: { enabled: boolean; type: IscsiExtentType; path: string }[];\n  vms?: { name: string; path: string }[];\n  apps?: { name: string; path: string }[];\n  children?: DatasetDetails[];\n  volsize?: ZfsProperty<string, number>; // Present for type === DatasetType.Volume\n  thick_provisioned?: boolean; // Present for type === DatasetType.Volume\n  atime: boolean;\n  casesensitive: boolean;\n  origin: ZfsProperty<string>;\n  sync: ZfsProperty<string>;\n  compression: ZfsProperty<string>;\n  deduplication: ZfsProperty<string>;\n  refquota_critical?: ZfsProperty<string, number>;\n  refquota_warning?: ZfsProperty<string, number>;\n  quota_critical?: ZfsProperty<string, number>;\n  quota_warning?: ZfsProperty<string, number>;\n  comments?: ZfsProperty<string>;\n}\n\nexport enum DiskSpaceKey {\n  UsedByDataset = 'usedbydataset',\n  UsedByChildren = 'usedbychildren',\n}\nexport type DiskSpace = { [key in DiskSpaceKey]?: number };\nexport type SwatchColors = { [key in DiskSpaceKey]?: { backgroundColor: string } };\n"],"version":3}