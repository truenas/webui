5ad912f8cb7d99188aa9b5e5ce304feb
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BootEnvironmentListComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const slide_toggle_1 = require("@angular/material/slide-toggle");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const ui_search_directive_1 = require("app/directives/ui-search.directive");
const boot_environment_action_enum_1 = require("app/enums/boot-environment-action.enum");
const boot_environment_active_enum_1 = require("app/enums/boot-environment-active.enum");
const role_enum_1 = require("app/enums/role.enum");
const boot_env_1 = require("app/helptext/system/boot-env");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const empty_service_1 = require("app/modules/empty/empty.service");
const search_input1_component_1 = require("app/modules/forms/search-input1/search-input1.component");
const icon_marker_util_1 = require("app/modules/ix-icon/icon-marker.util");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const async_data_provider_1 = require("app/modules/ix-table/classes/async-data-provider/async-data-provider");
const ix_table_component_1 = require("app/modules/ix-table/components/ix-table/ix-table.component");
const ix_cell_actions_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-actions/ix-cell-actions.component");
const ix_cell_checkbox_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-checkbox/ix-cell-checkbox.component");
const ix_cell_date_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-date/ix-cell-date.component");
const ix_cell_size_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-size/ix-cell-size.component");
const ix_cell_text_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-text/ix-cell-text.component");
const ix_cell_yes_no_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-yes-no/ix-cell-yes-no.component");
const ix_table_body_component_1 = require("app/modules/ix-table/components/ix-table-body/ix-table-body.component");
const ix_table_head_component_1 = require("app/modules/ix-table/components/ix-table-head/ix-table-head.component");
const ix_table_pager_component_1 = require("app/modules/ix-table/components/ix-table-pager/ix-table-pager.component");
const ix_table_empty_directive_1 = require("app/modules/ix-table/directives/ix-table-empty.directive");
const sort_direction_enum_1 = require("app/modules/ix-table/enums/sort-direction.enum");
const utils_1 = require("app/modules/ix-table/utils");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const page_header_component_1 = require("app/modules/page-header/page-title-header/page-header.component");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const boot_pool_delete_dialog_component_1 = require("app/pages/system/bootenv/boot-pool-delete-dialog/boot-pool-delete-dialog.component");
const bootenv_form_component_1 = require("app/pages/system/bootenv/bootenv-form/bootenv-form.component");
const bootenv_list_elements_1 = require("app/pages/system/bootenv/bootenv-list/bootenv-list.elements");
const bootenv_stats_dialog_component_1 = require("app/pages/system/bootenv/bootenv-stats-dialog/bootenv-stats-dialog.component");
const error_handler_service_1 = require("app/services/error-handler.service");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const ws_service_1 = require("app/services/ws.service");
let BootEnvironmentListComponent = class BootEnvironmentListComponent {
    get selectedBootenvs() {
        return this.bootenvs.filter((bootenv) => bootenv.selected);
    }
    get selectionHasItems() {
        return this.selectedBootenvs.some((bootenv) => [boot_environment_active_enum_1.BootEnvironmentActive.Dash, boot_environment_active_enum_1.BootEnvironmentActive.Empty].includes(bootenv.active));
    }
    constructor(ws, matDialog, translate, slideInService, loader, dialogService, errorHandler, snackbar, emptyService) {
        this.ws = ws;
        this.matDialog = matDialog;
        this.translate = translate;
        this.slideInService = slideInService;
        this.loader = loader;
        this.dialogService = dialogService;
        this.errorHandler = errorHandler;
        this.snackbar = snackbar;
        this.emptyService = emptyService;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.searchableElements = bootenv_list_elements_1.bootListElements;
        this.filterString = '';
        this.columns = (0, utils_1.createTable)([
            (0, ix_cell_checkbox_component_1.checkboxColumn)({
                propertyName: 'selected',
                onRowCheck: (row, checked) => {
                    this.bootenvs.find((bootenv) => row.id === bootenv.id).selected = checked;
                    this.dataProvider.setRows([]);
                    this.onListFiltered(this.filterString);
                },
                onColumnCheck: (checked) => {
                    this.dataProvider.currentPage$.pipe((0, rxjs_1.take)(1), (0, until_destroy_1.untilDestroyed)(this)).subscribe((bootEnvs) => {
                        bootEnvs.forEach((bootEnv) => bootEnv.selected = checked);
                        this.dataProvider.setRows([]);
                        this.onListFiltered(this.filterString);
                    });
                },
                cssClass: 'checkboxs-column',
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Name'),
                propertyName: 'name',
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Active'),
                propertyName: 'active',
                getValue: (row) => {
                    switch (row.active) {
                        case boot_environment_active_enum_1.BootEnvironmentActive.Now:
                            return this.translate.instant('Now');
                        case boot_environment_active_enum_1.BootEnvironmentActive.Restart:
                            return this.translate.instant('Restart');
                        case boot_environment_active_enum_1.BootEnvironmentActive.NowReboot:
                            return this.translate.instant('Now/Restart');
                        default:
                            return row.active;
                    }
                },
            }),
            (0, ix_cell_date_component_1.dateColumn)({
                title: this.translate.instant('Date Created'),
                propertyName: 'created',
                sortBy: (row) => row.created.$date,
            }),
            (0, ix_cell_size_component_1.sizeColumn)({
                title: this.translate.instant('Space'),
                propertyName: 'rawspace',
            }),
            (0, ix_cell_yes_no_component_1.yesNoColumn)({
                title: this.translate.instant('Keep'),
                propertyName: 'keep',
                cssClass: 'keep-column',
            }),
            (0, ix_cell_actions_component_1.actionsColumn)({
                actions: [
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('mdi-check-decagram'),
                        requiredRoles: this.requiredRoles,
                        tooltip: this.translate.instant('Activate'),
                        hidden: (row) => (0, rxjs_1.of)(row.active.includes('R')),
                        onClick: (row) => this.doActivate(row),
                    },
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('mdi-content-copy'),
                        requiredRoles: this.requiredRoles,
                        tooltip: this.translate.instant('Clone'),
                        onClick: (row) => this.doClone(row),
                    },
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('mdi-rename-box'),
                        requiredRoles: this.requiredRoles,
                        tooltip: this.translate.instant('Rename'),
                        onClick: (row) => this.doRename(row),
                    },
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('bookmark'),
                        requiredRoles: this.requiredRoles,
                        tooltip: this.translate.instant('Keep'),
                        hidden: (row) => (0, rxjs_1.of)(row.keep),
                        onClick: (row) => this.toggleKeep(row),
                    },
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('bookmark_border'),
                        requiredRoles: this.requiredRoles,
                        tooltip: this.translate.instant('Unkeep'),
                        hidden: (row) => (0, rxjs_1.of)(!row.keep),
                        onClick: (row) => this.toggleKeep(row),
                    },
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('mdi-delete'),
                        requiredRoles: this.requiredRoles,
                        tooltip: this.translate.instant('Delete'),
                        hidden: (row) => (0, rxjs_1.of)(![boot_environment_active_enum_1.BootEnvironmentActive.Dash, boot_environment_active_enum_1.BootEnvironmentActive.Empty].includes(row.active)),
                        onClick: (row) => this.doDelete([row]),
                    },
                ],
                cssClass: 'actions-column',
            }),
        ], {
            uniqueRowTag: (row) => `bootenv-${row.name}`,
            ariaLabels: (row) => [row.name, this.translate.instant('Boot Environment')],
        });
        this.bootenvs = [];
    }
    ngOnInit() {
        const request$ = this.ws.call('bootenv.query').pipe((0, rxjs_1.map)((bootenvs) => {
            this.bootenvs = bootenvs.map((bootenv) => (Object.assign(Object.assign({}, bootenv), { selected: false })));
            return this.bootenvs;
        }));
        this.dataProvider = new async_data_provider_1.AsyncDataProvider(request$);
        this.refresh();
        this.setDefaultSort();
        this.dataProvider.emptyType$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.onListFiltered(this.filterString);
        });
    }
    handleSlideInClosed(slideInRef) {
        slideInRef.slideInClosed$.pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.refresh());
    }
    openBootenvStats() {
        this.matDialog.open(bootenv_stats_dialog_component_1.BootenvStatsDialogComponent);
    }
    doRename(bootenv) {
        const slideInRef = this.slideInService.open(bootenv_form_component_1.BootEnvironmentFormComponent, {
            data: { operation: boot_environment_action_enum_1.BootEnvironmentAction.Rename, name: bootenv.id },
        });
        this.handleSlideInClosed(slideInRef);
    }
    doClone(bootenv) {
        const slideInRef = this.slideInService.open(bootenv_form_component_1.BootEnvironmentFormComponent, {
            data: { operation: boot_environment_action_enum_1.BootEnvironmentAction.Clone, name: bootenv.id },
        });
        this.handleSlideInClosed(slideInRef);
    }
    doScrub() {
        this.dialogService.confirm({
            title: this.translate.instant('Scrub'),
            message: this.translate.instant('Start the scrub now?'),
            buttonText: this.translate.instant('Start Scrub'),
        }).pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)(() => {
            return this.ws.startJob('boot.scrub').pipe(this.loader.withLoader(), this.errorHandler.catchError());
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.snackbar.success(this.translate.instant('Scrub Started'));
        });
    }
    doDelete(bootenvs) {
        bootenvs.forEach((bootenv) => delete bootenv.selected);
        this.matDialog.open(boot_pool_delete_dialog_component_1.BootPoolDeleteDialogComponent, {
            data: bootenvs.filter((bootenv) => [boot_environment_active_enum_1.BootEnvironmentActive.Dash, boot_environment_active_enum_1.BootEnvironmentActive.Empty].includes(bootenv.active)),
        }).afterClosed().pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.refresh());
    }
    doActivate(bootenv) {
        this.dialogService.confirm({
            title: this.translate.instant('Activate'),
            message: this.translate.instant('Activate this Boot Environment?'),
            buttonText: boot_env_1.helptextSystemBootenv.list_dialog_activate_action,
        }).pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)(() => {
            return this.ws.call('bootenv.activate', [bootenv.id]).pipe(this.loader.withLoader(), this.errorHandler.catchError());
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.refresh());
    }
    toggleKeep(bootenv) {
        if (!bootenv.keep) {
            this.dialogService.confirm({
                title: this.translate.instant('Keep'),
                message: this.translate.instant('Keep this Boot Environment?'),
                buttonText: this.translate.instant('Set Keep Flag'),
            }).pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)(() => {
                return this.ws.call('bootenv.set_attribute', [bootenv.id, { keep: true }]).pipe(this.loader.withLoader(), this.errorHandler.catchError());
            }), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.refresh());
        }
        else {
            this.dialogService.confirm({
                title: this.translate.instant('Unkeep'),
                message: this.translate.instant('No longer keep this Boot Environment?'),
                buttonText: this.translate.instant('Remove Keep Flag'),
            }).pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)(() => {
                return this.ws.call('bootenv.set_attribute', [bootenv.id, { keep: false }]).pipe(this.loader.withLoader(), this.errorHandler.catchError());
            }), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.refresh());
        }
    }
    onListFiltered(query) {
        this.filterString = query;
        this.dataProvider.setFilter({ list: this.bootenvs, query, columnKeys: ['name'] });
    }
    setDefaultSort() {
        this.dataProvider.setSorting({
            active: 3,
            direction: sort_direction_enum_1.SortDirection.Desc,
            propertyName: 'created',
            sortBy: (row) => row.created.$date,
        });
    }
    refresh() {
        this.dataProvider.load();
    }
};
exports.BootEnvironmentListComponent = BootEnvironmentListComponent;
BootEnvironmentListComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: dialog_1.MatDialog },
    { type: core_2.TranslateService },
    { type: ix_slide_in_service_1.IxSlideInService },
    { type: app_loader_service_1.AppLoaderService },
    { type: dialog_service_1.DialogService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: snackbar_service_1.SnackbarService },
    { type: empty_service_1.EmptyService }
];
exports.BootEnvironmentListComponent = BootEnvironmentListComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-bootenv-list',
        template: require("./bootenv-list.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        providers: [
            { provide: slide_toggle_1.MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, useValue: { disableToggleValue: true } },
        ],
        standalone: true,
        imports: [
            page_header_component_1.PageHeaderComponent,
            search_input1_component_1.SearchInput1Component,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            ui_search_directive_1.UiSearchDirective,
            router_1.RouterLink,
            ix_icon_component_1.IxIconComponent,
            ix_table_component_1.IxTableComponent,
            ix_table_empty_directive_1.IxTableEmptyDirective,
            ix_table_head_component_1.IxTableHeadComponent,
            ix_table_body_component_1.IxTableBodyComponent,
            ix_table_pager_component_1.IxTablePagerComponent,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], BootEnvironmentListComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,