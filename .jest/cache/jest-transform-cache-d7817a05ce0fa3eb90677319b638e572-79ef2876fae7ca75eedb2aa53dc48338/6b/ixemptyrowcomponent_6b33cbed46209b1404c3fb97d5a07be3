b70c622c239fc16b52d47c9a5925f540
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxTableEmptyRowComponent = void 0;
const portal_1 = require("@angular/cdk/portal");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const progress_spinner_1 = require("@angular/material/progress-spinner");
const core_2 = require("@ngx-translate/core");
const empty_type_enum_1 = require("app/enums/empty-type.enum");
const icon_marker_util_1 = require("app/modules/ix-icon/icon-marker.util");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
let IxTableEmptyRowComponent = class IxTableEmptyRowComponent {
    constructor(viewContainerRef, translate, cdr) {
        this.viewContainerRef = viewContainerRef;
        this.translate = translate;
        this.cdr = cdr;
        this.conf = {
            title: this.translate.instant('No records'),
            message: this.translate.instant('There are no records to show.'),
            large: true,
            type: empty_type_enum_1.EmptyType.NoPageData,
        };
    }
    ngAfterViewInit() {
        this.templatePortal = new portal_1.TemplatePortal(this.templatePortalContent, this.viewContainerRef);
        this.cdr.detectChanges();
    }
    doAction() {
        if (this.conf.button.action) {
            this.conf.button.action();
        }
    }
    isLoading() {
        return this.conf.type === empty_type_enum_1.EmptyType.Loading;
    }
    getIcon() {
        let icon = (0, icon_marker_util_1.iconMarker)('ix-truenas-logo');
        if (this.conf.icon) {
            icon = this.conf.icon;
        }
        else {
            switch (this.conf.type) {
                case empty_type_enum_1.EmptyType.Loading:
                    icon = (0, icon_marker_util_1.iconMarker)('ix-truenas-logo');
                    break;
                case empty_type_enum_1.EmptyType.FirstUse:
                    icon = (0, icon_marker_util_1.iconMarker)('mdi-rocket');
                    break;
                case empty_type_enum_1.EmptyType.NoPageData:
                    icon = (0, icon_marker_util_1.iconMarker)('mdi-format-list-text');
                    break;
                case empty_type_enum_1.EmptyType.Errors:
                    icon = (0, icon_marker_util_1.iconMarker)('mdi-alert-octagon');
                    break;
                case empty_type_enum_1.EmptyType.NoSearchResults:
                    icon = (0, icon_marker_util_1.iconMarker)('mdi-magnify-scan');
                    break;
            }
        }
        return icon;
    }
};
exports.IxTableEmptyRowComponent = IxTableEmptyRowComponent;
IxTableEmptyRowComponent.ctorParameters = () => [
    { type: core_1.ViewContainerRef },
    { type: core_2.TranslateService },
    { type: core_1.ChangeDetectorRef }
];
IxTableEmptyRowComponent.propDecorators = {
    conf: [{ type: core_1.Input }],
    templatePortalContent: [{ type: core_1.ViewChild, args: ['templatePortalContent',] }]
};
exports.IxTableEmptyRowComponent = IxTableEmptyRowComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-empty-row',
        template: require("./ix-empty-row.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            portal_1.CdkPortalOutlet,
            progress_spinner_1.MatProgressSpinner,
            ix_icon_component_1.IxIconComponent,
            button_1.MatButton,
            core_2.TranslateModule,
            test_directive_1.TestDirective,
        ],
    })
], IxTableEmptyRowComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvaXgtdGFibGUvY29tcG9uZW50cy9peC1lbXB0eS1yb3cvaXgtZW1wdHktcm93LmNvbXBvbmVudC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxnREFBc0U7QUFDdEUsd0NBRXVCO0FBQ3ZCLHFEQUFxRDtBQUNyRCx5RUFBd0U7QUFDeEUsOENBQXdFO0FBQ3hFLCtEQUFzRDtBQUV0RCwyRUFBOEU7QUFDOUUsNkVBQXdFO0FBQ3hFLHVFQUFtRTtBQWlCNUQsSUFBTSx3QkFBd0IsR0FBOUIsTUFBTSx3QkFBd0I7SUFXbkMsWUFDVSxnQkFBa0MsRUFDbEMsU0FBMkIsRUFDM0IsR0FBc0I7UUFGdEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQWJ2QixTQUFJLEdBQWdCO1lBQzNCLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDM0MsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDO1lBQ2hFLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLDJCQUFTLENBQUMsVUFBVTtTQUMzQjtJQVNFLENBQUM7SUFFSixlQUFlO1FBQ2IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHVCQUFjLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVGLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssMkJBQVMsQ0FBQyxPQUFPLENBQUM7SUFDOUMsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLElBQUksR0FBRyxJQUFBLDZCQUFVLEVBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN6QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkIsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3hCLENBQUM7YUFBTSxDQUFDO1lBQ04sUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN2QixLQUFLLDJCQUFTLENBQUMsT0FBTztvQkFDcEIsSUFBSSxHQUFHLElBQUEsNkJBQVUsRUFBQyxpQkFBaUIsQ0FBQyxDQUFDO29CQUNyQyxNQUFNO2dCQUNSLEtBQUssMkJBQVMsQ0FBQyxRQUFRO29CQUNyQixJQUFJLEdBQUcsSUFBQSw2QkFBVSxFQUFDLFlBQVksQ0FBQyxDQUFDO29CQUNoQyxNQUFNO2dCQUNSLEtBQUssMkJBQVMsQ0FBQyxVQUFVO29CQUN2QixJQUFJLEdBQUcsSUFBQSw2QkFBVSxFQUFDLHNCQUFzQixDQUFDLENBQUM7b0JBQzFDLE1BQU07Z0JBQ1IsS0FBSywyQkFBUyxDQUFDLE1BQU07b0JBQ25CLElBQUksR0FBRyxJQUFBLDZCQUFVLEVBQUMsbUJBQW1CLENBQUMsQ0FBQztvQkFDdkMsTUFBTTtnQkFDUixLQUFLLDJCQUFTLENBQUMsZUFBZTtvQkFDNUIsSUFBSSxHQUFHLElBQUEsNkJBQVUsRUFBQyxrQkFBa0IsQ0FBQyxDQUFDO29CQUN0QyxNQUFNO1lBQ1YsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O0FBeERVLDREQUF3Qjs7Ozs7OzttQkFDbEMsWUFBSztvQ0FPTCxnQkFBUyxTQUFDLHVCQUF1Qjs7bUNBUnZCLHdCQUF3QjtJQWZwQyxJQUFBLGdCQUFTLEVBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4QixrREFBNEM7UUFFNUMsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFO1lBQ1Asd0JBQWU7WUFDZixxQ0FBa0I7WUFDbEIsbUNBQWU7WUFDZixrQkFBUztZQUNULHNCQUFlO1lBQ2YsOEJBQWE7U0FDZDtLQUNGLENBQUM7R0FDVyx3QkFBd0IsQ0F5RHBDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2l4LXRhYmxlL2NvbXBvbmVudHMvaXgtZW1wdHktcm93L2l4LWVtcHR5LXJvdy5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVQb3J0YWwsIENka1BvcnRhbE91dGxldCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdEJ1dHRvbiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQgeyBNYXRQcm9ncmVzc1NwaW5uZXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9wcm9ncmVzcy1zcGlubmVyJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UsIFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgRW1wdHlUeXBlIH0gZnJvbSAnYXBwL2VudW1zL2VtcHR5LXR5cGUuZW51bSc7XG5pbXBvcnQgeyBFbXB0eUNvbmZpZyB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2VtcHR5LWNvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgaWNvbk1hcmtlciwgTWFya2VkSWNvbiB9IGZyb20gJ2FwcC9tb2R1bGVzL2l4LWljb24vaWNvbi1tYXJrZXIudXRpbCc7XG5pbXBvcnQgeyBJeEljb25Db21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2l4LWljb24uY29tcG9uZW50JztcbmltcG9ydCB7IFRlc3REaXJlY3RpdmUgfSBmcm9tICdhcHAvbW9kdWxlcy90ZXN0LWlkL3Rlc3QuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXgtZW1wdHktcm93JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2l4LWVtcHR5LXJvdy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2l4LWVtcHR5LXJvdy5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW1xuICAgIENka1BvcnRhbE91dGxldCxcbiAgICBNYXRQcm9ncmVzc1NwaW5uZXIsXG4gICAgSXhJY29uQ29tcG9uZW50LFxuICAgIE1hdEJ1dHRvbixcbiAgICBUcmFuc2xhdGVNb2R1bGUsXG4gICAgVGVzdERpcmVjdGl2ZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgSXhUYWJsZUVtcHR5Um93Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBJbnB1dCgpIGNvbmY6IEVtcHR5Q29uZmlnID0ge1xuICAgIHRpdGxlOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdObyByZWNvcmRzJyksXG4gICAgbWVzc2FnZTogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnVGhlcmUgYXJlIG5vIHJlY29yZHMgdG8gc2hvdy4nKSxcbiAgICBsYXJnZTogdHJ1ZSxcbiAgICB0eXBlOiBFbXB0eVR5cGUuTm9QYWdlRGF0YSxcbiAgfTtcblxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVBvcnRhbENvbnRlbnQnKSB0ZW1wbGF0ZVBvcnRhbENvbnRlbnQ6IFRlbXBsYXRlUmVmPHVua25vd24+O1xuICB0ZW1wbGF0ZVBvcnRhbDogVGVtcGxhdGVQb3J0YWw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnRlbXBsYXRlUG9ydGFsID0gbmV3IFRlbXBsYXRlUG9ydGFsKHRoaXMudGVtcGxhdGVQb3J0YWxDb250ZW50LCB0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIGRvQWN0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbmYuYnV0dG9uLmFjdGlvbikge1xuICAgICAgdGhpcy5jb25mLmJ1dHRvbi5hY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICBpc0xvYWRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29uZi50eXBlID09PSBFbXB0eVR5cGUuTG9hZGluZztcbiAgfVxuXG4gIGdldEljb24oKTogTWFya2VkSWNvbiB7XG4gICAgbGV0IGljb24gPSBpY29uTWFya2VyKCdpeC10cnVlbmFzLWxvZ28nKTtcbiAgICBpZiAodGhpcy5jb25mLmljb24pIHtcbiAgICAgIGljb24gPSB0aGlzLmNvbmYuaWNvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoICh0aGlzLmNvbmYudHlwZSkge1xuICAgICAgICBjYXNlIEVtcHR5VHlwZS5Mb2FkaW5nOlxuICAgICAgICAgIGljb24gPSBpY29uTWFya2VyKCdpeC10cnVlbmFzLWxvZ28nKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFbXB0eVR5cGUuRmlyc3RVc2U6XG4gICAgICAgICAgaWNvbiA9IGljb25NYXJrZXIoJ21kaS1yb2NrZXQnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFbXB0eVR5cGUuTm9QYWdlRGF0YTpcbiAgICAgICAgICBpY29uID0gaWNvbk1hcmtlcignbWRpLWZvcm1hdC1saXN0LXRleHQnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFbXB0eVR5cGUuRXJyb3JzOlxuICAgICAgICAgIGljb24gPSBpY29uTWFya2VyKCdtZGktYWxlcnQtb2N0YWdvbicpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVtcHR5VHlwZS5Ob1NlYXJjaFJlc3VsdHM6XG4gICAgICAgICAgaWNvbiA9IGljb25NYXJrZXIoJ21kaS1tYWduaWZ5LXNjYW4nKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGljb247XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==