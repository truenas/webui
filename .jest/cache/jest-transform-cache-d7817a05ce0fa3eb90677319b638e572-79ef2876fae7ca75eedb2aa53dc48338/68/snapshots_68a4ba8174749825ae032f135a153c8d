709e43631bcf913e707be1f7952f10f0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helptextSnapshots = void 0;
const ngx_translate_extract_marker_1 = require("@biesbjerg/ngx-translate-extract-marker");
exports.helptextSnapshots = {
    snapshot_add_dataset_placeholder: (0, ngx_translate_extract_marker_1.marker)('Dataset'),
    snapshot_add_dataset_tooltip: (0, ngx_translate_extract_marker_1.marker)('Select a dataset or zvol.'),
    snapshot_add_name_placeholder: (0, ngx_translate_extract_marker_1.marker)('Name'),
    snapshot_add_name_tooltip: (0, ngx_translate_extract_marker_1.marker)('Unique snapshot name. Cannot be used with \
 a <i>Naming Schema</i>.'),
    snapshot_add_naming_schema_placeholder: (0, ngx_translate_extract_marker_1.marker)('Naming Schema'),
    snapshot_add_naming_schema_tooltip: (0, ngx_translate_extract_marker_1.marker)('Generate a name for the snapshot \
 using the naming schema from a previously created <b>Periodic Snapshot Task</b>. \
 This allows the snapshot to be replicated. Cannot be used with a <i>Name</i>.'),
    snapshot_add_recursive_placeholder: (0, ngx_translate_extract_marker_1.marker)('Recursive'),
    snapshot_add_recursive_tooltip: (0, ngx_translate_extract_marker_1.marker)('Set to include child datasets and zvols of the \
 chosen dataset.'),
    snapshot_clone_name_tooltip: (0, ngx_translate_extract_marker_1.marker)('Name of the new dataset created from the \
 cloned snapshot.'),
    rollback_recursive_radio_placeholder: (0, ngx_translate_extract_marker_1.marker)('Stop Rollback if Snapshots Exist:'),
    rollback_recursive_radio_tooltip: (0, ngx_translate_extract_marker_1.marker)('Choose a safety level for the \
 rollback action. The rollback is canceled when the safety check finds \
 additional snapshots that are directly related to the dataset being rolled back.'),
    rollback_dataset_placeholder: (0, ngx_translate_extract_marker_1.marker)('Newer Intermediate, Child, and Clone'),
    rollback_dataset_tooltip: (0, ngx_translate_extract_marker_1.marker)('Stops the rollback when the safety check \
 finds any related intermediate, child dataset, or clone snapshots that \
 are newer than the rollback snapshot.'),
    rollback_recursive_placeholder: (0, ngx_translate_extract_marker_1.marker)('Newer Clone'),
    rollback_recursive_tooltip: (0, ngx_translate_extract_marker_1.marker)('Stops the rollback when the safety \
 check finds any related clone snapshots that are newer than the \
 rollback snapshot.'),
    rollback_recursive_clones_placeholder: (0, ngx_translate_extract_marker_1.marker)('No Safety Check (CAUTION)'),
    rollback_recursive_clones_tooltip: (0, ngx_translate_extract_marker_1.marker)('The rollback will destroy any \
 related intermediate, child dataset, and cloned snapshots that are \
 newer than the rollback snapshot.'),
    rollback_confirm: (0, ngx_translate_extract_marker_1.marker)('Confirm'),
    extra_cols: {
        title_show: (0, ngx_translate_extract_marker_1.marker)('Show Extra Columns'),
        title_hide: (0, ngx_translate_extract_marker_1.marker)('Hide Extra Columns'),
        message_show: (0, ngx_translate_extract_marker_1.marker)('Showing extra columns in the table is useful for data filtering, but can cause performance issues.'),
        message_hide: (0, ngx_translate_extract_marker_1.marker)('Hidden columns are not available for sorting or filtering. Hiding columns improves performance.'),
        button_show: (0, ngx_translate_extract_marker_1.marker)('Show'),
        button_hide: (0, ngx_translate_extract_marker_1.marker)('Hide'),
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHB0ZXh0L3N0b3JhZ2Uvc25hcHNob3RzL3NuYXBzaG90cy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwwRkFBc0U7QUFFekQsUUFBQSxpQkFBaUIsR0FBRztJQUMvQixnQ0FBZ0MsRUFBRSxJQUFBLHFDQUFDLEVBQUMsU0FBUyxDQUFDO0lBQzlDLDRCQUE0QixFQUFFLElBQUEscUNBQUMsRUFBQywyQkFBMkIsQ0FBQztJQUU1RCw2QkFBNkIsRUFBRSxJQUFBLHFDQUFDLEVBQUMsTUFBTSxDQUFDO0lBQ3hDLHlCQUF5QixFQUFFLElBQUEscUNBQUMsRUFBQzt5QkFDTixDQUFDO0lBRXhCLHNDQUFzQyxFQUFFLElBQUEscUNBQUMsRUFBQyxlQUFlLENBQUM7SUFDMUQsa0NBQWtDLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOzsrRUFFdUMsQ0FBQztJQUU5RSxrQ0FBa0MsRUFBRSxJQUFBLHFDQUFDLEVBQUMsV0FBVyxDQUFDO0lBQ2xELDhCQUE4QixFQUFFLElBQUEscUNBQUMsRUFBQztpQkFDbkIsQ0FBQztJQUVoQiwyQkFBMkIsRUFBRSxJQUFBLHFDQUFDLEVBQUM7a0JBQ2YsQ0FBQztJQUVqQixvQ0FBb0MsRUFBRSxJQUFBLHFDQUFDLEVBQUMsbUNBQW1DLENBQUM7SUFDNUUsZ0NBQWdDLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOztrRkFFNEMsQ0FBQztJQUVqRiw0QkFBNEIsRUFBRSxJQUFBLHFDQUFDLEVBQUMsc0NBQXNDLENBQUM7SUFDdkUsd0JBQXdCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOzt1Q0FFUyxDQUFDO0lBRXRDLDhCQUE4QixFQUFFLElBQUEscUNBQUMsRUFBQyxhQUFhLENBQUM7SUFDaEQsMEJBQTBCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOztvQkFFWixDQUFDO0lBRW5CLHFDQUFxQyxFQUFFLElBQUEscUNBQUMsRUFBQywyQkFBMkIsQ0FBQztJQUNyRSxpQ0FBaUMsRUFBRSxJQUFBLHFDQUFDLEVBQUM7O21DQUVKLENBQUM7SUFFbEMsZ0JBQWdCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLFNBQVMsQ0FBQztJQUU5QixVQUFVLEVBQUU7UUFDVixVQUFVLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLG9CQUFvQixDQUFDO1FBQ25DLFVBQVUsRUFBRSxJQUFBLHFDQUFDLEVBQUMsb0JBQW9CLENBQUM7UUFFbkMsWUFBWSxFQUFFLElBQUEscUNBQUMsRUFBQyxvR0FBb0csQ0FBQztRQUNySCxZQUFZLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLGlHQUFpRyxDQUFDO1FBQ2xILFdBQVcsRUFBRSxJQUFBLHFDQUFDLEVBQUMsTUFBTSxDQUFDO1FBQ3RCLFdBQVcsRUFBRSxJQUFBLHFDQUFDLEVBQUMsTUFBTSxDQUFDO0tBQ3ZCO0NBRUYsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvaGVscHRleHQvc3RvcmFnZS9zbmFwc2hvdHMvc25hcHNob3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcmtlciBhcyBUIH0gZnJvbSAnQGJpZXNiamVyZy9uZ3gtdHJhbnNsYXRlLWV4dHJhY3QtbWFya2VyJztcblxuZXhwb3J0IGNvbnN0IGhlbHB0ZXh0U25hcHNob3RzID0ge1xuICBzbmFwc2hvdF9hZGRfZGF0YXNldF9wbGFjZWhvbGRlcjogVCgnRGF0YXNldCcpLFxuICBzbmFwc2hvdF9hZGRfZGF0YXNldF90b29sdGlwOiBUKCdTZWxlY3QgYSBkYXRhc2V0IG9yIHp2b2wuJyksXG5cbiAgc25hcHNob3RfYWRkX25hbWVfcGxhY2Vob2xkZXI6IFQoJ05hbWUnKSxcbiAgc25hcHNob3RfYWRkX25hbWVfdG9vbHRpcDogVCgnVW5pcXVlIHNuYXBzaG90IG5hbWUuIENhbm5vdCBiZSB1c2VkIHdpdGggXFxcbiBhIDxpPk5hbWluZyBTY2hlbWE8L2k+LicpLFxuXG4gIHNuYXBzaG90X2FkZF9uYW1pbmdfc2NoZW1hX3BsYWNlaG9sZGVyOiBUKCdOYW1pbmcgU2NoZW1hJyksXG4gIHNuYXBzaG90X2FkZF9uYW1pbmdfc2NoZW1hX3Rvb2x0aXA6IFQoJ0dlbmVyYXRlIGEgbmFtZSBmb3IgdGhlIHNuYXBzaG90IFxcXG4gdXNpbmcgdGhlIG5hbWluZyBzY2hlbWEgZnJvbSBhIHByZXZpb3VzbHkgY3JlYXRlZCA8Yj5QZXJpb2RpYyBTbmFwc2hvdCBUYXNrPC9iPi4gXFxcbiBUaGlzIGFsbG93cyB0aGUgc25hcHNob3QgdG8gYmUgcmVwbGljYXRlZC4gQ2Fubm90IGJlIHVzZWQgd2l0aCBhIDxpPk5hbWU8L2k+LicpLFxuXG4gIHNuYXBzaG90X2FkZF9yZWN1cnNpdmVfcGxhY2Vob2xkZXI6IFQoJ1JlY3Vyc2l2ZScpLFxuICBzbmFwc2hvdF9hZGRfcmVjdXJzaXZlX3Rvb2x0aXA6IFQoJ1NldCB0byBpbmNsdWRlIGNoaWxkIGRhdGFzZXRzIGFuZCB6dm9scyBvZiB0aGUgXFxcbiBjaG9zZW4gZGF0YXNldC4nKSxcblxuICBzbmFwc2hvdF9jbG9uZV9uYW1lX3Rvb2x0aXA6IFQoJ05hbWUgb2YgdGhlIG5ldyBkYXRhc2V0IGNyZWF0ZWQgZnJvbSB0aGUgXFxcbiBjbG9uZWQgc25hcHNob3QuJyksXG5cbiAgcm9sbGJhY2tfcmVjdXJzaXZlX3JhZGlvX3BsYWNlaG9sZGVyOiBUKCdTdG9wIFJvbGxiYWNrIGlmIFNuYXBzaG90cyBFeGlzdDonKSxcbiAgcm9sbGJhY2tfcmVjdXJzaXZlX3JhZGlvX3Rvb2x0aXA6IFQoJ0Nob29zZSBhIHNhZmV0eSBsZXZlbCBmb3IgdGhlIFxcXG4gcm9sbGJhY2sgYWN0aW9uLiBUaGUgcm9sbGJhY2sgaXMgY2FuY2VsZWQgd2hlbiB0aGUgc2FmZXR5IGNoZWNrIGZpbmRzIFxcXG4gYWRkaXRpb25hbCBzbmFwc2hvdHMgdGhhdCBhcmUgZGlyZWN0bHkgcmVsYXRlZCB0byB0aGUgZGF0YXNldCBiZWluZyByb2xsZWQgYmFjay4nKSxcblxuICByb2xsYmFja19kYXRhc2V0X3BsYWNlaG9sZGVyOiBUKCdOZXdlciBJbnRlcm1lZGlhdGUsIENoaWxkLCBhbmQgQ2xvbmUnKSxcbiAgcm9sbGJhY2tfZGF0YXNldF90b29sdGlwOiBUKCdTdG9wcyB0aGUgcm9sbGJhY2sgd2hlbiB0aGUgc2FmZXR5IGNoZWNrIFxcXG4gZmluZHMgYW55IHJlbGF0ZWQgaW50ZXJtZWRpYXRlLCBjaGlsZCBkYXRhc2V0LCBvciBjbG9uZSBzbmFwc2hvdHMgdGhhdCBcXFxuIGFyZSBuZXdlciB0aGFuIHRoZSByb2xsYmFjayBzbmFwc2hvdC4nKSxcblxuICByb2xsYmFja19yZWN1cnNpdmVfcGxhY2Vob2xkZXI6IFQoJ05ld2VyIENsb25lJyksXG4gIHJvbGxiYWNrX3JlY3Vyc2l2ZV90b29sdGlwOiBUKCdTdG9wcyB0aGUgcm9sbGJhY2sgd2hlbiB0aGUgc2FmZXR5IFxcXG4gY2hlY2sgZmluZHMgYW55IHJlbGF0ZWQgY2xvbmUgc25hcHNob3RzIHRoYXQgYXJlIG5ld2VyIHRoYW4gdGhlIFxcXG4gcm9sbGJhY2sgc25hcHNob3QuJyksXG5cbiAgcm9sbGJhY2tfcmVjdXJzaXZlX2Nsb25lc19wbGFjZWhvbGRlcjogVCgnTm8gU2FmZXR5IENoZWNrIChDQVVUSU9OKScpLFxuICByb2xsYmFja19yZWN1cnNpdmVfY2xvbmVzX3Rvb2x0aXA6IFQoJ1RoZSByb2xsYmFjayB3aWxsIGRlc3Ryb3kgYW55IFxcXG4gcmVsYXRlZCBpbnRlcm1lZGlhdGUsIGNoaWxkIGRhdGFzZXQsIGFuZCBjbG9uZWQgc25hcHNob3RzIHRoYXQgYXJlIFxcXG4gbmV3ZXIgdGhhbiB0aGUgcm9sbGJhY2sgc25hcHNob3QuJyksXG5cbiAgcm9sbGJhY2tfY29uZmlybTogVCgnQ29uZmlybScpLFxuXG4gIGV4dHJhX2NvbHM6IHtcbiAgICB0aXRsZV9zaG93OiBUKCdTaG93IEV4dHJhIENvbHVtbnMnKSxcbiAgICB0aXRsZV9oaWRlOiBUKCdIaWRlIEV4dHJhIENvbHVtbnMnKSxcblxuICAgIG1lc3NhZ2Vfc2hvdzogVCgnU2hvd2luZyBleHRyYSBjb2x1bW5zIGluIHRoZSB0YWJsZSBpcyB1c2VmdWwgZm9yIGRhdGEgZmlsdGVyaW5nLCBidXQgY2FuIGNhdXNlIHBlcmZvcm1hbmNlIGlzc3Vlcy4nKSxcbiAgICBtZXNzYWdlX2hpZGU6IFQoJ0hpZGRlbiBjb2x1bW5zIGFyZSBub3QgYXZhaWxhYmxlIGZvciBzb3J0aW5nIG9yIGZpbHRlcmluZy4gSGlkaW5nIGNvbHVtbnMgaW1wcm92ZXMgcGVyZm9ybWFuY2UuJyksXG4gICAgYnV0dG9uX3Nob3c6IFQoJ1Nob3cnKSxcbiAgICBidXR0b25faGlkZTogVCgnSGlkZScpLFxuICB9LFxuXG59O1xuIl0sInZlcnNpb24iOjN9