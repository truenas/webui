{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/button/testing.mjs"],
  "sourcesContent": ["import { booleanAttribute } from '@angular/core';\nimport { ContentContainerComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\n\n/** Harness for interacting with a mat-button in tests. */\nclass MatButtonHarness extends ContentContainerComponentHarness {\n    // TODO(jelbourn) use a single class, like `.mat-button-base`\n    static { this.hostSelector = `[mat-button], [mat-raised-button], [mat-flat-button],\n                         [mat-icon-button], [mat-stroked-button], [mat-fab], [mat-mini-fab]`; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a button with specific attributes.\n     * @param options Options for narrowing the search:\n     *   - `selector` finds a button whose host element matches the given selector.\n     *   - `text` finds a button with specific text content.\n     *   - `variant` finds buttons matching a specific variant.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(this, options)\n            .addOption('text', options.text, (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text))\n            .addOption('variant', options.variant, (harness, variant) => HarnessPredicate.stringMatches(harness.getVariant(), variant))\n            .addOption('disabled', options.disabled, async (harness, disabled) => {\n            return (await harness.isDisabled()) === disabled;\n        });\n    }\n    async click(...args) {\n        return (await this.host()).click(...args);\n    }\n    /** Gets a boolean promise indicating if the button is disabled. */\n    async isDisabled() {\n        const host = await this.host();\n        return (booleanAttribute(await host.getAttribute('disabled')) ||\n            (await host.hasClass('mat-mdc-button-disabled')));\n    }\n    /** Gets a promise for the button's label text. */\n    async getText() {\n        return (await this.host()).text();\n    }\n    /** Focuses the button and returns a void promise that indicates when the action is complete. */\n    async focus() {\n        return (await this.host()).focus();\n    }\n    /** Blurs the button and returns a void promise that indicates when the action is complete. */\n    async blur() {\n        return (await this.host()).blur();\n    }\n    /** Whether the button is focused. */\n    async isFocused() {\n        return (await this.host()).isFocused();\n    }\n    /** Gets the variant of the button. */\n    async getVariant() {\n        const host = await this.host();\n        if ((await host.getAttribute('mat-raised-button')) != null) {\n            return 'raised';\n        }\n        else if ((await host.getAttribute('mat-flat-button')) != null) {\n            return 'flat';\n        }\n        else if ((await host.getAttribute('mat-icon-button')) != null) {\n            return 'icon';\n        }\n        else if ((await host.getAttribute('mat-stroked-button')) != null) {\n            return 'stroked';\n        }\n        else if ((await host.getAttribute('mat-fab')) != null) {\n            return 'fab';\n        }\n        else if ((await host.getAttribute('mat-mini-fab')) != null) {\n            return 'mini-fab';\n        }\n        return 'basic';\n    }\n}\n\nexport { MatButtonHarness };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiC;AACjC,qBAAmE;AAGnE,MAAM,oBAAN,MAAM,0BAAyB,gDAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY5D,OAAO,KAAK,UAAU,CAAC,GAAG;AACtB,WAAO,IAAI,gCAAiB,MAAM,OAAO,EACpC,UAAU,QAAQ,QAAQ,MAAM,CAAC,SAAS,SAAS,gCAAiB,cAAc,QAAQ,QAAQ,GAAG,IAAI,CAAC,EAC1G,UAAU,WAAW,QAAQ,SAAS,CAAC,SAAS,YAAY,gCAAiB,cAAc,QAAQ,WAAW,GAAG,OAAO,CAAC,EACzH,UAAU,YAAY,QAAQ,UAAU,CAAO,SAAS,aAAa;AACtE,cAAQ,MAAM,QAAQ,WAAW,OAAO;AAAA,IAC5C,EAAC;AAAA,EACL;AAAA,EACM,SAAS,MAAM;AAAA;AACjB,cAAQ,MAAM,KAAK,KAAK,GAAG,MAAM,GAAG,IAAI;AAAA,IAC5C;AAAA;AAAA;AAAA,EAEM,aAAa;AAAA;AACf,YAAM,OAAO,MAAM,KAAK,KAAK;AAC7B,iBAAQ,8BAAiB,MAAM,KAAK,aAAa,UAAU,CAAC,MACvD,MAAM,KAAK,SAAS,yBAAyB;AAAA,IACtD;AAAA;AAAA;AAAA,EAEM,UAAU;AAAA;AACZ,cAAQ,MAAM,KAAK,KAAK,GAAG,KAAK;AAAA,IACpC;AAAA;AAAA;AAAA,EAEM,QAAQ;AAAA;AACV,cAAQ,MAAM,KAAK,KAAK,GAAG,MAAM;AAAA,IACrC;AAAA;AAAA;AAAA,EAEM,OAAO;AAAA;AACT,cAAQ,MAAM,KAAK,KAAK,GAAG,KAAK;AAAA,IACpC;AAAA;AAAA;AAAA,EAEM,YAAY;AAAA;AACd,cAAQ,MAAM,KAAK,KAAK,GAAG,UAAU;AAAA,IACzC;AAAA;AAAA;AAAA,EAEM,aAAa;AAAA;AACf,YAAM,OAAO,MAAM,KAAK,KAAK;AAC7B,WAAK,MAAM,KAAK,aAAa,mBAAmB,MAAM,MAAM;AACxD,eAAO;AAAA,MACX,YACU,MAAM,KAAK,aAAa,iBAAiB,MAAM,MAAM;AAC3D,eAAO;AAAA,MACX,YACU,MAAM,KAAK,aAAa,iBAAiB,MAAM,MAAM;AAC3D,eAAO;AAAA,MACX,YACU,MAAM,KAAK,aAAa,oBAAoB,MAAM,MAAM;AAC9D,eAAO;AAAA,MACX,YACU,MAAM,KAAK,aAAa,SAAS,MAAM,MAAM;AACnD,eAAO;AAAA,MACX,YACU,MAAM,KAAK,aAAa,cAAc,MAAM,MAAM;AACxD,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AAAA;AACJ;AAlEa,kBAAK,eAAe;AAAA;AAFjC,IAAM,mBAAN;",
  "names": []
}
