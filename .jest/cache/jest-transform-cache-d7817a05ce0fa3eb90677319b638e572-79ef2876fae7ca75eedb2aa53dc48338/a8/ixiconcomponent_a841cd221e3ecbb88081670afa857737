5e23a36979e4d913e1b6b27f4fd1b386
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxIconComponent = void 0;
const core_1 = require("@angular/core");
const icon_1 = require("@angular/material/icon");
const icon_error_handler_service_1 = require("app/modules/ix-icon/icon-error-handler.service");
const ix_icon_registry_service_1 = require("app/modules/ix-icon/ix-icon-registry.service");
const i0 = __importStar(require("@angular/core"));
/**
 * IxIcon component extends MatIcon
 * It provides single interface to access all icons in the app.
 * You can use:
 * - Google's material icons `<ix-icon name="left-arrow"></ix-icon>`
 * - material design icons (https://pictogrammers.com/library/mdi/) `<ix-icon name="mdi-left-arrow"></ix-icon>`
 * - custom icons `<ix-icon name="ix-left-arrow"></ix-icon>` added to `src/assets/icons/custom`.
 *
 * More information on how icon sprite works is available in the assets/icons/README.md.
 */
let IxIconComponent = class IxIconComponent extends icon_1.MatIcon {
    get iconName() {
        if (this.name()) {
            return this.name();
        }
        if (this.iconLigature) {
            return this.iconLigature;
        }
        if (this.svgIcon) {
            return this.svgIcon;
        }
        if (this.fontIcon) {
            return this.fontIcon;
        }
        return undefined;
    }
    set iconLigature(iconName) {
        this._elementRef.nativeElement.innerText = iconName;
    }
    get iconLigature() {
        var _a, _b;
        return (_b = (_a = this._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.innerText;
    }
    constructor(elementRef, iconRegistry, ariaHidden, location, errorHandler, defaults) {
        super(elementRef, iconRegistry, ariaHidden, location, errorHandler, defaults);
        this.errorHandler = errorHandler;
        this.fullSize = false;
        this.name = (0, core_1.input)();
    }
    ngOnChanges() {
        this.updateIcon(this.name());
    }
    ngOnInit() {
        this.updateIcon(this.iconName);
        super.ngOnInit();
    }
    ngAfterContentInit() {
        this.updateIcon(this.iconName);
    }
    updateIcon(iconName) {
        if (!iconName) {
            return;
        }
        this.svgIcon = iconName;
    }
};
exports.IxIconComponent = IxIconComponent;
IxIconComponent.ctorParameters = () => [
    { type: core_1.ElementRef },
    { type: ix_icon_registry_service_1.IxIconRegistry },
    { type: String, decorators: [{ type: core_1.Attribute, args: ['aria-hidden',] }] },
    { type: icon_1.MatIconLocation, decorators: [{ type: core_1.Inject, args: [icon_1.MAT_ICON_LOCATION,] }] },
    { type: icon_error_handler_service_1.IconErrorHandlerService },
    { type: icon_1.MatIconDefaultOptions, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [icon_1.MAT_ICON_DEFAULT_OPTIONS,] }] }
];
IxIconComponent.propDecorators = {
    fullSize: [{ type: core_1.Input }, { type: core_1.HostBinding, args: ['class.full-size',] }],
    name: [{ type: i0.Input, args: [{ isSignal: true, alias: "name", required: false, transform: undefined },] }]
};
exports.IxIconComponent = IxIconComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-icon',
        exportAs: 'ixIcon',
        // eslint-disable-next-line @angular-eslint/no-host-metadata-property
        host: {
            class: 'ix-icon',
            '[attr.data-mat-icon-name]': '(_svgIcon && _svgName) || fontIcon',
            '[attr.data-mat-icon-namespace]': '(_svgIcon && _svgNamespace) || fontSet',
        },
        template: require("./ix-icon.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
    })
], IxIconComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvaXgtaWNvbi9peC1pY29uLmNvbXBvbmVudC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHdDQVV1QjtBQUN2QixpREFFZ0M7QUFDaEMsK0ZBQXlGO0FBQ3pGLDJGQUE4RTs7QUFFOUU7Ozs7Ozs7OztHQVNHO0FBZUksSUFBTSxlQUFlLEdBQXJCLE1BQU0sZUFBZ0IsU0FBUSxjQUFPO0lBWTFDLElBQVksUUFBUTtRQUNsQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDM0IsQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBWSxZQUFZLENBQUMsUUFBZ0I7UUFDdkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUN0RCxDQUFDO0lBQ0QsSUFBWSxZQUFZOztRQUN0QixPQUFPLE1BQUEsTUFBQSxJQUFJLENBQUMsV0FBVywwQ0FBRSxhQUFhLDBDQUFFLFNBQVMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsWUFDRSxVQUFtQyxFQUNuQyxZQUE0QixFQUNGLFVBQWtCLEVBQ2pCLFFBQXlCLEVBQzNDLFlBQXFDLEVBQ0EsUUFBZ0M7UUFFOUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFIckUsaUJBQVksR0FBWixZQUFZLENBQXlCO1FBdENoRCxhQUFRLEdBQUcsS0FBSztvQkFFQSxJQUFBLFlBQUssR0FBVTtJQXdDL0IsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFUSxRQUFRO1FBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVPLFVBQVUsQ0FBQyxRQUE0QjtRQUM3QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDZCxPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBQzFCLENBQUM7O0FBcEVVLDBDQUFlOzs7O3lDQTBDdkIsZ0JBQVMsU0FBQyxhQUFhO3lEQUN2QixhQUFNLFNBQUMsd0JBQWlCOzsrREFFeEIsZUFBUSxZQUFJLGFBQU0sU0FBQywrQkFBd0I7Ozt1QkF6QzdDLFlBQUssWUFDTCxrQkFBVyxTQUFDLGlCQUFpQjs7OzBCQUxuQixlQUFlO0lBZDNCLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSxTQUFTO1FBQ25CLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLHFFQUFxRTtRQUNyRSxJQUFJLEVBQUU7WUFDSixLQUFLLEVBQUUsU0FBUztZQUNoQiwyQkFBMkIsRUFBRSxvQ0FBb0M7WUFDakUsZ0NBQWdDLEVBQUUsd0NBQXdDO1NBQzNFO1FBRUQsNkNBQXFDO1FBQ3JDLGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxJQUFJO0tBQ2pCLENBQUM7R0FDVyxlQUFlLENBcUUzQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9peC1pY29uL2l4LWljb24uY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIEF0dHJpYnV0ZSxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsXG4gIEluamVjdCwgSW5wdXQsIGlucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgTWF0SWNvbiwgTWF0SWNvbkRlZmF1bHRPcHRpb25zLCBNYXRJY29uTG9jYXRpb24sIE1BVF9JQ09OX0RFRkFVTFRfT1BUSU9OUywgTUFUX0lDT05fTE9DQVRJT04sXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24nO1xuaW1wb3J0IHsgSWNvbkVycm9ySGFuZGxlclNlcnZpY2UgfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2ljb24tZXJyb3ItaGFuZGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IEl4SWNvblJlZ2lzdHJ5IH0gZnJvbSAnYXBwL21vZHVsZXMvaXgtaWNvbi9peC1pY29uLXJlZ2lzdHJ5LnNlcnZpY2UnO1xuXG4vKipcbiAqIEl4SWNvbiBjb21wb25lbnQgZXh0ZW5kcyBNYXRJY29uXG4gKiBJdCBwcm92aWRlcyBzaW5nbGUgaW50ZXJmYWNlIHRvIGFjY2VzcyBhbGwgaWNvbnMgaW4gdGhlIGFwcC5cbiAqIFlvdSBjYW4gdXNlOlxuICogLSBHb29nbGUncyBtYXRlcmlhbCBpY29ucyBgPGl4LWljb24gbmFtZT1cImxlZnQtYXJyb3dcIj48L2l4LWljb24+YFxuICogLSBtYXRlcmlhbCBkZXNpZ24gaWNvbnMgKGh0dHBzOi8vcGljdG9ncmFtbWVycy5jb20vbGlicmFyeS9tZGkvKSBgPGl4LWljb24gbmFtZT1cIm1kaS1sZWZ0LWFycm93XCI+PC9peC1pY29uPmBcbiAqIC0gY3VzdG9tIGljb25zIGA8aXgtaWNvbiBuYW1lPVwiaXgtbGVmdC1hcnJvd1wiPjwvaXgtaWNvbj5gIGFkZGVkIHRvIGBzcmMvYXNzZXRzL2ljb25zL2N1c3RvbWAuXG4gKlxuICogTW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgaWNvbiBzcHJpdGUgd29ya3MgaXMgYXZhaWxhYmxlIGluIHRoZSBhc3NldHMvaWNvbnMvUkVBRE1FLm1kLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpeC1pY29uJyxcbiAgZXhwb3J0QXM6ICdpeEljb24nLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLWhvc3QtbWV0YWRhdGEtcHJvcGVydHlcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnaXgtaWNvbicsXG4gICAgJ1thdHRyLmRhdGEtbWF0LWljb24tbmFtZV0nOiAnKF9zdmdJY29uICYmIF9zdmdOYW1lKSB8fCBmb250SWNvbicsXG4gICAgJ1thdHRyLmRhdGEtbWF0LWljb24tbmFtZXNwYWNlXSc6ICcoX3N2Z0ljb24gJiYgX3N2Z05hbWVzcGFjZSkgfHwgZm9udFNldCcsXG4gIH0sXG4gIHN0eWxlVXJsczogWycuL2l4LWljb24uY29tcG9uZW50LnNjc3MnXSxcbiAgdGVtcGxhdGVVcmw6ICdpeC1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIEl4SWNvbkNvbXBvbmVudCBleHRlbmRzIE1hdEljb24gaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIC8qKlxuICAgKiBEbyBub3QgYXBwbHkgb3JkaW5hcnkgMjRweCBzaXplIHRvIHRoZSBpY29uLlxuICAgKi9cbiAgQElucHV0KClcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mdWxsLXNpemUnKVxuICBmdWxsU2l6ZSA9IGZhbHNlO1xuXG4gIHJlYWRvbmx5IG5hbWUgPSBpbnB1dDxzdHJpbmc+KCk7XG5cbiAgb3ZlcnJpZGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuXG4gIHByaXZhdGUgZ2V0IGljb25OYW1lKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMubmFtZSgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5uYW1lKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaWNvbkxpZ2F0dXJlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pY29uTGlnYXR1cmU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3ZnSWNvbikge1xuICAgICAgcmV0dXJuIHRoaXMuc3ZnSWNvbjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mb250SWNvbikge1xuICAgICAgcmV0dXJuIHRoaXMuZm9udEljb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0IGljb25MaWdhdHVyZShpY29uTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmlubmVyVGV4dCA9IGljb25OYW1lO1xuICB9XG4gIHByaXZhdGUgZ2V0IGljb25MaWdhdHVyZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmPy5uYXRpdmVFbGVtZW50Py5pbm5lclRleHQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBpY29uUmVnaXN0cnk6IEl4SWNvblJlZ2lzdHJ5LFxuICAgIEBBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgYXJpYUhpZGRlbjogc3RyaW5nLFxuICAgIEBJbmplY3QoTUFUX0lDT05fTE9DQVRJT04pIGxvY2F0aW9uOiBNYXRJY29uTG9jYXRpb24sXG4gICAgcmVhZG9ubHkgZXJyb3JIYW5kbGVyOiBJY29uRXJyb3JIYW5kbGVyU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KE1BVF9JQ09OX0RFRkFVTFRfT1BUSU9OUykgZGVmYXVsdHM/OiBNYXRJY29uRGVmYXVsdE9wdGlvbnMsXG4gICkge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYsIGljb25SZWdpc3RyeSwgYXJpYUhpZGRlbiwgbG9jYXRpb24sIGVycm9ySGFuZGxlciwgZGVmYXVsdHMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVJY29uKHRoaXMubmFtZSgpKTtcbiAgfVxuXG4gIG92ZXJyaWRlIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlSWNvbih0aGlzLmljb25OYW1lKTtcbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlSWNvbih0aGlzLmljb25OYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSWNvbihpY29uTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgaWYgKCFpY29uTmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN2Z0ljb24gPSBpY29uTmFtZTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9