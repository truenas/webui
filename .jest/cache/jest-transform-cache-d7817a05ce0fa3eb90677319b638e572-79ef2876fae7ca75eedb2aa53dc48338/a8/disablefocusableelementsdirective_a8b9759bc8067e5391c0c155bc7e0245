002e647ed45b555d2df82ce9b69d86e0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisableFocusableElementsDirective = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const rxjs_1 = require("rxjs");
let DisableFocusableElementsDirective = class DisableFocusableElementsDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    ngOnChanges(changes) {
        if (changes.disableFocusableElements) {
            this.updateFocusableElements();
        }
    }
    updateFocusableElements() {
        (0, rxjs_1.timer)(0).pipe((0, rxjs_1.take)(1), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            const tabIndex = this.disableFocusableElements ? -1 : 0;
            this.updateTabIndex(tabIndex);
        });
    }
    updateTabIndex(tabIndex) {
        const focusableElements = this.getFocusableElements();
        focusableElements.forEach((element) => {
            this.renderer.setAttribute(element, 'tabindex', tabIndex.toString());
            this.updateDisabledAttribute(element, tabIndex);
        });
    }
    getFocusableElements() {
        return this.elementRef.nativeElement.querySelectorAll('a, button:not([disabled]), input, textarea, select, [tabindex]');
    }
    updateDisabledAttribute(element, tabIndex) {
        if (tabIndex === -1) {
            this.renderer.setAttribute(element, 'disabled', 'true');
        }
        else {
            this.renderer.removeAttribute(element, 'disabled');
        }
    }
};
exports.DisableFocusableElementsDirective = DisableFocusableElementsDirective;
DisableFocusableElementsDirective.ctorParameters = () => [
    { type: core_1.ElementRef },
    { type: core_1.Renderer2 }
];
DisableFocusableElementsDirective.propDecorators = {
    disableFocusableElements: [{ type: core_1.Input }]
};
exports.DisableFocusableElementsDirective = DisableFocusableElementsDirective = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Directive)({
        selector: '[disableFocusableElements]',
        standalone: true,
    })
], DisableFocusableElementsDirective);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvZGlzYWJsZS1mb2N1c2FibGUtZWxlbWVudHMvZGlzYWJsZS1mb2N1c2FibGUtZWxlbWVudHMuZGlyZWN0aXZlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUV1QjtBQUN2Qix5REFBcUU7QUFDckUsK0JBQW1DO0FBUTVCLElBQU0saUNBQWlDLEdBQXZDLE1BQU0saUNBQWlDO0lBRzVDLFlBQ1UsVUFBbUMsRUFDbkMsUUFBbUI7UUFEbkIsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDbkMsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUMxQixDQUFDO0lBRUosV0FBVyxDQUFDLE9BQThCO1FBQ3hDLElBQUksT0FBTyxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDakMsQ0FBQztJQUNILENBQUM7SUFFTyx1QkFBdUI7UUFDN0IsSUFBQSxZQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUEsV0FBSSxFQUFDLENBQUMsQ0FBQyxFQUFFLElBQUEsOEJBQWMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDMUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sY0FBYyxDQUFDLFFBQWdCO1FBQ3JDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDdEQsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLG9CQUFvQjtRQUMxQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUNuRCxnRUFBZ0UsQ0FDakUsQ0FBQztJQUNKLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxPQUFvQixFQUFFLFFBQWdCO1FBQ3BFLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRCxDQUFDO2FBQU0sQ0FBQztZQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNyRCxDQUFDO0lBQ0gsQ0FBQzs7QUF6Q1UsOEVBQWlDOzs7Ozs7dUNBQzNDLFlBQUs7OzRDQURLLGlDQUFpQztJQUw3QyxJQUFBLDRCQUFZLEdBQUU7SUFDZCxJQUFBLGdCQUFTLEVBQUM7UUFDVCxRQUFRLEVBQUUsNEJBQTRCO1FBQ3RDLFVBQVUsRUFBRSxJQUFJO0tBQ2pCLENBQUM7R0FDVyxpQ0FBaUMsQ0EwQzdDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9kaXJlY3RpdmVzL2Rpc2FibGUtZm9jdXNhYmxlLWVsZW1lbnRzL2Rpc2FibGUtZm9jdXNhYmxlLWVsZW1lbnRzLmRpcmVjdGl2ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsIElucHV0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE9uQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVbnRpbERlc3Ryb3ksIHVudGlsRGVzdHJveWVkIH0gZnJvbSAnQG5nbmVhdC91bnRpbC1kZXN0cm95JztcbmltcG9ydCB7IHRha2UsIHRpbWVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJeFNpbXBsZUNoYW5nZXMgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9zaW1wbGUtY2hhbmdlcy5pbnRlcmZhY2UnO1xuXG5AVW50aWxEZXN0cm95KClcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkaXNhYmxlRm9jdXNhYmxlRWxlbWVudHNdJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgRGlzYWJsZUZvY3VzYWJsZUVsZW1lbnRzRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgZGlzYWJsZUZvY3VzYWJsZUVsZW1lbnRzOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogSXhTaW1wbGVDaGFuZ2VzPHRoaXM+KTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuZGlzYWJsZUZvY3VzYWJsZUVsZW1lbnRzKSB7XG4gICAgICB0aGlzLnVwZGF0ZUZvY3VzYWJsZUVsZW1lbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVGb2N1c2FibGVFbGVtZW50cygpOiB2b2lkIHtcbiAgICB0aW1lcigwKS5waXBlKHRha2UoMSksIHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY29uc3QgdGFiSW5kZXggPSB0aGlzLmRpc2FibGVGb2N1c2FibGVFbGVtZW50cyA/IC0xIDogMDtcbiAgICAgIHRoaXMudXBkYXRlVGFiSW5kZXgodGFiSW5kZXgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVUYWJJbmRleCh0YWJJbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgZm9jdXNhYmxlRWxlbWVudHMgPSB0aGlzLmdldEZvY3VzYWJsZUVsZW1lbnRzKCk7XG4gICAgZm9jdXNhYmxlRWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ3RhYmluZGV4JywgdGFiSW5kZXgudG9TdHJpbmcoKSk7XG4gICAgICB0aGlzLnVwZGF0ZURpc2FibGVkQXR0cmlidXRlKGVsZW1lbnQsIHRhYkluZGV4KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rm9jdXNhYmxlRWxlbWVudHMoKTogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4ge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgJ2EsIGJ1dHRvbjpub3QoW2Rpc2FibGVkXSksIGlucHV0LCB0ZXh0YXJlYSwgc2VsZWN0LCBbdGFiaW5kZXhdJyxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVEaXNhYmxlZEF0dHJpYnV0ZShlbGVtZW50OiBIVE1MRWxlbWVudCwgdGFiSW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0YWJJbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsZW1lbnQsICdkaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdkaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxufVxuIl0sInZlcnNpb24iOjN9