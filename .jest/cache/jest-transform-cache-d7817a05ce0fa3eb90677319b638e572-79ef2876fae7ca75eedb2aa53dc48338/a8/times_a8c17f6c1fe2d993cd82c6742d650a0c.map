{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/times.js","mappings":";;;;;AAAA,oEAAwC;AACxC,0EAA8C;AAC9C,kEAAuC;AAEvC,yDAAyD;AACzD,IAAI,gBAAgB,GAAG,gBAAgB,CAAC;AAExC,uEAAuE;AACvE,IAAI,gBAAgB,GAAG,UAAU,CAAC;AAElC,wFAAwF;AACxF,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;AAEzB;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAS,KAAK,CAAC,CAAC,EAAE,QAAQ;IACxB,CAAC,GAAG,IAAA,sBAAS,EAAC,CAAC,CAAC,CAAC;IACjB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,gBAAgB,EAAE,CAAC;QAClC,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,IAAI,KAAK,GAAG,gBAAgB,EACxB,MAAM,GAAG,SAAS,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;IAE5C,QAAQ,GAAG,IAAA,0BAAY,EAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,IAAI,gBAAgB,CAAC;IAEtB,IAAI,MAAM,GAAG,IAAA,uBAAS,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACzC,OAAO,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC;QACnB,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,kBAAe,KAAK,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/times.js"],"sourcesContent":["import baseTimes from './_baseTimes.js';\nimport castFunction from './_castFunction.js';\nimport toInteger from './toInteger.js';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nexport default times;\n"],"version":3}