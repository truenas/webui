{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/autocomplete.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, inject, Injector, afterNextRender, Optional, Host, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent, Observable } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, filter, map, tap, delay, take } from 'rxjs/operators';\nimport * as i2 from '@angular/cdk/bidi';\n\n// Animation values come from\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        this._classList = value;\n        this._elementRef.nativeElement.className = '';\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Emits when the panel animation is done. Null if the panel doesn't animate. */\n        this._animationDone = new EventEmitter();\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n        this.requireSelection = !!_defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n        this._animationDone.complete();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocomplete, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatAutocomplete, isStandalone: true, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:static;border-radius:var(--mat-autocomplete-container-shape, var(--mat-app-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow);background-color:var(--mat-autocomplete-background-color, var(--mat-app-surface-container))}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}mat-autocomplete{display:none}\"], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], standalone: true, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:static;border-radius:var(--mat-autocomplete-container-shape, var(--mat-app-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow);background-color:var(--mat-autocomplete-background-color, var(--mat-app-surface-container))}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}mat-autocomplete{display:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteOrigin, deps: [{ token: i0.ElementRef }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatAutocompleteOrigin, isStandalone: true, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /** Implements BreakpointObserver to be used to detect handset landscape */\n        this._breakpointObserver = inject(BreakpointObserver);\n        this._handsetLandscapeSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._initialized = new Subject();\n        this._injector = inject(Injector);\n        /** Class to apply to the panel when it's above the input. */\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._initialized.pipe(switchMap(() => this.optionSelections));\n        });\n        /** Handles keyboard events coming from the overlay panel. */\n        this._handlePanelKeydown = (event) => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._handsetLandscapeSubscription.unsubscribe();\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._openPanelInternal();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // `afterNextRender` always runs outside of the Angular zone, so all the subscriptions from\n            // `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        // Only reset if this trigger is the latest one that opened the\n        // autocomplete since another may have taken it over.\n        if (this.autocomplete._latestOpeningTrigger === this) {\n            this.autocomplete._isOpen = false;\n            this.autocomplete._latestOpeningTrigger = null;\n        }\n        this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', this.autocomplete.id);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField\n                ? this._formField.getConnectedOverlayOrigin().nativeElement\n                : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        this._valueOnLastKeydown = this._element.nativeElement.value;\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this._openPanelInternal(this._valueOnLastKeydown);\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._valueOnLastKeydown;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            else if (this.panelOpen && !this.autocomplete.requireSelection) {\n                // Note that we don't reset this when `requireSelection` is enabled,\n                // because the option will be reset when the panel is closed.\n                const selectedOption = this.autocomplete.options?.find(option => option.selected);\n                if (selectedOption) {\n                    const display = this._getDisplayValue(selectedOption.value);\n                    if (value !== display) {\n                        selectedOption.deselect(false);\n                    }\n                }\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                // When the `input` event fires, the input's value will have already changed. This means\n                // that if we take the `this._element.nativeElement.value` directly, it'll be one keystroke\n                // behind. This can be a problem when the user selects a value, changes a character while\n                // the input still has focus and then clicks away (see #28432). To work around it, we\n                // capture the value in `keydown` so we can use it here.\n                const valueOnAttach = this._valueOnLastKeydown ?? this._element.nativeElement.value;\n                this._valueOnLastKeydown = null;\n                this._openPanelInternal(valueOnAttach);\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay(this._previousValue);\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this._openPanelInternal();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const initialRender = new Observable(subscriber => {\n            afterNextRender(() => {\n                subscriber.next();\n            }, { injector: this._injector });\n        });\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the options are initially rendered, and when the option list changes...\n        return (merge(initialRender, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => this._zone.run(() => {\n            // `afterNextRender` always runs outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this._updatePanelState();\n            this._changeDetectorRef.detectChanges();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n            if (wasOpen !== this.panelOpen) {\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                // `closed` event, because we may not have emitted it. This can happen\n                // - if the users opens the panel and there are no options, but the\n                //   options come in slightly later or as a result of the value changing,\n                // - if the panel is closed after the user entered a string that did not match any\n                //   of the available options,\n                // - if a valid string is entered after an invalid one.\n                if (this.panelOpen) {\n                    this._emitOpened();\n                }\n                else {\n                    this.autocomplete.closed.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /** Given a value, returns the string that should be shown within the input. */\n    _getDisplayValue(value) {\n        const autocomplete = this.autocomplete;\n        return autocomplete && autocomplete.displayWith ? autocomplete.displayWith(value) : value;\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this._getDisplayValue(value);\n        if (value == null) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            // Wait for the animation to finish before clearing the form control value, otherwise\n            // the options might change while the animation is running which looks glitchy.\n            if (panel._animationDone) {\n                panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n            }\n            else {\n                this._onChange(null);\n            }\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _openPanelInternal(valueOnAttach = this._element.nativeElement.value) {\n        this._attachOverlay(valueOnAttach);\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    _attachOverlay(valueOnAttach) {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n            // Subscribe to the breakpoint events stream to detect when screen is in\n            // handsetLandscape.\n            this._handsetLandscapeSubscription = this._breakpointObserver\n                .observe(Breakpoints.HandsetLandscape)\n                .subscribe(result => {\n                const isHandsetLandscape = result.matches;\n                // Check if result.matches Breakpoints.HandsetLandscape. Apply HandsetLandscape\n                // settings to prevent overlay cutoff in that breakpoint. Fixes b/284148377\n                if (isHandsetLandscape) {\n                    this._positionStrategy\n                        .withFlexibleDimensions(true)\n                        .withGrowAfterOpen(true)\n                        .withViewportMargin(8);\n                }\n                else {\n                    this._positionStrategy\n                        .withFlexibleDimensions(false)\n                        .withGrowAfterOpen(false)\n                        .withViewportMargin(0);\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = valueOnAttach;\n            this._valueOnLastKeydown = null;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._latestOpeningTrigger = this;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        // Set default Overlay Position\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteTrigger, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatAutocompleteTrigger, isStandalone: true, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteModule, imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule,\n            MatAutocomplete,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        CommonModule,\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n//# sourceMappingURL=autocomplete.mjs.map\n"],
  "mappings": "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",
  "names": ["import_core", "window"]
}
