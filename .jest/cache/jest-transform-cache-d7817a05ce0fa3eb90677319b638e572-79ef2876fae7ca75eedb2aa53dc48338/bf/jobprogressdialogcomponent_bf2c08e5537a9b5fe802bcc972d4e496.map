{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/components/job-progress/job-progress-dialog.component.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAAuD;AACvD,4CAA8C;AAC9C,wCAEuB;AACvB,qDAAoE;AACpE,qDAEkC;AAClC,iEAAgE;AAChE,yDAAqE;AACrE,8CAAsD;AACtD,+BAAqD;AACrD,6DAAoD;AAEpD,6EAAwE;AACxE,uEAAmE;AACnE,8EAAyE;AACzE,wDAA2D;;AAmDpD,IAAM,0BAA0B,GAAhC,MAAM,0BAA0B;IAqBrC,IAAI,YAAY;;QACd,OAAO,CAAA,MAAA,IAAI,CAAC,GAAG,0CAAE,KAAK,MAAK,yBAAQ,CAAC,OAAO,CAAC;IAC9C,CAAC;IAED,IAAI,cAAc;;QAChB,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,yBAAQ,CAAC,OAAO,EAAE,yBAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,MAAA,IAAI,CAAC,GAAG,0CAAE,KAAK,CAAC,CAAC;IAC9F,CAAC;IAED,IAAI,qBAAqB;;QACvB,OAAO;YACL,yBAAQ,CAAC,OAAO;YAChB,yBAAQ,CAAC,KAAK;YACd,yBAAQ,CAAC,MAAM;YACf,yBAAQ,CAAC,QAAQ;YACjB,yBAAQ,CAAC,OAAO;SACjB,CAAC,QAAQ,CAAC,MAAA,IAAI,CAAC,GAAG,0CAAE,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;IACnD,CAAC;IAED,YACU,SAAuE,EAC/C,IAAgC,EACxD,EAAoB,EACpB,GAAsB,EACtB,YAAiC;QAJjC,cAAS,GAAT,SAAS,CAA8D;QAC/C,SAAI,GAAJ,IAAI,CAA4B;QACxD,OAAE,GAAF,EAAE,CAAkB;QACpB,QAAG,GAAH,GAAG,CAAmB;QACtB,iBAAY,GAAZ,YAAY,CAAqB;QA3ClC,eAAU,GAAG,IAAA,aAAM,GAAU;QAC7B,eAAU,GAAG,IAAA,aAAM,GAAW;QAC9B,eAAU,GAAG,IAAA,aAAM,GAAU;QAC7B,gBAAW,GAAG,IAAA,aAAM,GAAe;QAElC,QAAG,GAAG,EAAY,CAAC;QAEpB,aAAQ,GAAG,yBAAQ,CAAC;QAIrB,2BAAsB,GAAG,KAAK,CAAC;QAC7B,iBAAY,GAAG,EAAE,CAAC;QAClB,uBAAkB,GAAG,IAAI,CAAC;QAC1B,yBAAoB,GAAG,CAAC,CAAC;QACzB,sBAAiB,GAAG,KAAK,CAAC;QAC1B,qBAAgB,GAAG,KAAK,CAAC;QAEzB,kBAAa,GAAG,KAAK,CAAC;IA0B5B,CAAC;IAEL,QAAQ;;QACN,IAAI,CAAC,KAAK,GAAG,MAAA,IAAI,CAAC,IAAI,0CAAE,KAAK,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,MAAA,IAAI,CAAC,IAAI,0CAAE,WAAW,CAAC;QAC1C,IAAI,CAAC,gBAAgB,GAAG,CAAA,MAAA,IAAI,CAAC,IAAI,0CAAE,gBAAgB,KAAI,KAAK,CAAC;QAC7D,IAAI,CAAC,kBAAkB,GAAG,CAAA,MAAA,IAAI,CAAC,IAAI,0CAAE,WAAW,KAAI,KAAK,CAAC;QAC1D,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC;QAEvD,IAAI,gBAAgB,GAAiB,IAAI,CAAC;QAC1C,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QAExB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CACjB,IAAA,8BAAc,EAAC,IAAI,CAAC,CACrB,CAAC,SAAS,CAAC;YACV,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;gBACZ,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;gBACf,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;oBAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;gBAC/B,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;gBAC1C,CAAC;gBACD,IACE,IAAI,CAAC,IAAI,CAAC,gBAAgB;uBACvB,IAAI,CAAC,GAAG,CAAC,SAAS;uBAClB,CAAC,IAAI,CAAC,sBAAsB,EAC/B,CAAC;oBACD,gBAAgB,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC5C,CAAC;gBACD,IAAI,GAAG,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAChD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACpC,IAAI,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;wBAC7B,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC;oBAC9C,CAAC;oBACD,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;wBACzB,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC;oBACnD,CAAC;oBACD,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,KAAK,IAAI,CAAC;gBACzD,CAAC;gBAED,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YAC1B,CAAC;YACD,KAAK,EAAE,CAAC,KAAc,EAAE,EAAE;gBACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE;gBACb,QAAQ,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;oBACvB,KAAK,yBAAQ,CAAC,MAAM;wBAClB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC/B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;wBACvB,MAAM;oBACR,KAAK,yBAAQ,CAAC,OAAO;wBACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC/B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;wBACvB,MAAM;oBACR,KAAK,yBAAQ,CAAC,OAAO;wBACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC/B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;wBACvB,MAAM;gBACV,CAAC;gBAED,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAChC,gBAAgB,CAAC,WAAW,EAAE,CAAC;gBACjC,CAAC;gBACD,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YAC1B,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,YAAY;QACV,MAAM,aAAa,GAAG,QAAQ,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACvE,MAAM,aAAa,GAAG,aAAa,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC,YAAY,CAAC;QACrD,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAChD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAC9B,IAAA,8BAAc,EAAC,IAAI,CAAC,CACrB;aACE,SAAS,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,eAAe;QACb,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACnC,MAAM,OAAO,GAAG,8BAA8B,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;QACpE,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC;aACpC,IAAI,CAAC,IAAA,UAAG,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC;aAC9D,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAClB,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,KAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;gBAChD,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,IAAI,CAAC;YACjC,CAAC;YACD,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;;AA9JU,gEAA0B;;;4CAyClC,aAAM,SAAC,wBAAe;;;;;;;;;;;qCAzCd,0BAA0B;IAvBtC,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,yDAAmD;QAEnD,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE;YACP,uBAAc;YACd,yBAAa;YACb,yBAAgB;YAChB,6BAAc;YACd,yBAAgB;YAChB,kBAAS;YACT,sBAAa;YACb,uBAAc;YACd,mCAAe;YACf,sBAAe;YACf,oBAAW;YACX,8BAAa;YACb,8BAAa;SACd;KACF,CAAC;GACW,0BAA0B,CA+JtC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/components/job-progress/job-progress-dialog.component.ts"],"sourcesContent":["import { CdkScrollable } from '@angular/cdk/scrolling';\nimport { DecimalPipe } from '@angular/common';\nimport {\n  AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit, output,\n} from '@angular/core';\nimport { MatButton, MatIconButton } from '@angular/material/button';\nimport {\n  MAT_DIALOG_DATA, MatDialogConfig, MatDialogRef, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose,\n} from '@angular/material/dialog';\nimport { MatProgressBar } from '@angular/material/progress-bar';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Observable, Subscription, map } from 'rxjs';\nimport { JobState } from 'app/enums/job-state.enum';\nimport { Job, JobProgress } from 'app/interfaces/job.interface';\nimport { IxIconComponent } from 'app/modules/ix-icon/ix-icon.component';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\nexport interface JobProgressDialogConfig<Result> {\n  job$: Observable<Job<Result>>;\n\n  /**\n   * Defaults to job.method.\n   */\n  title?: string;\n\n  /**\n   * Defaults to job.description;\n   */\n  description?: string;\n\n  /**\n   * Defaults to false;\n   */\n  showRealtimeLogs?: boolean;\n\n  /**\n   * Whether user can minimize the job dialog\n   * Defaults to false.\n   * Minimizing the dialog will not stop the job, but will destroy the component and thus all the code in subscription.\n   */\n  canMinimize?: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-job-progress-dialog',\n  templateUrl: './job-progress-dialog.component.html',\n  styleUrls: ['./job-progress-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatDialogTitle,\n    CdkScrollable,\n    MatDialogContent,\n    MatProgressBar,\n    MatDialogActions,\n    MatButton,\n    MatIconButton,\n    MatDialogClose,\n    IxIconComponent,\n    TranslateModule,\n    DecimalPipe,\n    TestDirective,\n    TestDirective,\n  ],\n})\nexport class JobProgressDialogComponent<T> implements OnInit, AfterViewChecked {\n  readonly jobSuccess = output<Job<T>>();\n  readonly jobFailure = output<unknown>();\n  readonly jobAborted = output<Job<T>>();\n  readonly jobProgress = output<JobProgress>();\n\n  protected job = {} as Job<T>;\n\n  readonly JobState = JobState;\n\n  protected title: string;\n  protected description: string;\n  private realtimeLogsSubscribed = false;\n  protected realtimeLogs = '';\n  protected showMinimizeButton = true;\n  protected progressTotalPercent = 0;\n  protected hideProgressValue = false;\n  protected showRealtimeLogs = false;\n\n  protected isAbortingJob = false;\n\n  get isJobRunning(): boolean {\n    return this.job?.state === JobState.Running;\n  }\n\n  get hasAbortButton(): boolean {\n    return this.job.abortable && [JobState.Running, JobState.Waiting].includes(this.job?.state);\n  }\n\n  get isJobStateDeterminate(): boolean {\n    return [\n      JobState.Aborted,\n      JobState.Error,\n      JobState.Failed,\n      JobState.Finished,\n      JobState.Success,\n    ].includes(this.job?.state) || this.isJobRunning;\n  }\n\n  constructor(\n    private dialogRef: MatDialogRef<JobProgressDialogComponent<T>, MatDialogConfig>,\n    @Inject(MAT_DIALOG_DATA) public data: JobProgressDialogConfig<T>,\n    private ws: WebSocketService,\n    private cdr: ChangeDetectorRef,\n    private errorHandler: ErrorHandlerService,\n  ) { }\n\n  ngOnInit(): void {\n    this.title = this.data?.title;\n    this.description = this.data?.description;\n    this.showRealtimeLogs = this.data?.showRealtimeLogs || false;\n    this.showMinimizeButton = this.data?.canMinimize || false;\n    this.dialogRef.disableClose = !this.showMinimizeButton;\n\n    let logsSubscription: Subscription = null;\n    this.cdr.markForCheck();\n\n    this.data.job$.pipe(\n      untilDestroyed(this),\n    ).subscribe({\n      next: (job) => {\n        this.job = job;\n        if (!this.title) {\n          this.title = this.job.method;\n        }\n        if (!this.description) {\n          this.description = this.job.description;\n        }\n        if (\n          this.data.showRealtimeLogs\n          && this.job.logs_path\n          && !this.realtimeLogsSubscribed\n        ) {\n          logsSubscription = this.getRealtimeLogs();\n        }\n        if (job.progress && !this.data.showRealtimeLogs) {\n          this.jobProgress.emit(job.progress);\n          if (job.progress.description) {\n            this.description = job.progress.description;\n          }\n          if (job.progress.percent) {\n            this.progressTotalPercent = job.progress.percent;\n          }\n          this.hideProgressValue = job.progress.percent === null;\n        }\n\n        this.cdr.markForCheck();\n      },\n      error: (error: unknown) => {\n        this.jobFailure.emit(error);\n        this.dialogRef.close();\n      },\n      complete: () => {\n        switch (this.job.state) {\n          case JobState.Failed:\n            this.jobFailure.emit(this.job);\n            this.dialogRef.close();\n            break;\n          case JobState.Aborted:\n            this.jobAborted.emit(this.job);\n            this.dialogRef.close();\n            break;\n          case JobState.Success:\n            this.jobSuccess.emit(this.job);\n            this.dialogRef.close();\n            break;\n        }\n\n        if (this.realtimeLogsSubscribed) {\n          logsSubscription.unsubscribe();\n        }\n        this.cdr.markForCheck();\n      },\n    });\n  }\n\n  ngAfterViewChecked(): void {\n    this.scrollBottom();\n  }\n\n  scrollBottom(): void {\n    const cardContainer = document.getElementsByClassName('job-dialog')[0];\n    const logsContainer = cardContainer.getElementsByClassName('logs-container')[0];\n    if (!logsContainer) {\n      return;\n    }\n    logsContainer.scrollTop = logsContainer.scrollHeight;\n    this.cdr.markForCheck();\n  }\n\n  abortJob(): void {\n    this.ws.call('core.job_abort', [this.job.id]).pipe(\n      this.errorHandler.catchError(),\n      untilDestroyed(this),\n    )\n      .subscribe(() => {\n        this.isAbortingJob = true;\n        this.cdr.markForCheck();\n      });\n  }\n\n  /**\n   * This method returns the subscription id that is used when subscribing to real time\n   * websocket updates. The subscription id is used to unsubscribe form those real time\n   * websocket updates at a later time. Unsubscription is not possible without this id\n   */\n  getRealtimeLogs(): Subscription {\n    this.realtimeLogsSubscribed = true;\n    const subName = 'filesystem.file_tail_follow:' + this.job.logs_path;\n    this.cdr.markForCheck();\n    return this.ws.subscribeToLogs(subName)\n      .pipe(map((apiEvent) => apiEvent.fields), untilDestroyed(this))\n      .subscribe((logs) => {\n        if (logs?.data && typeof logs.data === 'string') {\n          this.realtimeLogs += logs.data;\n        }\n        this.cdr.markForCheck();\n      });\n  }\n}\n"],"version":3}