{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-textarea/ix-textarea.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAA8F;AAC9F,6DAAkE;AAClE,sGAAiG;AAEjG,kFAA8E;AAM9E,MAAa,iBAAkB,SAAQ,0BAAgB;IAAvD;;QAQE,uBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAe,CAAC,CAAC;QACtD,iBAAY,GAAG,4BAAY,CAAC;IAqB9B,CAAC;IA3BC,MAAM,CAAC,IAAI,CAAC,OAA8B;QACxC,OAAO,IAAI,0BAAgB,CAAC,iBAAiB,EAAE,OAAO,CAAC;aACpD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,0BAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1H,CAAC;IAKK,YAAY;;YAChB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,iCAAc,CAAC,EAAE,CAAC;YAC9D,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,QAAQ;;YACZ,OAAO,CAAC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;QACtD,CAAC;KAAA;IAEK,QAAQ,CAAC,KAAa;;YAC1B,OAAO,CAAC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC3D,CAAC;KAAA;IAEK,UAAU;;YACd,OAAO,CAAC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;QACxD,CAAC;KAAA;;AA7BH,8CA8BC;AA7BQ,8BAAY,GAAG,aAAa,AAAhB,CAAiB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-textarea/ix-textarea.harness.ts"],"sourcesContent":["import { BaseHarnessFilters, ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { MatInputHarness } from '@angular/material/input/testing';\nimport { IxLabelHarness } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\n\nexport interface IxInputHarnessFilters extends BaseHarnessFilters {\n  label: string;\n}\n\nexport class IxTextareaHarness extends ComponentHarness implements IxFormControlHarness {\n  static hostSelector = 'ix-textarea';\n\n  static with(options: IxInputHarnessFilters): HarnessPredicate<IxTextareaHarness> {\n    return new HarnessPredicate(IxTextareaHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getMatInputHarness = this.locatorFor(MatInputHarness);\n  getErrorText = getErrorText;\n\n  async getLabelText(): Promise<string> {\n    const label = await this.locatorForOptional(IxLabelHarness)();\n    if (!label) {\n      return '';\n    }\n    return label.getLabel();\n  }\n\n  async getValue(): Promise<string> {\n    return (await this.getMatInputHarness()).getValue();\n  }\n\n  async setValue(value: string): Promise<void> {\n    return (await this.getMatInputHarness()).setValue(value);\n  }\n\n  async isDisabled(): Promise<boolean> {\n    return (await this.getMatInputHarness()).isDisabled();\n  }\n}\n"],"version":3}