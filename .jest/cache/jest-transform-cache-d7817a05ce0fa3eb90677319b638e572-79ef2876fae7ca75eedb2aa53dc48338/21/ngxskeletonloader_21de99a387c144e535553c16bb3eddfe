f43fa045f932376fddec93d33a3faa6a
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ngx_skeleton_loader_exports = {};
__export(ngx_skeleton_loader_exports, {
  NGX_SKELETON_LOADER_CONFIG: () => NGX_SKELETON_LOADER_CONFIG,
  NgxSkeletonLoaderComponent: () => NgxSkeletonLoaderComponent,
  NgxSkeletonLoaderModule: () => NgxSkeletonLoaderModule
});
module.exports = __toCommonJS(ngx_skeleton_loader_exports);
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_marks = require("perf-marks/marks");
var i1 = __toESM(require("@angular/common"), 1);
var import_common = require("@angular/common");
const NGX_SKELETON_LOADER_CONFIG = new import_core.InjectionToken("ngx-skeleton-loader.config");
class NgxSkeletonLoaderComponent {
  constructor(config) {
    const { appearance = "line", animation = "progress", theme = null, loadingText = "Loading...", count = 1, ariaLabel = "loading" } = config || {};
    this.appearance = appearance;
    this.animation = animation;
    this.theme = theme;
    this.loadingText = loadingText;
    this.count = count;
    this.items = [];
    this.ariaLabel = ariaLabel;
  }
  ngOnInit() {
    (0, import_marks.start)("NgxSkeletonLoader:Rendered");
    (0, import_marks.start)("NgxSkeletonLoader:Loaded");
    this.validateInputValues();
  }
  validateInputValues() {
    if (!/^\d+$/.test(`${this.count}`)) {
      if ((0, import_core.isDevMode)()) {
        console.error(`\`NgxSkeletonLoaderComponent\` need to receive 'count' a numeric value. Forcing default to "1".`);
      }
      this.count = 1;
    }
    this.items.length = this.count;
    const allowedAnimations = ["progress", "progress-dark", "pulse", "false"];
    if (allowedAnimations.indexOf(String(this.animation)) === -1) {
      if ((0, import_core.isDevMode)()) {
        console.error(`\`NgxSkeletonLoaderComponent\` need to receive 'animation' as: ${allowedAnimations.join(", ")}. Forcing default to "progress".`);
      }
      this.animation = "progress";
    }
    if (["circle", "line", ""].indexOf(String(this.appearance)) === -1) {
      if ((0, import_core.isDevMode)()) {
        console.error(`\`NgxSkeletonLoaderComponent\` need to receive 'appearance' as: circle or line or empty string. Forcing default to "''".`);
      }
      this.appearance = "";
    }
  }
  ngOnChanges(changes) {
    if (["count", "animation", "appearance"].find((key) => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {
      return;
    }
    this.validateInputValues();
  }
  ngAfterViewInit() {
    (0, import_marks.end)("NgxSkeletonLoader:Rendered");
  }
  ngOnDestroy() {
    (0, import_marks.end)("NgxSkeletonLoader:Loaded");
  }
}
NgxSkeletonLoaderComponent.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgxSkeletonLoaderComponent, deps: [{ token: NGX_SKELETON_LOADER_CONFIG, optional: true }], target: i0.\u0275\u0275FactoryTarget.Component });
NgxSkeletonLoaderComponent.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: NgxSkeletonLoaderComponent, selector: "ngx-skeleton-loader", inputs: { count: "count", loadingText: "loadingText", appearance: "appearance", animation: "animation", ariaLabel: "ariaLabel", theme: "theme" }, usesOnChanges: true, ngImport: i0, template: `<span
  *ngFor="let item of items"
  class="loader"
  [attr.aria-label]="ariaLabel"
  aria-busy="true"
  aria-valuemin="0"
  aria-valuemax="100"
  [attr.aria-valuetext]="loadingText"
  role="progressbar"
  tabindex="0"
  [ngClass]="{
    circle: appearance === 'circle',
    progress: animation === 'progress',
    'progress-dark': animation === 'progress-dark',
    pulse: animation === 'pulse'
  }"
  [ngStyle]="theme"
>
</span>
`, styles: ['.loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.loader:after,.loader:before{box-sizing:border-box}.loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.loader.progress,.loader.progress-dark{transform:translate(0)}.loader.progress:after,.loader.progress:before,.loader.progress-dark:after,.loader.progress-dark:before{box-sizing:border-box}.loader.progress:before,.loader.progress-dark:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:""}.loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.loader.pulse{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.loader.pulse,.loader.progress-dark,.loader.progress{-webkit-animation:none;animation:none}.loader.progress,.loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\n'], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgxSkeletonLoaderComponent, decorators: [{
  type: import_core.Component,
  args: [{ selector: "ngx-skeleton-loader", changeDetection: import_core.ChangeDetectionStrategy.OnPush, template: `<span
  *ngFor="let item of items"
  class="loader"
  [attr.aria-label]="ariaLabel"
  aria-busy="true"
  aria-valuemin="0"
  aria-valuemax="100"
  [attr.aria-valuetext]="loadingText"
  role="progressbar"
  tabindex="0"
  [ngClass]="{
    circle: appearance === 'circle',
    progress: animation === 'progress',
    'progress-dark': animation === 'progress-dark',
    pulse: animation === 'pulse'
  }"
  [ngStyle]="theme"
>
</span>
`, styles: ['.loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.loader:after,.loader:before{box-sizing:border-box}.loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.loader.progress,.loader.progress-dark{transform:translate(0)}.loader.progress:after,.loader.progress:before,.loader.progress-dark:after,.loader.progress-dark:before{box-sizing:border-box}.loader.progress:before,.loader.progress-dark:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:""}.loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.loader.pulse{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.loader.pulse,.loader.progress-dark,.loader.progress{-webkit-animation:none;animation:none}.loader.progress,.loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\n'] }]
}], ctorParameters: function() {
  return [{ type: void 0, decorators: [{
    type: import_core.Inject,
    args: [NGX_SKELETON_LOADER_CONFIG]
  }, {
    type: import_core.Optional
  }] }];
}, propDecorators: { count: [{
  type: import_core.Input
}], loadingText: [{
  type: import_core.Input
}], appearance: [{
  type: import_core.Input
}], animation: [{
  type: import_core.Input
}], ariaLabel: [{
  type: import_core.Input
}], theme: [{
  type: import_core.Input
}] } });
class NgxSkeletonLoaderModule {
  static forRoot(config) {
    return {
      ngModule: NgxSkeletonLoaderModule,
      providers: [{ provide: NGX_SKELETON_LOADER_CONFIG, useValue: config }]
    };
  }
}
NgxSkeletonLoaderModule.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgxSkeletonLoaderModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule });
NgxSkeletonLoaderModule.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgxSkeletonLoaderModule, declarations: [NgxSkeletonLoaderComponent], imports: [import_common.CommonModule], exports: [NgxSkeletonLoaderComponent] });
NgxSkeletonLoaderModule.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgxSkeletonLoaderModule, imports: [[import_common.CommonModule]] });
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NgxSkeletonLoaderModule, decorators: [{
  type: import_core.NgModule,
  args: [{
    declarations: [NgxSkeletonLoaderComponent],
    imports: [import_common.CommonModule],
    exports: [NgxSkeletonLoaderComponent]
  }]
}] });
