96be273ea45c0bfb2862d17edae714e0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxChainedSlideInService = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const component_store_1 = require("@ngrx/component-store");
const angular2_uuid_1 = require("angular2-uuid");
const rxjs_1 = require("rxjs");
const focus_service_1 = require("app/services/focus.service");
let IxChainedSlideInService = class IxChainedSlideInService extends component_store_1.ComponentStore {
    constructor(focusService) {
        super({ components: new Map() });
        this.focusService = focusService;
        this.components$ = this.select((state) => this.getAliveComponents(state.components));
        this.isTopComponentWide$ = this.select((state) => {
            var _a;
            return !!((_a = this.getAliveComponents(state.components).pop()) === null || _a === void 0 ? void 0 : _a.wide);
        });
        this.initialize = this.effect((trigger$) => {
            return trigger$.pipe((0, rxjs_1.tap)(() => {
                this.setState(() => {
                    return {
                        components: new Map(),
                    };
                });
            }));
        });
        this.pushComponentToStore = this.updater((state, chainedComponentInfo) => {
            const newMap = new Map(state.components);
            const componentId = angular2_uuid_1.UUID.UUID();
            newMap.set(componentId, Object.assign({}, chainedComponentInfo));
            return {
                components: newMap,
            };
        });
        this.popComponent = this.updater((state, id) => {
            const newMap = new Map(state.components);
            newMap.set(id, Object.assign(Object.assign({}, newMap.get(id)), { isComponentAlive: false }));
            this.focusOnTheCloseButton();
            return {
                components: newMap,
            };
        });
        this.closeAll = this.updater(() => {
            this.focusOnTheCloseButton();
            return {
                components: new Map(),
            };
        });
        this.swapComponent = this.updater((state, swapInfo) => {
            const newMap = new Map(state.components);
            const popped = newMap.get(swapInfo.swapComponentId);
            const close$ = popped.close$;
            const componentId = angular2_uuid_1.UUID.UUID();
            newMap.set(componentId, {
                component: swapInfo.component,
                wide: swapInfo.wide,
                data: swapInfo.data,
                close$,
                isComponentAlive: true,
            });
            newMap.set(swapInfo.swapComponentId, Object.assign(Object.assign({}, popped), { isComponentAlive: false }));
            this.focusOnTheCloseButton();
            return {
                components: newMap,
            };
        });
        this.initialize();
    }
    // TODO: Update second argument to options
    open(component, wide = false, data) {
        const close$ = new rxjs_1.Subject();
        this.pushComponentToStore({
            component,
            wide,
            data,
            close$,
            isComponentAlive: true,
        });
        this.focusService.captureCurrentFocus();
        return close$.asObservable().pipe((0, rxjs_1.tap)(() => this.focusService.restoreFocus()));
    }
    mapToSerializedArray(map) {
        return Array.from(map, ([id, componentInfo]) => {
            return {
                id,
                component: componentInfo.component,
                close$: componentInfo.close$,
                wide: componentInfo.wide,
                data: componentInfo.data,
                isComponentAlive: componentInfo.isComponentAlive,
            };
        });
    }
    getAliveComponents(components) {
        return this.mapToSerializedArray(components).filter((component) => component.isComponentAlive);
    }
    focusOnTheCloseButton() {
        (0, rxjs_1.timer)(100).pipe((0, rxjs_1.take)(1)).subscribe(() => this.focusService.focusElementById('ix-close-icon'));
    }
};
exports.IxChainedSlideInService = IxChainedSlideInService;
IxChainedSlideInService.ctorParameters = () => [
    { type: focus_service_1.FocusService }
];
exports.IxChainedSlideInService = IxChainedSlideInService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], IxChainedSlideInService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,