{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ix-chained-slide-in.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ix-chained-slide-in.service.ts"],"sourcesContent":["import { ComponentType } from '@angular/cdk/portal';\nimport { Injectable, Type } from '@angular/core';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { UUID } from 'angular2-uuid';\nimport {\n  Observable, Subject, take, tap, timer,\n} from 'rxjs';\nimport { FocusService } from 'app/services/focus.service';\n\nexport interface IncomingChainedComponent {\n  component: ComponentType<unknown>;\n  wide: boolean;\n  data: unknown;\n  swapComponentId?: string;\n}\n\nexport interface ChainedSlideInState {\n  components: Map<string, ChainedComponent>;\n}\n\nexport interface ChainedComponent {\n  component: Type<unknown>;\n  close$: Subject<ChainedComponentResponse>;\n  wide: boolean;\n  data: unknown;\n  isComponentAlive?: boolean;\n}\n\nexport interface ChainedComponentResponse<T = unknown> {\n  response: T;\n  error: unknown;\n}\n\nexport interface ChainedComponentSerialized {\n  id: string;\n  component: Type<unknown>;\n  close$: Subject<ChainedComponentResponse>;\n  data?: unknown;\n  wide?: boolean;\n  isComponentAlive?: boolean;\n}\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxChainedSlideInService extends ComponentStore<ChainedSlideInState> {\n  readonly components$: Observable<ChainedComponentSerialized[]> = this.select(\n    (state) => this.getAliveComponents(state.components),\n  );\n\n  readonly isTopComponentWide$ = this.select((state) => {\n    return !!(this.getAliveComponents(state.components).pop()?.wide);\n  });\n\n  constructor(private focusService: FocusService) {\n    super({ components: new Map() });\n    this.initialize();\n  }\n\n  initialize = this.effect((trigger$) => {\n    return trigger$.pipe(\n      tap(() => {\n        this.setState(() => {\n          return {\n            components: new Map(),\n          };\n        });\n      }),\n    );\n  });\n\n  private pushComponentToStore = this.updater((state, chainedComponentInfo: ChainedComponent) => {\n    const newMap = new Map(state.components);\n    const componentId = UUID.UUID();\n    newMap.set(componentId, {\n      ...chainedComponentInfo,\n    });\n    return {\n      components: newMap,\n    };\n  });\n\n  // TODO: Update second argument to options\n  open(\n    component: Type<unknown>,\n    wide = false,\n    data?: unknown,\n  ): Observable<ChainedComponentResponse> {\n    const close$ = new Subject<ChainedComponentResponse>();\n    this.pushComponentToStore({\n      component,\n      wide,\n      data,\n      close$,\n      isComponentAlive: true,\n    });\n    this.focusService.captureCurrentFocus();\n    return close$.asObservable().pipe(tap(() => this.focusService.restoreFocus()));\n  }\n\n  popComponent = this.updater((state, id: string) => {\n    const newMap = new Map(state.components);\n    newMap.set(id, { ...newMap.get(id), isComponentAlive: false });\n    this.focusOnTheCloseButton();\n    return {\n      components: newMap,\n    };\n  });\n\n  closeAll = this.updater(() => {\n    this.focusOnTheCloseButton();\n    return {\n      components: new Map(),\n    };\n  });\n\n  swapComponent = this.updater((state, swapInfo: IncomingChainedComponent) => {\n    const newMap = new Map(state.components);\n    const popped = newMap.get(swapInfo.swapComponentId);\n    const close$ = popped.close$;\n    const componentId = UUID.UUID();\n    newMap.set(componentId, {\n      component: swapInfo.component,\n      wide: swapInfo.wide,\n      data: swapInfo.data,\n      close$,\n      isComponentAlive: true,\n    });\n    newMap.set(swapInfo.swapComponentId, {\n      ...popped,\n      isComponentAlive: false,\n    });\n    this.focusOnTheCloseButton();\n    return {\n      components: newMap,\n    };\n  });\n\n  mapToSerializedArray(map: Map<string, ChainedComponent>): ChainedComponentSerialized[] {\n    return Array.from(map, ([id, componentInfo]) => {\n      return {\n        id,\n        component: componentInfo.component,\n        close$: componentInfo.close$,\n        wide: componentInfo.wide,\n        data: componentInfo.data,\n        isComponentAlive: componentInfo.isComponentAlive,\n      } as ChainedComponentSerialized;\n    });\n  }\n\n  getAliveComponents(components: Map<string, ChainedComponent>): ChainedComponentSerialized[] {\n    return this.mapToSerializedArray(components).filter(\n      (component) => component.isComponentAlive,\n    );\n  }\n\n  private focusOnTheCloseButton(): void {\n    timer(100).pipe(take(1)).subscribe(() => this.focusService.focusElementById('ix-close-icon'));\n  }\n}\n"],"version":3}