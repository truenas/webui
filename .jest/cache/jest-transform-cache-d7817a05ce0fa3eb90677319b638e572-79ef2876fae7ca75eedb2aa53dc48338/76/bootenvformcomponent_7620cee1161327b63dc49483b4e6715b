099401fa429ebb39729665b68d3e0e20
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BootEnvironmentFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const name_validator_constant_1 = require("app/constants/name-validator.constant");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const boot_environment_action_enum_1 = require("app/enums/boot-environment-action.enum");
const role_enum_1 = require("app/enums/role.enum");
const boot_env_1 = require("app/helptext/system/boot-env");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const ws_service_1 = require("app/services/ws.service");
let BootEnvironmentFormComponent = class BootEnvironmentFormComponent {
    constructor(translate, formBuilder, ws, errorHandler, changeDetectorRef, slideInRef, slideInData) {
        this.translate = translate;
        this.formBuilder = formBuilder;
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.changeDetectorRef = changeDetectorRef;
        this.slideInRef = slideInRef;
        this.slideInData = slideInData;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.Operations = boot_environment_action_enum_1.BootEnvironmentAction;
        this.formGroup = this.formBuilder.group({
            name: ['', [forms_1.Validators.required, forms_1.Validators.pattern(name_validator_constant_1.nameValidatorRegex)]],
        });
        this.isFormLoading = false;
        this.tooltips = {
            name: boot_env_1.helptextSystemBootenv.create_name_tooltip,
        };
    }
    ngOnInit() {
        if (this.slideInData) {
            this.currentName = this.slideInData.name;
            this.operation = this.slideInData.operation;
            this.setupForm();
        }
    }
    setupForm() {
        switch (this.operation) {
            case this.Operations.Rename:
                this.title = this.translate.instant('Rename Boot Environment');
                this.formGroup.patchValue({
                    name: this.currentName,
                });
                this.tooltips = {
                    name: boot_env_1.helptextSystemBootenv.create_name_tooltip,
                };
                break;
            case this.Operations.Clone:
                this.title = this.translate.instant('Clone Boot Environment');
                this.formGroup.addControl('source', new reactive_forms_1.FormControl({ value: this.currentName, disabled: true }, forms_1.Validators.required));
                this.tooltips = {
                    name: boot_env_1.helptextSystemBootenv.clone_name_tooltip,
                    source: boot_env_1.helptextSystemBootenv.clone_source_tooltip,
                };
                break;
            default:
                this.title = this.translate.instant('Create Boot Environment');
                this.tooltips = {
                    name: boot_env_1.helptextSystemBootenv.create_name_tooltip,
                };
                break;
        }
        this.changeDetectorRef.detectChanges();
    }
    onSubmit() {
        this.isFormLoading = true;
        switch (this.operation) {
            case this.Operations.Create: {
                const createParams = [{
                        name: this.formGroup.value.name,
                    }];
                this.ws.call('bootenv.create', createParams).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
                    next: () => {
                        this.isFormLoading = false;
                        this.slideInRef.close(true);
                    },
                    error: (error) => {
                        this.isFormLoading = false;
                        this.slideInRef.close(false);
                        this.errorHandler.handleWsFormError(error, this.formGroup);
                    },
                });
                break;
            }
            case this.Operations.Rename: {
                const renameParams = [
                    this.currentName,
                    {
                        name: this.formGroup.value.name,
                    },
                ];
                this.ws.call('bootenv.update', renameParams).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
                    next: () => {
                        this.isFormLoading = false;
                        this.slideInRef.close(true);
                    },
                    error: (error) => {
                        this.isFormLoading = false;
                        this.slideInRef.close(false);
                        this.errorHandler.handleWsFormError(error, this.formGroup);
                    },
                });
                break;
            }
            case this.Operations.Clone: {
                const cloneParams = [{
                        name: this.formGroup.value.name,
                        source: this.currentName,
                    }];
                this.ws.call('bootenv.create', cloneParams).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
                    next: () => {
                        this.isFormLoading = false;
                        this.slideInRef.close(true);
                    },
                    error: (error) => {
                        this.isFormLoading = false;
                        this.slideInRef.close(false);
                        this.errorHandler.handleWsFormError(error, this.formGroup);
                    },
                });
                break;
            }
        }
    }
};
exports.BootEnvironmentFormComponent = BootEnvironmentFormComponent;
BootEnvironmentFormComponent.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: reactive_forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_1.ChangeDetectorRef },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.BootEnvironmentFormComponent = BootEnvironmentFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-bootenv-form',
        template: require("./bootenv-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header_component_1.IxModalHeaderComponent,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_input_component_1.IxInputComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
        ],
    })
], BootEnvironmentFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,