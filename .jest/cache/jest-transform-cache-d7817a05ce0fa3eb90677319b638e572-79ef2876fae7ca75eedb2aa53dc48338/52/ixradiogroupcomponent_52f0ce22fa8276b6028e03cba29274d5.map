{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-radio-group/ix-radio-group.component.ts","mappings":";;;;;;;;;AAAA,4CAA4C;AAC5C,wCAEuB;AACvB,0CAEwB;AACxB,mDAAwF;AACxF,yDAAqD;AACrD,8CAAsD;AAGtD,6GAAwG;AACxG,0GAAqG;AACrG,uGAAkG;AAClG,uEAAmE;AACnE,6EAAyE;AAqBlE,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;IAYhC,YACS,gBAA2B,EAC1B,GAAsB;QADvB,qBAAgB,GAAhB,gBAAgB,CAAW;QAC1B,QAAG,GAAH,GAAG,CAAmB;QALhC,eAAU,GAAG,KAAK,CAAC;QAsBnB,aAAQ,GAA4B,GAAS,EAAE,GAAE,CAAC,CAAC;QACnD,YAAO,GAAe,GAAS,EAAE,GAAE,CAAC,CAAC;QAhBnC,IAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,IAAI,CAAC;IAC7C,CAAC;IAED,IAAI,SAAS;QACX,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YAC9C,OAAO,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAKD,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,gBAAgB,CAAC,QAAiC;QAChD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,iBAAiB,CAAC,SAAqB;QACrC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC3B,CAAC;IAED,gBAAgB,CAAC,UAAmB;QAClC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,eAAe,CAAC,KAAqB;QACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAe,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;;AAvDU,sDAAqB;;;;;;oBAC/B,YAAK;mBACL,YAAK;sBACL,YAAK;uBACL,YAAK;sBACL,YAAK;2BACL,YAAK;8BACL,YAAK;;gCAPK,qBAAqB;IAnBjC,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,gBAAgB;QAE1B,oDAA8C;QAC9C,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE;YACP,qCAAgB;YAChB,qBAAa;YACb,sBAAc;YACd,oCAAgB;YAChB,uCAAiB;YACjB,kBAAS;YACT,sBAAe;YACf,+CAAqB;YACrB,8BAAa;SACd;KACF,CAAC;GACW,qBAAqB,CAwDjC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-radio-group/ix-radio-group.component.ts"],"sourcesContent":["import { AsyncPipe } from '@angular/common';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, Input,\n} from '@angular/core';\nimport {\n  ControlValueAccessor, NgControl,\n} from '@angular/forms';\nimport { MatRadioChange, MatRadioGroup, MatRadioButton } from '@angular/material/radio';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { RadioOption } from 'app/interfaces/option.interface';\nimport { IxErrorsComponent } from 'app/modules/forms/ix-forms/components/ix-errors/ix-errors.component';\nimport { IxLabelComponent } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.component';\nimport { TestOverrideDirective } from 'app/modules/test-id/test-override/test-override.directive';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { TooltipComponent } from 'app/modules/tooltip/tooltip.component';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-radio-group',\n  styleUrls: ['./ix-radio-group.component.scss'],\n  templateUrl: './ix-radio-group.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    IxLabelComponent,\n    MatRadioGroup,\n    MatRadioButton,\n    TooltipComponent,\n    IxErrorsComponent,\n    AsyncPipe,\n    TranslateModule,\n    TestOverrideDirective,\n    TestDirective,\n  ],\n})\nexport class IxRadioGroupComponent implements ControlValueAccessor {\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() tooltip: string;\n  @Input() required: boolean;\n  @Input() options: Observable<RadioOption[]>;\n  @Input() inlineFields: boolean;\n  @Input() inlineFieldFlex: string;\n\n  isDisabled = false;\n  value: string;\n\n  constructor(\n    public controlDirective: NgControl,\n    private cdr: ChangeDetectorRef,\n  ) {\n    this.controlDirective.valueAccessor = this;\n  }\n\n  get fieldFlex(): string {\n    if (!this.inlineFields) {\n      return '100%';\n    }\n\n    if (this.inlineFields && this.inlineFieldFlex) {\n      return this.inlineFieldFlex;\n    }\n\n    return '50%';\n  }\n\n  onChange: (value: string) => void = (): void => {};\n  onTouch: () => void = (): void => {};\n\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(onChange: (value: string) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: () => void): void {\n    this.onTouch = onTouched;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  onRadiosChanged(event: MatRadioChange): void {\n    this.value = event.value as string;\n    this.onChange(this.value);\n  }\n}\n"],"version":3}