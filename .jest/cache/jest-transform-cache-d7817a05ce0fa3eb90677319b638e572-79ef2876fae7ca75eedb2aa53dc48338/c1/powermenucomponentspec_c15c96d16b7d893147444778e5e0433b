2c414b1318a84ce2d4d198fcce35e460
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const testing_1 = require("@angular/material/menu/testing");
const router_1 = require("@angular/router");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const power_menu_component_1 = require("app/modules/layout/topbar/power-menu/power-menu.component");
const auth_service_1 = require("app/services/auth/auth.service");
describe('PowerMenuComponent', () => {
    let spectator;
    let loader;
    let menu;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: power_menu_component_1.PowerMenuComponent,
        providers: [
            (0, jest_1.mockProvider)(auth_service_1.AuthService, {
                hasRole: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(router_1.Router),
        ],
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        menu = yield loader.getHarness(testing_1.MatMenuHarness);
        yield menu.open();
    }));
    it('has a Restart menu item that restarts system after confirmation', () => __awaiter(void 0, void 0, void 0, function* () {
        const restart = yield menu.getItems({ text: /Restart$/ });
        yield restart[0].click();
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith(expect.objectContaining({
            message: 'Restart the system?',
        }));
        expect(spectator.inject(router_1.Router).navigate).toHaveBeenCalledWith(['/system-tasks/restart'], { skipLocationChange: true });
    }));
    it('has a Shutdown menu item that shuts down system after confirmation', () => __awaiter(void 0, void 0, void 0, function* () {
        const shutdown = yield menu.getItems({ text: /Shut Down$/ });
        yield shutdown[0].click();
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith(expect.objectContaining({
            message: 'Shut down the system?',
        }));
        expect(spectator.inject(router_1.Router).navigate).toHaveBeenCalledWith(['/system-tasks/shutdown'], { skipLocationChange: true });
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvbGF5b3V0L3RvcGJhci9wb3dlci1tZW51L3Bvd2VyLW1lbnUuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQSwwREFBeUU7QUFDekUsNERBQWdFO0FBQ2hFLDRDQUF5QztBQUN6QyxpREFBeUY7QUFDekYsK0JBQTBCO0FBQzFCLHNFQUFrRTtBQUNsRSxvR0FBK0Y7QUFDL0YsaUVBQTZEO0FBRTdELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBSSxTQUF3QyxDQUFDO0lBQzdDLElBQUksTUFBcUIsQ0FBQztJQUMxQixJQUFJLElBQW9CLENBQUM7SUFDekIsTUFBTSxlQUFlLEdBQUcsSUFBQSw2QkFBc0IsRUFBQztRQUM3QyxTQUFTLEVBQUUseUNBQWtCO1FBQzdCLFNBQVMsRUFBRTtZQUNULElBQUEsbUJBQVksRUFBQywwQkFBVyxFQUFFO2dCQUN4QixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLFNBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQzthQUNqQyxDQUFDO1lBQ0YsSUFBQSxtQkFBWSxFQUFDLDhCQUFhLEVBQUU7Z0JBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsU0FBRSxFQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pDLENBQUM7WUFDRixJQUFBLG1CQUFZLEVBQUMsZUFBTSxDQUFDO1NBQ3JCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQVMsRUFBRTtRQUNwQixTQUFTLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLG1DQUF5QixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0QsSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyx3QkFBYyxDQUFDLENBQUM7UUFDL0MsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpRUFBaUUsRUFBRSxHQUFTLEVBQUU7UUFDL0UsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDMUQsTUFBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFekIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsOEJBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUMzRixPQUFPLEVBQUUscUJBQXFCO1NBQy9CLENBQUMsQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMxSCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9FQUFvRSxFQUFFLEdBQVMsRUFBRTtRQUNsRixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM3RCxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUUxQixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyw4QkFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQzNGLE9BQU8sRUFBRSx1QkFBdUI7U0FDakMsQ0FBQyxDQUFDLENBQUM7UUFDSixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzNILENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9sYXlvdXQvdG9wYmFyL3Bvd2VyLW1lbnUvcG93ZXItbWVudS5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXJuZXNzTG9hZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgVGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHsgTWF0TWVudUhhcm5lc3MgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9tZW51L3Rlc3RpbmcnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudEZhY3RvcnksIG1vY2tQcm92aWRlciwgU3BlY3RhdG9yIH0gZnJvbSAnQG5nbmVhdC9zcGVjdGF0b3IvamVzdCc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL2RpYWxvZy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBQb3dlck1lbnVDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9sYXlvdXQvdG9wYmFyL3Bvd2VyLW1lbnUvcG93ZXItbWVudS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvYXV0aC9hdXRoLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnUG93ZXJNZW51Q29tcG9uZW50JywgKCkgPT4ge1xuICBsZXQgc3BlY3RhdG9yOiBTcGVjdGF0b3I8UG93ZXJNZW51Q29tcG9uZW50PjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcbiAgbGV0IG1lbnU6IE1hdE1lbnVIYXJuZXNzO1xuICBjb25zdCBjcmVhdGVDb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnRGYWN0b3J5KHtcbiAgICBjb21wb25lbnQ6IFBvd2VyTWVudUNvbXBvbmVudCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgIG1vY2tQcm92aWRlcihBdXRoU2VydmljZSwge1xuICAgICAgICBoYXNSb2xlOiBqZXN0LmZuKCgpID0+IG9mKHRydWUpKSxcbiAgICAgIH0pLFxuICAgICAgbW9ja1Byb3ZpZGVyKERpYWxvZ1NlcnZpY2UsIHtcbiAgICAgICAgY29uZmlybTogamVzdC5mbigoKSA9PiBvZih0cnVlKSksXG4gICAgICB9KSxcbiAgICAgIG1vY2tQcm92aWRlcihSb3V0ZXIpLFxuICAgIF0sXG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIHNwZWN0YXRvciA9IGNyZWF0ZUNvbXBvbmVudCgpO1xuICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKHNwZWN0YXRvci5maXh0dXJlKTtcbiAgICBtZW51ID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0TWVudUhhcm5lc3MpO1xuICAgIGF3YWl0IG1lbnUub3BlbigpO1xuICB9KTtcblxuICBpdCgnaGFzIGEgUmVzdGFydCBtZW51IGl0ZW0gdGhhdCByZXN0YXJ0cyBzeXN0ZW0gYWZ0ZXIgY29uZmlybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3RhcnQgPSBhd2FpdCBtZW51LmdldEl0ZW1zKHsgdGV4dDogL1Jlc3RhcnQkLyB9KTtcbiAgICBhd2FpdCByZXN0YXJ0WzBdLmNsaWNrKCk7XG5cbiAgICBleHBlY3Qoc3BlY3RhdG9yLmluamVjdChEaWFsb2dTZXJ2aWNlKS5jb25maXJtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICBtZXNzYWdlOiAnUmVzdGFydCB0aGUgc3lzdGVtPycsXG4gICAgfSkpO1xuICAgIGV4cGVjdChzcGVjdGF0b3IuaW5qZWN0KFJvdXRlcikubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnL3N5c3RlbS10YXNrcy9yZXN0YXJ0J10sIHsgc2tpcExvY2F0aW9uQ2hhbmdlOiB0cnVlIH0pO1xuICB9KTtcblxuICBpdCgnaGFzIGEgU2h1dGRvd24gbWVudSBpdGVtIHRoYXQgc2h1dHMgZG93biBzeXN0ZW0gYWZ0ZXIgY29uZmlybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNodXRkb3duID0gYXdhaXQgbWVudS5nZXRJdGVtcyh7IHRleHQ6IC9TaHV0IERvd24kLyB9KTtcbiAgICBhd2FpdCBzaHV0ZG93blswXS5jbGljaygpO1xuXG4gICAgZXhwZWN0KHNwZWN0YXRvci5pbmplY3QoRGlhbG9nU2VydmljZSkuY29uZmlybSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgbWVzc2FnZTogJ1NodXQgZG93biB0aGUgc3lzdGVtPycsXG4gICAgfSkpO1xuICAgIGV4cGVjdChzcGVjdGF0b3IuaW5qZWN0KFJvdXRlcikubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnL3N5c3RlbS10YXNrcy9zaHV0ZG93biddLCB7IHNraXBMb2NhdGlvbkNoYW5nZTogdHJ1ZSB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==