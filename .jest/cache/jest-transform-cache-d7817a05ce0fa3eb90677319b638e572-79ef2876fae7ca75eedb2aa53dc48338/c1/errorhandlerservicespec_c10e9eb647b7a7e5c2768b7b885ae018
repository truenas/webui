a0cd106f801897a11ca592c6fdaac5ae
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("@angular/common/http");
const core_1 = require("@angular/core");
const jest_1 = require("@ngneat/spectator/jest");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const job_state_enum_1 = require("app/enums/job-state.enum");
const response_error_type_enum_1 = require("app/enums/response-error-type.enum");
const websocket_error_name_enum_1 = require("app/enums/websocket-error-name.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const error = new Error('Dummy Error');
const wsError = {
    error: 11,
    errname: websocket_error_name_enum_1.WebSocketErrorName.Again,
    type: response_error_type_enum_1.ResponseErrorType.Validation,
    reason: '[EINVAL] user_update.smb: This attribute cannot be changed\n[EINVAL] user_update.smb: Password must be changed in order to enable SMB authentication\n',
    trace: {},
    extra: [],
};
const failedJob = {
    method: 'cloudsync.sync_onetime',
    description: null,
    error: 'DUMMY_ERROR',
    exception: 'EXCEPTION',
    exc_info: null,
    logs_excerpt: 'LOGS',
    state: job_state_enum_1.JobState.Failed,
};
const excInfo = {
    repr: 'ValidationErrors()',
    type: 'VALIDATION',
    extra: [
        [
            'cloud_sync_sync_onetime.path',
            'DUMMY_ERROR',
            22,
        ],
    ],
};
const httpError = {
    error: { name: 'This error' },
    name: 'HttpErrorResponse',
    message: 'This error occurred',
    headers: new http_1.HttpHeaders(),
    ok: false,
    status: 409,
    statusText: 'Conflict',
    type: http_1.HttpEventType.Response,
    url: '',
};
describe('ErrorHandlerService', () => {
    let spectator;
    const createService = (0, jest_1.createServiceFactory)({
        service: error_handler_service_1.ErrorHandlerService,
        providers: [
            (0, jest_1.mockProvider)(core_1.Injector, {
                get: jest.fn(),
            }),
        ],
    });
    beforeEach(() => {
        jest.resetAllMocks();
        spectator = createService();
        const dialogService = spectator.inject(dialog_service_1.DialogService);
        Object.defineProperty(dialogService, 'error', {
            value: jest.fn(() => (0, rxjs_1.of)(true)),
        });
        Object.defineProperty(spectator.service, 'dialog', {
            get: () => dialogService,
        });
        const translateService = spectator.inject(core_2.TranslateService);
        Object.defineProperty(spectator.service, 'translate', {
            value: translateService,
        });
        Object.defineProperty(spectator.service, 'logToSentry', {
            value: jest.fn(),
        });
        jest.spyOn(console, 'error').mockImplementation();
    });
    afterAll(() => {
        jest.restoreAllMocks();
    });
    describe('handleError', () => {
        it('logs normal error to console and sentry', () => {
            jest.spyOn(spectator.service, 'parseError');
            spectator.service.handleError(error);
            expect(console.error).toHaveBeenCalledWith(error);
            expect(spectator.service.parseError).toHaveBeenCalledWith(error);
            expect(spectator.service.logToSentry).toHaveBeenCalledWith({
                message: 'Dummy Error',
                title: 'Error',
            });
        });
        it('does not log Websocket CloseEvent to Sentry', () => {
            spectator.service.handleError(new CloseEvent('close'));
            expect(spectator.service.logToSentry).not.toHaveBeenCalled();
        });
        it('logs websocket error', () => {
            spectator.service.handleError(wsError);
            expect(spectator.service.logToSentry).toHaveBeenCalledWith({
                backtrace: '',
                message: wsError.reason,
                title: 'VALIDATION',
            });
        });
        it('logs job errors', () => {
            spectator.service.handleError(failedJob);
            expect(spectator.service.logToSentry).toHaveBeenCalledWith({
                title: 'FAILED',
                backtrace: 'LOGS',
                message: 'DUMMY_ERROR',
            });
        });
        it('logs job error for jobs with `extra` available', () => {
            spectator.service.handleError(Object.assign(Object.assign({}, failedJob), { exc_info: excInfo }));
            expect(spectator.service.logToSentry).toHaveBeenCalledWith([{
                    backtrace: 'EXCEPTION',
                    message: 'DUMMY_ERROR',
                    title: 'Error: path',
                }]);
        });
    });
    describe('parseHttpError', () => {
        it('returns correct error object with 409 error', () => {
            const errorReport = spectator.service.parseHttpError(httpError);
            expect(errorReport).toEqual([{ message: 'This error', title: 'Error' }]);
        });
        it('returns correct error object with 409 error with object', () => {
            const errorReport = spectator.service.parseHttpError(Object.assign(Object.assign({}, httpError), { error: { name: ['This error'] } }));
            expect(errorReport).toEqual([{ message: 'This error', title: 'Error' }]);
        });
        it('returns correct object with 400 error', () => {
            const errorReport = spectator.service.parseHttpError(Object.assign(Object.assign({}, httpError), { status: 400, statusText: 'Bad Request' }));
            expect(errorReport).toEqual([{ message: 'This error', title: 'Error' }]);
        });
        it('returns correct object with 400 error without error object', () => {
            const errorReport = spectator.service.parseHttpError(Object.assign(Object.assign({}, httpError), { status: 400, statusText: 'Bad Request', error: 'That error' }));
            expect(errorReport).toEqual({ message: 'That error', title: 'Error (400)' });
        });
        it('returns correct object with 404 error', () => {
            const errorReport = spectator.service.parseHttpError(Object.assign(Object.assign({}, httpError), { status: 404, statusText: 'Not Found' }));
            expect(errorReport).toEqual({ message: 'This error occurred', title: 'Not Found' });
        });
        it('returns correct object with 500 error', () => {
            const errorReport = spectator.service.parseHttpError(Object.assign(Object.assign({}, httpError), { status: 500, statusText: 'Bad Request', error: { error_message: 'Even error' } }));
            expect(errorReport).toEqual({ message: 'Even error', title: 'Error (500)' });
        });
        it('returns correct object with 500 error and string', () => {
            const errorReport = spectator.service.parseHttpError(Object.assign(Object.assign({}, httpError), { status: 500, statusText: 'Bad Request', message: 'Odd error' }));
            expect(errorReport).toEqual({ message: 'Server error: Odd error', title: 'Error (500)' });
        });
        it('returns proper object when unknown error', () => {
            const errorReport = spectator.service.parseHttpError(Object.assign(Object.assign({}, httpError), { status: 510, statusText: 'Bad Request', error: 'Odd error' }));
            expect(console.error).toHaveBeenCalledWith(Object.assign(Object.assign({}, httpError), { status: 510, statusText: 'Bad Request', error: 'Odd error' }));
            expect(errorReport).toEqual({ message: 'This error occurred', title: 'Error (510)' });
        });
    });
    describe('parseError', () => {
        it('parses a websocket error', () => {
            const errorReport = spectator.service.parseError(wsError);
            expect(errorReport).toEqual({
                title: 'VALIDATION',
                message: wsError.reason,
                backtrace: '',
            });
        });
        it('parses a failed job', () => {
            const errorReport = spectator.service.parseError(failedJob);
            expect(errorReport).toEqual({
                title: 'FAILED',
                message: 'DUMMY_ERROR',
                backtrace: 'LOGS',
            });
        });
        it('parses a failed job with exc info', () => {
            const errorReport = spectator.service.parseError(Object.assign(Object.assign({}, failedJob), { exc_info: excInfo }));
            expect(errorReport).toEqual([{
                    title: 'Error: path',
                    message: 'DUMMY_ERROR',
                    backtrace: 'EXCEPTION',
                }]);
        });
        it('parses a generic JS error', () => {
            const errorReport = spectator.service.parseError(error);
            expect(errorReport).toEqual({
                title: 'Error',
                message: 'Dummy Error',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,