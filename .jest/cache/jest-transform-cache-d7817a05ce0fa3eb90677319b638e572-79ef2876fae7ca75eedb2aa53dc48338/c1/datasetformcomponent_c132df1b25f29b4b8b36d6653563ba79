38685f6a043a9ae9f2071a382c9e2371
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const dataset_enum_1 = require("app/enums/dataset.enum");
const mnt_path_enum_1 = require("app/enums/mnt-path.enum");
const role_enum_1 = require("app/enums/role.enum");
const service_name_enum_1 = require("app/enums/service-name.enum");
const dataset_form_1 = require("app/helptext/storage/volumes/datasets/dataset-form");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const encryption_section_component_1 = require("app/pages/datasets/components/dataset-form/sections/encryption-section/encryption-section.component");
const name_and_options_section_component_1 = require("app/pages/datasets/components/dataset-form/sections/name-and-options-section/name-and-options-section.component");
const other_options_section_component_1 = require("app/pages/datasets/components/dataset-form/sections/other-options-section/other-options-section.component");
const quotas_section_component_1 = require("app/pages/datasets/components/dataset-form/sections/quotas-section/quotas-section.component");
const dataset_form_service_1 = require("app/pages/datasets/components/dataset-form/utils/dataset-form.service");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const services_actions_1 = require("app/store/services/services.actions");
let DatasetFormComponent = class DatasetFormComponent {
    get areSubFormsValid() {
        return this.isNameAndOptionsValid && this.isQuotaValid && this.isEncryptionValid && this.isNameAndOptionsValid;
    }
    get isNew() {
        return !this.existingDataset;
    }
    get createSections() {
        const sections = [
            this.nameAndOptionsSection,
            this.encryptionSection,
            this.otherOptionsSection,
        ];
        if (this.isAdvancedMode) {
            sections.push(this.quotasSection);
        }
        return sections;
    }
    get updateSections() {
        return [
            this.nameAndOptionsSection,
            this.otherOptionsSection,
        ];
    }
    constructor(ws, cdr, dialog, datasetFormService, router, errorHandler, snackbar, translate, slideInRef, store$, slideInData) {
        this.ws = ws;
        this.cdr = cdr;
        this.dialog = dialog;
        this.datasetFormService = datasetFormService;
        this.router = router;
        this.errorHandler = errorHandler;
        this.snackbar = snackbar;
        this.translate = translate;
        this.slideInRef = slideInRef;
        this.store$ = store$;
        this.slideInData = slideInData;
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.isNameAndOptionsValid = true;
        this.isQuotaValid = true;
        this.isEncryptionValid = true;
        this.isOtherOptionsValid = true;
        this.isLoading = false;
        this.isAdvancedMode = false;
        this.datasetPreset = dataset_enum_1.DatasetPreset.Generic;
        this.form = new forms_1.FormGroup({});
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        if (((_a = this.slideInData) === null || _a === void 0 ? void 0 : _a.datasetId) && !((_b = this.slideInData) === null || _b === void 0 ? void 0 : _b.isNew)) {
            this.setForEdit();
        }
        if (((_c = this.slideInData) === null || _c === void 0 ? void 0 : _c.datasetId) && ((_d = this.slideInData) === null || _d === void 0 ? void 0 : _d.isNew)) {
            this.setForNew();
        }
    }
    ngAfterViewInit() {
        this.nameAndOptionsSection.form.controls.share_type.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((datasetPreset) => {
            this.datasetPreset = datasetPreset;
        });
    }
    setForNew() {
        this.isLoading = true;
        this.cdr.markForCheck();
        this.datasetFormService.checkAndWarnForLengthAndDepth(this.slideInData.datasetId).pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)(() => this.datasetFormService.loadDataset(this.slideInData.datasetId)), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (dataset) => {
                this.parentDataset = dataset;
                this.isLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialog.error(this.errorHandler.parseError(error));
            },
        });
    }
    setForEdit() {
        const requests = [
            this.datasetFormService.loadDataset(this.slideInData.datasetId),
        ];
        const parentId = this.slideInData.datasetId.split('/').slice(0, -1).join('/');
        if (parentId) {
            requests.push(this.datasetFormService.loadDataset(parentId));
        }
        this.isLoading = true;
        this.cdr.markForCheck();
        (0, rxjs_1.forkJoin)(requests).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ([existingDataset, parent]) => {
                this.existingDataset = existingDataset;
                this.parentDataset = parent;
                this.isLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialog.error(this.errorHandler.parseError(error));
            },
        });
    }
    toggleAdvancedMode() {
        this.isAdvancedMode = !this.isAdvancedMode;
        this.cdr.markForCheck();
    }
    onSwitchToAdvanced() {
        this.isAdvancedMode = true;
    }
    onSubmit() {
        this.isLoading = true;
        this.cdr.markForCheck();
        const payload = this.preparePayload();
        const request$ = this.isNew
            ? this.ws.call('pool.dataset.create', [payload])
            : this.ws.call('pool.dataset.update', [this.existingDataset.id, payload]);
        request$.pipe((0, rxjs_1.switchMap)((dataset) => this.createSmb(dataset)), (0, rxjs_1.switchMap)((dataset) => this.createNfs(dataset)), (0, rxjs_1.switchMap)((dataset) => {
            return this.checkForAclOnParent().pipe((0, rxjs_1.switchMap)((isAcl) => (0, rxjs_1.combineLatest)([(0, rxjs_1.of)(dataset), isAcl ? this.aclDialog() : (0, rxjs_1.of)(false)])));
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ([createdDataset, shouldGoToEditor]) => {
                const datasetPresetFormValue = this.nameAndOptionsSection.datasetPresetForm.value;
                if (this.nameAndOptionsSection.canCreateSmb && datasetPresetFormValue.create_smb) {
                    this.store$.dispatch((0, services_actions_1.checkIfServiceIsEnabled)({ serviceName: service_name_enum_1.ServiceName.Cifs }));
                }
                if (this.nameAndOptionsSection.canCreateNfs && datasetPresetFormValue.create_nfs) {
                    this.store$.dispatch((0, services_actions_1.checkIfServiceIsEnabled)({ serviceName: service_name_enum_1.ServiceName.Nfs }));
                }
                this.isLoading = false;
                this.cdr.markForCheck();
                this.slideInRef.close(createdDataset);
                if (shouldGoToEditor) {
                    this.router.navigate(['/', 'datasets', 'acl', 'edit'], {
                        queryParams: { path: createdDataset.mountpoint },
                    });
                }
                else {
                    this.snackbar.success(this.isNew
                        ? this.translate.instant('Switched to new dataset «{name}».', { name: (0, dataset_utils_1.getDatasetLabel)(createdDataset) })
                        : this.translate.instant('Dataset «{name}» updated.', { name: (0, dataset_utils_1.getDatasetLabel)(createdDataset) }));
                }
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialog.error(this.errorHandler.parseError(error));
            },
        });
    }
    preparePayload() {
        const sections = this.isNew
            ? this.createSections
            : this.updateSections;
        return sections.reduce((payload, section) => {
            return Object.assign(Object.assign({}, payload), section.getPayload());
        }, {});
    }
    checkForAclOnParent() {
        if (!this.parentDataset) {
            return (0, rxjs_1.of)(false);
        }
        const parentPath = `/mnt/${this.parentDataset.id}`;
        return this.ws.call('filesystem.acl_is_trivial', [parentPath]).pipe((0, rxjs_1.map)((isTrivial) => !isTrivial));
    }
    aclDialog() {
        return this.dialog.confirm({
            title: dataset_form_1.helptextDatasetForm.afterSubmitDialog.title,
            message: dataset_form_1.helptextDatasetForm.afterSubmitDialog.message,
            hideCheckbox: true,
            buttonText: dataset_form_1.helptextDatasetForm.afterSubmitDialog.actionBtn,
            cancelText: dataset_form_1.helptextDatasetForm.afterSubmitDialog.cancelBtn,
        });
    }
    createSmb(dataset) {
        const datasetPresetFormValue = this.nameAndOptionsSection.datasetPresetForm.value;
        if (!this.isNew || !datasetPresetFormValue.create_smb || !this.nameAndOptionsSection.canCreateSmb) {
            return (0, rxjs_1.of)(dataset);
        }
        return this.ws.call('sharing.smb.create', [{
                name: datasetPresetFormValue.smb_name,
                path: `${mnt_path_enum_1.mntPath}/${dataset.id}`,
            }]).pipe((0, rxjs_1.switchMap)(() => (0, rxjs_1.of)(dataset)), (0, rxjs_1.catchError)((error) => this.rollBack(dataset, error)));
    }
    createNfs(dataset) {
        const datasetPresetFormValue = this.nameAndOptionsSection.datasetPresetForm.value;
        if (!this.isNew || !datasetPresetFormValue.create_nfs || !this.nameAndOptionsSection.canCreateNfs) {
            return (0, rxjs_1.of)(dataset);
        }
        return this.ws.call('sharing.nfs.create', [{
                path: `${mnt_path_enum_1.mntPath}/${dataset.id}`,
            }]).pipe((0, rxjs_1.switchMap)(() => (0, rxjs_1.of)(dataset)), (0, rxjs_1.catchError)((error) => this.rollBack(dataset, error)));
    }
    rollBack(dataset, error) {
        return this.ws.call('pool.dataset.delete', [dataset.id, { recursive: true, force: true }]).pipe((0, rxjs_1.switchMap)(() => {
            throw error;
        }));
    }
};
exports.DatasetFormComponent = DatasetFormComponent;
DatasetFormComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: dialog_service_1.DialogService },
    { type: dataset_form_service_1.DatasetFormService },
    { type: router_1.Router },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: snackbar_service_1.SnackbarService },
    { type: core_2.TranslateService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: store_1.Store },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
DatasetFormComponent.propDecorators = {
    nameAndOptionsSection: [{ type: core_1.ViewChild, args: [name_and_options_section_component_1.NameAndOptionsSectionComponent,] }],
    encryptionSection: [{ type: core_1.ViewChild, args: [encryption_section_component_1.EncryptionSectionComponent,] }],
    quotasSection: [{ type: core_1.ViewChild, args: [quotas_section_component_1.QuotasSectionComponent,] }],
    otherOptionsSection: [{ type: core_1.ViewChild, args: [other_options_section_component_1.OtherOptionsSectionComponent,] }]
};
exports.DatasetFormComponent = DatasetFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-dataset-form',
        template: require("./dataset-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], DatasetFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,