745a380bb02cb1c6b441c22446ab33a9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxSelectComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const core_2 = require("@angular/material/core");
const form_field_1 = require("@angular/material/form-field");
const progress_spinner_1 = require("@angular/material/progress-spinner");
const select_1 = require("@angular/material/select");
const tooltip_1 = require("@angular/material/tooltip");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_3 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
const ix_label_component_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.component");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_override_directive_1 = require("app/modules/test-id/test-override/test-override.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
const tooltip_component_1 = require("app/modules/tooltip/tooltip.component");
let IxSelectComponent = class IxSelectComponent {
    get selectedLabel() {
        if (this.value === undefined) {
            return '';
        }
        if (this.multiple) {
            return this.multipleLabels.join(',');
        }
        const selectedOption = this.opts.find((opt) => this.compareWith(opt.value, this.value));
        return selectedOption ? selectedOption.label : '';
    }
    get multipleLabels() {
        const selectedLabels = [];
        this.opts.forEach((opt) => {
            if (Array.isArray(this.value) && this.value.some((val) => val === opt.value)) {
                selectedLabels.push(` ${opt.label}`);
            }
        });
        return selectedLabels.length > 0 ? selectedLabels : [];
    }
    get disabledState() {
        return this.isDisabled || !this.options;
    }
    get isLoadingState() {
        return this.isLoading || !this.options;
    }
    constructor(controlDirective, cdr) {
        this.controlDirective = controlDirective;
        this.cdr = cdr;
        this.emptyValue = null;
        this.hideEmpty = false;
        this.showSelectAll = false;
        this.compareWith = (val1, val2) => val1 === val2;
        this.isDisabled = false;
        this.hasErrorInOptions = false;
        this.isLoading = false;
        this.selectAllState = {
            checked: false,
        };
        this.opts = [];
        this.onChange = () => { };
        this.onTouch = () => { };
        this.controlDirective.valueAccessor = this;
    }
    ngOnChanges() {
        if (!this.options) {
            this.hasErrorInOptions = true;
        }
        else {
            this.hasErrorInOptions = false;
            this.isLoading = true;
            this.opts$ = this.options.pipe((0, operators_1.catchError)((error) => {
                console.error(error);
                this.hasErrorInOptions = true;
                return rxjs_1.EMPTY;
            }), (0, operators_1.tap)(() => {
                this.isLoading = false;
                this.cdr.markForCheck();
            }));
            this.opts$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((opts) => {
                this.opts = opts;
            });
        }
    }
    ngOnInit() {
        if (this.multiple) {
            this.controlDirective.control.valueChanges.pipe((0, operators_1.debounceTime)(0), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                this.updateSelectAllState();
                this.cdr.markForCheck();
            });
        }
    }
    writeValue(val) {
        this.value = val;
        this.cdr.markForCheck();
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.cdr.markForCheck();
    }
    onOptionTooltipClicked(event) {
        event.stopPropagation();
    }
    selectAll() {
        if (this.multiple) {
            this.value = this.opts.map((opt) => opt.value);
            this.onChange(this.value);
        }
    }
    unselectAll() {
        this.value = [];
        this.onChange(this.value);
    }
    toggleSelectAll(checked) {
        if (checked) {
            this.selectAll();
        }
        else {
            this.unselectAll();
        }
        this.updateSelectAllState();
    }
    updateSelectAllState() {
        if (Array.isArray(this.value)) {
            if (this.value.length === 0) {
                this.selectAllState.checked = false;
            }
            else if (this.value.length === this.opts.length) {
                this.selectAllState.checked = true;
            }
            else {
                this.selectAllState.checked = false;
            }
        }
    }
};
exports.IxSelectComponent = IxSelectComponent;
IxSelectComponent.ctorParameters = () => [
    { type: forms_1.NgControl },
    { type: core_1.ChangeDetectorRef }
];
IxSelectComponent.propDecorators = {
    label: [{ type: core_1.Input }],
    hint: [{ type: core_1.Input }],
    options: [{ type: core_1.Input }],
    required: [{ type: core_1.Input }],
    tooltip: [{ type: core_1.Input }],
    multiple: [{ type: core_1.Input }],
    emptyValue: [{ type: core_1.Input }],
    hideEmpty: [{ type: core_1.Input }],
    showSelectAll: [{ type: core_1.Input }],
    compareWith: [{ type: core_1.Input }]
};
exports.IxSelectComponent = IxSelectComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-select',
        template: require("./ix-select.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_label_component_1.IxLabelComponent,
            select_1.MatSelect,
            forms_1.FormsModule,
            select_1.MatSelectTrigger,
            ix_icon_component_1.IxIconComponent,
            core_2.MatOption,
            tooltip_1.MatTooltip,
            tooltip_component_1.TooltipComponent,
            progress_spinner_1.MatProgressSpinner,
            ix_errors_component_1.IxErrorsComponent,
            form_field_1.MatHint,
            common_1.AsyncPipe,
            core_3.TranslateModule,
            test_directive_1.TestDirective,
            test_override_directive_1.TestOverrideDirective,
        ],
    })
], IxSelectComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,