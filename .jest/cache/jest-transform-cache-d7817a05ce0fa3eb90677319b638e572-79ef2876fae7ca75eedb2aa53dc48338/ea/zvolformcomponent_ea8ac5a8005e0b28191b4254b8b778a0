316761c7bd1320fa535dca10f08909a3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZvolFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const dataset_enum_1 = require("app/enums/dataset.enum");
const deduplication_setting_enum_1 = require("app/enums/deduplication-setting.enum");
const encryption_key_format_enum_1 = require("app/enums/encryption-key-format.enum");
const on_off_enum_1 = require("app/enums/on-off.enum");
const role_enum_1 = require("app/enums/role.enum");
const with_inherit_enum_1 = require("app/enums/with-inherit.enum");
const zfs_property_source_enum_1 = require("app/enums/zfs-property-source.enum");
const zvol_form_1 = require("app/helptext/storage/volumes/zvol-form");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ix_formatter_service_1 = require("app/modules/forms/ix-forms/services/ix-formatter.service");
const forbidden_values_validation_1 = require("app/modules/forms/ix-forms/validators/forbidden-values-validation/forbidden-values-validation");
const password_validation_1 = require("app/modules/forms/ix-forms/validators/password-validation/password-validation");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
const cloud_credential_service_1 = require("app/services/cloud-credential.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let ZvolFormComponent = class ZvolFormComponent {
    get title() {
        return this.isNew
            ? this.translate.instant(zvol_form_1.helptextZvol.zvol_title_add)
            : this.translate.instant(zvol_form_1.helptextZvol.zvol_title_edit);
    }
    constructor(formatter, translate, formBuilder, ws, dialogService, cdr, formErrorHandler, errorHandler, snackbar, slideInRef, slideInData) {
        this.formatter = formatter;
        this.translate = translate;
        this.formBuilder = formBuilder;
        this.ws = ws;
        this.dialogService = dialogService;
        this.cdr = cdr;
        this.formErrorHandler = formErrorHandler;
        this.errorHandler = errorHandler;
        this.snackbar = snackbar;
        this.slideInRef = slideInRef;
        this.slideInData = slideInData;
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.helptext = zvol_form_1.helptextZvol;
        this.isNew = true;
        this.isLoading = false;
        this.inheritEncryptPlaceholder = zvol_form_1.helptextZvol.dataset_form_encryption.inherit_checkbox_placeholder;
        this.namesInUse = [];
        this.encryptedParent = false;
        this.passphraseParent = false;
        this.encryptionType = 'key';
        this.inheritEncryption = true;
        this.generateKey = true;
        this.form = this.formBuilder.group({
            name: ['', [forms_1.Validators.required, (0, forbidden_values_validation_1.forbiddenValues)(this.namesInUse)]],
            comments: [''],
            volsize: ['', forms_1.Validators.required],
            force_size: [false],
            sync: [null, forms_1.Validators.required],
            compression: [null, forms_1.Validators.required],
            deduplication: [null, forms_1.Validators.required],
            sparse: [false],
            readonly: [null, forms_1.Validators.required],
            volblocksize: [null, forms_1.Validators.required],
            snapdev: [dataset_enum_1.DatasetSnapdev.Hidden],
            inherit_encryption: [true],
            encryption: [true],
            encryption_type: ['key', forms_1.Validators.required],
            generate_key: [true],
            key: ['', [forms_1.Validators.required, forms_1.Validators.minLength(64), forms_1.Validators.maxLength(64)]],
            passphrase: ['', [forms_1.Validators.required, forms_1.Validators.minLength(8)]],
            confirm_passphrase: ['', [forms_1.Validators.required]],
            pbkdf2iters: [350000, [forms_1.Validators.required, forms_1.Validators.min(100000)]],
            algorithm: ['AES-256-GCM', forms_1.Validators.required],
        }, {
            validators: [
                (0, password_validation_1.matchOthersFgValidator)('confirm_passphrase', ['passphrase'], this.translate.instant('Confirm Passphrase value must match Passphrase')),
            ],
        });
        this.syncOptions = [
            { label: this.translate.instant('Standard'), value: dataset_enum_1.DatasetSync.Standard },
            { label: this.translate.instant('Always'), value: dataset_enum_1.DatasetSync.Always },
            { label: this.translate.instant('Disabled'), value: dataset_enum_1.DatasetSync.Disabled },
        ];
        this.compressionOptions = [
            { label: this.translate.instant('Off'), value: 'OFF' },
            { label: this.translate.instant('lz4 (recommended)'), value: 'LZ4' },
            { label: this.translate.instant('zstd (default level, 3)'), value: 'ZSTD' },
            { label: this.translate.instant('zstd-5 (slow)'), value: 'ZSTD-5' },
            { label: this.translate.instant('zstd-7 (very slow)'), value: 'ZSTD-7' },
            { label: this.translate.instant('zstd-fast (default level, 1)'), value: 'ZSTD-FAST' },
            { label: this.translate.instant('gzip (default level, 6)'), value: 'GZIP' },
            { label: this.translate.instant('gzip-1 (fastest)'), value: 'GZIP-1' },
            { label: this.translate.instant('gzip-9 (maximum, slow)'), value: 'GZIP-9' },
            { label: this.translate.instant('zle (runs of zeros)'), value: 'ZLE' },
            { label: this.translate.instant('lzjb (legacy, not recommended)'), value: 'LZJB' },
        ];
        this.deduplicationOptions = [
            { label: this.translate.instant('On'), value: deduplication_setting_enum_1.DeduplicationSetting.On },
            { label: this.translate.instant('Verify'), value: deduplication_setting_enum_1.DeduplicationSetting.Verify },
            { label: this.translate.instant('Off'), value: deduplication_setting_enum_1.DeduplicationSetting.Off },
        ];
        this.readonlyOptions = [
            { label: this.translate.instant('On'), value: on_off_enum_1.OnOff.On },
            { label: this.translate.instant('Off'), value: on_off_enum_1.OnOff.Off },
        ];
        this.volblocksizeOptions = [
            { label: '4 KiB', value: '4K' },
            { label: '8 KiB', value: '8K' },
            { label: '16 KiB', value: '16K' },
            { label: '32 KiB', value: '32K' },
            { label: '64 KiB', value: '64K' },
            { label: '128 KiB', value: '128K' },
        ];
        this.snapdevOptions = [
            { label: this.translate.instant('Visible'), value: dataset_enum_1.DatasetSnapdev.Visible },
            { label: this.translate.instant('Hidden'), value: dataset_enum_1.DatasetSnapdev.Hidden },
        ];
        this.encryptionTypeOptions = [
            { label: this.translate.instant('Key'), value: 'key' },
            { label: this.translate.instant('Passphrase'), value: 'passphrase' },
        ];
        this.syncOptions$ = (0, rxjs_1.of)(this.syncOptions);
        this.compressionOptions$ = (0, rxjs_1.of)(this.compressionOptions);
        this.deduplicationOptions$ = (0, rxjs_1.of)(this.deduplicationOptions);
        this.readonlyOptions$ = (0, rxjs_1.of)(this.readonlyOptions);
        this.volblocksizeOptions$ = (0, rxjs_1.of)(this.volblocksizeOptions);
        this.snapdevOptions$ = (0, rxjs_1.of)(this.snapdevOptions);
        this.encryptionTypeOptions$ = (0, rxjs_1.of)(this.encryptionTypeOptions);
        this.algorithmOptions$ = this.ws.call('pool.dataset.encryption_algorithm_choices').pipe((0, rxjs_1.map)((algorithms) => Object.keys(algorithms).map((algorithm) => ({ label: algorithm, value: algorithm }))));
        this.form.controls.key.disable();
        this.form.controls.passphrase.disable();
        this.form.controls.confirm_passphrase.disable();
        this.form.controls.pbkdf2iters.disable();
        this.form.controls.algorithm.disable();
    }
    ngOnInit() {
        this.isNew = this.slideInData.isNew;
        this.parentId = this.slideInData.parentId;
        this.zvolFormInit();
    }
    zvolFormInit() {
        if (this.parentId) {
            this.setupForm();
        }
    }
    setupForm() {
        if (!this.isNew) {
            this.disableEncryptionFields();
        }
        this.isLoading = true;
        this.ws.call('pool.dataset.query', [[['id', '=', this.parentId]]]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (parents) => {
                var _a;
                const parent = parents[0];
                if (parent.encrypted) {
                    this.form.controls.encryption.setValue(true);
                    this.form.controls.encryption.disable();
                }
                this.namesInUse = ((_a = parent.children) === null || _a === void 0 ? void 0 : _a.map((child) => {
                    return /[^/]*$/.exec(child.name)[0];
                })) || [];
                this.inheritEncryptionProperties(parent);
                if (!this.isNew) {
                    this.form.controls.name.disable();
                }
                this.addMinimumBlocksizeWarning();
                this.setReadonlyField(parent);
                if ((parent === null || parent === void 0 ? void 0 : parent.type) === dataset_enum_1.DatasetType.Filesystem) {
                    this.inheritFileSystemProperties(parent);
                }
                else {
                    let parentDatasetId = parent.name.split('/');
                    parentDatasetId.pop();
                    parentDatasetId = parentDatasetId.join('/');
                    this.ws.call('pool.dataset.query', [[['id', '=', parentDatasetId]]]).pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
                        next: (parentDataset) => {
                            this.form.controls.sparse.disable();
                            this.form.controls.volblocksize.disable();
                            this.copyParentProperties(parent);
                            this.inheritSyncSource(parent, parentDataset);
                            this.inheritCompression(parent, parentDataset);
                            this.inheritDeduplication(parent, parentDataset);
                            this.inheritSnapdev(parent, parentDataset);
                            this.cdr.markForCheck();
                        },
                        error: (error) => {
                            this.dialogService.error(this.errorHandler.parseError(error));
                        },
                    });
                }
                this.isLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.dialogService.error(this.errorHandler.parseError(error));
            },
        });
    }
    copyParentProperties(parent) {
        const volumesize = parent.volsize.parsed;
        // keep track of original volume size data so we can check to see if the user intended to change since
        // decimal has to be truncated to three decimal places
        this.origVolSize = volumesize;
        const humansize = this.formatter.convertBytesToHumanReadable(volumesize);
        this.origHuman = humansize;
        this.form.controls.name.setValue(parent.name);
        if (parent.comments) {
            this.form.controls.comments.setValue(parent.comments.value);
        }
        else {
            this.form.controls.comments.setValue('');
        }
        this.form.controls.volsize.setValue(parent.volsize.rawvalue);
    }
    disableEncryptionFields() {
        this.setEncryptionFieldsDisabled(true);
        this.form.controls.encryption.disable();
        this.form.controls.inherit_encryption.disable();
    }
    inheritEncryptionProperties(parent) {
        this.encryptedParent = parent.encrypted;
        this.encryptionAlgorithm = parent.encryption_algorithm.value;
        this.inheritEncryptPlaceholder = zvol_form_1.helptextZvol.dataset_form_encryption.inherit_checkbox_notencrypted;
        if (this.encryptedParent) {
            if (parent.key_format.value === encryption_key_format_enum_1.EncryptionKeyFormat.Passphrase) {
                this.passphraseParent = true;
                // if parent is passphrase this dataset cannot be a key type
                this.encryptionType = 'passphrase';
                this.form.controls.encryption_type.disable();
            }
            this.inheritEncryptPlaceholder = zvol_form_1.helptextZvol.dataset_form_encryption.inherit_checkbox_encrypted;
        }
        if (this.isNew) {
            if (this.encryptedParent && parent.encryption_algorithm) {
                this.form.controls.algorithm.setValue(parent.encryption_algorithm.value);
            }
            this.form.controls.encryption.disable();
            if (this.passphraseParent) {
                this.form.controls.encryption_type.setValue('passphrase');
            }
            this.setEncryptionFieldsDisabled(true);
            this.setupEncryptionFieldEvents();
        }
    }
    inheritSyncSource(parent, parentDataset) {
        const inheritTr = this.translate.instant('Inherit');
        if (parent.sync.source === zfs_property_source_enum_1.ZfsPropertySource.Inherited
            || parent.sync.source === zfs_property_source_enum_1.ZfsPropertySource.Default) {
            this.syncOptions.unshift({ label: `${inheritTr} (${parentDataset[0].sync.rawvalue})`, value: parentDataset[0].sync.value });
        }
        else {
            this.syncOptions.unshift({ label: `${inheritTr} (${parentDataset[0].sync.rawvalue})`, value: with_inherit_enum_1.inherit });
            this.form.controls.sync.setValue(parent.sync.value);
        }
        this.form.controls.sync.setValue(parent.sync.value);
    }
    inheritFileSystemProperties(parent) {
        const inheritTr = this.translate.instant('Inherit');
        this.syncOptions.unshift({ label: `${inheritTr} (${parent.sync.rawvalue})`, value: with_inherit_enum_1.inherit });
        this.compressionOptions.unshift({ label: `${inheritTr} (${parent.compression.rawvalue})`, value: with_inherit_enum_1.inherit });
        this.deduplicationOptions.unshift({ label: `${inheritTr} (${parent.deduplication.rawvalue})`, value: with_inherit_enum_1.inherit });
        this.volblocksizeOptions.unshift({ label: inheritTr, value: with_inherit_enum_1.inherit });
        this.snapdevOptions.unshift({ label: `${inheritTr} (${parent.snapdev.rawvalue})`, value: with_inherit_enum_1.inherit });
        this.form.controls.sync.setValue(with_inherit_enum_1.inherit);
        this.form.controls.compression.setValue(with_inherit_enum_1.inherit);
        this.form.controls.deduplication.setValue(with_inherit_enum_1.inherit);
        this.form.controls.readonly.setValue(with_inherit_enum_1.inherit);
        this.form.controls.snapdev.setValue(with_inherit_enum_1.inherit);
        this.loadRecommendedBlocksize();
    }
    inheritCompression(parent, parentDataset) {
        const inheritTr = this.translate.instant('Inherit');
        if (parent.compression.source === zfs_property_source_enum_1.ZfsPropertySource.Default) {
            this.compressionOptions.unshift({ label: `${inheritTr} (${parentDataset[0].compression.rawvalue})`, value: parentDataset[0].compression.value });
        }
        else {
            this.compressionOptions.unshift({ label: `${inheritTr} (${parentDataset[0].compression.rawvalue})`, value: with_inherit_enum_1.inherit });
        }
        if (parent.compression.source === zfs_property_source_enum_1.ZfsPropertySource.Inherited) {
            this.form.controls.compression.setValue(with_inherit_enum_1.inherit);
        }
        else {
            this.form.controls.compression.setValue(parent.compression.value);
        }
        if (String(parent.compression.value) === 'GZIP') {
            this.form.controls.compression.setValue(parent.compression.value + '-6');
        }
    }
    inheritDeduplication(parent, parentDataset) {
        const inheritTr = this.translate.instant('Inherit');
        if (parent.deduplication.source === zfs_property_source_enum_1.ZfsPropertySource.Inherited
            || parent.deduplication.source === zfs_property_source_enum_1.ZfsPropertySource.Default) {
            this.deduplicationOptions.unshift({ label: `${inheritTr} (${parentDataset[0].deduplication.rawvalue})`, value: parentDataset[0].deduplication.value });
        }
        else {
            this.deduplicationOptions.unshift({ label: `${inheritTr} (${parentDataset[0].deduplication.rawvalue})`, value: with_inherit_enum_1.inherit });
            this.form.controls.deduplication.setValue(parent.deduplication.value);
        }
        this.form.controls.deduplication.setValue(parent.deduplication.value);
    }
    inheritSnapdev(parent, parentDataset) {
        const inheritTr = this.translate.instant('Inherit');
        this.snapdevOptions.unshift({ label: `${inheritTr} (${parentDataset[0].snapdev.rawvalue})`, value: with_inherit_enum_1.inherit });
        if (parent.snapdev.source === zfs_property_source_enum_1.ZfsPropertySource.Inherited
            || parent.snapdev.source === zfs_property_source_enum_1.ZfsPropertySource.Default) {
            this.form.controls.snapdev.setValue(with_inherit_enum_1.inherit);
        }
        else {
            this.form.controls.snapdev.setValue(parent.snapdev.value);
        }
    }
    setupEncryptionFieldEvents() {
        this.form.controls.inherit_encryption.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((inheritEncryption) => {
            this.inheritEncryption = inheritEncryption;
            if (inheritEncryption) {
                this.setEncryptionFieldsDisabled(true);
                this.setPassphraseFieldsDisabled(true);
                this.setKeyFieldsDisabled(true);
                this.form.controls.encryption.disable();
            }
            if (!inheritEncryption) {
                this.form.controls.encryption_type.enable();
                this.form.controls.algorithm.enable();
                if (this.passphraseParent) { // keep it hidden if it passphrase
                    this.form.controls.encryption_type.disable();
                }
                if (this.encryptionType === 'key') {
                    this.form.controls.passphrase.disable();
                    this.form.controls.confirm_passphrase.disable();
                    this.form.controls.pbkdf2iters.disable();
                    this.form.controls.generate_key.disable();
                }
                else {
                    this.form.controls.passphrase.enable();
                    this.form.controls.confirm_passphrase.enable();
                    this.form.controls.pbkdf2iters.enable();
                    this.form.controls.generate_key.enable();
                }
                if (this.encryptedParent) {
                    this.form.controls.encryption.disable();
                }
                else {
                    this.form.controls.encryption.enable();
                }
            }
        });
        this.form.controls.encryption.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((encryption) => {
            if (this.form.controls.inherit_encryption.value) {
                return;
            }
            if (this.encryptionType === 'key') {
                this.setEncryptionFieldsDisabled(!encryption);
            }
            else if (encryption) {
                this.form.controls.encryption_type.enable();
                this.form.controls.algorithm.enable();
            }
            else {
                this.form.controls.encryption_type.disable();
                this.form.controls.algorithm.disable();
            }
            if (this.encryptionType === 'key' && !this.generateKey) {
                this.setKeyFieldsDisabled(!encryption);
            }
            if (this.encryptionType === 'passphrase') {
                this.setPassphraseFieldsDisabled(!encryption);
            }
            if (this.passphraseParent) { // keep this field hidden if parent has a passphrase
                this.form.controls.encryption_type.disable();
            }
        });
        this.form.controls.encryption_type.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((type) => {
            this.encryptionType = type;
            const key = (type === 'key');
            this.setPassphraseFieldsDisabled(key);
            if (key) {
                this.form.controls.generate_key.enable();
                this.setKeyFieldsDisabled(this.generateKey);
            }
            else {
                this.form.controls.generate_key.disable();
                this.setKeyFieldsDisabled(true);
            }
        });
        this.form.controls.generate_key.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((generateKey) => {
            this.generateKey = generateKey;
            this.setKeyFieldsDisabled(generateKey);
        });
    }
    setEncryptionFieldsDisabled(disabled) {
        if (disabled) {
            this.form.controls.encryption_type.disable();
            this.form.controls.generate_key.disable();
            this.form.controls.algorithm.disable();
        }
        else {
            this.form.controls.encryption_type.enable();
            this.form.controls.generate_key.enable();
            this.form.controls.algorithm.enable();
        }
    }
    setPassphraseFieldsDisabled(disabled) {
        if (disabled) {
            this.form.controls.passphrase.disable();
            this.form.controls.confirm_passphrase.disable();
            this.form.controls.pbkdf2iters.disable();
        }
        else {
            this.form.controls.passphrase.enable();
            this.form.controls.confirm_passphrase.enable();
            this.form.controls.pbkdf2iters.enable();
        }
    }
    setKeyFieldsDisabled(disabled) {
        if (disabled) {
            this.form.controls.key.disable();
        }
        else {
            this.form.controls.key.enable();
        }
    }
    sendAsBasicOrAdvanced(data) {
        data.type = dataset_enum_1.DatasetType.Volume;
        if (!this.isNew) {
            delete data.name;
            delete data.volblocksize;
            delete data.type;
            delete data.sparse;
        }
        else {
            data.name = this.parentId + '/' + data.name;
        }
        return data;
    }
    addSubmit() {
        this.isLoading = true;
        const data = this.sendAsBasicOrAdvanced(this.form.value);
        if (data.sync === with_inherit_enum_1.inherit) {
            delete (data.sync);
        }
        if (data.compression === with_inherit_enum_1.inherit) {
            delete (data.compression);
        }
        if (data.deduplication === with_inherit_enum_1.inherit) {
            delete (data.deduplication);
        }
        if (data.readonly === with_inherit_enum_1.inherit) {
            delete (data.readonly);
        }
        if (data.volblocksize !== with_inherit_enum_1.inherit) {
            let volblocksizeIntegerValue = parseInt(data.volblocksize.match(/[a-zA-Z]+|[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)+/g)[0]);
            if (volblocksizeIntegerValue === 512) {
                volblocksizeIntegerValue = 512;
            }
            else {
                volblocksizeIntegerValue = volblocksizeIntegerValue * 1024;
            }
            data.volsize = data.volsize;
            data.volsize = data.volsize + (volblocksizeIntegerValue - data.volsize % volblocksizeIntegerValue);
        }
        else {
            delete (data.volblocksize);
        }
        // encryption values
        if (data.inherit_encryption) {
            delete data.encryption;
        }
        else if (data.encryption) {
            data.encryption_options = {};
            if (data.encryption_type === 'key') {
                data.encryption_options.generate_key = data.generate_key;
                if (!data.generate_key) {
                    data.encryption_options.key = data.key;
                }
            }
            else if (data.encryption_type === 'passphrase') {
                data.encryption_options.passphrase = data.passphrase;
                data.encryption_options.pbkdf2iters = data.pbkdf2iters;
            }
            data.encryption_options.algorithm = data.algorithm;
        }
        delete data.key;
        delete data.generate_key;
        delete data.passphrase;
        delete data.confirm_passphrase;
        delete data.pbkdf2iters;
        delete data.encryption_type;
        delete data.algorithm;
        this.ws.call('pool.dataset.create', [data]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (dataset) => this.handleZvolCreateUpdate(dataset),
            error: (error) => {
                this.isLoading = false;
                this.formErrorHandler.handleWsFormError(error, this.form);
                this.cdr.markForCheck();
            },
        });
    }
    editSubmit() {
        this.isLoading = true;
        this.ws.call('pool.dataset.query', [[['id', '=', this.parentId]]]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (datasets) => {
                const data = this.sendAsBasicOrAdvanced(this.form.value);
                if (data.inherit_encryption) {
                    delete data.encryption;
                }
                else if (data.encryption) {
                    data.encryption_options = {};
                    if (data.encryption_type === 'key') {
                        data.encryption_options.generate_key = data.generate_key;
                        if (!data.generate_key) {
                            data.encryption_options.key = data.key;
                        }
                    }
                    else if (data.encryption_type === 'passphrase') {
                        data.encryption_options.passphrase = data.passphrase;
                        data.encryption_options.pbkdf2iters = data.pbkdf2iters;
                    }
                    data.encryption_options.algorithm = data.algorithm;
                }
                delete data.inherit_encryption;
                delete data.key;
                delete data.generate_key;
                delete data.passphrase;
                delete data.confirm_passphrase;
                delete data.pbkdf2iters;
                delete data.encryption_type;
                delete data.algorithm;
                let volblocksizeIntegerValue = datasets[0].volblocksize.value.match(/[a-zA-Z]+|[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)+/g)[0];
                volblocksizeIntegerValue = parseInt(volblocksizeIntegerValue, 10);
                if (volblocksizeIntegerValue === 512) {
                    volblocksizeIntegerValue = 512;
                }
                else {
                    volblocksizeIntegerValue = volblocksizeIntegerValue * 1024;
                }
                data.volsize = data.volsize;
                if (data.volsize && data.volsize % volblocksizeIntegerValue !== 0) {
                    data.volsize = data.volsize + (volblocksizeIntegerValue - data.volsize % volblocksizeIntegerValue);
                }
                let roundedVolSize = datasets[0].volsize.parsed;
                if (datasets[0].volsize.parsed % volblocksizeIntegerValue !== 0) {
                    roundedVolSize = datasets[0].volsize.parsed
                        + (volblocksizeIntegerValue - datasets[0].volsize.parsed % volblocksizeIntegerValue);
                }
                if (!data.volsize || data.volsize >= roundedVolSize) {
                    this.ws.call('pool.dataset.update', [this.parentId, data]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
                        next: (dataset) => this.handleZvolCreateUpdate(dataset),
                        error: (error) => {
                            this.isLoading = false;
                            this.formErrorHandler.handleWsFormError(error, this.form);
                            this.cdr.markForCheck();
                        },
                    });
                }
                else {
                    this.isLoading = false;
                    this.dialogService.error({
                        title: zvol_form_1.helptextZvol.zvol_save_errDialog.title,
                        message: zvol_form_1.helptextZvol.zvol_save_errDialog.msg,
                    });
                    this.slideInRef.close(false);
                }
            },
            error: (error) => {
                this.dialogService.error(this.errorHandler.parseError(error));
                this.isLoading = false;
                this.cdr.markForCheck();
            },
        });
    }
    onSubmit() {
        if (this.isNew) {
            this.addSubmit();
        }
        else {
            this.editSubmit();
        }
    }
    loadRecommendedBlocksize() {
        const root = this.parentId.split('/')[0];
        this.ws.call('pool.dataset.recommended_zvol_blocksize', [root]).pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this)).subscribe((recommendedSize) => {
            this.form.controls.volblocksize.setValue(recommendedSize);
            this.minimumRecommendedBlockSize = recommendedSize;
        });
    }
    addMinimumBlocksizeWarning() {
        this.form.controls.volblocksize.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((recordSize) => {
            const currentSize = this.formatter.convertHumanStringToNum(recordSize);
            const minimumRecommendedSize = this.formatter.convertHumanStringToNum(this.minimumRecommendedBlockSize);
            if (!currentSize || !minimumRecommendedSize || currentSize >= minimumRecommendedSize) {
                this.volBlockSizeWarning = null;
                return;
            }
            this.volBlockSizeWarning = `${this.translate.instant(zvol_form_1.helptextZvol.blocksize_warning.a)} ${this.minimumRecommendedBlockSize}. ${this.translate.instant(zvol_form_1.helptextZvol.blocksize_warning.b)}`;
        });
    }
    setReadonlyField(parent) {
        this.readonlyOptions.unshift({
            label: `${this.translate.instant('Inherit')} (${parent.readonly.rawvalue})`,
            value: with_inherit_enum_1.inherit,
        });
        let readonlyValue;
        if (this.isNew) {
            readonlyValue = with_inherit_enum_1.inherit;
        }
        else {
            readonlyValue = parent.readonly.value;
            if (parent.readonly.source === zfs_property_source_enum_1.ZfsPropertySource.Default
                || parent.readonly.source === zfs_property_source_enum_1.ZfsPropertySource.Inherited) {
                readonlyValue = with_inherit_enum_1.inherit;
            }
        }
        this.form.controls.readonly.setValue(readonlyValue);
    }
    handleZvolCreateUpdate(dataset) {
        this.isLoading = false;
        this.slideInRef.close(dataset);
        this.snackbar.success(this.isNew
            ? this.translate.instant('Switched to new zvol «{name}».', { name: (0, dataset_utils_1.getDatasetLabel)(dataset) })
            : this.translate.instant('Zvol «{name}» updated.', { name: (0, dataset_utils_1.getDatasetLabel)(dataset) }));
    }
};
exports.ZvolFormComponent = ZvolFormComponent;
ZvolFormComponent.ctorParameters = () => [
    { type: ix_formatter_service_1.IxFormatterService },
    { type: core_2.TranslateService },
    { type: forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: dialog_service_1.DialogService },
    { type: core_1.ChangeDetectorRef },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: snackbar_service_1.SnackbarService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.ZvolFormComponent = ZvolFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-zvol-form',
        template: require("./zvol-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        providers: [cloud_credential_service_1.CloudCredentialService],
    })
], ZvolFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL2NvbXBvbmVudHMvenZvbC1mb3JtL3p2b2wtZm9ybS5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBRXVCO0FBQ3ZCLDBDQUF5RDtBQUN6RCx5REFBcUU7QUFDckUsOENBQXVEO0FBQ3ZELCtCQUErQjtBQUMvQix5REFFZ0M7QUFDaEMscUZBQTRFO0FBQzVFLHFGQUEyRTtBQUMzRSx1REFBOEM7QUFDOUMsbURBQTJDO0FBQzNDLG1FQUFzRDtBQUN0RCxpRkFBdUU7QUFDdkUsc0VBQXNFO0FBR3RFLHNFQUFrRTtBQUNsRSx1R0FBaUc7QUFDakcsMkdBQW9HO0FBQ3BHLCtHQUF5RztBQUN6RyxtR0FBOEY7QUFDOUYsK0lBRXVHO0FBQ3ZHLHVIQUF1SDtBQUN2SCxxRkFBaUY7QUFDakYsMEVBQXlFO0FBQ3pFLG9GQUErRTtBQUMvRSw4RUFBeUU7QUFDekUsd0RBQTJEO0FBd0NwRCxJQUFNLGlCQUFpQixHQUF2QixNQUFNLGlCQUFpQjtJQUc1QixJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxLQUFLO1lBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLHdCQUFZLENBQUMsY0FBYyxDQUFDO1lBQ3JELENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyx3QkFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFpSEQsWUFDUyxTQUE2QixFQUM1QixTQUEyQixFQUMzQixXQUF3QixFQUN4QixFQUFvQixFQUNwQixhQUE0QixFQUM1QixHQUFzQixFQUN0QixnQkFBeUMsRUFDekMsWUFBaUMsRUFDL0IsUUFBeUIsRUFDM0IsVUFBMkMsRUFDcEIsV0FBaUQ7UUFWekUsY0FBUyxHQUFULFNBQVMsQ0FBb0I7UUFDNUIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsZ0JBQVcsR0FBWCxX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QyxRQUFRLENBQUMsTUFBTSxLQUFLLDRDQUFpQixDQUFDLFNBQVMsRUFDekQsQ0FBQztnQkFDRCxhQUFhLEdBQUcsMkJBQU8sQ0FBQztZQUMxQixDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLHNCQUFzQixDQUFDLE9BQWdCO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUNuQixJQUFJLENBQUMsS0FBSztZQUNSLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFBLCtCQUFlLEVBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUM5RixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBQSwrQkFBZSxFQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FDekYsQ0FBQztJQUNKLENBQUM7O0FBcHFCVSw4Q0FBaUI7Ozs7Ozs7Ozs7Ozs0Q0FtSXpCLGFBQU0sU0FBQyxpQ0FBYTs7NEJBbklaLGlCQUFpQjtJQVA3QixJQUFBLDRCQUFZLEdBQUU7SUFDZCxJQUFBLGdCQUFTLEVBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4QiwrQ0FBeUM7UUFDekMsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07UUFDL0MsU0FBUyxFQUFFLENBQUMsaURBQXNCLENBQUM7S0FDcEMsQ0FBQztHQUNXLGlCQUFpQixDQXFxQjdCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9wYWdlcy9kYXRhc2V0cy9jb21wb25lbnRzL3p2b2wtZm9ybS96dm9sLWZvcm0uY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgbWFwLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgRGF0YXNldFJlY29yZFNpemUsIERhdGFzZXRTbmFwZGV2LCBEYXRhc2V0U3luYywgRGF0YXNldFR5cGUsXG59IGZyb20gJ2FwcC9lbnVtcy9kYXRhc2V0LmVudW0nO1xuaW1wb3J0IHsgRGVkdXBsaWNhdGlvblNldHRpbmcgfSBmcm9tICdhcHAvZW51bXMvZGVkdXBsaWNhdGlvbi1zZXR0aW5nLmVudW0nO1xuaW1wb3J0IHsgRW5jcnlwdGlvbktleUZvcm1hdCB9IGZyb20gJ2FwcC9lbnVtcy9lbmNyeXB0aW9uLWtleS1mb3JtYXQuZW51bSc7XG5pbXBvcnQgeyBPbk9mZiB9IGZyb20gJ2FwcC9lbnVtcy9vbi1vZmYuZW51bSc7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnYXBwL2VudW1zL3JvbGUuZW51bSc7XG5pbXBvcnQgeyBpbmhlcml0IH0gZnJvbSAnYXBwL2VudW1zL3dpdGgtaW5oZXJpdC5lbnVtJztcbmltcG9ydCB7IFpmc1Byb3BlcnR5U291cmNlIH0gZnJvbSAnYXBwL2VudW1zL3pmcy1wcm9wZXJ0eS1zb3VyY2UuZW51bSc7XG5pbXBvcnQgeyBoZWxwdGV4dFp2b2wgfSBmcm9tICdhcHAvaGVscHRleHQvc3RvcmFnZS92b2x1bWVzL3p2b2wtZm9ybSc7XG5pbXBvcnQgeyBEYXRhc2V0LCBEYXRhc2V0Q3JlYXRlLCBEYXRhc2V0VXBkYXRlIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvZGF0YXNldC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IEl4U2xpZGVJblJlZiB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc2xpZGUtaW4vaXgtc2xpZGUtaW4tcmVmJztcbmltcG9ydCB7IFNMSURFX0lOX0RBVEEgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LXNsaWRlLWluL2l4LXNsaWRlLWluLnRva2VuJztcbmltcG9ydCB7IEZvcm1FcnJvckhhbmRsZXJTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvc2VydmljZXMvZm9ybS1lcnJvci1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSXhGb3JtYXR0ZXJTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvc2VydmljZXMvaXgtZm9ybWF0dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgZm9yYmlkZGVuVmFsdWVzLFxufSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy92YWxpZGF0b3JzL2ZvcmJpZGRlbi12YWx1ZXMtdmFsaWRhdGlvbi9mb3JiaWRkZW4tdmFsdWVzLXZhbGlkYXRpb24nO1xuaW1wb3J0IHsgbWF0Y2hPdGhlcnNGZ1ZhbGlkYXRvciB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL3ZhbGlkYXRvcnMvcGFzc3dvcmQtdmFsaWRhdGlvbi9wYXNzd29yZC12YWxpZGF0aW9uJztcbmltcG9ydCB7IFNuYWNrYmFyU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL3NuYWNrYmFyL3NlcnZpY2VzL3NuYWNrYmFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0RGF0YXNldExhYmVsIH0gZnJvbSAnYXBwL3BhZ2VzL2RhdGFzZXRzL3V0aWxzL2RhdGFzZXQudXRpbHMnO1xuaW1wb3J0IHsgQ2xvdWRDcmVkZW50aWFsU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9jbG91ZC1jcmVkZW50aWFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9lcnJvci1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy93cy5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIFp2b2xGb3JtRGF0YSB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGNvbW1lbnRzPzogc3RyaW5nO1xuICB2b2xzaXplPzogc3RyaW5nIHwgbnVtYmVyO1xuICBmb3JjZV9zaXplPzogYm9vbGVhbjtcbiAgc3luYz86IHN0cmluZztcbiAgY29tcHJlc3Npb24/OiBzdHJpbmc7XG4gIGRlZHVwbGljYXRpb24/OiBzdHJpbmc7XG4gIHNwYXJzZT86IGJvb2xlYW47XG4gIHJlYWRvbmx5Pzogc3RyaW5nO1xuICB2b2xibG9ja3NpemU/OiBzdHJpbmc7XG4gIHNuYXBkZXY/OiBzdHJpbmc7XG4gIGluaGVyaXRfZW5jcnlwdGlvbj86IGJvb2xlYW47XG4gIGVuY3J5cHRpb24/OiBib29sZWFuO1xuICBlbmNyeXB0aW9uX3R5cGU/OiBzdHJpbmc7XG4gIGdlbmVyYXRlX2tleT86IGJvb2xlYW47XG4gIGtleT86IHN0cmluZztcbiAgcGFzc3BocmFzZT86IHN0cmluZztcbiAgY29uZmlybV9wYXNzcGhyYXNlPzogc3RyaW5nO1xuICBwYmtkZjJpdGVycz86IG51bWJlcjtcbiAgYWxnb3JpdGhtPzogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xuICBlbmNyeXB0aW9uX29wdGlvbnM/OiB7XG4gICAgZ2VuZXJhdGVfa2V5PzogYm9vbGVhbjtcbiAgICBwYmtkZjJpdGVycz86IG51bWJlcjtcbiAgICBhbGdvcml0aG0/OiBzdHJpbmc7XG4gICAgcGFzc3BocmFzZT86IHN0cmluZztcbiAgICBrZXk/OiBzdHJpbmc7XG4gIH07XG59XG5cbkBVbnRpbERlc3Ryb3koKVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXgtenZvbC1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3p2b2wtZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtDbG91ZENyZWRlbnRpYWxTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgWnZvbEZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICByZWFkb25seSByZXF1aXJlZFJvbGVzID0gW1JvbGUuRGF0YXNldFdyaXRlXTtcblxuICBnZXQgdGl0bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pc05ld1xuICAgICAgPyB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KGhlbHB0ZXh0WnZvbC56dm9sX3RpdGxlX2FkZClcbiAgICAgIDogdGhpcy50cmFuc2xhdGUuaW5zdGFudChoZWxwdGV4dFp2b2wuenZvbF90aXRsZV9lZGl0KTtcbiAgfVxuXG4gIHJlYWRvbmx5IGhlbHB0ZXh0ID0gaGVscHRleHRadm9sO1xuICBwYXJlbnRJZDogc3RyaW5nO1xuICBpc05ldyA9IHRydWU7XG4gIGlzTG9hZGluZyA9IGZhbHNlO1xuICBpbmhlcml0RW5jcnlwdFBsYWNlaG9sZGVyOiBzdHJpbmcgPSBoZWxwdGV4dFp2b2wuZGF0YXNldF9mb3JtX2VuY3J5cHRpb24uaW5oZXJpdF9jaGVja2JveF9wbGFjZWhvbGRlcjtcbiAgbmFtZXNJblVzZTogc3RyaW5nW10gPSBbXTtcbiAgdm9sQmxvY2tTaXplV2FybmluZzogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBlbmNyeXB0ZWRQYXJlbnQgPSBmYWxzZTtcbiAgcHJvdGVjdGVkIGVuY3J5cHRpb25BbGdvcml0aG06IHN0cmluZztcbiAgcHJvdGVjdGVkIHBhc3NwaHJhc2VQYXJlbnQgPSBmYWxzZTtcbiAgcHJvdGVjdGVkIGVuY3J5cHRpb25UeXBlOiAna2V5JyB8ICdwYXNzcGhyYXNlJyA9ICdrZXknO1xuICBwcm90ZWN0ZWQgaW5oZXJpdEVuY3J5cHRpb24gPSB0cnVlO1xuICBwcm90ZWN0ZWQgZ2VuZXJhdGVLZXkgPSB0cnVlO1xuICBwcm90ZWN0ZWQgbWluaW11bVJlY29tbWVuZGVkQmxvY2tTaXplOiBEYXRhc2V0UmVjb3JkU2l6ZTtcbiAgcHJvdGVjdGVkIG9yaWdWb2xTaXplOiBudW1iZXI7XG4gIHByb3RlY3RlZCBvcmlnSHVtYW46IHN0cmluZyB8IG51bWJlcjtcblxuICBmb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgbmFtZTogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgZm9yYmlkZGVuVmFsdWVzKHRoaXMubmFtZXNJblVzZSldXSxcbiAgICBjb21tZW50czogWycnXSxcbiAgICB2b2xzaXplOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgIGZvcmNlX3NpemU6IFtmYWxzZV0sXG4gICAgc3luYzogW251bGwgYXMgc3RyaW5nLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICBjb21wcmVzc2lvbjogW251bGwgYXMgc3RyaW5nLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICBkZWR1cGxpY2F0aW9uOiBbbnVsbCBhcyBzdHJpbmcsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgIHNwYXJzZTogW2ZhbHNlXSxcbiAgICByZWFkb25seTogW251bGwgYXMgc3RyaW5nLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICB2b2xibG9ja3NpemU6IFtudWxsIGFzIHN0cmluZywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgc25hcGRldjogW0RhdGFzZXRTbmFwZGV2LkhpZGRlbiBhcyBzdHJpbmddLFxuICAgIGluaGVyaXRfZW5jcnlwdGlvbjogW3RydWVdLFxuICAgIGVuY3J5cHRpb246IFt0cnVlXSxcbiAgICBlbmNyeXB0aW9uX3R5cGU6IFsna2V5JywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgZ2VuZXJhdGVfa2V5OiBbdHJ1ZV0sXG4gICAga2V5OiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbkxlbmd0aCg2NCksIFZhbGlkYXRvcnMubWF4TGVuZ3RoKDY0KV1dLFxuICAgIHBhc3NwaHJhc2U6IFsnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWQsIFZhbGlkYXRvcnMubWluTGVuZ3RoKDgpXV0sXG4gICAgY29uZmlybV9wYXNzcGhyYXNlOiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkXV0sXG4gICAgcGJrZGYyaXRlcnM6IFszNTAwMDAsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbigxMDAwMDApXV0sXG4gICAgYWxnb3JpdGhtOiBbJ0FFUy0yNTYtR0NNJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gIH0sIHtcbiAgICB2YWxpZGF0b3JzOiBbXG4gICAgICBtYXRjaE90aGVyc0ZnVmFsaWRhdG9yKFxuICAgICAgICAnY29uZmlybV9wYXNzcGhyYXNlJyxcbiAgICAgICAgWydwYXNzcGhyYXNlJ10sXG4gICAgICAgIHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0NvbmZpcm0gUGFzc3BocmFzZSB2YWx1ZSBtdXN0IG1hdGNoIFBhc3NwaHJhc2UnKSxcbiAgICAgICksXG4gICAgXSxcbiAgfSk7XG5cbiAgc3luY09wdGlvbnM6IE9wdGlvbltdID0gW1xuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1N0YW5kYXJkJyksIHZhbHVlOiBEYXRhc2V0U3luYy5TdGFuZGFyZCB9LFxuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0Fsd2F5cycpLCB2YWx1ZTogRGF0YXNldFN5bmMuQWx3YXlzIH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnRGlzYWJsZWQnKSwgdmFsdWU6IERhdGFzZXRTeW5jLkRpc2FibGVkIH0sXG4gIF07XG5cbiAgY29tcHJlc3Npb25PcHRpb25zOiBPcHRpb25bXSA9IFtcbiAgICB7IGxhYmVsOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdPZmYnKSwgdmFsdWU6ICdPRkYnIH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnbHo0IChyZWNvbW1lbmRlZCknKSwgdmFsdWU6ICdMWjQnIH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnenN0ZCAoZGVmYXVsdCBsZXZlbCwgMyknKSwgdmFsdWU6ICdaU1REJyB9LFxuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ3pzdGQtNSAoc2xvdyknKSwgdmFsdWU6ICdaU1RELTUnIH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnenN0ZC03ICh2ZXJ5IHNsb3cpJyksIHZhbHVlOiAnWlNURC03JyB9LFxuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ3pzdGQtZmFzdCAoZGVmYXVsdCBsZXZlbCwgMSknKSwgdmFsdWU6ICdaU1RELUZBU1QnIH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnZ3ppcCAoZGVmYXVsdCBsZXZlbCwgNiknKSwgdmFsdWU6ICdHWklQJyB9LFxuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ2d6aXAtMSAoZmFzdGVzdCknKSwgdmFsdWU6ICdHWklQLTEnIH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnZ3ppcC05IChtYXhpbXVtLCBzbG93KScpLCB2YWx1ZTogJ0daSVAtOScgfSxcbiAgICB7IGxhYmVsOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCd6bGUgKHJ1bnMgb2YgemVyb3MpJyksIHZhbHVlOiAnWkxFJyB9LFxuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ2x6amIgKGxlZ2FjeSwgbm90IHJlY29tbWVuZGVkKScpLCB2YWx1ZTogJ0xaSkInIH0sXG4gIF07XG5cbiAgZGVkdXBsaWNhdGlvbk9wdGlvbnM6IE9wdGlvbltdID0gW1xuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ09uJyksIHZhbHVlOiBEZWR1cGxpY2F0aW9uU2V0dGluZy5PbiB9LFxuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1ZlcmlmeScpLCB2YWx1ZTogRGVkdXBsaWNhdGlvblNldHRpbmcuVmVyaWZ5IH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnT2ZmJyksIHZhbHVlOiBEZWR1cGxpY2F0aW9uU2V0dGluZy5PZmYgfSxcbiAgXTtcblxuICByZWFkb25seU9wdGlvbnM6IE9wdGlvbltdID0gW1xuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ09uJyksIHZhbHVlOiBPbk9mZi5PbiB9LFxuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ09mZicpLCB2YWx1ZTogT25PZmYuT2ZmIH0sXG4gIF07XG5cbiAgdm9sYmxvY2tzaXplT3B0aW9uczogT3B0aW9uW10gPSBbXG4gICAgeyBsYWJlbDogJzQgS2lCJywgdmFsdWU6ICc0SycgfSxcbiAgICB7IGxhYmVsOiAnOCBLaUInLCB2YWx1ZTogJzhLJyB9LFxuICAgIHsgbGFiZWw6ICcxNiBLaUInLCB2YWx1ZTogJzE2SycgfSxcbiAgICB7IGxhYmVsOiAnMzIgS2lCJywgdmFsdWU6ICczMksnIH0sXG4gICAgeyBsYWJlbDogJzY0IEtpQicsIHZhbHVlOiAnNjRLJyB9LFxuICAgIHsgbGFiZWw6ICcxMjggS2lCJywgdmFsdWU6ICcxMjhLJyB9LFxuICBdO1xuXG4gIHNuYXBkZXZPcHRpb25zOiBPcHRpb25bXSA9IFtcbiAgICB7IGxhYmVsOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdWaXNpYmxlJyksIHZhbHVlOiBEYXRhc2V0U25hcGRldi5WaXNpYmxlIH0sXG4gICAgeyBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnSGlkZGVuJyksIHZhbHVlOiBEYXRhc2V0U25hcGRldi5IaWRkZW4gfSxcbiAgXTtcblxuICBlbmNyeXB0aW9uVHlwZU9wdGlvbnM6IE9wdGlvbltdID0gW1xuICAgIHsgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0tleScpLCB2YWx1ZTogJ2tleScgfSxcbiAgICB7IGxhYmVsOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdQYXNzcGhyYXNlJyksIHZhbHVlOiAncGFzc3BocmFzZScgfSxcbiAgXTtcblxuICByZWFkb25seSBzeW5jT3B0aW9ucyQgPSBvZih0aGlzLnN5bmNPcHRpb25zKTtcbiAgcmVhZG9ubHkgY29tcHJlc3Npb25PcHRpb25zJCA9IG9mKHRoaXMuY29tcHJlc3Npb25PcHRpb25zKTtcbiAgcmVhZG9ubHkgZGVkdXBsaWNhdGlvbk9wdGlvbnMkID0gb2YodGhpcy5kZWR1cGxpY2F0aW9uT3B0aW9ucyk7XG4gIHJlYWRvbmx5IHJlYWRvbmx5T3B0aW9ucyQgPSBvZih0aGlzLnJlYWRvbmx5T3B0aW9ucyk7XG4gIHJlYWRvbmx5IHZvbGJsb2Nrc2l6ZU9wdGlvbnMkID0gb2YodGhpcy52b2xibG9ja3NpemVPcHRpb25zKTtcbiAgcmVhZG9ubHkgc25hcGRldk9wdGlvbnMkID0gb2YodGhpcy5zbmFwZGV2T3B0aW9ucyk7XG4gIHJlYWRvbmx5IGVuY3J5cHRpb25UeXBlT3B0aW9ucyQgPSBvZih0aGlzLmVuY3J5cHRpb25UeXBlT3B0aW9ucyk7XG5cbiAgcmVhZG9ubHkgYWxnb3JpdGhtT3B0aW9ucyQgPSB0aGlzLndzLmNhbGwoJ3Bvb2wuZGF0YXNldC5lbmNyeXB0aW9uX2FsZ29yaXRobV9jaG9pY2VzJykucGlwZShcbiAgICBtYXAoKGFsZ29yaXRobXMpID0+IE9iamVjdC5rZXlzKGFsZ29yaXRobXMpLm1hcCgoYWxnb3JpdGhtKSA9PiAoeyBsYWJlbDogYWxnb3JpdGhtLCB2YWx1ZTogYWxnb3JpdGhtIH0pKSksXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGZvcm1hdHRlcjogSXhGb3JtYXR0ZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyLFxuICAgIHByaXZhdGUgd3M6IFdlYlNvY2tldFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIGZvcm1FcnJvckhhbmRsZXI6IEZvcm1FcnJvckhhbmRsZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBzbmFja2JhcjogU25hY2tiYXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgc2xpZGVJblJlZjogSXhTbGlkZUluUmVmPFp2b2xGb3JtQ29tcG9uZW50PixcbiAgICBASW5qZWN0KFNMSURFX0lOX0RBVEEpIHByaXZhdGUgc2xpZGVJbkRhdGE6IHsgaXNOZXc6IGJvb2xlYW47IHBhcmVudElkOiBzdHJpbmcgfSxcbiAgKSB7XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLmtleS5kaXNhYmxlKCk7XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLnBhc3NwaHJhc2UuZGlzYWJsZSgpO1xuICAgIHRoaXMuZm9ybS5jb250cm9scy5jb25maXJtX3Bhc3NwaHJhc2UuZGlzYWJsZSgpO1xuICAgIHRoaXMuZm9ybS5jb250cm9scy5wYmtkZjJpdGVycy5kaXNhYmxlKCk7XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLmFsZ29yaXRobS5kaXNhYmxlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmlzTmV3ID0gdGhpcy5zbGlkZUluRGF0YS5pc05ldztcbiAgICB0aGlzLnBhcmVudElkID0gdGhpcy5zbGlkZUluRGF0YS5wYXJlbnRJZDtcbiAgICB0aGlzLnp2b2xGb3JtSW5pdCgpO1xuICB9XG5cbiAgenZvbEZvcm1Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnBhcmVudElkKSB7XG4gICAgICB0aGlzLnNldHVwRm9ybSgpO1xuICAgIH1cbiAgfVxuXG4gIHNldHVwRm9ybSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNOZXcpIHtcbiAgICAgIHRoaXMuZGlzYWJsZUVuY3J5cHRpb25GaWVsZHMoKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgdGhpcy53cy5jYWxsKCdwb29sLmRhdGFzZXQucXVlcnknLCBbW1snaWQnLCAnPScsIHRoaXMucGFyZW50SWRdXV0pLnBpcGUodW50aWxEZXN0cm95ZWQodGhpcykpLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiAocGFyZW50cykgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBwYXJlbnRzWzBdO1xuICAgICAgICBpZiAocGFyZW50LmVuY3J5cHRlZCkge1xuICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5lbmNyeXB0aW9uLnNldFZhbHVlKHRydWUpO1xuICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5lbmNyeXB0aW9uLmRpc2FibGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmFtZXNJblVzZSA9IHBhcmVudC5jaGlsZHJlbj8ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICAgIHJldHVybiAvW14vXSokLy5leGVjKGNoaWxkLm5hbWUpWzBdO1xuICAgICAgICB9KSB8fCBbXTtcblxuICAgICAgICB0aGlzLmluaGVyaXRFbmNyeXB0aW9uUHJvcGVydGllcyhwYXJlbnQpO1xuXG4gICAgICAgIGlmICghdGhpcy5pc05ldykge1xuICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5uYW1lLmRpc2FibGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWRkTWluaW11bUJsb2Nrc2l6ZVdhcm5pbmcoKTtcblxuICAgICAgICB0aGlzLnNldFJlYWRvbmx5RmllbGQocGFyZW50KTtcblxuICAgICAgICBpZiAocGFyZW50Py50eXBlID09PSBEYXRhc2V0VHlwZS5GaWxlc3lzdGVtKSB7XG4gICAgICAgICAgdGhpcy5pbmhlcml0RmlsZVN5c3RlbVByb3BlcnRpZXMocGFyZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgcGFyZW50RGF0YXNldElkOiBzdHJpbmcgfCBzdHJpbmdbXSA9IHBhcmVudC5uYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgICAgcGFyZW50RGF0YXNldElkLnBvcCgpO1xuICAgICAgICAgIHBhcmVudERhdGFzZXRJZCA9IHBhcmVudERhdGFzZXRJZC5qb2luKCcvJyk7XG5cbiAgICAgICAgICB0aGlzLndzLmNhbGwoJ3Bvb2wuZGF0YXNldC5xdWVyeScsIFtbWydpZCcsICc9JywgcGFyZW50RGF0YXNldElkXV1dKS5waXBlKFxuICAgICAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIuY2F0Y2hFcnJvcigpLFxuICAgICAgICAgICAgdW50aWxEZXN0cm95ZWQodGhpcyksXG4gICAgICAgICAgKS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogKHBhcmVudERhdGFzZXQpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLnNwYXJzZS5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy52b2xibG9ja3NpemUuZGlzYWJsZSgpO1xuXG4gICAgICAgICAgICAgIHRoaXMuY29weVBhcmVudFByb3BlcnRpZXMocGFyZW50KTtcbiAgICAgICAgICAgICAgdGhpcy5pbmhlcml0U3luY1NvdXJjZShwYXJlbnQsIHBhcmVudERhdGFzZXQpO1xuICAgICAgICAgICAgICB0aGlzLmluaGVyaXRDb21wcmVzc2lvbihwYXJlbnQsIHBhcmVudERhdGFzZXQpO1xuICAgICAgICAgICAgICB0aGlzLmluaGVyaXREZWR1cGxpY2F0aW9uKHBhcmVudCwgcGFyZW50RGF0YXNldCk7XG4gICAgICAgICAgICAgIHRoaXMuaW5oZXJpdFNuYXBkZXYocGFyZW50LCBwYXJlbnREYXRhc2V0KTtcblxuICAgICAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogKGVycm9yOiB1bmtub3duKTogdm9pZCA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5lcnJvcih0aGlzLmVycm9ySGFuZGxlci5wYXJzZUVycm9yKGVycm9yKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiAoZXJyb3I6IHVua25vd24pOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5kaWFsb2dTZXJ2aWNlLmVycm9yKHRoaXMuZXJyb3JIYW5kbGVyLnBhcnNlRXJyb3IoZXJyb3IpKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBjb3B5UGFyZW50UHJvcGVydGllcyhwYXJlbnQ6IERhdGFzZXQpOiB2b2lkIHtcbiAgICBjb25zdCB2b2x1bWVzaXplID0gcGFyZW50LnZvbHNpemUucGFyc2VkO1xuXG4gICAgLy8ga2VlcCB0cmFjayBvZiBvcmlnaW5hbCB2b2x1bWUgc2l6ZSBkYXRhIHNvIHdlIGNhbiBjaGVjayB0byBzZWUgaWYgdGhlIHVzZXIgaW50ZW5kZWQgdG8gY2hhbmdlIHNpbmNlXG4gICAgLy8gZGVjaW1hbCBoYXMgdG8gYmUgdHJ1bmNhdGVkIHRvIHRocmVlIGRlY2ltYWwgcGxhY2VzXG4gICAgdGhpcy5vcmlnVm9sU2l6ZSA9IHZvbHVtZXNpemU7XG5cbiAgICBjb25zdCBodW1hbnNpemUgPSB0aGlzLmZvcm1hdHRlci5jb252ZXJ0Qnl0ZXNUb0h1bWFuUmVhZGFibGUodm9sdW1lc2l6ZSk7XG4gICAgdGhpcy5vcmlnSHVtYW4gPSBodW1hbnNpemU7XG5cbiAgICB0aGlzLmZvcm0uY29udHJvbHMubmFtZS5zZXRWYWx1ZShwYXJlbnQubmFtZSk7XG4gICAgaWYgKHBhcmVudC5jb21tZW50cykge1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmNvbW1lbnRzLnNldFZhbHVlKHBhcmVudC5jb21tZW50cy52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9scy5jb21tZW50cy5zZXRWYWx1ZSgnJyk7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLnZvbHNpemUuc2V0VmFsdWUocGFyZW50LnZvbHNpemUucmF3dmFsdWUpO1xuICB9XG5cbiAgZGlzYWJsZUVuY3J5cHRpb25GaWVsZHMoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRFbmNyeXB0aW9uRmllbGRzRGlzYWJsZWQodHJ1ZSk7XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLmVuY3J5cHRpb24uZGlzYWJsZSgpO1xuICAgIHRoaXMuZm9ybS5jb250cm9scy5pbmhlcml0X2VuY3J5cHRpb24uZGlzYWJsZSgpO1xuICB9XG5cbiAgaW5oZXJpdEVuY3J5cHRpb25Qcm9wZXJ0aWVzKHBhcmVudDogRGF0YXNldCk6IHZvaWQge1xuICAgIHRoaXMuZW5jcnlwdGVkUGFyZW50ID0gcGFyZW50LmVuY3J5cHRlZDtcbiAgICB0aGlzLmVuY3J5cHRpb25BbGdvcml0aG0gPSBwYXJlbnQuZW5jcnlwdGlvbl9hbGdvcml0aG0udmFsdWU7XG5cbiAgICB0aGlzLmluaGVyaXRFbmNyeXB0UGxhY2Vob2xkZXIgPSBoZWxwdGV4dFp2b2wuZGF0YXNldF9mb3JtX2VuY3J5cHRpb24uaW5oZXJpdF9jaGVja2JveF9ub3RlbmNyeXB0ZWQ7XG4gICAgaWYgKHRoaXMuZW5jcnlwdGVkUGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LmtleV9mb3JtYXQudmFsdWUgPT09IEVuY3J5cHRpb25LZXlGb3JtYXQuUGFzc3BocmFzZSkge1xuICAgICAgICB0aGlzLnBhc3NwaHJhc2VQYXJlbnQgPSB0cnVlO1xuICAgICAgICAvLyBpZiBwYXJlbnQgaXMgcGFzc3BocmFzZSB0aGlzIGRhdGFzZXQgY2Fubm90IGJlIGEga2V5IHR5cGVcbiAgICAgICAgdGhpcy5lbmNyeXB0aW9uVHlwZSA9ICdwYXNzcGhyYXNlJztcbiAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmVuY3J5cHRpb25fdHlwZS5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmluaGVyaXRFbmNyeXB0UGxhY2Vob2xkZXIgPSBoZWxwdGV4dFp2b2wuZGF0YXNldF9mb3JtX2VuY3J5cHRpb24uaW5oZXJpdF9jaGVja2JveF9lbmNyeXB0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNOZXcpIHtcbiAgICAgIGlmICh0aGlzLmVuY3J5cHRlZFBhcmVudCAmJiBwYXJlbnQuZW5jcnlwdGlvbl9hbGdvcml0aG0pIHtcbiAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmFsZ29yaXRobS5zZXRWYWx1ZShwYXJlbnQuZW5jcnlwdGlvbl9hbGdvcml0aG0udmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmVuY3J5cHRpb24uZGlzYWJsZSgpO1xuICAgICAgaWYgKHRoaXMucGFzc3BocmFzZVBhcmVudCkge1xuICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuZW5jcnlwdGlvbl90eXBlLnNldFZhbHVlKCdwYXNzcGhyYXNlJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldEVuY3J5cHRpb25GaWVsZHNEaXNhYmxlZCh0cnVlKTtcbiAgICAgIHRoaXMuc2V0dXBFbmNyeXB0aW9uRmllbGRFdmVudHMoKTtcbiAgICB9XG4gIH1cblxuICBpbmhlcml0U3luY1NvdXJjZShwYXJlbnQ6IERhdGFzZXQsIHBhcmVudERhdGFzZXQ6IERhdGFzZXRbXSk6IHZvaWQge1xuICAgIGNvbnN0IGluaGVyaXRUciA9IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0luaGVyaXQnKTtcbiAgICBpZiAoXG4gICAgICBwYXJlbnQuc3luYy5zb3VyY2UgPT09IFpmc1Byb3BlcnR5U291cmNlLkluaGVyaXRlZFxuICAgICAgICB8fCBwYXJlbnQuc3luYy5zb3VyY2UgPT09IFpmc1Byb3BlcnR5U291cmNlLkRlZmF1bHRcbiAgICApIHtcbiAgICAgIHRoaXMuc3luY09wdGlvbnMudW5zaGlmdCh7IGxhYmVsOiBgJHtpbmhlcml0VHJ9ICgke3BhcmVudERhdGFzZXRbMF0uc3luYy5yYXd2YWx1ZX0pYCwgdmFsdWU6IHBhcmVudERhdGFzZXRbMF0uc3luYy52YWx1ZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zeW5jT3B0aW9ucy51bnNoaWZ0KHsgbGFiZWw6IGAke2luaGVyaXRUcn0gKCR7cGFyZW50RGF0YXNldFswXS5zeW5jLnJhd3ZhbHVlfSlgLCB2YWx1ZTogaW5oZXJpdCB9KTtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9scy5zeW5jLnNldFZhbHVlKHBhcmVudC5zeW5jLnZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLnN5bmMuc2V0VmFsdWUocGFyZW50LnN5bmMudmFsdWUpO1xuICB9XG5cbiAgaW5oZXJpdEZpbGVTeXN0ZW1Qcm9wZXJ0aWVzKHBhcmVudDogRGF0YXNldCk6IHZvaWQge1xuICAgIGNvbnN0IGluaGVyaXRUciA9IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0luaGVyaXQnKTtcbiAgICB0aGlzLnN5bmNPcHRpb25zLnVuc2hpZnQoeyBsYWJlbDogYCR7aW5oZXJpdFRyfSAoJHtwYXJlbnQuc3luYy5yYXd2YWx1ZX0pYCwgdmFsdWU6IGluaGVyaXQgfSk7XG4gICAgdGhpcy5jb21wcmVzc2lvbk9wdGlvbnMudW5zaGlmdCh7IGxhYmVsOiBgJHtpbmhlcml0VHJ9ICgke3BhcmVudC5jb21wcmVzc2lvbi5yYXd2YWx1ZX0pYCwgdmFsdWU6IGluaGVyaXQgfSk7XG4gICAgdGhpcy5kZWR1cGxpY2F0aW9uT3B0aW9ucy51bnNoaWZ0KHsgbGFiZWw6IGAke2luaGVyaXRUcn0gKCR7cGFyZW50LmRlZHVwbGljYXRpb24ucmF3dmFsdWV9KWAsIHZhbHVlOiBpbmhlcml0IH0pO1xuICAgIHRoaXMudm9sYmxvY2tzaXplT3B0aW9ucy51bnNoaWZ0KHsgbGFiZWw6IGluaGVyaXRUciwgdmFsdWU6IGluaGVyaXQgfSk7XG4gICAgdGhpcy5zbmFwZGV2T3B0aW9ucy51bnNoaWZ0KHsgbGFiZWw6IGAke2luaGVyaXRUcn0gKCR7cGFyZW50LnNuYXBkZXYucmF3dmFsdWV9KWAsIHZhbHVlOiBpbmhlcml0IH0pO1xuXG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLnN5bmMuc2V0VmFsdWUoaW5oZXJpdCk7XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLmNvbXByZXNzaW9uLnNldFZhbHVlKGluaGVyaXQpO1xuICAgIHRoaXMuZm9ybS5jb250cm9scy5kZWR1cGxpY2F0aW9uLnNldFZhbHVlKGluaGVyaXQpO1xuICAgIHRoaXMuZm9ybS5jb250cm9scy5yZWFkb25seS5zZXRWYWx1ZShpbmhlcml0KTtcbiAgICB0aGlzLmZvcm0uY29udHJvbHMuc25hcGRldi5zZXRWYWx1ZShpbmhlcml0KTtcbiAgICB0aGlzLmxvYWRSZWNvbW1lbmRlZEJsb2Nrc2l6ZSgpO1xuICB9XG5cbiAgaW5oZXJpdENvbXByZXNzaW9uKHBhcmVudDogRGF0YXNldCwgcGFyZW50RGF0YXNldDogRGF0YXNldFtdKTogdm9pZCB7XG4gICAgY29uc3QgaW5oZXJpdFRyID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnSW5oZXJpdCcpO1xuICAgIGlmIChwYXJlbnQuY29tcHJlc3Npb24uc291cmNlID09PSBaZnNQcm9wZXJ0eVNvdXJjZS5EZWZhdWx0KSB7XG4gICAgICB0aGlzLmNvbXByZXNzaW9uT3B0aW9ucy51bnNoaWZ0KHsgbGFiZWw6IGAke2luaGVyaXRUcn0gKCR7cGFyZW50RGF0YXNldFswXS5jb21wcmVzc2lvbi5yYXd2YWx1ZX0pYCwgdmFsdWU6IHBhcmVudERhdGFzZXRbMF0uY29tcHJlc3Npb24udmFsdWUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29tcHJlc3Npb25PcHRpb25zLnVuc2hpZnQoeyBsYWJlbDogYCR7aW5oZXJpdFRyfSAoJHtwYXJlbnREYXRhc2V0WzBdLmNvbXByZXNzaW9uLnJhd3ZhbHVlfSlgLCB2YWx1ZTogaW5oZXJpdCB9KTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50LmNvbXByZXNzaW9uLnNvdXJjZSA9PT0gWmZzUHJvcGVydHlTb3VyY2UuSW5oZXJpdGVkKSB7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMuY29tcHJlc3Npb24uc2V0VmFsdWUoaW5oZXJpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9scy5jb21wcmVzc2lvbi5zZXRWYWx1ZShwYXJlbnQuY29tcHJlc3Npb24udmFsdWUpO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKHBhcmVudC5jb21wcmVzc2lvbi52YWx1ZSkgPT09ICdHWklQJykge1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmNvbXByZXNzaW9uLnNldFZhbHVlKHBhcmVudC5jb21wcmVzc2lvbi52YWx1ZSArICctNicpO1xuICAgIH1cbiAgfVxuXG4gIGluaGVyaXREZWR1cGxpY2F0aW9uKHBhcmVudDogRGF0YXNldCwgcGFyZW50RGF0YXNldDogRGF0YXNldFtdKTogdm9pZCB7XG4gICAgY29uc3QgaW5oZXJpdFRyID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnSW5oZXJpdCcpO1xuICAgIGlmIChcbiAgICAgIHBhcmVudC5kZWR1cGxpY2F0aW9uLnNvdXJjZSA9PT0gWmZzUHJvcGVydHlTb3VyY2UuSW5oZXJpdGVkXG4gICAgICAgIHx8IHBhcmVudC5kZWR1cGxpY2F0aW9uLnNvdXJjZSA9PT0gWmZzUHJvcGVydHlTb3VyY2UuRGVmYXVsdFxuICAgICkge1xuICAgICAgdGhpcy5kZWR1cGxpY2F0aW9uT3B0aW9ucy51bnNoaWZ0KHsgbGFiZWw6IGAke2luaGVyaXRUcn0gKCR7cGFyZW50RGF0YXNldFswXS5kZWR1cGxpY2F0aW9uLnJhd3ZhbHVlfSlgLCB2YWx1ZTogcGFyZW50RGF0YXNldFswXS5kZWR1cGxpY2F0aW9uLnZhbHVlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlZHVwbGljYXRpb25PcHRpb25zLnVuc2hpZnQoeyBsYWJlbDogYCR7aW5oZXJpdFRyfSAoJHtwYXJlbnREYXRhc2V0WzBdLmRlZHVwbGljYXRpb24ucmF3dmFsdWV9KWAsIHZhbHVlOiBpbmhlcml0IH0pO1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmRlZHVwbGljYXRpb24uc2V0VmFsdWUocGFyZW50LmRlZHVwbGljYXRpb24udmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybS5jb250cm9scy5kZWR1cGxpY2F0aW9uLnNldFZhbHVlKHBhcmVudC5kZWR1cGxpY2F0aW9uLnZhbHVlKTtcbiAgfVxuXG4gIGluaGVyaXRTbmFwZGV2KHBhcmVudDogRGF0YXNldCwgcGFyZW50RGF0YXNldDogRGF0YXNldFtdKTogdm9pZCB7XG4gICAgY29uc3QgaW5oZXJpdFRyID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnSW5oZXJpdCcpO1xuICAgIHRoaXMuc25hcGRldk9wdGlvbnMudW5zaGlmdCh7IGxhYmVsOiBgJHtpbmhlcml0VHJ9ICgke3BhcmVudERhdGFzZXRbMF0uc25hcGRldi5yYXd2YWx1ZX0pYCwgdmFsdWU6IGluaGVyaXQgfSk7XG4gICAgaWYgKFxuICAgICAgcGFyZW50LnNuYXBkZXYuc291cmNlID09PSBaZnNQcm9wZXJ0eVNvdXJjZS5Jbmhlcml0ZWRcbiAgICAgICAgfHwgcGFyZW50LnNuYXBkZXYuc291cmNlID09PSBaZnNQcm9wZXJ0eVNvdXJjZS5EZWZhdWx0XG4gICAgKSB7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMuc25hcGRldi5zZXRWYWx1ZShpbmhlcml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLnNuYXBkZXYuc2V0VmFsdWUocGFyZW50LnNuYXBkZXYudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHNldHVwRW5jcnlwdGlvbkZpZWxkRXZlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybS5jb250cm9scy5pbmhlcml0X2VuY3J5cHRpb24udmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZSh1bnRpbERlc3Ryb3llZCh0aGlzKSkuc3Vic2NyaWJlKChpbmhlcml0RW5jcnlwdGlvbjogYm9vbGVhbikgPT4ge1xuICAgICAgICB0aGlzLmluaGVyaXRFbmNyeXB0aW9uID0gaW5oZXJpdEVuY3J5cHRpb247XG4gICAgICAgIGlmIChpbmhlcml0RW5jcnlwdGlvbikge1xuICAgICAgICAgIHRoaXMuc2V0RW5jcnlwdGlvbkZpZWxkc0Rpc2FibGVkKHRydWUpO1xuICAgICAgICAgIHRoaXMuc2V0UGFzc3BocmFzZUZpZWxkc0Rpc2FibGVkKHRydWUpO1xuICAgICAgICAgIHRoaXMuc2V0S2V5RmllbGRzRGlzYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmVuY3J5cHRpb24uZGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5oZXJpdEVuY3J5cHRpb24pIHtcbiAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuZW5jcnlwdGlvbl90eXBlLmVuYWJsZSgpO1xuICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5hbGdvcml0aG0uZW5hYmxlKCk7XG4gICAgICAgICAgaWYgKHRoaXMucGFzc3BocmFzZVBhcmVudCkgeyAvLyBrZWVwIGl0IGhpZGRlbiBpZiBpdCBwYXNzcGhyYXNlXG4gICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuZW5jcnlwdGlvbl90eXBlLmRpc2FibGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuZW5jcnlwdGlvblR5cGUgPT09ICdrZXknKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMucGFzc3BocmFzZS5kaXNhYmxlKCk7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuY29uZmlybV9wYXNzcGhyYXNlLmRpc2FibGUoKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5wYmtkZjJpdGVycy5kaXNhYmxlKCk7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuZ2VuZXJhdGVfa2V5LmRpc2FibGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLnBhc3NwaHJhc2UuZW5hYmxlKCk7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuY29uZmlybV9wYXNzcGhyYXNlLmVuYWJsZSgpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLnBia2RmMml0ZXJzLmVuYWJsZSgpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmdlbmVyYXRlX2tleS5lbmFibGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuZW5jcnlwdGVkUGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuZW5jcnlwdGlvbi5kaXNhYmxlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5lbmNyeXB0aW9uLmVuYWJsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB0aGlzLmZvcm0uY29udHJvbHMuZW5jcnlwdGlvbi52YWx1ZUNoYW5nZXNcbiAgICAgIC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoKGVuY3J5cHRpb246IGJvb2xlYW4pID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybS5jb250cm9scy5pbmhlcml0X2VuY3J5cHRpb24udmFsdWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZW5jcnlwdGlvblR5cGUgPT09ICdrZXknKSB7XG4gICAgICAgICAgdGhpcy5zZXRFbmNyeXB0aW9uRmllbGRzRGlzYWJsZWQoIWVuY3J5cHRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGVuY3J5cHRpb24pIHtcbiAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuZW5jcnlwdGlvbl90eXBlLmVuYWJsZSgpO1xuICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5hbGdvcml0aG0uZW5hYmxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmVuY3J5cHRpb25fdHlwZS5kaXNhYmxlKCk7XG4gICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmFsZ29yaXRobS5kaXNhYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZW5jcnlwdGlvblR5cGUgPT09ICdrZXknICYmICF0aGlzLmdlbmVyYXRlS2V5KSB7XG4gICAgICAgICAgdGhpcy5zZXRLZXlGaWVsZHNEaXNhYmxlZCghZW5jcnlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZW5jcnlwdGlvblR5cGUgPT09ICdwYXNzcGhyYXNlJykge1xuICAgICAgICAgIHRoaXMuc2V0UGFzc3BocmFzZUZpZWxkc0Rpc2FibGVkKCFlbmNyeXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wYXNzcGhyYXNlUGFyZW50KSB7IC8vIGtlZXAgdGhpcyBmaWVsZCBoaWRkZW4gaWYgcGFyZW50IGhhcyBhIHBhc3NwaHJhc2VcbiAgICAgICAgICB0aGlzLmZvcm0uY29udHJvbHMuZW5jcnlwdGlvbl90eXBlLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLmVuY3J5cHRpb25fdHlwZS52YWx1ZUNoYW5nZXNcbiAgICAgIC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoKHR5cGU6ICdrZXknIHwgJ3Bhc3NwaHJhc2UnKSA9PiB7XG4gICAgICAgIHRoaXMuZW5jcnlwdGlvblR5cGUgPSB0eXBlO1xuICAgICAgICBjb25zdCBrZXkgPSAodHlwZSA9PT0gJ2tleScpO1xuICAgICAgICB0aGlzLnNldFBhc3NwaHJhc2VGaWVsZHNEaXNhYmxlZChrZXkpO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmdlbmVyYXRlX2tleS5lbmFibGUoKTtcbiAgICAgICAgICB0aGlzLnNldEtleUZpZWxkc0Rpc2FibGVkKHRoaXMuZ2VuZXJhdGVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZm9ybS5jb250cm9scy5nZW5lcmF0ZV9rZXkuZGlzYWJsZSgpO1xuICAgICAgICAgIHRoaXMuc2V0S2V5RmllbGRzRGlzYWJsZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHRoaXMuZm9ybS5jb250cm9scy5nZW5lcmF0ZV9rZXkudmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZSh1bnRpbERlc3Ryb3llZCh0aGlzKSkuc3Vic2NyaWJlKChnZW5lcmF0ZUtleTogYm9vbGVhbikgPT4ge1xuICAgICAgICB0aGlzLmdlbmVyYXRlS2V5ID0gZ2VuZXJhdGVLZXk7XG4gICAgICAgIHRoaXMuc2V0S2V5RmllbGRzRGlzYWJsZWQoZ2VuZXJhdGVLZXkpO1xuICAgICAgfSk7XG4gIH1cblxuICBzZXRFbmNyeXB0aW9uRmllbGRzRGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9scy5lbmNyeXB0aW9uX3R5cGUuZGlzYWJsZSgpO1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmdlbmVyYXRlX2tleS5kaXNhYmxlKCk7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMuYWxnb3JpdGhtLmRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmVuY3J5cHRpb25fdHlwZS5lbmFibGUoKTtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9scy5nZW5lcmF0ZV9rZXkuZW5hYmxlKCk7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMuYWxnb3JpdGhtLmVuYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHNldFBhc3NwaHJhc2VGaWVsZHNEaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLnBhc3NwaHJhc2UuZGlzYWJsZSgpO1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLmNvbmZpcm1fcGFzc3BocmFzZS5kaXNhYmxlKCk7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMucGJrZGYyaXRlcnMuZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMucGFzc3BocmFzZS5lbmFibGUoKTtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9scy5jb25maXJtX3Bhc3NwaHJhc2UuZW5hYmxlKCk7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMucGJrZGYyaXRlcnMuZW5hYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0S2V5RmllbGRzRGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9scy5rZXkuZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHMua2V5LmVuYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHNlbmRBc0Jhc2ljT3JBZHZhbmNlZChkYXRhOiBadm9sRm9ybURhdGEpOiBadm9sRm9ybURhdGEge1xuICAgIGRhdGEudHlwZSA9IERhdGFzZXRUeXBlLlZvbHVtZTtcblxuICAgIGlmICghdGhpcy5pc05ldykge1xuICAgICAgZGVsZXRlIGRhdGEubmFtZTtcbiAgICAgIGRlbGV0ZSBkYXRhLnZvbGJsb2Nrc2l6ZTtcbiAgICAgIGRlbGV0ZSBkYXRhLnR5cGU7XG4gICAgICBkZWxldGUgZGF0YS5zcGFyc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEubmFtZSA9IHRoaXMucGFyZW50SWQgKyAnLycgKyBkYXRhLm5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBhZGRTdWJtaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgIGNvbnN0IGRhdGE6IFp2b2xGb3JtRGF0YSA9IHRoaXMuc2VuZEFzQmFzaWNPckFkdmFuY2VkKHRoaXMuZm9ybS52YWx1ZSk7XG5cbiAgICBpZiAoZGF0YS5zeW5jID09PSBpbmhlcml0KSB7XG4gICAgICBkZWxldGUgKGRhdGEuc3luYyk7XG4gICAgfVxuICAgIGlmIChkYXRhLmNvbXByZXNzaW9uID09PSBpbmhlcml0KSB7XG4gICAgICBkZWxldGUgKGRhdGEuY29tcHJlc3Npb24pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5kZWR1cGxpY2F0aW9uID09PSBpbmhlcml0KSB7XG4gICAgICBkZWxldGUgKGRhdGEuZGVkdXBsaWNhdGlvbik7XG4gICAgfVxuICAgIGlmIChkYXRhLnJlYWRvbmx5ID09PSBpbmhlcml0KSB7XG4gICAgICBkZWxldGUgKGRhdGEucmVhZG9ubHkpO1xuICAgIH1cbiAgICBpZiAoZGF0YS52b2xibG9ja3NpemUgIT09IGluaGVyaXQpIHtcbiAgICAgIGxldCB2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgPSBwYXJzZUludChkYXRhLnZvbGJsb2Nrc2l6ZS5tYXRjaCgvW2EtekEtWl0rfFsrLV0/KFswLTldKyhbLl1bMC05XSopP3xbLl1bMC05XSspKy9nKVswXSk7XG5cbiAgICAgIGlmICh2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgPT09IDUxMikge1xuICAgICAgICB2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgPSA1MTI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgPSB2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgKiAxMDI0O1xuICAgICAgfVxuXG4gICAgICBkYXRhLnZvbHNpemUgPSBkYXRhLnZvbHNpemUgYXMgbnVtYmVyO1xuICAgICAgZGF0YS52b2xzaXplID0gZGF0YS52b2xzaXplICsgKHZvbGJsb2Nrc2l6ZUludGVnZXJWYWx1ZSAtIGRhdGEudm9sc2l6ZSAlIHZvbGJsb2Nrc2l6ZUludGVnZXJWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSAoZGF0YS52b2xibG9ja3NpemUpO1xuICAgIH1cblxuICAgIC8vIGVuY3J5cHRpb24gdmFsdWVzXG4gICAgaWYgKGRhdGEuaW5oZXJpdF9lbmNyeXB0aW9uKSB7XG4gICAgICBkZWxldGUgZGF0YS5lbmNyeXB0aW9uO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5lbmNyeXB0aW9uKSB7XG4gICAgICBkYXRhLmVuY3J5cHRpb25fb3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKGRhdGEuZW5jcnlwdGlvbl90eXBlID09PSAna2V5Jykge1xuICAgICAgICBkYXRhLmVuY3J5cHRpb25fb3B0aW9ucy5nZW5lcmF0ZV9rZXkgPSBkYXRhLmdlbmVyYXRlX2tleTtcbiAgICAgICAgaWYgKCFkYXRhLmdlbmVyYXRlX2tleSkge1xuICAgICAgICAgIGRhdGEuZW5jcnlwdGlvbl9vcHRpb25zLmtleSA9IGRhdGEua2V5O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRhdGEuZW5jcnlwdGlvbl90eXBlID09PSAncGFzc3BocmFzZScpIHtcbiAgICAgICAgZGF0YS5lbmNyeXB0aW9uX29wdGlvbnMucGFzc3BocmFzZSA9IGRhdGEucGFzc3BocmFzZTtcbiAgICAgICAgZGF0YS5lbmNyeXB0aW9uX29wdGlvbnMucGJrZGYyaXRlcnMgPSBkYXRhLnBia2RmMml0ZXJzO1xuICAgICAgfVxuICAgICAgZGF0YS5lbmNyeXB0aW9uX29wdGlvbnMuYWxnb3JpdGhtID0gZGF0YS5hbGdvcml0aG07XG4gICAgfVxuICAgIGRlbGV0ZSBkYXRhLmtleTtcbiAgICBkZWxldGUgZGF0YS5nZW5lcmF0ZV9rZXk7XG4gICAgZGVsZXRlIGRhdGEucGFzc3BocmFzZTtcbiAgICBkZWxldGUgZGF0YS5jb25maXJtX3Bhc3NwaHJhc2U7XG4gICAgZGVsZXRlIGRhdGEucGJrZGYyaXRlcnM7XG4gICAgZGVsZXRlIGRhdGEuZW5jcnlwdGlvbl90eXBlO1xuICAgIGRlbGV0ZSBkYXRhLmFsZ29yaXRobTtcblxuICAgIHRoaXMud3MuY2FsbCgncG9vbC5kYXRhc2V0LmNyZWF0ZScsIFtkYXRhIGFzIERhdGFzZXRDcmVhdGVdKS5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKGRhdGFzZXQpID0+IHRoaXMuaGFuZGxlWnZvbENyZWF0ZVVwZGF0ZShkYXRhc2V0KSxcbiAgICAgIGVycm9yOiAoZXJyb3I6IHVua25vd24pID0+IHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb3JtRXJyb3JIYW5kbGVyLmhhbmRsZVdzRm9ybUVycm9yKGVycm9yLCB0aGlzLmZvcm0pO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBlZGl0U3VibWl0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICB0aGlzLndzLmNhbGwoJ3Bvb2wuZGF0YXNldC5xdWVyeScsIFtbWydpZCcsICc9JywgdGhpcy5wYXJlbnRJZF1dXSkucGlwZSh1bnRpbERlc3Ryb3llZCh0aGlzKSkuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IChkYXRhc2V0cykgPT4ge1xuICAgICAgICBjb25zdCBkYXRhOiBadm9sRm9ybURhdGEgPSB0aGlzLnNlbmRBc0Jhc2ljT3JBZHZhbmNlZCh0aGlzLmZvcm0udmFsdWUpO1xuXG4gICAgICAgIGlmIChkYXRhLmluaGVyaXRfZW5jcnlwdGlvbikge1xuICAgICAgICAgIGRlbGV0ZSBkYXRhLmVuY3J5cHRpb247XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5lbmNyeXB0aW9uKSB7XG4gICAgICAgICAgZGF0YS5lbmNyeXB0aW9uX29wdGlvbnMgPSB7fTtcbiAgICAgICAgICBpZiAoZGF0YS5lbmNyeXB0aW9uX3R5cGUgPT09ICdrZXknKSB7XG4gICAgICAgICAgICBkYXRhLmVuY3J5cHRpb25fb3B0aW9ucy5nZW5lcmF0ZV9rZXkgPSBkYXRhLmdlbmVyYXRlX2tleTtcbiAgICAgICAgICAgIGlmICghZGF0YS5nZW5lcmF0ZV9rZXkpIHtcbiAgICAgICAgICAgICAgZGF0YS5lbmNyeXB0aW9uX29wdGlvbnMua2V5ID0gZGF0YS5rZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChkYXRhLmVuY3J5cHRpb25fdHlwZSA9PT0gJ3Bhc3NwaHJhc2UnKSB7XG4gICAgICAgICAgICBkYXRhLmVuY3J5cHRpb25fb3B0aW9ucy5wYXNzcGhyYXNlID0gZGF0YS5wYXNzcGhyYXNlO1xuICAgICAgICAgICAgZGF0YS5lbmNyeXB0aW9uX29wdGlvbnMucGJrZGYyaXRlcnMgPSBkYXRhLnBia2RmMml0ZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhLmVuY3J5cHRpb25fb3B0aW9ucy5hbGdvcml0aG0gPSBkYXRhLmFsZ29yaXRobTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBkYXRhLmluaGVyaXRfZW5jcnlwdGlvbjtcbiAgICAgICAgZGVsZXRlIGRhdGEua2V5O1xuICAgICAgICBkZWxldGUgZGF0YS5nZW5lcmF0ZV9rZXk7XG4gICAgICAgIGRlbGV0ZSBkYXRhLnBhc3NwaHJhc2U7XG4gICAgICAgIGRlbGV0ZSBkYXRhLmNvbmZpcm1fcGFzc3BocmFzZTtcbiAgICAgICAgZGVsZXRlIGRhdGEucGJrZGYyaXRlcnM7XG4gICAgICAgIGRlbGV0ZSBkYXRhLmVuY3J5cHRpb25fdHlwZTtcbiAgICAgICAgZGVsZXRlIGRhdGEuYWxnb3JpdGhtO1xuXG4gICAgICAgIGxldCB2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWU6IG51bWJlciB8IHN0cmluZyA9IGRhdGFzZXRzWzBdLnZvbGJsb2Nrc2l6ZS52YWx1ZS5tYXRjaCgvW2EtekEtWl0rfFsrLV0/KFswLTldKyhbLl1bMC05XSopP3xbLl1bMC05XSspKy9nKVswXTtcbiAgICAgICAgdm9sYmxvY2tzaXplSW50ZWdlclZhbHVlID0gcGFyc2VJbnQodm9sYmxvY2tzaXplSW50ZWdlclZhbHVlLCAxMCk7XG4gICAgICAgIGlmICh2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgPT09IDUxMikge1xuICAgICAgICAgIHZvbGJsb2Nrc2l6ZUludGVnZXJWYWx1ZSA9IDUxMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgPSB2b2xibG9ja3NpemVJbnRlZ2VyVmFsdWUgKiAxMDI0O1xuICAgICAgICB9XG4gICAgICAgIGRhdGEudm9sc2l6ZSA9IGRhdGEudm9sc2l6ZSBhcyBudW1iZXI7XG4gICAgICAgIGlmIChkYXRhLnZvbHNpemUgJiYgZGF0YS52b2xzaXplICUgdm9sYmxvY2tzaXplSW50ZWdlclZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgZGF0YS52b2xzaXplID0gZGF0YS52b2xzaXplICsgKHZvbGJsb2Nrc2l6ZUludGVnZXJWYWx1ZSAtIGRhdGEudm9sc2l6ZSAlIHZvbGJsb2Nrc2l6ZUludGVnZXJWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJvdW5kZWRWb2xTaXplID0gZGF0YXNldHNbMF0udm9sc2l6ZS5wYXJzZWQ7XG5cbiAgICAgICAgaWYgKGRhdGFzZXRzWzBdLnZvbHNpemUucGFyc2VkICUgdm9sYmxvY2tzaXplSW50ZWdlclZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgcm91bmRlZFZvbFNpemUgPSBkYXRhc2V0c1swXS52b2xzaXplLnBhcnNlZFxuICAgICAgICAgICsgKHZvbGJsb2Nrc2l6ZUludGVnZXJWYWx1ZSAtIGRhdGFzZXRzWzBdLnZvbHNpemUucGFyc2VkICUgdm9sYmxvY2tzaXplSW50ZWdlclZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YS52b2xzaXplIHx8IGRhdGEudm9sc2l6ZSA+PSByb3VuZGVkVm9sU2l6ZSkge1xuICAgICAgICAgIHRoaXMud3MuY2FsbCgncG9vbC5kYXRhc2V0LnVwZGF0ZScsIFt0aGlzLnBhcmVudElkLCBkYXRhIGFzIERhdGFzZXRVcGRhdGVdKS5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogKGRhdGFzZXQpID0+IHRoaXMuaGFuZGxlWnZvbENyZWF0ZVVwZGF0ZShkYXRhc2V0KSxcbiAgICAgICAgICAgIGVycm9yOiAoZXJyb3I6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdGhpcy5mb3JtRXJyb3JIYW5kbGVyLmhhbmRsZVdzRm9ybUVycm9yKGVycm9yLCB0aGlzLmZvcm0pO1xuICAgICAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmRpYWxvZ1NlcnZpY2UuZXJyb3Ioe1xuICAgICAgICAgICAgdGl0bGU6IGhlbHB0ZXh0WnZvbC56dm9sX3NhdmVfZXJyRGlhbG9nLnRpdGxlLFxuICAgICAgICAgICAgbWVzc2FnZTogaGVscHRleHRadm9sLnp2b2xfc2F2ZV9lcnJEaWFsb2cubXNnLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuc2xpZGVJblJlZi5jbG9zZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlcnJvcjogKGVycm9yOiB1bmtub3duKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5lcnJvcih0aGlzLmVycm9ySGFuZGxlci5wYXJzZUVycm9yKGVycm9yKSk7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG9uU3VibWl0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTmV3KSB7XG4gICAgICB0aGlzLmFkZFN1Ym1pdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVkaXRTdWJtaXQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGxvYWRSZWNvbW1lbmRlZEJsb2Nrc2l6ZSgpOiB2b2lkIHtcbiAgICBjb25zdCByb290ID0gdGhpcy5wYXJlbnRJZC5zcGxpdCgnLycpWzBdO1xuICAgIHRoaXMud3MuY2FsbCgncG9vbC5kYXRhc2V0LnJlY29tbWVuZGVkX3p2b2xfYmxvY2tzaXplJywgW3Jvb3RdKS5waXBlKFxuICAgICAgdGhpcy5lcnJvckhhbmRsZXIuY2F0Y2hFcnJvcigpLFxuICAgICAgdW50aWxEZXN0cm95ZWQodGhpcyksXG4gICAgKS5zdWJzY3JpYmUoKHJlY29tbWVuZGVkU2l6ZSkgPT4ge1xuICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzLnZvbGJsb2Nrc2l6ZS5zZXRWYWx1ZShyZWNvbW1lbmRlZFNpemUpO1xuICAgICAgdGhpcy5taW5pbXVtUmVjb21tZW5kZWRCbG9ja1NpemUgPSByZWNvbW1lbmRlZFNpemU7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFkZE1pbmltdW1CbG9ja3NpemVXYXJuaW5nKCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybS5jb250cm9scy52b2xibG9ja3NpemUudmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZSh1bnRpbERlc3Ryb3llZCh0aGlzKSkuc3Vic2NyaWJlKChyZWNvcmRTaXplOiBEYXRhc2V0UmVjb3JkU2l6ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50U2l6ZSA9IHRoaXMuZm9ybWF0dGVyLmNvbnZlcnRIdW1hblN0cmluZ1RvTnVtKHJlY29yZFNpemUpO1xuICAgICAgICBjb25zdCBtaW5pbXVtUmVjb21tZW5kZWRTaXplID0gdGhpcy5mb3JtYXR0ZXIuY29udmVydEh1bWFuU3RyaW5nVG9OdW0odGhpcy5taW5pbXVtUmVjb21tZW5kZWRCbG9ja1NpemUpO1xuICAgICAgICBpZiAoIWN1cnJlbnRTaXplIHx8ICFtaW5pbXVtUmVjb21tZW5kZWRTaXplIHx8IGN1cnJlbnRTaXplID49IG1pbmltdW1SZWNvbW1lbmRlZFNpemUpIHtcbiAgICAgICAgICB0aGlzLnZvbEJsb2NrU2l6ZVdhcm5pbmcgPSBudWxsO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudm9sQmxvY2tTaXplV2FybmluZyA9IGAke3RoaXMudHJhbnNsYXRlLmluc3RhbnQoaGVscHRleHRadm9sLmJsb2Nrc2l6ZV93YXJuaW5nLmEpfSAke3RoaXMubWluaW11bVJlY29tbWVuZGVkQmxvY2tTaXplfS4gJHt0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KGhlbHB0ZXh0WnZvbC5ibG9ja3NpemVfd2FybmluZy5iKX1gO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNldFJlYWRvbmx5RmllbGQocGFyZW50OiBEYXRhc2V0KTogdm9pZCB7XG4gICAgdGhpcy5yZWFkb25seU9wdGlvbnMudW5zaGlmdCh7XG4gICAgICBsYWJlbDogYCR7dGhpcy50cmFuc2xhdGUuaW5zdGFudCgnSW5oZXJpdCcpfSAoJHtwYXJlbnQucmVhZG9ubHkucmF3dmFsdWV9KWAsXG4gICAgICB2YWx1ZTogaW5oZXJpdCxcbiAgICB9KTtcblxuICAgIGxldCByZWFkb25seVZhbHVlO1xuICAgIGlmICh0aGlzLmlzTmV3KSB7XG4gICAgICByZWFkb25seVZhbHVlID0gaW5oZXJpdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVhZG9ubHlWYWx1ZSA9IHBhcmVudC5yZWFkb25seS52YWx1ZTtcbiAgICAgIGlmIChcbiAgICAgICAgcGFyZW50LnJlYWRvbmx5LnNvdXJjZSA9PT0gWmZzUHJvcGVydHlTb3VyY2UuRGVmYXVsdFxuICAgICAgICB8fCBwYXJlbnQucmVhZG9ubHkuc291cmNlID09PSBaZnNQcm9wZXJ0eVNvdXJjZS5Jbmhlcml0ZWRcbiAgICAgICkge1xuICAgICAgICByZWFkb25seVZhbHVlID0gaW5oZXJpdDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzLnJlYWRvbmx5LnNldFZhbHVlKHJlYWRvbmx5VmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVadm9sQ3JlYXRlVXBkYXRlKGRhdGFzZXQ6IERhdGFzZXQpOiB2b2lkIHtcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuc2xpZGVJblJlZi5jbG9zZShkYXRhc2V0KTtcblxuICAgIHRoaXMuc25hY2tiYXIuc3VjY2VzcyhcbiAgICAgIHRoaXMuaXNOZXdcbiAgICAgICAgPyB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdTd2l0Y2hlZCB0byBuZXcgenZvbCDCq3tuYW1lfcK7LicsIHsgbmFtZTogZ2V0RGF0YXNldExhYmVsKGRhdGFzZXQpIH0pXG4gICAgICAgIDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnWnZvbCDCq3tuYW1lfcK7IHVwZGF0ZWQuJywgeyBuYW1lOiBnZXREYXRhc2V0TGFiZWwoZGF0YXNldCkgfSksXG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9