fb0db8406f772a63289dd594a38b9dbb
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  MatButtonToggleGroupHarness: () => MatButtonToggleGroupHarness,
  MatButtonToggleHarness: () => MatButtonToggleHarness
});
module.exports = __toCommonJS(testing_exports);
var import_testing = require("@angular/cdk/testing");
var import_coercion = require("@angular/cdk/coercion");
const _MatButtonToggleHarness = class _MatButtonToggleHarness extends import_testing.ComponentHarness {
  constructor() {
    super(...arguments);
    this._label = this.locatorFor(".mat-button-toggle-label-content");
    this._button = this.locatorFor(".mat-button-toggle-button");
  }
  /**
   * Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleHarness` that meets
   * certain criteria.
   * @param options Options for filtering which button toggle instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(_MatButtonToggleHarness, options).addOption("text", options.text, (harness, text) => import_testing.HarnessPredicate.stringMatches(harness.getText(), text)).addOption("name", options.name, (harness, name) => import_testing.HarnessPredicate.stringMatches(harness.getName(), name)).addOption("checked", options.checked, (harness, checked) => __async(this, null, function* () {
      return (yield harness.isChecked()) === checked;
    })).addOption("disabled", options.disabled, (harness, disabled) => __async(this, null, function* () {
      return (yield harness.isDisabled()) === disabled;
    }));
  }
  /** Gets a boolean promise indicating if the button toggle is checked. */
  isChecked() {
    return __async(this, null, function* () {
      const button = yield this._button();
      const [checked, pressed] = yield (0, import_testing.parallel)(() => [
        button.getAttribute("aria-checked"),
        button.getAttribute("aria-pressed")
      ]);
      return (0, import_coercion.coerceBooleanProperty)(checked) || (0, import_coercion.coerceBooleanProperty)(pressed);
    });
  }
  /** Gets a boolean promise indicating if the button toggle is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      const host = yield this.host();
      return host.hasClass("mat-button-toggle-disabled");
    });
  }
  /** Gets a promise for the button toggle's name. */
  getName() {
    return __async(this, null, function* () {
      return (yield this._button()).getAttribute("name");
    });
  }
  /** Gets a promise for the button toggle's aria-label. */
  getAriaLabel() {
    return __async(this, null, function* () {
      return (yield this._button()).getAttribute("aria-label");
    });
  }
  /** Gets a promise for the button toggles's aria-labelledby. */
  getAriaLabelledby() {
    return __async(this, null, function* () {
      return (yield this._button()).getAttribute("aria-labelledby");
    });
  }
  /** Gets a promise for the button toggle's text. */
  getText() {
    return __async(this, null, function* () {
      return (yield this._label()).text();
    });
  }
  /** Gets the appearance that the button toggle is using. */
  getAppearance() {
    return __async(this, null, function* () {
      const host = yield this.host();
      const className = "mat-button-toggle-appearance-standard";
      return (yield host.hasClass(className)) ? "standard" : "legacy";
    });
  }
  /** Focuses the toggle. */
  focus() {
    return __async(this, null, function* () {
      return (yield this._button()).focus();
    });
  }
  /** Blurs the toggle. */
  blur() {
    return __async(this, null, function* () {
      return (yield this._button()).blur();
    });
  }
  /** Whether the toggle is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this._button()).isFocused();
    });
  }
  /** Toggle the checked state of the buttons toggle. */
  toggle() {
    return __async(this, null, function* () {
      return (yield this._button()).click();
    });
  }
  /**
   * Puts the button toggle in a checked state by toggling it if it's
   * currently unchecked, or doing nothing if it is already checked.
   */
  check() {
    return __async(this, null, function* () {
      if (!(yield this.isChecked())) {
        yield this.toggle();
      }
    });
  }
  /**
   * Puts the button toggle in an unchecked state by toggling it if it's
   * currently checked, or doing nothing if it's already unchecked.
   */
  uncheck() {
    return __async(this, null, function* () {
      if (yield this.isChecked()) {
        yield this.toggle();
      }
    });
  }
};
_MatButtonToggleHarness.hostSelector = ".mat-button-toggle";
let MatButtonToggleHarness = _MatButtonToggleHarness;
const _MatButtonToggleGroupHarness = class _MatButtonToggleGroupHarness extends import_testing.ComponentHarness {
  /**
   * Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleGroupHarness`
   * that meets certain criteria.
   * @param options Options for filtering which button toggle instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(_MatButtonToggleGroupHarness, options).addOption("disabled", options.disabled, (harness, disabled) => __async(this, null, function* () {
      return (yield harness.isDisabled()) === disabled;
    }));
  }
  /**
   * Gets the button toggles that are inside the group.
   * @param filter Optionally filters which toggles are included.
   */
  getToggles() {
    return __async(this, arguments, function* (filter = {}) {
      return this.locatorForAll(MatButtonToggleHarness.with(filter))();
    });
  }
  /** Gets whether the button toggle group is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      return (yield (yield this.host()).getAttribute("aria-disabled")) === "true";
    });
  }
  /** Gets whether the button toggle group is laid out vertically. */
  isVertical() {
    return __async(this, null, function* () {
      return (yield this.host()).hasClass("mat-button-toggle-vertical");
    });
  }
  /** Gets the appearance that the group is using. */
  getAppearance() {
    return __async(this, null, function* () {
      const host = yield this.host();
      const className = "mat-button-toggle-group-appearance-standard";
      return (yield host.hasClass(className)) ? "standard" : "legacy";
    });
  }
};
_MatButtonToggleGroupHarness.hostSelector = ".mat-button-toggle-group";
let MatButtonToggleGroupHarness = _MatButtonToggleGroupHarness;
