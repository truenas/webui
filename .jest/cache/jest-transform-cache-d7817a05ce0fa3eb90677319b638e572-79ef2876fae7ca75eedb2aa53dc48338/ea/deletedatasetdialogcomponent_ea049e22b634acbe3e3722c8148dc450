f897cfe0e1f58a0aaaaa72f0fa17a223
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteDatasetDialogComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const dialog_1 = require("@angular/material/dialog");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dataset_enum_1 = require("app/enums/dataset.enum");
const role_enum_1 = require("app/enums/role.enum");
const volumes_list_pool_interface_1 = require("app/interfaces/volumes-list-pool.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_validators_service_1 = require("app/modules/forms/ix-forms/services/ix-validators.service");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let DeleteDatasetDialogComponent = class DeleteDatasetDialogComponent {
    get isZvol() {
        return this.dataset.type === dataset_enum_1.DatasetType.Volume;
    }
    constructor(loader, fb, errorHandler, ws, dialog, dialogRef, translate, cdr, validators, dataset) {
        this.loader = loader;
        this.fb = fb;
        this.errorHandler = errorHandler;
        this.ws = ws;
        this.dialog = dialog;
        this.dialogRef = dialogRef;
        this.translate = translate;
        this.cdr = cdr;
        this.validators = validators;
        this.dataset = dataset;
        this.requiredRoles = [role_enum_1.Role.DatasetDelete];
        this.attachments = [];
        this.knownProcesses = [];
        this.unknownProcesses = [];
        this.form = this.fb.group({
            confirmDatasetName: ['', [forms_1.Validators.required]],
            confirm: [false, forms_1.Validators.requiredTrue],
        });
    }
    ngOnInit() {
        this.setDeleteMessage();
        this.setConfirmValidator();
        this.loadDatasetRelatedEntities();
    }
    onDelete() {
        this.deleteDataset().pipe((0, operators_1.catchError)((error) => {
            if (error.reason.includes('Device busy')) {
                return this.askToForceDelete();
            }
            return (0, rxjs_1.throwError)(() => error);
        }), this.loader.withLoader(), (0, operators_1.tap)(() => {
            this.dialogRef.close(true);
        }), (0, operators_1.catchError)(this.handleDeleteError.bind(this)), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
    }
    deleteDataset() {
        return this.ws.call('pool.dataset.delete', [this.dataset.id, { recursive: true }]);
    }
    forceDeleteDataset() {
        return this.ws.call('pool.dataset.delete', [this.dataset.id, { recursive: true, force: true }]);
    }
    askToForceDelete() {
        return this.getForceDeleteConfirmation()
            .pipe((0, operators_1.switchMap)((shouldForceDelete) => {
            return shouldForceDelete ? this.forceDeleteDataset() : (0, rxjs_1.of)();
        }));
    }
    getForceDeleteConfirmation() {
        return this.dialog.confirm({
            title: this.translate.instant('Device Busy'),
            message: this.translate.instant('Force deletion of dataset <i>{datasetName}</i>?', { datasetName: this.dataset.name }),
            buttonText: this.translate.instant('Force Delete'),
        });
    }
    handleDeleteError(error) {
        this.dialog.error({
            title: this.translate.instant('Error deleting dataset {datasetName}.', { datasetName: this.dataset.name }),
            message: error.reason,
            backtrace: error.stack,
        });
        this.dialogRef.close(true);
        return rxjs_1.EMPTY;
    }
    loadDatasetRelatedEntities() {
        (0, rxjs_1.combineLatest)([
            this.ws.call('pool.dataset.attachments', [this.dataset.id]),
            this.ws.call('pool.dataset.processes', [this.dataset.id]),
        ]).pipe(this.loader.withLoader(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: ([attachments, processes]) => {
                this.attachments = attachments;
                this.setProcesses(processes);
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.dialogRef.close(false);
                this.dialog.error(this.errorHandler.parseError(error));
            },
        });
    }
    setProcesses(processes) {
        processes.forEach((process) => {
            if (process.service) {
                return;
            }
            if (process.name && process.name !== '') {
                this.knownProcesses.push(process);
            }
            else {
                this.unknownProcesses.push(process);
            }
        });
    }
    setConfirmValidator() {
        let confirmMessage = this.translate.instant('Enter dataset name to continue.');
        if (this.isZvol) {
            confirmMessage = this.translate.instant('Enter zvol name to continue.');
        }
        this.form.controls.confirmDatasetName.setValidators(this.validators.confirmValidator(this.dataset.name, confirmMessage));
    }
    setDeleteMessage() {
        if (this.isZvol) {
            this.deleteMessage = this.translate.instant('The <i><b>{name}</b></i> zvol and all snapshots stored with it <b>will be permanently deleted</b>.', { name: this.dataset.name });
        }
        else {
            this.deleteMessage = this.translate.instant('The <i><b>{name}</b></i> dataset and all snapshots stored with it <b>will be permanently deleted</b>.', { name: this.dataset.name });
        }
    }
};
exports.DeleteDatasetDialogComponent = DeleteDatasetDialogComponent;
DeleteDatasetDialogComponent.ctorParameters = () => [
    { type: app_loader_service_1.AppLoaderService },
    { type: reactive_forms_1.FormBuilder },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: ws_service_1.WebSocketService },
    { type: dialog_service_1.DialogService },
    { type: dialog_1.MatDialogRef },
    { type: core_2.TranslateService },
    { type: core_1.ChangeDetectorRef },
    { type: ix_validators_service_1.IxValidatorsService },
    { type: volumes_list_pool_interface_1.VolumesListDataset, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.DeleteDatasetDialogComponent = DeleteDatasetDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-delete-dataset-dialog',
        template: require("./delete-dataset-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], DeleteDatasetDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,