{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/test-id/test.directive.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/test-id/test.directive.ts"],"sourcesContent":["import {\n  Directive, ElementRef, HostBinding, Input, Optional,\n} from '@angular/core';\nimport { kebabCase } from 'lodash-es';\nimport { TestOverrideDirective } from 'app/modules/test-id/test-override/test-override.directive';\n\n/**\n * Adds test attribute to the element for the benefit of Release Engineering.\n * Prefer not to use test attributes in our unit tests.\n *\n * Usage:\n * Add some description to [ixTest]. Both string and array of strings are supported.\n * Do NOT add element type, in most cases it'll be added automatically.\n *\n * Examples:\n * <button ixTest=\"reset-settings\">Reset Settings</button>\n * <input [ixTest]=\"formControl.name\">\n * <mat-option [ixTest]=\"[formControl.name, option.label]\"></mat-option>\n */\n@Directive({\n  selector: '[ixTest]',\n  standalone: true,\n})\nexport class TestDirective {\n  @Input('ixTest') description: number | string | (string | number)[];\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    @Optional() private overrideDirective: TestOverrideDirective,\n  ) {}\n\n  get normalizedDescription(): string[] {\n    const description = this.overrideDirective?.overrideDescription ?? this.description;\n    let normalizedDescription = Array.isArray(description) ? description : [description];\n\n    normalizedDescription = normalizedDescription\n      .filter((part) => part)\n      .map((part) => kebabCase(String(part)));\n\n    if (this.overrideDirective?.keepLastPart) {\n      const normalizedInitialDescription = Array.isArray(this.description) ? this.description : [this.description];\n      normalizedDescription.push(normalizedInitialDescription[normalizedInitialDescription.length - 1]);\n    }\n\n    return normalizedDescription as string[];\n  }\n\n  @HostBinding('attr.data-test')\n  get attribute(): string {\n    return [\n      this.getElementType(),\n      ...this.normalizedDescription,\n    ]\n      .filter((part) => part)\n      .join('-');\n  }\n\n  private getElementType(): string {\n    const tagName = this.elementRef.nativeElement.tagName.toLowerCase();\n\n    switch (tagName) {\n      case 'tr':\n        return 'row';\n      case 'mat-slide-toggle':\n        return 'toggle';\n      case 'mat-checkbox':\n      case 'mat-option':\n      case 'mat-select':\n      case 'mat-radio-group':\n      case 'mat-radio-button':\n      case 'mat-icon':\n      case 'mat-row':\n      case 'mat-slider':\n      case 'mat-button-toggle-group':\n      case 'mat-button-toggle':\n        return tagName.replace('mat-', '');\n      case 'input':\n      case 'button':\n      case 'select':\n      case 'textarea':\n      case 'table':\n        return tagName;\n      case 'a':\n        return 'link';\n      case 'ix-icon':\n        return 'icon';\n      case 'div':\n      case 'p':\n      case 'span':\n        return 'text';\n      case 'ix-date':\n        return tagName.replace('ix-', '');\n      default:\n        throw new Error(`Unknown element type: ${tagName}`);\n    }\n  }\n}\n"],"version":3}