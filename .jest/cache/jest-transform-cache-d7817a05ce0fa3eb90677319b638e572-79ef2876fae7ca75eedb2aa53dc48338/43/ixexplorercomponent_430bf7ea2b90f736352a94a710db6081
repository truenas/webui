c922eebf0df354798f78623038f4b4a9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxExplorerComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const form_field_1 = require("@angular/material/form-field");
const input_1 = require("@angular/material/input");
const angular_tree_component_1 = require("@bugsplat/angular-tree-component");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const explorer_type_enum_1 = require("app/enums/explorer-type.enum");
const mnt_path_enum_1 = require("app/enums/mnt-path.enum");
const role_enum_1 = require("app/enums/role.enum");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
const create_dataset_dialog_component_1 = require("app/modules/forms/ix-forms/components/ix-explorer/create-dataset-dialog/create-dataset-dialog.component");
const ix_label_component_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.component");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_override_directive_1 = require("app/modules/test-id/test-override/test-override.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
let IxExplorerComponent = class IxExplorerComponent {
    get createDatasetDisabled() {
        return !this.parentDatasetName(Array.isArray(this.value) ? this.value[0] : this.value).length
            || !this.tree.treeModel.selectedLeafNodes.every((node) => node.data.isMountpoint)
            || this.isDisabled;
    }
    constructor(controlDirective, cdr, matDialog, translate) {
        this.controlDirective = controlDirective;
        this.cdr = cdr;
        this.matDialog = matDialog;
        this.translate = translate;
        this.multiple = false;
        this.root = mnt_path_enum_1.mntPath;
        this.canCreateDataset = false;
        this.createDatasetProps = {};
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.inputValue = '';
        this.isDisabled = false;
        this.nodes = [];
        this.onChange = () => { };
        this.onTouch = () => { };
        this.ExplorerNodeType = explorer_type_enum_1.ExplorerNodeType;
        this.actionMapping = {
            mouse: {
                dblClick: (tree, node, $event) => {
                    angular_tree_component_1.TREE_ACTIONS.TOGGLE_EXPANDED(tree, node, $event);
                },
                click: (tree, node, $event) => {
                    angular_tree_component_1.TREE_ACTIONS.TOGGLE_SELECTED(tree, node, $event);
                },
            },
            keys: {
                [angular_tree_component_1.KEYS.ENTER]: (tree, node, $event) => {
                    angular_tree_component_1.TREE_ACTIONS.TOGGLE_SELECTED(tree, node, $event);
                },
            },
        };
        this.treeOptions = {
            idField: 'path',
            displayField: 'name',
            getChildren: (node) => (0, rxjs_1.firstValueFrom)(this.loadChildren(node)),
            actionMapping: this.actionMapping,
            useTriState: false,
        };
        this.controlDirective.valueAccessor = this;
    }
    ngOnChanges(changes) {
        if ('multiple' in changes) {
            this.treeOptions.useCheckbox = this.multiple;
        }
        if ('nodeProvider' in changes || 'root' in changes) {
            this.setInitialNode();
            this.cdr.markForCheck();
        }
    }
    ngOnInit() {
        this.setInitialNode();
    }
    writeValue(value) {
        this.value = value;
        this.updateInputValue();
        this.selectTreeNodes(Array.isArray(value) ? value : [value]);
        this.cdr.markForCheck();
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.cdr.markForCheck();
    }
    onNodeSelect(event) {
        if (this.multiple) {
            this.selectTreeNodes([
                ...Object.keys(this.tree.treeModel.selectedLeafNodeIds),
                event.node.id,
            ]);
        }
        else {
            this.selectTreeNodes([event.node.id]);
        }
        this.onSelectionChanged();
    }
    onNodeDeselect(event) {
        if (this.multiple) {
            this.selectTreeNodes(Object.keys(this.tree.treeModel.selectedLeafNodeIds).filter((node) => node !== event.node.id));
        }
        else {
            this.selectTreeNodes([]);
        }
        this.onSelectionChanged();
    }
    ariaLabel(node) {
        return this.translate.instant('Highlighted path is {node}. Press \'Space\' to {expand}. Press \'Enter\' to {select}.', {
            expand: (node === null || node === void 0 ? void 0 : node.isExpanded) ? 'Collapse' : 'Expand',
            select: (node === null || node === void 0 ? void 0 : node.isSelected) ? 'Unselect' : 'Select',
            node: node.data.path.replace(/.{1}/g, '$&,').replace(/\//g, 'slash'),
        });
    }
    onSelectionChanged() {
        let newValue = Object.entries(this.tree.treeModel.selectedLeafNodeIds)
            .filter(([, isSelected]) => isSelected)
            .map(([nodeId]) => nodeId);
        if (!this.multiple) {
            newValue = newValue[0];
        }
        if (newValue === this.value) {
            return;
        }
        this.value = newValue;
        this.updateInputValue();
        this.onChange(newValue);
    }
    onInputChanged(inputValue) {
        this.inputValue = inputValue;
        this.value = this.multiple ? inputValue.split(',') : inputValue;
        this.selectTreeNodes(Array.isArray(this.value) ? this.value : [this.value]);
        this.onChange(this.value);
    }
    isPathSelected(path) {
        var _a;
        return typeof this.value === 'string' ? this.value === path : (_a = this.value) === null || _a === void 0 ? void 0 : _a.some((content) => content === path);
    }
    parentDatasetName(path) {
        return (!path || path === this.root) ? '' : path.replace(`${this.root}/`, '');
    }
    createDataset() {
        this.matDialog.open(create_dataset_dialog_component_1.CreateDatasetDialogComponent, {
            data: {
                parentId: this.parentDatasetName(Array.isArray(this.value) ? this.value[0] : this.value),
                dataset: this.createDatasetProps,
            },
        }).afterClosed()
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((dataset) => {
            if (!dataset) {
                return;
            }
            const parentNode = this.tree.treeModel.selectedLeafNodes[0];
            parentNode === null || parentNode === void 0 ? void 0 : parentNode.expand();
            this.setInitialNode();
            this.writeValue(`${this.root}/${dataset.name}`);
            this.onChange(this.value);
            this.tree.treeModel.update();
        });
    }
    /**
     * Provides typing in templates
     */
    typeNode(node) {
        return node;
    }
    setInitialNode() {
        this.nodes = [
            {
                path: this.root,
                name: this.root,
                hasChildren: true,
                type: explorer_type_enum_1.ExplorerNodeType.Directory,
                isMountpoint: true,
            },
        ];
    }
    updateInputValue() {
        this.inputValue = Array.isArray(this.value) ? this.value.filter((value) => value.length).join(',') : this.value || '';
    }
    selectTreeNodes(nodeIds) {
        const treeState = Object.assign(Object.assign({}, this.tree.treeModel.getState()), { selectedLeafNodeIds: nodeIds.reduce((acc, nodeId) => (Object.assign(Object.assign({}, acc), { [nodeId]: true })), {}) });
        this.tree.treeModel.setState(treeState);
    }
    loadChildren(node) {
        this.loadingError = null;
        this.cdr.markForCheck();
        if (!this.nodeProvider) {
            return (0, rxjs_1.of)([]);
        }
        return this.nodeProvider(node).pipe((0, operators_1.catchError)((error) => {
            this.loadingError = 'reason' in error ? error.reason : error.message;
            this.cdr.markForCheck();
            return (0, rxjs_1.of)([]);
        }));
    }
};
exports.IxExplorerComponent = IxExplorerComponent;
IxExplorerComponent.ctorParameters = () => [
    { type: forms_1.NgControl },
    { type: core_1.ChangeDetectorRef },
    { type: dialog_1.MatDialog },
    { type: core_2.TranslateService }
];
IxExplorerComponent.propDecorators = {
    label: [{ type: core_1.Input }],
    hint: [{ type: core_1.Input }],
    multiple: [{ type: core_1.Input }],
    tooltip: [{ type: core_1.Input }],
    required: [{ type: core_1.Input }],
    root: [{ type: core_1.Input }],
    nodeProvider: [{ type: core_1.Input }],
    canCreateDataset: [{ type: core_1.Input }],
    createDatasetProps: [{ type: core_1.Input }],
    tree: [{ type: core_1.ViewChild, args: ['tree', { static: true },] }]
};
exports.IxExplorerComponent = IxExplorerComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-explorer',
        template: require("./ix-explorer.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_label_component_1.IxLabelComponent,
            input_1.MatInput,
            button_1.MatButton,
            ix_icon_component_1.IxIconComponent,
            angular_tree_component_1.TreeModule,
            form_field_1.MatError,
            ix_errors_component_1.IxErrorsComponent,
            form_field_1.MatHint,
            core_2.TranslateModule,
            requires_roles_directive_1.RequiresRolesDirective,
            test_directive_1.TestDirective,
            test_override_directive_1.TestOverrideDirective,
        ],
    })
], IxExplorerComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,