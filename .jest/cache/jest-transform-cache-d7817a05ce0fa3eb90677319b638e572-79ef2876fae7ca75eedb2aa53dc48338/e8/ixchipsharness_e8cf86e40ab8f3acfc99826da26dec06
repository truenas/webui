88c4a8e2304a7f1490461fa571eb5488
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxChipsHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/autocomplete/testing");
const testing_3 = require("@angular/material/chips/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxChipsHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getMatChipListHarness = this.locatorFor(testing_3.MatChipGridHarness);
        this.getAutoCompleteHarness = this.locatorFor(testing_2.MatAutocompleteHarness);
        this.getMatChips = this.locatorForAll(testing_3.MatChipHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxChipsHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    selectSuggestionValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setValue([value]);
            const harness = (yield this.getAutoCompleteHarness());
            yield harness.focus();
            yield harness.selectOption({ text: value });
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const chips = yield this.getMatChips();
            if (!chips.length) {
                return [];
            }
            return (0, testing_1.parallel)(() => chips.map((chip) => chip.getText()));
        });
    }
    setValue(values) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.removeAllChips();
            if (values.length) {
                yield this.addChips(values);
            }
        });
    }
    removeAllChips() {
        return __awaiter(this, void 0, void 0, function* () {
            const chips = yield this.getMatChips();
            if (!chips.length) {
                return;
            }
            yield (0, testing_1.parallel)(() => chips.map((chip) => chip.remove()));
        });
    }
    addChips(values) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield (yield this.getMatChipListHarness()).getInput();
            for (const value of values) {
                yield input.setValue(value);
                yield input.sendSeparatorKey(testing_1.TestKey.ENTER);
            }
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatChipListHarness()).isDisabled();
        });
    }
}
exports.IxChipsHarness = IxChipsHarness;
IxChipsHarness.hostSelector = 'ix-chips';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1jaGlwcy9peC1jaGlwcy5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUU4QjtBQUM5QixvRUFBZ0Y7QUFDaEYsNkRBR3lDO0FBQ3pDLHNHQUFpRztBQUVqRyxrRkFBOEU7QUFNOUUsTUFBYSxjQUFlLFNBQVEsMEJBQWdCO0lBQXBEOztRQVFFLDBCQUFxQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsNEJBQWtCLENBQUMsQ0FBQztRQUM1RCwyQkFBc0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGdDQUFzQixDQUFDLENBQUM7UUFDakUsZ0JBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLHdCQUFjLENBQUMsQ0FBQztRQUNqRCxpQkFBWSxHQUFHLDRCQUFZLENBQUM7SUF3RDlCLENBQUM7SUFoRUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUE4QjtRQUN4QyxPQUFPLElBQUksMEJBQWdCLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQzthQUNqRCxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQywwQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUgsQ0FBQztJQU9LLFlBQVk7O1lBQ2hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlDQUFjLENBQUMsRUFBRSxDQUFDO1lBQzlELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDWCxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQixDQUFDO0tBQUE7SUFFSyxxQkFBcUIsQ0FBQyxLQUFhOztZQUN2QyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sT0FBTyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO1lBRXRELE1BQU0sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3RCLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLENBQUM7S0FBQTtJQUVLLFFBQVE7O1lBQ1osTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBRUQsT0FBTyxJQUFBLGtCQUFRLEVBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RCxDQUFDO0tBQUE7SUFFSyxRQUFRLENBQUMsTUFBZ0I7O1lBQzdCLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBRTVCLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNsQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUIsQ0FBQztRQUNILENBQUM7S0FBQTtJQUVLLGNBQWM7O1lBQ2xCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2xCLE9BQU87WUFDVCxDQUFDO1lBRUQsTUFBTSxJQUFBLGtCQUFRLEVBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO0tBQUE7SUFFSyxRQUFRLENBQUMsTUFBZ0I7O1lBQzdCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEUsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUUsQ0FBQztnQkFDM0IsTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixNQUFNLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLENBQUM7UUFDSCxDQUFDO0tBQUE7SUFFSyxVQUFVOztZQUNkLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDM0QsQ0FBQztLQUFBOztBQWxFSCx3Q0FtRUM7QUFsRWlCLDJCQUFZLEdBQUcsVUFBVSxBQUFiLENBQWMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1jaGlwcy9peC1jaGlwcy5oYXJuZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhc2VIYXJuZXNzRmlsdGVycywgQ29tcG9uZW50SGFybmVzcywgSGFybmVzc1ByZWRpY2F0ZSwgcGFyYWxsZWwsIFRlc3RLZXksXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IE1hdEF1dG9jb21wbGV0ZUhhcm5lc3MgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9hdXRvY29tcGxldGUvdGVzdGluZyc7XG5pbXBvcnQge1xuICBNYXRDaGlwR3JpZEhhcm5lc3MsXG4gIE1hdENoaXBIYXJuZXNzLFxufSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGlwcy90ZXN0aW5nJztcbmltcG9ydCB7IEl4TGFiZWxIYXJuZXNzIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1sYWJlbC9peC1sYWJlbC5oYXJuZXNzJztcbmltcG9ydCB7IEl4Rm9ybUNvbnRyb2xIYXJuZXNzIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvaW50ZXJmYWNlcy9peC1mb3JtLWNvbnRyb2wtaGFybmVzcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgZ2V0RXJyb3JUZXh0IH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdXRpbHMvaGFybmVzcy51dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXhDaGlwc0hhcm5lc3NGaWx0ZXJzIGV4dGVuZHMgQmFzZUhhcm5lc3NGaWx0ZXJzIHtcbiAgbGFiZWw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEl4Q2hpcHNIYXJuZXNzIGV4dGVuZHMgQ29tcG9uZW50SGFybmVzcyBpbXBsZW1lbnRzIEl4Rm9ybUNvbnRyb2xIYXJuZXNzIHtcbiAgc3RhdGljIHJlYWRvbmx5IGhvc3RTZWxlY3RvciA9ICdpeC1jaGlwcyc7XG5cbiAgc3RhdGljIHdpdGgob3B0aW9uczogSXhDaGlwc0hhcm5lc3NGaWx0ZXJzKTogSGFybmVzc1ByZWRpY2F0ZTxJeENoaXBzSGFybmVzcz4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZShJeENoaXBzSGFybmVzcywgb3B0aW9ucylcbiAgICAgIC5hZGRPcHRpb24oJ2xhYmVsJywgb3B0aW9ucy5sYWJlbCwgKGhhcm5lc3MsIGxhYmVsKSA9PiBIYXJuZXNzUHJlZGljYXRlLnN0cmluZ01hdGNoZXMoaGFybmVzcy5nZXRMYWJlbFRleHQoKSwgbGFiZWwpKTtcbiAgfVxuXG4gIGdldE1hdENoaXBMaXN0SGFybmVzcyA9IHRoaXMubG9jYXRvckZvcihNYXRDaGlwR3JpZEhhcm5lc3MpO1xuICBnZXRBdXRvQ29tcGxldGVIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yKE1hdEF1dG9jb21wbGV0ZUhhcm5lc3MpO1xuICBnZXRNYXRDaGlwcyA9IHRoaXMubG9jYXRvckZvckFsbChNYXRDaGlwSGFybmVzcyk7XG4gIGdldEVycm9yVGV4dCA9IGdldEVycm9yVGV4dDtcblxuICBhc3luYyBnZXRMYWJlbFRleHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBsYWJlbCA9IGF3YWl0IHRoaXMubG9jYXRvckZvck9wdGlvbmFsKEl4TGFiZWxIYXJuZXNzKSgpO1xuICAgIGlmICghbGFiZWwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGxhYmVsLmdldExhYmVsKCk7XG4gIH1cblxuICBhc3luYyBzZWxlY3RTdWdnZXN0aW9uVmFsdWUodmFsdWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuc2V0VmFsdWUoW3ZhbHVlXSk7XG4gICAgY29uc3QgaGFybmVzcyA9IChhd2FpdCB0aGlzLmdldEF1dG9Db21wbGV0ZUhhcm5lc3MoKSk7XG5cbiAgICBhd2FpdCBoYXJuZXNzLmZvY3VzKCk7XG4gICAgYXdhaXQgaGFybmVzcy5zZWxlY3RPcHRpb24oeyB0ZXh0OiB2YWx1ZSB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldFZhbHVlKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBjaGlwcyA9IGF3YWl0IHRoaXMuZ2V0TWF0Q2hpcHMoKTtcblxuICAgIGlmICghY2hpcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFsbGVsKCgpID0+IGNoaXBzLm1hcCgoY2hpcCkgPT4gY2hpcC5nZXRUZXh0KCkpKTtcbiAgfVxuXG4gIGFzeW5jIHNldFZhbHVlKHZhbHVlczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLnJlbW92ZUFsbENoaXBzKCk7XG5cbiAgICBpZiAodmFsdWVzLmxlbmd0aCkge1xuICAgICAgYXdhaXQgdGhpcy5hZGRDaGlwcyh2YWx1ZXMpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUFsbENoaXBzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGNoaXBzID0gYXdhaXQgdGhpcy5nZXRNYXRDaGlwcygpO1xuICAgIGlmICghY2hpcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXQgcGFyYWxsZWwoKCkgPT4gY2hpcHMubWFwKChjaGlwKSA9PiBjaGlwLnJlbW92ZSgpKSk7XG4gIH1cblxuICBhc3luYyBhZGRDaGlwcyh2YWx1ZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgaW5wdXQgPSBhd2FpdCAoYXdhaXQgdGhpcy5nZXRNYXRDaGlwTGlzdEhhcm5lc3MoKSkuZ2V0SW5wdXQoKTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgYXdhaXQgaW5wdXQuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgYXdhaXQgaW5wdXQuc2VuZFNlcGFyYXRvcktleShUZXN0S2V5LkVOVEVSKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpc0Rpc2FibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRNYXRDaGlwTGlzdEhhcm5lc3MoKSkuaXNEaXNhYmxlZCgpO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=