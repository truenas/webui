0fba78bed1981b859fd422ad60035c3e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorHandlerService = void 0;
const http_1 = require("@angular/common/http");
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const Sentry = __importStar(require("@sentry/angular"));
const rxjs_1 = require("rxjs");
const error_parser_helper_1 = require("app/helpers/error-parser.helper");
const websocket_helper_1 = require("app/helpers/websocket.helper");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
let ErrorHandlerService = class ErrorHandlerService {
    get translate() {
        if (!this.translateService) {
            this.translateService = this.injector.get(core_2.TranslateService);
        }
        return this.translateService;
    }
    get dialog() {
        if (!this.dialogService) {
            this.dialogService = this.injector.get(dialog_service_1.DialogService);
        }
        return this.dialogService;
    }
    constructor(injector) {
        this.injector = injector;
    }
    handleError(error) {
        console.error(error);
        const parsedError = this.parseError(error);
        if (parsedError) {
            error = parsedError;
        }
        if (!this.shouldLogToSentry(error)) {
            return;
        }
        this.logToSentry(error);
    }
    parseError(error) {
        var _a;
        if (this.isWebSocketError(error)) {
            return this.parseWsError(error);
        }
        if (this.isJobError(error)) {
            return this.parseJobError(error);
        }
        if (this.isHttpError(error)) {
            return this.parseHttpError(error);
        }
        if (error instanceof Error) {
            return {
                title: ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.instant('Error')) || 'Error',
                message: error.message,
            };
        }
        return null;
    }
    logToSentry(error) {
        Sentry.captureException((0, error_parser_helper_1.sentryCustomExceptionExtraction)(error));
    }
    isWebSocketError(error) {
        return (0, websocket_helper_1.isWebSocketError)(error);
    }
    isJobError(obj) {
        return typeof obj === 'object'
            && ('state' in obj
                && 'error' in obj
                && 'exception' in obj
                && 'exc_info' in obj);
    }
    isHttpError(obj) {
        return obj instanceof http_1.HttpErrorResponse;
    }
    catchError() {
        return (source$) => {
            return source$.pipe((0, rxjs_1.catchError)((error) => {
                this.showErrorModal(error);
                return rxjs_1.EMPTY;
            }));
        };
    }
    showErrorModal(error) {
        this.dialog.error(this.parseError(error));
    }
    parseWsError(error) {
        var _a, _b, _c;
        return {
            title: error.type || ((_a = error.trace) === null || _a === void 0 ? void 0 : _a.class) || this.translate.instant('Error'),
            message: error.reason || ((_b = error === null || error === void 0 ? void 0 : error.error) === null || _b === void 0 ? void 0 : _b.toString()),
            backtrace: ((_c = error.trace) === null || _c === void 0 ? void 0 : _c.formatted) || '',
        };
    }
    parseJobError(failedJob) {
        var _a;
        const errorJob = Object.assign({}, failedJob);
        if ((_a = errorJob.exc_info) === null || _a === void 0 ? void 0 : _a.extra) {
            errorJob.extra = errorJob.exc_info.extra;
        }
        if (errorJob.extra && Array.isArray(errorJob.extra)) {
            return this.parseJobWithArrayExtra(errorJob);
        }
        return {
            title: errorJob.state,
            message: errorJob.error,
            backtrace: errorJob.logs_excerpt || errorJob.exception,
        };
    }
    parseJobWithArrayExtra(errorJob) {
        const errors = [];
        errorJob.extra.forEach((extraItem) => {
            var _a, _b;
            const field = extraItem[0].split('.')[1];
            const extractedError = extraItem[1];
            const parsedError = this.parseJobExtractedError(errorJob, extractedError);
            if (Array.isArray(parsedError)) {
                for (const err of parsedError) {
                    if (err.title === (((_a = this.translate) === null || _a === void 0 ? void 0 : _a.instant('Error')) || 'Error')) {
                        err.title = err.title + ': ' + field;
                    }
                    else {
                        err.title = field + ': ' + err.title;
                    }
                    errors.push(err);
                }
            }
            else {
                if (parsedError.title === (((_b = this.translate) === null || _b === void 0 ? void 0 : _b.instant('Error')) || 'Error')) {
                    parsedError.title = parsedError.title + ': ' + field;
                }
                else {
                    parsedError.title = field + ': ' + parsedError.title;
                }
                errors.push(parsedError);
            }
        });
        return errors;
    }
    parseJobExtractedError(errorJob, extractedError) {
        var _a;
        let parsedError;
        if (this.isWebSocketError(extractedError)) {
            parsedError = this.parseWsError(extractedError);
        }
        else if (this.isJobError(extractedError)) {
            parsedError = this.parseJobError(extractedError);
        }
        else if (typeof extractedError === 'string') {
            parsedError = {
                title: (((_a = this.translate) === null || _a === void 0 ? void 0 : _a.instant('Error')) || 'Error'),
                message: extractedError,
                backtrace: errorJob.logs_path || errorJob.exception,
            };
        }
        return parsedError;
    }
    parseHttpErrorObject(error) {
        const errors = [];
        Object.keys(error.error).forEach((fieldKey) => {
            var _a;
            const errorEntity = error.error[fieldKey];
            if (typeof errorEntity === 'string') {
                errors.push({
                    title: ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.instant('Error')) || 'Error',
                    message: errorEntity,
                });
            }
            else {
                errorEntity.forEach((item) => {
                    var _a;
                    errors.push({
                        title: ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.instant('Error')) || 'Error',
                        message: item,
                    });
                });
            }
        });
        return errors;
    }
    parseHttpError(error) {
        var _a, _b, _c, _d, _e, _f, _g;
        console.error(error);
        switch (error.status) {
            case 401:
            case 403:
            case 404: {
                return {
                    title: error.statusText,
                    message: error.message,
                };
            }
            case 409: {
                return this.parseHttpErrorObject(error);
            }
            case 400: {
                if (typeof error.error === 'object') {
                    return this.parseHttpErrorObject(error);
                }
                return {
                    title: ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.instant('Error ({code})', { code: error.status }))
                        || `Error (${error.status})`,
                    message: String(error.error),
                };
            }
            case 500: {
                const errorMessage = (_b = error.error) === null || _b === void 0 ? void 0 : _b.error_message;
                if (errorMessage) {
                    return {
                        title: ((_c = this.translate) === null || _c === void 0 ? void 0 : _c.instant('Error ({code})', { code: error.status }))
                            || `Error (${error.status})`,
                        message: errorMessage,
                    };
                }
                return {
                    title: ((_d = this.translate) === null || _d === void 0 ? void 0 : _d.instant('Error ({code})', { code: error.status }))
                        || `Error (${error.status})`,
                    message: ((_e = this.translate) === null || _e === void 0 ? void 0 : _e.instant('Server error: {error}', { error: error.message || error.error }))
                        || `Server error: ${error.message || error.error}`,
                };
            }
            default: {
                return {
                    title: ((_f = this.translate) === null || _f === void 0 ? void 0 : _f.instant('Error ({code})', { code: error.status }))
                        || `Error (${error.status})`,
                    message: error.message || ((_g = this.translate) === null || _g === void 0 ? void 0 : _g.instant('Fatal error! Check logs.')) || 'Fatal error! Check logs.',
                };
            }
        }
    }
    shouldLogToSentry(error) {
        if (error instanceof CloseEvent) {
            return false;
        }
        return true;
    }
};
exports.ErrorHandlerService = ErrorHandlerService;
ErrorHandlerService.ctorParameters = () => [
    { type: core_1.Injector }
];
exports.ErrorHandlerService = ErrorHandlerService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], ErrorHandlerService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,