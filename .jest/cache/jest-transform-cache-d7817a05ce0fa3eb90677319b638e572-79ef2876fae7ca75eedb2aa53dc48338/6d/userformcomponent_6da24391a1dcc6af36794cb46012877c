bb7f0f5f7464fbc710712e7177f277d0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const divider_1 = require("@angular/material/divider");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const all_commands_constant_1 = require("app/constants/all-commands.constant");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const warn_about_unsaved_changes_directive_1 = require("app/directives/warn-about-unsaved-changes/warn-about-unsaved-changes.directive");
const role_enum_1 = require("app/enums/role.enum");
const options_operators_1 = require("app/helpers/operators/options.operators");
const user_form_1 = require("app/helptext/account/user-form");
const user_interface_1 = require("app/interfaces/user.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const simple_async_combobox_provider_1 = require("app/modules/forms/ix-forms/classes/simple-async-combobox-provider");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_chips_component_1 = require("app/modules/forms/ix-forms/components/ix-chips/ix-chips.component");
const ix_combobox_component_1 = require("app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.component");
const ix_explorer_component_1 = require("app/modules/forms/ix-forms/components/ix-explorer/ix-explorer.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_file_input_component_1 = require("app/modules/forms/ix-forms/components/ix-file-input/ix-file-input.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_permissions_component_1 = require("app/modules/forms/ix-forms/components/ix-permissions/ix-permissions.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const ix_slide_toggle_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component");
const ix_textarea_component_1 = require("app/modules/forms/ix-forms/components/ix-textarea/ix-textarea.component");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ix_validators_service_1 = require("app/modules/forms/ix-forms/services/ix-validators.service");
const email_validation_1 = require("app/modules/forms/ix-forms/validators/email-validation/email-validation");
const forbidden_values_validation_1 = require("app/modules/forms/ix-forms/validators/forbidden-values-validation/forbidden-values-validation");
const password_validation_1 = require("app/modules/forms/ix-forms/validators/password-validation/password-validation");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const user_actions_1 = require("app/pages/credentials/users/store/user.actions");
const user_selectors_1 = require("app/pages/credentials/users/store/user.selectors");
const download_service_1 = require("app/services/download.service");
const filesystem_service_1 = require("app/services/filesystem.service");
const storage_service_1 = require("app/services/storage.service");
const user_service_1 = require("app/services/user.service");
const ws_service_1 = require("app/services/ws.service");
const defaultHomePath = '/var/empty';
let UserFormComponent = class UserFormComponent {
    get isNewUser() {
        return !this.editingUser;
    }
    get title() {
        return this.isNewUser ? this.translate.instant('Add User') : this.translate.instant('Edit User');
    }
    get isEditingBuiltinUser() {
        return !this.isNewUser && this.editingUser.builtin;
    }
    get homeCreateWarning() {
        const homeCreate = this.form.value.home_create;
        const home = this.form.value.home;
        const homeMode = this.form.value.home_mode;
        if (this.isNewUser) {
            if (!homeCreate && home !== defaultHomePath) {
                return this.translate.instant('With this configuration, the existing directory {path} will be used as a home directory without creating a new directory for the user.', { path: '\'' + this.form.value.home + '\'' });
            }
        }
        else {
            if (this.editingUser.immutable || home === defaultHomePath) {
                return '';
            }
            if (!homeCreate && this.editingUser.home !== home) {
                return this.translate.instant('Operation will change permissions on path: {path}', { path: '\'' + this.form.value.home + '\'' });
            }
            if (!homeCreate && !!homeMode && this.homeModeOldValue !== homeMode) {
                return this.translate.instant('Operation will change permissions on path: {path}', { path: '\'' + this.form.value.home + '\'' });
            }
        }
        return '';
    }
    constructor(ws, errorHandler, cdr, fb, translate, validatorsService, filesystemService, slideInRef, snackbar, storageService, downloadService, store$, dialog, userService, editingUser) {
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.cdr = cdr;
        this.fb = fb;
        this.translate = translate;
        this.validatorsService = validatorsService;
        this.filesystemService = filesystemService;
        this.slideInRef = slideInRef;
        this.snackbar = snackbar;
        this.storageService = storageService;
        this.downloadService = downloadService;
        this.store$ = store$;
        this.dialog = dialog;
        this.userService = userService;
        this.editingUser = editingUser;
        this.isFormLoading = false;
        this.subscriptions = [];
        this.homeModeOldValue = '';
        this.requiredRoles = [role_enum_1.Role.AccountWrite];
        this.form = this.fb.group({
            full_name: ['', [forms_1.Validators.required]],
            username: ['', [
                    forms_1.Validators.required,
                    forms_1.Validators.pattern(user_service_1.UserService.namePattern),
                    forms_1.Validators.maxLength(32),
                ]],
            email: ['', [(0, email_validation_1.emailValidator)()]],
            password: ['', [
                    this.validatorsService.validateOnCondition(() => this.isNewUser, forms_1.Validators.required),
                ]],
            password_conf: ['', [
                    this.validatorsService.validateOnCondition(() => this.isNewUser, forms_1.Validators.required),
                ]],
            uid: [null, [forms_1.Validators.required]],
            group: [null],
            group_create: [true],
            groups: [[]],
            home: [defaultHomePath, []],
            home_mode: ['700'],
            home_create: [false],
            sshpubkey: [null],
            sshpubkey_file: [null],
            password_disabled: [false],
            shell: [null],
            locked: [false],
            sudo_commands: [[]],
            sudo_commands_all: [false],
            sudo_commands_nopasswd: [[]],
            sudo_commands_nopasswd_all: [false],
            smb: [true],
            ssh_password_enabled: [false],
        });
        this.tooltips = {
            full_name: user_form_1.helptextUsers.user_form_full_name_tooltip,
            username: user_form_1.helptextUsers.user_form_username_tooltip,
            email: user_form_1.helptextUsers.user_form_email_tooltip,
            password: user_form_1.helptextUsers.user_form_password_tooltip,
            password_edit: user_form_1.helptextUsers.user_form_password_edit_tooltip,
            password_conf_edit: user_form_1.helptextUsers.user_form_password_edit_tooltip,
            uid: user_form_1.helptextUsers.user_form_uid_tooltip,
            group: user_form_1.helptextUsers.user_form_primary_group_tooltip,
            group_create: user_form_1.helptextUsers.user_form_group_create_tooltip,
            groups: user_form_1.helptextUsers.user_form_aux_groups_tooltip,
            home: user_form_1.helptextUsers.user_form_dirs_explorer_tooltip,
            home_mode: user_form_1.helptextUsers.user_form_home_dir_permissions_tooltip,
            home_create: user_form_1.helptextUsers.user_form_home_create_tooltip,
            sshpubkey: user_form_1.helptextUsers.user_form_auth_sshkey_tooltip,
            password_disabled: user_form_1.helptextUsers.user_form_auth_pw_enable_tooltip,
            shell: user_form_1.helptextUsers.user_form_shell_tooltip,
            locked: user_form_1.helptextUsers.user_form_lockuser_tooltip,
            smb: user_form_1.helptextUsers.user_form_smb_tooltip,
            smbBuiltin: user_form_1.helptextUsers.smbBuiltin,
        };
        this.groupOptions$ = this.ws.call('group.query').pipe((0, operators_1.map)((groups) => groups.map((group) => ({ label: group.group, value: group.id }))));
        this.treeNodeProvider = this.filesystemService.getFilesystemNodeProvider({ directoriesOnly: true });
        this.groupProvider = new simple_async_combobox_provider_1.SimpleAsyncComboboxProvider(this.groupOptions$);
        this.autocompleteProvider = (query) => {
            return this.userService.groupQueryDsCache(query).pipe((0, operators_1.map)((groups) => groups.map((group) => group.group)));
        };
        this.form.controls.smb.errors$.pipe((0, operators_1.filter)((error) => error === null || error === void 0 ? void 0 : error.manualValidateErrorMsg), (0, operators_1.switchMap)(() => this.form.controls.password.valueChanges), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            if (this.form.controls.smb.invalid) {
                this.form.controls.smb.updateValueAndValidity();
            }
        });
    }
    ngOnInit() {
        this.setupForm();
    }
    setupForm() {
        var _a;
        this.form.controls.sshpubkey_file.valueChanges.pipe((0, operators_1.switchMap)((files) => {
            return !(files === null || files === void 0 ? void 0 : files.length) ? (0, rxjs_1.of)('') : (0, rxjs_1.from)(files[0].text());
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe((key) => {
            this.form.controls.sshpubkey.setValue(key);
        });
        this.form.controls.group.valueChanges.pipe((0, operators_1.debounceTime)(300), (0, until_destroy_1.untilDestroyed)(this)).subscribe((group) => {
            this.updateShellOptions(group, this.form.value.groups);
        });
        this.form.controls.groups.valueChanges.pipe((0, operators_1.debounceTime)(300), (0, until_destroy_1.untilDestroyed)(this)).subscribe((groups) => {
            this.updateShellOptions(this.form.value.group, groups);
        });
        this.form.controls.home.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((home) => {
            var _a;
            if (home === defaultHomePath || ((_a = this.editingUser) === null || _a === void 0 ? void 0 : _a.immutable)) {
                this.form.controls.home_mode.disable();
            }
            else {
                this.form.controls.home_mode.enable();
            }
        });
        this.form.controls.home_create.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((checked) => {
            if (checked) {
                this.form.patchValue({ home_mode: '700' });
            }
        });
        this.form.addValidators((0, password_validation_1.matchOthersFgValidator)('password_conf', ['password'], this.translate.instant(this.isNewUser ? 'Password and confirmation should match.' : 'New password and confirmation should match.')));
        if (((_a = this.editingUser) === null || _a === void 0 ? void 0 : _a.home) && this.editingUser.home !== defaultHomePath) {
            this.storageService.filesystemStat(this.editingUser.home).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((stat) => {
                this.form.patchValue({ home_mode: stat.mode.toString(8).substring(2, 5) });
                this.homeModeOldValue = stat.mode.toString(8).substring(2, 5);
            });
        }
        else {
            this.form.patchValue({ home_mode: '700' });
            this.form.controls.home_mode.disable();
        }
        this.subscriptions.push(this.form.controls.locked.disabledWhile(this.form.controls.password_disabled.value$), this.form.controls.password.disabledWhile(this.form.controls.password_disabled.value$), this.form.controls.password_conf.disabledWhile(this.form.controls.password_disabled.value$), this.form.controls.group.disabledWhile(this.form.controls.group_create.value$), this.form.controls.sudo_commands.disabledWhile(this.form.controls.sudo_commands_all.value$), this.form.controls.sudo_commands_nopasswd.disabledWhile(this.form.controls.sudo_commands_nopasswd_all.value$));
        if (this.isNewUser) {
            this.setupNewUserForm();
        }
        else {
            this.setupEditUserForm(this.editingUser);
        }
    }
    onSubmit() {
        const values = this.form.value;
        const body = {
            email: values.email ? values.email : null,
            full_name: values.full_name,
            group: values.group,
            groups: values.groups,
            home_mode: this.homeModeOldValue !== values.home_mode ? values.home_mode : undefined,
            home_create: values.home_create,
            home: values.home,
            locked: values.password_disabled ? false : values.locked,
            password_disabled: values.password_disabled,
            shell: values.shell,
            smb: values.smb,
            ssh_password_enabled: values.ssh_password_enabled,
            sshpubkey: values.sshpubkey ? values.sshpubkey.trim() : values.sshpubkey,
            sudo_commands: values.sudo_commands_all ? [all_commands_constant_1.allCommands] : values.sudo_commands,
            sudo_commands_nopasswd: values.sudo_commands_nopasswd_all ? [all_commands_constant_1.allCommands] : values.sudo_commands_nopasswd,
            username: values.username,
        };
        let homeCreateWarningConfirmation$ = (0, rxjs_1.of)(true);
        if (this.homeCreateWarning) {
            homeCreateWarningConfirmation$ = this.dialog.confirm({
                title: this.translate.instant('Warning!'),
                message: this.homeCreateWarning,
            });
        }
        homeCreateWarningConfirmation$.pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                this.isFormLoading = true;
                this.cdr.markForCheck();
                let request$;
                let nextRequest$;
                if (this.isNewUser) {
                    request$ = this.ws.call('user.create', [Object.assign(Object.assign({}, body), { group_create: values.group_create, password: values.password, uid: values.uid })]);
                }
                else {
                    const passwordNotEmpty = values.password !== '' && values.password_conf !== '';
                    if (passwordNotEmpty && !values.password_disabled) {
                        body.password = values.password;
                    }
                    if (body.home_create) {
                        request$ = this.ws.call('user.update', [this.editingUser.id, { home_create: true, home: body.home }]);
                        delete body.home_create;
                        delete body.home;
                        nextRequest$ = this.ws.call('user.update', [this.editingUser.id, body]);
                    }
                    else {
                        request$ = this.ws.call('user.update', [this.editingUser.id, body]);
                    }
                }
                request$.pipe((0, operators_1.switchMap)((id) => nextRequest$ || (0, rxjs_1.of)(id)), (0, operators_1.filter)(Boolean), (0, operators_1.switchMap)((id) => this.ws.call('user.query', [[['id', '=', id]]])), (0, operators_1.map)((users) => users[0]), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
                    next: (user) => {
                        if (this.isNewUser) {
                            this.snackbar.success(this.translate.instant('User added'));
                            this.store$.dispatch((0, user_actions_1.userAdded)({ user }));
                        }
                        else {
                            this.snackbar.success(this.translate.instant('User updated'));
                            this.store$.dispatch((0, user_actions_1.userChanged)({ user }));
                        }
                        this.isFormLoading = false;
                        this.slideInRef.close();
                        this.cdr.markForCheck();
                    },
                    error: (error) => {
                        this.isFormLoading = false;
                        this.errorHandler.handleWsFormError(error, this.form);
                        this.cdr.markForCheck();
                    },
                });
            },
            complete: () => {
            },
        });
    }
    onDownloadSshPublicKey() {
        const name = this.form.controls.username.value;
        const key = this.form.controls.sshpubkey.value;
        const blob = new Blob([key], { type: 'text/plain' });
        this.downloadService.downloadBlob(blob, `${name}_public_key_rsa`);
    }
    setupNewUserForm() {
        this.setNamesInUseValidator();
        this.setHomeSharePath();
        this.setNextUserId();
        this.setFirstShellOption();
        this.detectFullNameChanges();
        this.subscriptions.push(this.form.controls.password.disabledWhile(this.form.controls.password_disabled.value$), this.form.controls.password_conf.disabledWhile(this.form.controls.password_disabled.value$), this.form.controls.locked.disabledWhile(this.form.controls.password_disabled.value$));
    }
    setupEditUserForm(user) {
        var _a, _b, _c, _d;
        this.form.patchValue({
            email: user.email,
            full_name: user.full_name,
            group_create: false,
            group: user.group.id,
            groups: user.groups,
            home: user.home,
            locked: user.locked,
            password_disabled: user.password_disabled,
            shell: user.shell,
            smb: user.smb,
            sshpubkey: user.sshpubkey,
            ssh_password_enabled: user.ssh_password_enabled,
            sudo_commands: ((_a = user.sudo_commands) === null || _a === void 0 ? void 0 : _a.includes(all_commands_constant_1.allCommands)) ? [] : user.sudo_commands,
            sudo_commands_all: (_b = user.sudo_commands) === null || _b === void 0 ? void 0 : _b.includes(all_commands_constant_1.allCommands),
            sudo_commands_nopasswd: ((_c = user.sudo_commands_nopasswd) === null || _c === void 0 ? void 0 : _c.includes(all_commands_constant_1.allCommands)) ? [] : user.sudo_commands_nopasswd,
            sudo_commands_nopasswd_all: (_d = user.sudo_commands_nopasswd) === null || _d === void 0 ? void 0 : _d.includes(all_commands_constant_1.allCommands),
            uid: user.uid,
            username: user.username,
        });
        this.form.controls.uid.disable();
        this.form.controls.group_create.disable();
        if (user.immutable) {
            this.form.controls.group.disable();
            this.form.controls.home_mode.disable();
            this.form.controls.home.disable();
            this.form.controls.home_create.disable();
            this.form.controls.username.disable();
        }
        if (user.builtin) {
            this.form.controls.smb.disable();
        }
        this.setNamesInUseValidator(user.username);
    }
    detectFullNameChanges() {
        this.form.controls.full_name.valueChanges.pipe((0, operators_1.map)((fullName) => this.getUserName(fullName)), (0, operators_1.filter)((username) => !!username), (0, until_destroy_1.untilDestroyed)(this)).subscribe((username) => {
            this.form.patchValue({ username });
            this.form.controls.username.markAsTouched();
        });
    }
    setHomeSharePath() {
        this.ws.call('sharing.smb.query', [[
                ['enabled', '=', true],
                ['home', '=', true],
            ]]).pipe((0, operators_1.filter)((shares) => !!shares.length), (0, operators_1.map)((shares) => shares[0].path), (0, until_destroy_1.untilDestroyed)(this)).subscribe((homeSharePath) => {
            this.form.patchValue({ home: homeSharePath });
        });
    }
    setNextUserId() {
        this.ws.call('user.get_next_uid').pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((nextUid) => {
            this.form.patchValue({ uid: nextUid });
        });
    }
    setFirstShellOption() {
        this.ws.call('user.shell_choices', [this.form.value.groups]).pipe((0, options_operators_1.choicesToOptions)(), (0, operators_1.filter)((shells) => !!shells.length), (0, operators_1.map)((shells) => shells[0].value), (0, until_destroy_1.untilDestroyed)(this)).subscribe((firstShell) => {
            this.form.patchValue({ shell: firstShell });
        });
    }
    setNamesInUseValidator(currentName) {
        this.store$.select(user_selectors_1.selectUsers).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((users) => {
            let forbiddenNames = users.map((user) => user.username);
            if (currentName) {
                forbiddenNames = forbiddenNames.filter((name) => name !== currentName);
            }
            this.form.controls.username.addValidators((0, forbidden_values_validation_1.forbiddenValues)(forbiddenNames));
        });
    }
    getUserName(fullName) {
        let username;
        const formatted = fullName.trim().split(/[\s,]+/);
        if (formatted.length === 1) {
            username = formatted[0];
        }
        else {
            username = formatted[0][0] + formatted.pop();
        }
        if (username.length >= 8) {
            username = username.substring(0, 8);
        }
        return username.toLocaleLowerCase();
    }
    updateShellOptions(group, groups) {
        const ids = new Set(groups);
        if (group) {
            ids.add(group);
        }
        this.ws.call('user.shell_choices', [Array.from(ids)])
            .pipe((0, options_operators_1.choicesToOptions)(), (0, operators_1.take)(1), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((options) => {
            this.shellOptions$ = (0, rxjs_1.of)(options);
            this.cdr.markForCheck();
        });
    }
};
exports.UserFormComponent = UserFormComponent;
UserFormComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_1.ChangeDetectorRef },
    { type: reactive_forms_1.FormBuilder },
    { type: core_2.TranslateService },
    { type: ix_validators_service_1.IxValidatorsService },
    { type: filesystem_service_1.FilesystemService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: snackbar_service_1.SnackbarService },
    { type: storage_service_1.StorageService },
    { type: download_service_1.DownloadService },
    { type: store_1.Store },
    { type: dialog_service_1.DialogService },
    { type: user_service_1.UserService },
    { type: user_interface_1.User, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.UserFormComponent = UserFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)({ arrayName: 'subscriptions' }),
    (0, core_1.Component)({
        selector: 'ix-user-form',
        template: require("./user-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header_component_1.IxModalHeaderComponent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_input_component_1.IxInputComponent,
            ix_slide_toggle_component_1.IxSlideToggleComponent,
            divider_1.MatDivider,
            ix_chips_component_1.IxChipsComponent,
            ix_combobox_component_1.IxComboboxComponent,
            ix_explorer_component_1.IxExplorerComponent,
            ix_permissions_component_1.IxPermissionsComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            ix_textarea_component_1.IxTextareaComponent,
            ix_file_input_component_1.IxFileInputComponent,
            ix_select_component_1.IxSelectComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
            warn_about_unsaved_changes_directive_1.WarnAboutUnsavedChangesDirective,
        ],
    })
], UserFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,