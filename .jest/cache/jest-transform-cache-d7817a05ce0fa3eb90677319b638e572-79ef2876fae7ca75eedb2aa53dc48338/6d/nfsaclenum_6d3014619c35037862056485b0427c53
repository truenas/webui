4edadc2d03bd2fed7c90f46749915066
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nfsAdvancedFlagLabels = exports.NfsAdvancedFlag = exports.nfsBasicFlagLabels = exports.NfsBasicFlag = exports.nfsAdvancedPermissionLabels = exports.NfsAdvancedPermission = exports.nfsBasicPermissionLabels = exports.NfsBasicPermission = exports.nfsAclTypeLabels = exports.NfsAclType = exports.smbAclTagLabels = exports.nfsAclTagLabels = exports.NfsAclTag = void 0;
const ngx_translate_extract_marker_1 = require("@biesbjerg/ngx-translate-extract-marker");
var NfsAclTag;
(function (NfsAclTag) {
    NfsAclTag["Owner"] = "owner@";
    NfsAclTag["Group"] = "group@";
    NfsAclTag["Everyone"] = "everyone@";
    NfsAclTag["User"] = "USER";
    NfsAclTag["UserGroup"] = "GROUP";
    NfsAclTag["Both"] = "BOTH";
})(NfsAclTag || (exports.NfsAclTag = NfsAclTag = {}));
exports.nfsAclTagLabels = new Map([
    [NfsAclTag.User, (0, ngx_translate_extract_marker_1.marker)('User')],
    [NfsAclTag.UserGroup, (0, ngx_translate_extract_marker_1.marker)('Group')],
    [NfsAclTag.Owner, (0, ngx_translate_extract_marker_1.marker)('owner@')],
    [NfsAclTag.Group, (0, ngx_translate_extract_marker_1.marker)('group@')],
    [NfsAclTag.Everyone, (0, ngx_translate_extract_marker_1.marker)('everyone@')],
]);
exports.smbAclTagLabels = new Map([
    [NfsAclTag.User, (0, ngx_translate_extract_marker_1.marker)('User')],
    [NfsAclTag.UserGroup, (0, ngx_translate_extract_marker_1.marker)('Group')],
    [NfsAclTag.Both, (0, ngx_translate_extract_marker_1.marker)('Unknown')],
    [NfsAclTag.Everyone, (0, ngx_translate_extract_marker_1.marker)('everyone@')],
]);
var NfsAclType;
(function (NfsAclType) {
    NfsAclType["Allow"] = "ALLOW";
    NfsAclType["Deny"] = "DENY";
})(NfsAclType || (exports.NfsAclType = NfsAclType = {}));
exports.nfsAclTypeLabels = new Map([
    [NfsAclType.Allow, (0, ngx_translate_extract_marker_1.marker)('Allow')],
    [NfsAclType.Deny, (0, ngx_translate_extract_marker_1.marker)('Deny')],
]);
var NfsBasicPermission;
(function (NfsBasicPermission) {
    NfsBasicPermission["FullControl"] = "FULL_CONTROL";
    NfsBasicPermission["Modify"] = "MODIFY";
    NfsBasicPermission["Read"] = "READ";
    NfsBasicPermission["Traverse"] = "TRAVERSE";
})(NfsBasicPermission || (exports.NfsBasicPermission = NfsBasicPermission = {}));
exports.nfsBasicPermissionLabels = new Map([
    [NfsBasicPermission.Read, (0, ngx_translate_extract_marker_1.marker)('Read')],
    [NfsBasicPermission.Modify, (0, ngx_translate_extract_marker_1.marker)('Modify')],
    [NfsBasicPermission.Traverse, (0, ngx_translate_extract_marker_1.marker)('Traverse')],
    [NfsBasicPermission.FullControl, (0, ngx_translate_extract_marker_1.marker)('Full Control')],
]);
var NfsAdvancedPermission;
(function (NfsAdvancedPermission) {
    NfsAdvancedPermission["ReadData"] = "READ_DATA";
    NfsAdvancedPermission["WriteData"] = "WRITE_DATA";
    NfsAdvancedPermission["AppendData"] = "APPEND_DATA";
    NfsAdvancedPermission["ReadNamedAttrs"] = "READ_NAMED_ATTRS";
    NfsAdvancedPermission["WriteNamedAttrs"] = "WRITE_NAMED_ATTRS";
    NfsAdvancedPermission["Execute"] = "EXECUTE";
    NfsAdvancedPermission["DeleteChild"] = "DELETE_CHILD";
    NfsAdvancedPermission["ReadAttributes"] = "READ_ATTRIBUTES";
    NfsAdvancedPermission["WriteAttributes"] = "WRITE_ATTRIBUTES";
    NfsAdvancedPermission["Delete"] = "DELETE";
    NfsAdvancedPermission["ReadAcl"] = "READ_ACL";
    NfsAdvancedPermission["WriteAcl"] = "WRITE_ACL";
    NfsAdvancedPermission["WriteOwner"] = "WRITE_OWNER";
    NfsAdvancedPermission["Synchronize"] = "SYNCHRONIZE";
})(NfsAdvancedPermission || (exports.NfsAdvancedPermission = NfsAdvancedPermission = {}));
exports.nfsAdvancedPermissionLabels = new Map([
    [NfsAdvancedPermission.ReadData, (0, ngx_translate_extract_marker_1.marker)('Read Data')],
    [NfsAdvancedPermission.WriteData, (0, ngx_translate_extract_marker_1.marker)('Write Data')],
    [NfsAdvancedPermission.AppendData, (0, ngx_translate_extract_marker_1.marker)('Append Data')],
    [NfsAdvancedPermission.ReadNamedAttrs, (0, ngx_translate_extract_marker_1.marker)('Read Named Attributes')],
    [NfsAdvancedPermission.WriteNamedAttrs, (0, ngx_translate_extract_marker_1.marker)('Write Named Attributes')],
    [NfsAdvancedPermission.Execute, (0, ngx_translate_extract_marker_1.marker)('Execute')],
    [NfsAdvancedPermission.DeleteChild, (0, ngx_translate_extract_marker_1.marker)('Delete Children')],
    [NfsAdvancedPermission.ReadAttributes, (0, ngx_translate_extract_marker_1.marker)('Read Attributes')],
    [NfsAdvancedPermission.WriteAttributes, (0, ngx_translate_extract_marker_1.marker)('Write Attributes')],
    [NfsAdvancedPermission.Delete, (0, ngx_translate_extract_marker_1.marker)('Delete')],
    [NfsAdvancedPermission.ReadAcl, (0, ngx_translate_extract_marker_1.marker)('Read ACL')],
    [NfsAdvancedPermission.WriteAcl, (0, ngx_translate_extract_marker_1.marker)('Write ACL')],
    [NfsAdvancedPermission.WriteOwner, (0, ngx_translate_extract_marker_1.marker)('Write Owner')],
    [NfsAdvancedPermission.Synchronize, (0, ngx_translate_extract_marker_1.marker)('Synchronize')],
]);
var NfsBasicFlag;
(function (NfsBasicFlag) {
    NfsBasicFlag["Inherit"] = "INHERIT";
    NfsBasicFlag["NoInherit"] = "NOINHERIT";
})(NfsBasicFlag || (exports.NfsBasicFlag = NfsBasicFlag = {}));
exports.nfsBasicFlagLabels = new Map([
    [NfsBasicFlag.Inherit, (0, ngx_translate_extract_marker_1.marker)('Inherit')],
    [NfsBasicFlag.NoInherit, (0, ngx_translate_extract_marker_1.marker)('No Inherit')],
]);
var NfsAdvancedFlag;
(function (NfsAdvancedFlag) {
    NfsAdvancedFlag["FileInherit"] = "FILE_INHERIT";
    NfsAdvancedFlag["DirectoryInherit"] = "DIRECTORY_INHERIT";
    NfsAdvancedFlag["NoPropagateInherit"] = "NO_PROPAGATE_INHERIT";
    NfsAdvancedFlag["InheritOnly"] = "INHERIT_ONLY";
    NfsAdvancedFlag["Inherited"] = "INHERITED";
})(NfsAdvancedFlag || (exports.NfsAdvancedFlag = NfsAdvancedFlag = {}));
exports.nfsAdvancedFlagLabels = new Map([
    [NfsAdvancedFlag.FileInherit, (0, ngx_translate_extract_marker_1.marker)('File Inherit')],
    [NfsAdvancedFlag.DirectoryInherit, (0, ngx_translate_extract_marker_1.marker)('Directory Inherit')],
    [NfsAdvancedFlag.NoPropagateInherit, (0, ngx_translate_extract_marker_1.marker)('No Propagate Inherit')],
    [NfsAdvancedFlag.InheritOnly, (0, ngx_translate_extract_marker_1.marker)('Inherit Only')],
    [NfsAdvancedFlag.Inherited, (0, ngx_translate_extract_marker_1.marker)('Inherited')],
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,