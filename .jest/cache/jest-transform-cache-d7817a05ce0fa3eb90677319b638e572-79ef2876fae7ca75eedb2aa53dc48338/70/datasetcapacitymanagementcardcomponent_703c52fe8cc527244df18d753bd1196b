933798d7318776abf5119950b55d3b94
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetCapacityManagementCardComponent = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dataset_enum_1 = require("app/enums/dataset.enum");
const role_enum_1 = require("app/enums/role.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const dataset_capacity_management_card_elements_1 = require("app/pages/datasets/components/dataset-capacity-management-card/dataset-capacity-management-card.elements");
const dataset_capacity_settings_component_1 = require("app/pages/datasets/components/dataset-capacity-management-card/dataset-capacity-settings/dataset-capacity-settings.component");
const dataset_store_service_1 = require("app/pages/datasets/store/dataset-store.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const ws_service_1 = require("app/services/ws.service");
let DatasetCapacityManagementCardComponent = class DatasetCapacityManagementCardComponent {
    get isFilesystem() {
        return this.dataset.type === dataset_enum_1.DatasetType.Filesystem;
    }
    get isZvol() {
        return this.dataset.type === dataset_enum_1.DatasetType.Volume;
    }
    get checkQuotas() {
        return !this.dataset.locked && this.isFilesystem && !this.dataset.readonly;
    }
    get hasQuota() {
        var _a, _b;
        return Boolean((_b = (_a = this.dataset) === null || _a === void 0 ? void 0 : _a.quota) === null || _b === void 0 ? void 0 : _b.parsed);
    }
    get hasRefQuota() {
        var _a, _b;
        return Boolean((_b = (_a = this.dataset) === null || _a === void 0 ? void 0 : _a.refquota) === null || _b === void 0 ? void 0 : _b.parsed);
    }
    get hasInheritedQuotas() {
        var _a, _b, _c, _d;
        return ((_b = (_a = this.inheritedQuotasDataset) === null || _a === void 0 ? void 0 : _a.quota) === null || _b === void 0 ? void 0 : _b.parsed) && ((_c = this.inheritedQuotasDataset) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = this.dataset) === null || _d === void 0 ? void 0 : _d.id);
    }
    constructor(ws, errorHandler, cdr, datasetStore, slideInService, dialogService) {
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.cdr = cdr;
        this.datasetStore = datasetStore;
        this.slideInService = slideInService;
        this.dialogService = dialogService;
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.searchableElements = dataset_capacity_management_card_elements_1.datasetCapacityManagementElements;
        this.refreshQuotas$ = new rxjs_1.Subject();
        this.isLoadingQuotas = false;
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d;
        this.getInheritedQuotas();
        const selectedDatasetHasChanged = ((_b = (_a = changes === null || changes === void 0 ? void 0 : changes.dataset) === null || _a === void 0 ? void 0 : _a.previousValue) === null || _b === void 0 ? void 0 : _b.id) !== ((_d = (_c = changes === null || changes === void 0 ? void 0 : changes.dataset) === null || _c === void 0 ? void 0 : _c.currentValue) === null || _d === void 0 ? void 0 : _d.id);
        if (selectedDatasetHasChanged && this.checkQuotas) {
            this.refreshQuotas$.next();
        }
    }
    ngOnInit() {
        if (this.checkQuotas) {
            this.initQuotas();
            this.refreshQuotas$.next();
        }
    }
    initQuotas() {
        this.refreshQuotas$.pipe((0, operators_1.tap)(() => {
            this.isLoadingQuotas = true;
            this.cdr.markForCheck();
        }), (0, operators_1.switchMap)(() => (0, rxjs_1.forkJoin)([
            this.ws.call('pool.dataset.get_quota', [this.dataset.id, dataset_enum_1.DatasetQuotaType.User, []]),
            this.ws.call('pool.dataset.get_quota', [this.dataset.id, dataset_enum_1.DatasetQuotaType.Group, []]),
        ])), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ([userQuotas, groupQuotas]) => {
                this.userQuotas = userQuotas.length;
                this.groupQuotas = groupQuotas.length;
                this.isLoadingQuotas = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoadingQuotas = false;
                this.dialogService.error(this.errorHandler.parseError(error));
                this.cdr.markForCheck();
            },
        });
    }
    getInheritedQuotas() {
        this.datasetStore.selectedBranch$.pipe((0, operators_1.map)((datasets) => {
            const datasetWithQuotas = datasets.filter((dataset) => { var _a; return Boolean((_a = dataset === null || dataset === void 0 ? void 0 : dataset.quota) === null || _a === void 0 ? void 0 : _a.parsed); });
            return (0, lodash_es_1.maxBy)(datasetWithQuotas, (dataset) => dataset.quota.parsed);
        }), (0, operators_1.take)(1), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (dataset) => {
                this.inheritedQuotasDataset = dataset;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.dialogService.error(this.errorHandler.parseError(error));
            },
        });
    }
    editDataset() {
        this.slideInService
            .open(dataset_capacity_settings_component_1.DatasetCapacitySettingsComponent, { wide: true, data: this.dataset })
            .slideInClosed$
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.datasetStore.datasetUpdated();
        });
    }
};
exports.DatasetCapacityManagementCardComponent = DatasetCapacityManagementCardComponent;
DatasetCapacityManagementCardComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: core_1.ChangeDetectorRef },
    { type: dataset_store_service_1.DatasetTreeStore },
    { type: ix_slide_in_service_1.IxSlideInService },
    { type: dialog_service_1.DialogService }
];
DatasetCapacityManagementCardComponent.propDecorators = {
    dataset: [{ type: core_1.Input }]
};
exports.DatasetCapacityManagementCardComponent = DatasetCapacityManagementCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-dataset-capacity-management-card',
        template: require("./dataset-capacity-management-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], DatasetCapacityManagementCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,