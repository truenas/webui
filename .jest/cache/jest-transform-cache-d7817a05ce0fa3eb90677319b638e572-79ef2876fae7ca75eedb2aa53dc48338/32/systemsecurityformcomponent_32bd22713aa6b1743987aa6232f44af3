63c0062421019b20bd3d8ad3a9772d60
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemSecurityFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const role_enum_1 = require("app/enums/role.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const ix_modal_header2_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header2/ix-modal-header2.component");
const ix_slide_toggle_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const error_handler_service_1 = require("app/services/error-handler.service");
const fips_service_1 = require("app/services/fips.service");
const ws_service_1 = require("app/services/ws.service");
const ha_info_selectors_1 = require("app/store/ha-info/ha-info.selectors");
let SystemSecurityFormComponent = class SystemSecurityFormComponent {
    constructor(formBuilder, cdr, translate, snackbar, chainedRef, fips, store$, dialogService, ws, errorHandler) {
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.translate = translate;
        this.snackbar = snackbar;
        this.chainedRef = chainedRef;
        this.fips = fips;
        this.store$ = store$;
        this.dialogService = dialogService;
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.form = this.formBuilder.group({
            enable_fips: [false],
        });
        this.isHaLicensed$ = this.store$.select(ha_info_selectors_1.selectIsHaLicensed);
        this.systemSecurityConfig = this.chainedRef.getData();
    }
    ngOnInit() {
        if (this.systemSecurityConfig) {
            this.initSystemSecurityForm();
        }
    }
    onSubmit() {
        this.dialogService.jobDialog(this.ws.job('system.security.update', [this.form.value]), {
            title: this.translate.instant('Saving settings'),
        })
            .afterClosed()
            .pipe((0, operators_1.switchMap)(() => this.promptForRestart()), this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.chainedRef.close({ response: true, error: null });
            this.snackbar.success(this.translate.instant('System Security Settings Updated.'));
        });
    }
    initSystemSecurityForm() {
        this.form.patchValue(this.systemSecurityConfig);
        this.cdr.markForCheck();
    }
    promptForRestart() {
        return this.isHaLicensed$
            .pipe((0, operators_1.take)(1), (0, operators_1.switchMap)((isHaLicensed) => {
            if (isHaLicensed) {
                // Restart will be handled in response to failover.disabled.reasons event in HaFipsEffects.
                return rxjs_1.EMPTY;
            }
            return this.fips.promptForRestart();
        }));
    }
};
exports.SystemSecurityFormComponent = SystemSecurityFormComponent;
SystemSecurityFormComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: core_1.ChangeDetectorRef },
    { type: core_2.TranslateService },
    { type: snackbar_service_1.SnackbarService },
    { type: chained_component_ref_1.ChainedRef },
    { type: fips_service_1.FipsService },
    { type: store_1.Store },
    { type: dialog_service_1.DialogService },
    { type: ws_service_1.WebSocketService },
    { type: error_handler_service_1.ErrorHandlerService }
];
exports.SystemSecurityFormComponent = SystemSecurityFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-system-security-form',
        template: require("./system-security-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header2_component_1.IxModalHeader2Component,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_slide_toggle_component_1.IxSlideToggleComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
        ],
    })
], SystemSecurityFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,