{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/components/scheduler-modal/scheduler-modal.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAAkE;AAClE,8DAAoE;AACpE,gEAAwE;AAExE,sGAAiG;AAEjG,MAAa,qBAAsB,SAAQ,0BAAgB;IAA3D;;QAGE,oBAAe,GAAG,IAAI,CAAC,UAAU,CAAC,iCAAc,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAC7E,kBAAa,GAAG,IAAI,CAAC,UAAU,CAAC,iCAAc,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;QACzE,iBAAY,GAAG,IAAI,CAAC,UAAU,CAAC,iCAAc,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;QAChF,uBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,4BAAkB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAC1F,4BAAuB,GAAG,IAAI,CAAC,aAAa,CAAC,4BAAkB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;IAwCnG,CAAC;IAtCO,UAAU,CAAC,OAAe;;YAC9B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC3C,MAAM,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;KAAA;IAEK,QAAQ,CAAC,KAAa;;YAC1B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YACzC,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;KAAA;IAEK,OAAO,CAAC,IAAY;;YACxB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YACxC,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA;IAEK,SAAS,CAAC,MAA6B;;YAC3C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACnD,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClD,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAe,CAAC;oBAC3C,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE;oBAClB,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC;QACN,CAAC;KAAA;IAEK,aAAa,CAAC,UAAwC;;YAC1D,+DAA+D;YAC/D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACxD,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClD,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAsB,CAAC;oBAChD,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE;oBAClB,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC;QACN,CAAC;KAAA;IAEK,SAAS;;YACb,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,0BAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;YACpF,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;KAAA;;AA9CH,sDA+CC;AA9CiB,kCAAY,GAAG,oBAAoB,AAAvB,CAAwB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/components/scheduler-modal/scheduler-modal.harness.ts"],"sourcesContent":["import { ComponentHarness, parallel } from '@angular/cdk/testing';\nimport { MatButtonHarness } from '@angular/material/button/testing';\nimport { MatCheckboxHarness } from '@angular/material/checkbox/testing';\nimport { DayOfTheWeekRange, MonthRange } from 'cron-parser/types';\nimport { IxInputHarness } from 'app/modules/forms/ix-forms/components/ix-input/ix-input.harness';\n\nexport class SchedulerModalHarness extends ComponentHarness {\n  static readonly hostSelector = 'ix-scheduler-modal';\n\n  getMinutesInput = this.locatorFor(IxInputHarness.with({ label: 'Minutes' }));\n  getHoursInput = this.locatorFor(IxInputHarness.with({ label: 'Hours' }));\n  getDaysInput = this.locatorFor(IxInputHarness.with({ label: 'Days of Month' }));\n  getMonthCheckboxes = this.locatorForAll(MatCheckboxHarness.with({ ancestor: '.months' }));\n  getDaysOfWeekCheckboxes = this.locatorForAll(MatCheckboxHarness.with({ ancestor: '.weekdays' }));\n\n  async setMinutes(minutes: string): Promise<void> {\n    const input = await this.getMinutesInput();\n    await input.setValue(minutes);\n  }\n\n  async setHours(hours: string): Promise<void> {\n    const input = await this.getHoursInput();\n    await input.setValue(hours);\n  }\n\n  async setDays(days: string): Promise<void> {\n    const input = await this.getDaysInput();\n    await input.setValue(days);\n  }\n\n  async setMonths(months: readonly MonthRange[]): Promise<void> {\n    const checkboxes = await this.getMonthCheckboxes();\n    await parallel(() => checkboxes.map((checkbox, i) => {\n      return months.includes((i + 1) as MonthRange)\n        ? checkbox.check()\n        : checkbox.uncheck();\n    }));\n  }\n\n  async setDaysOfWeek(daysOfWeek: readonly DayOfTheWeekRange[]): Promise<void> {\n    // TODO: Will break if Sunday is not the first day of the week.\n    const checkboxes = await this.getDaysOfWeekCheckboxes();\n    await parallel(() => checkboxes.map((checkbox, i) => {\n      return daysOfWeek.includes(i as DayOfTheWeekRange)\n        ? checkbox.check()\n        : checkbox.uncheck();\n    }));\n  }\n\n  async pressDone(): Promise<void> {\n    const doneButton = await this.locatorFor(MatButtonHarness.with({ text: 'Done' }))();\n    await doneButton.click();\n  }\n}\n"],"version":3}