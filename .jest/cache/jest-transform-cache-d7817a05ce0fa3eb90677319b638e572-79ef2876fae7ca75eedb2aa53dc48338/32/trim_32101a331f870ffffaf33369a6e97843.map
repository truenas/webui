{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/trim.js","mappings":";;;;;AAAA,0EAA8C;AAC9C,kEAAsC;AACtC,oEAAwC;AACxC,4EAAgD;AAChD,gFAAoD;AACpD,4EAAgD;AAChD,gEAAqC;AAErC;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,SAAS,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK;IAChC,MAAM,GAAG,IAAA,qBAAQ,EAAC,MAAM,CAAC,CAAC;IAC1B,IAAI,MAAM,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,SAAS,CAAC,EAAE,CAAC;QAC7C,OAAO,IAAA,sBAAQ,EAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IACD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QAC9C,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,IAAI,UAAU,GAAG,IAAA,2BAAa,EAAC,MAAM,CAAC,EAClC,UAAU,GAAG,IAAA,2BAAa,EAAC,KAAK,CAAC,EACjC,KAAK,GAAG,IAAA,6BAAe,EAAC,UAAU,EAAE,UAAU,CAAC,EAC/C,GAAG,GAAG,IAAA,2BAAa,EAAC,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;IAEpD,OAAO,IAAA,uBAAS,EAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACpD,CAAC;AAED,kBAAe,IAAI,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/trim.js"],"sourcesContent":["import baseToString from './_baseToString.js';\nimport baseTrim from './_baseTrim.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nexport default trim;\n"],"version":3}