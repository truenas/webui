{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/advanced/system-security/system-security-form/system-security-form.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/advanced/system-security/system-security-form/system-security-form.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit,\n} from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatCard, MatCardContent } from '@angular/material/card';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Store } from '@ngrx/store';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { RequiresRolesDirective } from 'app/directives/requires-roles/requires-roles.directive';\nimport { Role } from 'app/enums/role.enum';\nimport { SystemSecurityConfig } from 'app/interfaces/system-security-config.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { ChainedRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref';\nimport { IxModalHeader2Component } from 'app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header2/ix-modal-header2.component';\nimport { IxSlideToggleComponent } from 'app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component';\nimport { SnackbarService } from 'app/modules/snackbar/services/snackbar.service';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { FipsService } from 'app/services/fips.service';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { AppState } from 'app/store';\nimport { selectIsHaLicensed } from 'app/store/ha-info/ha-info.selectors';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-system-security-form',\n  templateUrl: './system-security-form.component.html',\n  styleUrls: ['./system-security-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    IxModalHeader2Component,\n    MatCard,\n    MatCardContent,\n    ReactiveFormsModule,\n    IxSlideToggleComponent,\n    RequiresRolesDirective,\n    MatButton,\n    TestDirective,\n    TranslateModule,\n  ],\n})\nexport class SystemSecurityFormComponent implements OnInit {\n  protected readonly requiredRoles = [Role.FullAdmin];\n\n  form = this.formBuilder.group({\n    enable_fips: [false],\n  });\n\n  private isHaLicensed$ = this.store$.select(selectIsHaLicensed);\n\n  private systemSecurityConfig: SystemSecurityConfig;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cdr: ChangeDetectorRef,\n    private translate: TranslateService,\n    private snackbar: SnackbarService,\n    private chainedRef: ChainedRef<SystemSecurityConfig>,\n    private fips: FipsService,\n    private store$: Store<AppState>,\n    private dialogService: DialogService,\n    private ws: WebSocketService,\n    private errorHandler: ErrorHandlerService,\n  ) {\n    this.systemSecurityConfig = this.chainedRef.getData();\n  }\n\n  ngOnInit(): void {\n    if (this.systemSecurityConfig) {\n      this.initSystemSecurityForm();\n    }\n  }\n\n  onSubmit(): void {\n    this.dialogService.jobDialog(\n      this.ws.job('system.security.update', [this.form.value as SystemSecurityConfig]),\n      {\n        title: this.translate.instant('Saving settings'),\n      },\n    )\n      .afterClosed()\n      .pipe(\n        switchMap(() => this.promptForRestart()),\n        this.errorHandler.catchError(),\n        untilDestroyed(this),\n      )\n      .subscribe(() => {\n        this.chainedRef.close({ response: true, error: null });\n        this.snackbar.success(this.translate.instant('System Security Settings Updated.'));\n      });\n  }\n\n  private initSystemSecurityForm(): void {\n    this.form.patchValue(this.systemSecurityConfig);\n    this.cdr.markForCheck();\n  }\n\n  private promptForRestart(): Observable<unknown> {\n    return this.isHaLicensed$\n      .pipe(\n        take(1),\n        switchMap((isHaLicensed) => {\n          if (isHaLicensed) {\n            // Restart will be handled in response to failover.disabled.reasons event in HaFipsEffects.\n            return EMPTY;\n          }\n\n          return this.fips.promptForRestart();\n        }),\n      );\n  }\n}\n"],"version":3}