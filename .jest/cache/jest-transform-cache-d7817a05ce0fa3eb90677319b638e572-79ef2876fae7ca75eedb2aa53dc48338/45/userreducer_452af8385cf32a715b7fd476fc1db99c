4dc9d46155dd5874b6b6d41e96245acf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userReducer = exports.usersInitialState = exports.adapter = void 0;
const entity_1 = require("@ngrx/entity");
const store_1 = require("@ngrx/store");
const user_actions_1 = require("app/pages/credentials/users/store/user.actions");
const preferences_actions_1 = require("app/store/preferences/preferences.actions");
exports.adapter = (0, entity_1.createEntityAdapter)({
    selectId: (user) => user.id,
    sortComparer: (a, b) => a.username.localeCompare(b.username),
});
exports.usersInitialState = exports.adapter.getInitialState({
    isLoading: false,
    error: null,
});
exports.userReducer = (0, store_1.createReducer)(exports.usersInitialState, (0, store_1.on)(preferences_actions_1.builtinUsersToggled, (state) => (Object.assign(Object.assign({}, state), { isLoading: true, error: null }))), (0, store_1.on)(user_actions_1.userPageEntered, (state) => (Object.assign(Object.assign({}, state), { isLoading: true, error: null }))), (0, store_1.on)(user_actions_1.usersLoaded, (state, { users }) => exports.adapter.setAll(users, Object.assign(Object.assign({}, state), { isLoading: false }))), (0, store_1.on)(user_actions_1.usersNotLoaded, (state, { error }) => (Object.assign(Object.assign({}, state), { error, isLoading: false }))), (0, store_1.on)(user_actions_1.userAdded, (state, { user }) => exports.adapter.addOne(user, state)), (0, store_1.on)(user_actions_1.userChanged, (state, { user }) => exports.adapter.updateOne({
    id: user.id,
    changes: user,
}, state)), (0, store_1.on)(user_actions_1.userRemoved, (state, { id }) => exports.adapter.removeOne(id, state)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2NyZWRlbnRpYWxzL3VzZXJzL3N0b3JlL3VzZXIucmVkdWNlci50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSx5Q0FBZ0U7QUFDaEUsdUNBRXFCO0FBRXJCLGlGQUt3RDtBQUN4RCxtRkFBZ0Y7QUFPbkUsUUFBQSxPQUFPLEdBQUcsSUFBQSw0QkFBbUIsRUFBTztJQUMvQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQzNCLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7Q0FDN0QsQ0FBQyxDQUFDO0FBRVUsUUFBQSxpQkFBaUIsR0FBRyxlQUFPLENBQUMsZUFBZSxDQUFDO0lBQ3ZELFNBQVMsRUFBRSxLQUFLO0lBQ2hCLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBRVUsUUFBQSxXQUFXLEdBQUcsSUFBQSxxQkFBYSxFQUN0Qyx5QkFBaUIsRUFFakIsSUFBQSxVQUFFLEVBQUMseUNBQW1CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGlDQUFNLEtBQUssS0FBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUcsQ0FBQyxFQUNoRixJQUFBLFVBQUUsRUFBQyw4QkFBZSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxpQ0FBTSxLQUFLLEtBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFHLENBQUMsRUFDNUUsSUFBQSxVQUFFLEVBQUMsMEJBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxlQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssa0NBQU8sS0FBSyxLQUFFLFNBQVMsRUFBRSxLQUFLLElBQUcsQ0FBQyxFQUM1RixJQUFBLFVBQUUsRUFBQyw2QkFBYyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLGlDQUFNLEtBQUssS0FBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssSUFBRyxDQUFDLEVBRWpGLElBQUEsVUFBRSxFQUFDLHdCQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFDL0QsSUFBQSxVQUFFLEVBQUMsMEJBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxlQUFPLENBQUMsU0FBUyxDQUFDO0lBQ3JELEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtJQUNYLE9BQU8sRUFBRSxJQUFJO0NBQ2QsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUNWLElBQUEsVUFBRSxFQUFDLDBCQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FDakUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvcGFnZXMvY3JlZGVudGlhbHMvdXNlcnMvc3RvcmUvdXNlci5yZWR1Y2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVudGl0eUFkYXB0ZXIsIEVudGl0eVN0YXRlIH0gZnJvbSAnQG5ncngvZW50aXR5JztcbmltcG9ydCB7XG4gIGNyZWF0ZVJlZHVjZXIsIG9uLFxufSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvdXNlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHtcbiAgdXNlckFkZGVkLCB1c2VyQ2hhbmdlZCxcbiAgdXNlclBhZ2VFbnRlcmVkLCB1c2VyUmVtb3ZlZCxcbiAgdXNlcnNMb2FkZWQsXG4gIHVzZXJzTm90TG9hZGVkLFxufSBmcm9tICdhcHAvcGFnZXMvY3JlZGVudGlhbHMvdXNlcnMvc3RvcmUvdXNlci5hY3Rpb25zJztcbmltcG9ydCB7IGJ1aWx0aW5Vc2Vyc1RvZ2dsZWQgfSBmcm9tICdhcHAvc3RvcmUvcHJlZmVyZW5jZXMvcHJlZmVyZW5jZXMuYWN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlcnNTdGF0ZSBleHRlbmRzIEVudGl0eVN0YXRlPFVzZXI+IHtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBlcnJvcjogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgYWRhcHRlciA9IGNyZWF0ZUVudGl0eUFkYXB0ZXI8VXNlcj4oe1xuICBzZWxlY3RJZDogKHVzZXIpID0+IHVzZXIuaWQsXG4gIHNvcnRDb21wYXJlcjogKGEsIGIpID0+IGEudXNlcm5hbWUubG9jYWxlQ29tcGFyZShiLnVzZXJuYW1lKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgdXNlcnNJbml0aWFsU3RhdGUgPSBhZGFwdGVyLmdldEluaXRpYWxTdGF0ZSh7XG4gIGlzTG9hZGluZzogZmFsc2UsXG4gIGVycm9yOiBudWxsLFxufSk7XG5cbmV4cG9ydCBjb25zdCB1c2VyUmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoXG4gIHVzZXJzSW5pdGlhbFN0YXRlLFxuXG4gIG9uKGJ1aWx0aW5Vc2Vyc1RvZ2dsZWQsIChzdGF0ZSkgPT4gKHsgLi4uc3RhdGUsIGlzTG9hZGluZzogdHJ1ZSwgZXJyb3I6IG51bGwgfSkpLFxuICBvbih1c2VyUGFnZUVudGVyZWQsIChzdGF0ZSkgPT4gKHsgLi4uc3RhdGUsIGlzTG9hZGluZzogdHJ1ZSwgZXJyb3I6IG51bGwgfSkpLFxuICBvbih1c2Vyc0xvYWRlZCwgKHN0YXRlLCB7IHVzZXJzIH0pID0+IGFkYXB0ZXIuc2V0QWxsKHVzZXJzLCB7IC4uLnN0YXRlLCBpc0xvYWRpbmc6IGZhbHNlIH0pKSxcbiAgb24odXNlcnNOb3RMb2FkZWQsIChzdGF0ZSwgeyBlcnJvciB9KSA9PiAoeyAuLi5zdGF0ZSwgZXJyb3IsIGlzTG9hZGluZzogZmFsc2UgfSkpLFxuXG4gIG9uKHVzZXJBZGRlZCwgKHN0YXRlLCB7IHVzZXIgfSkgPT4gYWRhcHRlci5hZGRPbmUodXNlciwgc3RhdGUpKSxcbiAgb24odXNlckNoYW5nZWQsIChzdGF0ZSwgeyB1c2VyIH0pID0+IGFkYXB0ZXIudXBkYXRlT25lKHtcbiAgICBpZDogdXNlci5pZCxcbiAgICBjaGFuZ2VzOiB1c2VyLFxuICB9LCBzdGF0ZSkpLFxuICBvbih1c2VyUmVtb3ZlZCwgKHN0YXRlLCB7IGlkIH0pID0+IGFkYXB0ZXIucmVtb3ZlT25lKGlkLCBzdGF0ZSkpLFxuKTtcbiJdLCJ2ZXJzaW9uIjozfQ==