{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/tooltip.mjs"],
  "sourcesContent": ["import { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injector, ElementRef, afterNextRender, Directive, Inject, Optional, Input, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { DOCUMENT, NgClass, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n    },\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Whether tooltip should be relative to the click or touch origin\n     * instead of outside the element bounding box.\n     */\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const isDisabled = coerceBooleanProperty(value);\n        if (this._disabled !== isDisabled) {\n            this._disabled = isDisabled;\n            // If tooltip is disabled, hide immediately.\n            if (isDisabled) {\n                this.hide(0);\n            }\n            else {\n                this._setupPointerEnterEventsIfNeeded();\n            }\n            this._syncAriaDescription(this.message);\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        const oldMessage = this._message;\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n        }\n        this._syncAriaDescription(oldMessage);\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._positionAtOrigin = false;\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._tooltipComponent = TooltipComponent;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat-mdc';\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Timer started at the last `touchstart` event. */\n        this._touchstartTimeout = null;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._injector = inject(Injector);\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            this._showDelay = _defaultOptions.showDelay;\n            this._hideDelay = _defaultOptions.hideDelay;\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n            if (_defaultOptions.tooltipClass) {\n                this.tooltipClass = _defaultOptions.tooltipClass;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        // Optimization: Do not call clearTimeout unless there is an active timer.\n        if (this._touchstartTimeout) {\n            clearTimeout(this._touchstartTimeout);\n        }\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            this._tooltipInstance?._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            afterNextRender(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            }, {\n                injector: this._injector,\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    const touch = event.targetTouches?.[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    if (this._touchstartTimeout) {\n                        clearTimeout(this._touchstartTimeout);\n                    }\n                    const DEFAULT_LONGPRESS_DELAY = 500;\n                    this._touchstartTimeout = setTimeout(() => {\n                        this._touchstartTimeout = null;\n                        this.show(undefined, origin);\n                    }, this._defaultOptions.touchLongPressShowDelay ?? DEFAULT_LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                if (this._touchstartTimeout) {\n                    clearTimeout(this._touchstartTimeout);\n                }\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n    /** Updates the tooltip's ARIA description based on it current state. */\n    _syncAriaDescription(oldMessage) {\n        if (this._ariaDescriptionPending) {\n            return;\n        }\n        this._ariaDescriptionPending = true;\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, oldMessage, 'tooltip');\n        this._ngZone.runOutsideAngular(() => {\n            // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n            // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n            // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n            // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n            Promise.resolve().then(() => {\n                this._ariaDescriptionPending = false;\n                if (this.message && !this.disabled) {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                }\n            });\n        });\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i2.Platform }, { token: i3.AriaDescriber }, { token: i3.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i4.Directionality }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTooltip, isStandalone: true, selector: \"[matTooltip]\", inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, host: { properties: { \"class.mat-mdc-tooltip-disabled\": \"disabled\" }, classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                        '[class.mat-mdc-tooltip-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                }] }, { type: i4.Directionality }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    constructor(_changeDetectorRef, _elementRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /* Whether the tooltip text overflows to multiple lines */\n        this._isMultiline = false;\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        /** Name of the show animation and the class that toggles it. */\n        this._showAnimation = 'mat-mdc-tooltip-show';\n        /** Name of the hide animation and the class that toggles it. */\n        this._hideAnimation = 'mat-mdc-tooltip-hide';\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        if (this._isVisible !== isVisible) {\n            this._isVisible = isVisible;\n            this._changeDetectorRef.markForCheck();\n        }\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: TooltipComponent, isStandalone: true, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-app-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-app-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-app-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-app-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-app-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-app-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-app-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-app-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, standalone: true, imports: [NgClass], template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-app-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-app-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-app-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-app-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-app-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-app-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-app-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-app-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\nclass MatTooltipModule {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] }); }\n    static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n//# sourceMappingURL=tooltip.mjs.map\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA0B;AAC1B,sBAA4D;AAC5D,sBAAuC;AACvC,SAAoB;AACpB,kBAAqN;AACrN,oBAAgD;AAChD,SAAoB;AACpB,sBAAgD;AAChD,SAAoB;AACpB,kBAA2B;AAC3B,SAAoB;AACpB,SAAoB;AACpB,qBAAuC;AACvC,oBAAgC;AAChC,kBAAwB;AACxB,wBAA2D;AAC3D,uBAAoC;AACpC,IAAAA,eAAgC;AAGhC,MAAM,qBAAqB;AAK3B,SAAS,kCAAkC,UAAU;AACjD,SAAO,MAAM,qBAAqB,QAAQ,eAAe;AAC7D;AAEA,MAAM,8BAA8B,IAAI,2BAAe,+BAA+B;AAAA,EAClF,YAAY;AAAA,EACZ,SAAS,MAAM;AACX,UAAM,cAAU,oBAAO,sBAAO;AAC9B,WAAO,MAAM,QAAQ,iBAAiB,WAAW,EAAE,gBAAgB,mBAAmB,CAAC;AAAA,EAC3F;AACJ,CAAC;AAED,SAAS,oCAAoC,SAAS;AAClD,SAAO,MAAM,QAAQ,iBAAiB,WAAW,EAAE,gBAAgB,mBAAmB,CAAC;AAC3F;AAEA,MAAM,+CAA+C;AAAA,EACjD,SAAS;AAAA,EACT,MAAM,CAAC,sBAAO;AAAA,EACd,YAAY;AAChB;AAEA,SAAS,sCAAsC;AAC3C,SAAO;AAAA,IACH,WAAW;AAAA,IACX,WAAW;AAAA,IACX,mBAAmB;AAAA,EACvB;AACJ;AAEA,MAAM,8BAA8B,IAAI,2BAAe,+BAA+B;AAAA,EAClF,YAAY;AAAA,EACZ,SAAS;AACb,CAAC;AAMD,MAAM,sBAAsB;AAC5B,MAAM,cAAc;AAEpB,MAAM,6BAAyB,iDAAgC,EAAE,SAAS,KAAK,CAAC;AAGhF,MAAM,iCAAiC;AACvC,MAAM,uBAAuB;AAC7B,MAAM,aAAa;AACnB,MAAM,YAAY;AAOlB,MAAM,cAAN,MAAM,YAAW;AAAA;AAAA,EAEb,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAO;AArFxB;AAsFQ,QAAI,UAAU,KAAK,WAAW;AAC1B,WAAK,YAAY;AACjB,UAAI,KAAK,aAAa;AAClB,aAAK,gBAAgB,KAAK,WAAW;AACrC,mBAAK,qBAAL,mBAAuB,KAAK;AAC5B,aAAK,YAAY,eAAe;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,mBAAmB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,iBAAiB,OAAO;AACxB,SAAK,wBAAoB,uCAAsB,KAAK;AACpD,SAAK,QAAQ;AACb,SAAK,cAAc;AAAA,EACvB;AAAA;AAAA,EAEA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAO;AAChB,UAAM,iBAAa,uCAAsB,KAAK;AAC9C,QAAI,KAAK,cAAc,YAAY;AAC/B,WAAK,YAAY;AAEjB,UAAI,YAAY;AACZ,aAAK,KAAK,CAAC;AAAA,MACf,OACK;AACD,aAAK,iCAAiC;AAAA,MAC1C;AACA,WAAK,qBAAqB,KAAK,OAAO;AAAA,IAC1C;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,UAAU,OAAO;AACjB,SAAK,iBAAa,sCAAqB,KAAK;AAAA,EAChD;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,UAAU,OAAO;AACjB,SAAK,iBAAa,sCAAqB,KAAK;AAC5C,QAAI,KAAK,kBAAkB;AACvB,WAAK,iBAAiB,uBAAuB,KAAK;AAAA,IACtD;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,QAAQ,OAAO;AACf,UAAM,aAAa,KAAK;AAIxB,SAAK,WAAW,SAAS,OAAO,OAAO,KAAK,EAAE,KAAK,IAAI;AACvD,QAAI,CAAC,KAAK,YAAY,KAAK,kBAAkB,GAAG;AAC5C,WAAK,KAAK,CAAC;AAAA,IACf,OACK;AACD,WAAK,iCAAiC;AACtC,WAAK,sBAAsB;AAAA,IAC/B;AACA,SAAK,qBAAqB,UAAU;AAAA,EACxC;AAAA;AAAA,EAEA,IAAI,eAAe;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,aAAa,OAAO;AACpB,SAAK,gBAAgB;AACrB,QAAI,KAAK,kBAAkB;AACvB,WAAK,iBAAiB,KAAK,aAAa;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,YAAY,UAAU,aAAa,mBAAmB,mBAAmB,SAAS,WAAW,gBAAgB,eAAe,gBAAgB,MAAM,iBAAiB,WAAW;AAC1K,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AACzB,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,gBAAgB;AACrB,SAAK,OAAO;AACZ,SAAK,kBAAkB;AACvB,SAAK,YAAY;AACjB,SAAK,oBAAoB;AACzB,SAAK,YAAY;AACjB,SAAK,mBAAmB;AACxB,SAAK,gCAAgC;AACrC,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAevB,SAAK,gBAAgB;AACrB,SAAK,WAAW;AAEhB,SAAK,oBAAoB,CAAC;AAE1B,SAAK,qBAAqB;AAE1B,SAAK,aAAa,IAAI,oBAAQ;AAC9B,SAAK,gBAAY,oBAAO,oBAAQ;AAChC,SAAK,kBAAkB;AACvB,SAAK,YAAY;AACjB,QAAI,iBAAiB;AACjB,WAAK,aAAa,gBAAgB;AAClC,WAAK,aAAa,gBAAgB;AAClC,UAAI,gBAAgB,UAAU;AAC1B,aAAK,WAAW,gBAAgB;AAAA,MACpC;AACA,UAAI,gBAAgB,kBAAkB;AAClC,aAAK,mBAAmB,gBAAgB;AAAA,MAC5C;AACA,UAAI,gBAAgB,eAAe;AAC/B,aAAK,gBAAgB,gBAAgB;AAAA,MACzC;AACA,UAAI,gBAAgB,cAAc;AAC9B,aAAK,eAAe,gBAAgB;AAAA,MACxC;AAAA,IACJ;AACA,SAAK,OAAO,SAAK,4BAAU,KAAK,UAAU,CAAC,EAAE,UAAU,MAAM;AACzD,UAAI,KAAK,aAAa;AAClB,aAAK,gBAAgB,KAAK,WAAW;AAAA,MACzC;AAAA,IACJ,CAAC;AACD,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,kBAAkB;AAEd,SAAK,mBAAmB;AACxB,SAAK,iCAAiC;AACtC,SAAK,cACA,QAAQ,KAAK,WAAW,EACxB,SAAK,4BAAU,KAAK,UAAU,CAAC,EAC/B,UAAU,YAAU;AAErB,UAAI,CAAC,QAAQ;AACT,aAAK,QAAQ,IAAI,MAAM,KAAK,KAAK,CAAC,CAAC;AAAA,MACvC,WACS,WAAW,YAAY;AAC5B,aAAK,QAAQ,IAAI,MAAM,KAAK,KAAK,CAAC;AAAA,MACtC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc;AACV,UAAM,gBAAgB,KAAK,YAAY;AAEvC,QAAI,KAAK,oBAAoB;AACzB,mBAAa,KAAK,kBAAkB;AAAA,IACxC;AACA,QAAI,KAAK,aAAa;AAClB,WAAK,YAAY,QAAQ;AACzB,WAAK,mBAAmB;AAAA,IAC5B;AAEA,SAAK,kBAAkB,QAAQ,CAAC,CAAC,OAAO,QAAQ,MAAM;AAClD,oBAAc,oBAAoB,OAAO,UAAU,sBAAsB;AAAA,IAC7E,CAAC;AACD,SAAK,kBAAkB,SAAS;AAChC,SAAK,WAAW,KAAK;AACrB,SAAK,WAAW,SAAS;AACzB,SAAK,eAAe,kBAAkB,eAAe,KAAK,SAAS,SAAS;AAC5E,SAAK,cAAc,eAAe,aAAa;AAAA,EACnD;AAAA;AAAA,EAEA,KAAK,QAAQ,KAAK,WAAW,QAAQ;AAvRzC;AAwRQ,QAAI,KAAK,YAAY,CAAC,KAAK,WAAW,KAAK,kBAAkB,GAAG;AAC5D,iBAAK,qBAAL,mBAAuB;AACvB;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,eAAe,MAAM;AAC7C,SAAK,QAAQ;AACb,SAAK,UACD,KAAK,WAAW,IAAI,8BAAgB,KAAK,mBAAmB,KAAK,iBAAiB;AACtF,UAAM,WAAY,KAAK,mBAAmB,WAAW,OAAO,KAAK,OAAO,EAAE;AAC1E,aAAS,kBAAkB,KAAK,YAAY;AAC5C,aAAS,uBAAuB,KAAK;AACrC,aACK,YAAY,EACZ,SAAK,4BAAU,KAAK,UAAU,CAAC,EAC/B,UAAU,MAAM,KAAK,QAAQ,CAAC;AACnC,SAAK,iBAAiB,KAAK,aAAa;AACxC,SAAK,sBAAsB;AAC3B,aAAS,KAAK,KAAK;AAAA,EACvB;AAAA;AAAA,EAEA,KAAK,QAAQ,KAAK,WAAW;AACzB,UAAM,WAAW,KAAK;AACtB,QAAI,UAAU;AACV,UAAI,SAAS,UAAU,GAAG;AACtB,iBAAS,KAAK,KAAK;AAAA,MACvB,OACK;AACD,iBAAS,yBAAyB;AAClC,aAAK,QAAQ;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,OAAO,QAAQ;AACX,SAAK,kBAAkB,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,QAAW,MAAM;AAAA,EACxE;AAAA;AAAA,EAEA,oBAAoB;AAChB,WAAO,CAAC,CAAC,KAAK,oBAAoB,KAAK,iBAAiB,UAAU;AAAA,EACtE;AAAA;AAAA,EAEA,eAAe,QAAQ;AAjU3B;AAkUQ,QAAI,KAAK,aAAa;AAClB,YAAM,mBAAmB,KAAK,YAAY,UAAU,EAC/C;AACL,WAAK,CAAC,KAAK,oBAAoB,CAAC,WAAW,iBAAiB,mBAAmB,wBAAY;AACvF,eAAO,KAAK;AAAA,MAChB;AACA,WAAK,QAAQ;AAAA,IACjB;AACA,UAAM,sBAAsB,KAAK,kBAAkB,4BAA4B,KAAK,WAAW;AAE/F,UAAM,WAAW,KAAK,SACjB,SAAS,EACT,oBAAoB,KAAK,mBAAmB,UAAU,KAAK,cAAc,KAAK,WAAW,EACzF,sBAAsB,IAAI,KAAK,eAAe,UAAU,EACxD,uBAAuB,KAAK,EAC5B,mBAAmB,KAAK,eAAe,EACvC,yBAAyB,mBAAmB;AACjD,aAAS,gBAAgB,SAAK,4BAAU,KAAK,UAAU,CAAC,EAAE,UAAU,YAAU;AAC1E,WAAK,4BAA4B,OAAO,cAAc;AACtD,UAAI,KAAK,kBAAkB;AACvB,YAAI,OAAO,yBAAyB,oBAAoB,KAAK,iBAAiB,UAAU,GAAG;AAGvF,eAAK,QAAQ,IAAI,MAAM,KAAK,KAAK,CAAC,CAAC;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,cAAc,KAAK,SAAS,OAAO;AAAA,MACpC,WAAW,KAAK;AAAA,MAChB,kBAAkB;AAAA,MAClB,YAAY,GAAG,KAAK,eAAe,IAAI,WAAW;AAAA,MAClD,gBAAgB,KAAK,gBAAgB;AAAA,IACzC,CAAC;AACD,SAAK,gBAAgB,KAAK,WAAW;AACrC,SAAK,YACA,YAAY,EACZ,SAAK,4BAAU,KAAK,UAAU,CAAC,EAC/B,UAAU,MAAM,KAAK,QAAQ,CAAC;AACnC,SAAK,YACA,qBAAqB,EACrB,SAAK,4BAAU,KAAK,UAAU,CAAC,EAC/B,UAAU,MAAG;AA3W1B,UAAAC;AA2W6B,cAAAA,MAAA,KAAK,qBAAL,gBAAAA,IAAuB;AAAA,KAAwB;AACpE,SAAK,YACA,cAAc,EACd,SAAK,4BAAU,KAAK,UAAU,CAAC,EAC/B,UAAU,WAAS;AACpB,UAAI,KAAK,kBAAkB,KAAK,MAAM,YAAY,0BAAU,KAAC,gCAAe,KAAK,GAAG;AAChF,cAAM,eAAe;AACrB,cAAM,gBAAgB;AACtB,aAAK,QAAQ,IAAI,MAAM,KAAK,KAAK,CAAC,CAAC;AAAA,MACvC;AAAA,IACJ,CAAC;AACD,SAAI,UAAK,oBAAL,mBAAsB,6BAA6B;AACnD,WAAK,YAAY,cAAc,GAAG,KAAK,eAAe,gCAAgC;AAAA,IAC1F;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,UAAU;AACN,QAAI,KAAK,eAAe,KAAK,YAAY,YAAY,GAAG;AACpD,WAAK,YAAY,OAAO;AAAA,IAC5B;AACA,SAAK,mBAAmB;AAAA,EAC5B;AAAA;AAAA,EAEA,gBAAgB,YAAY;AACxB,UAAM,WAAW,WAAW,UAAU,EAAE;AACxC,UAAM,SAAS,KAAK,WAAW;AAC/B,UAAM,UAAU,KAAK,oBAAoB;AACzC,aAAS,cAAc;AAAA,MACnB,KAAK,WAAW,kCAAK,OAAO,OAAS,QAAQ,KAAM;AAAA,MACnD,KAAK,WAAW,kCAAK,OAAO,WAAa,QAAQ,SAAU;AAAA,IAC/D,CAAC;AAAA,EACL;AAAA;AAAA,EAEA,WAAW,UAAU;AACjB,UAAM,SAAS;AACf,UAAM,QAAQ,CAAC,KAAK,QAAQ,KAAK,KAAK,SAAS;AAC/C,QAAI,SAAS,YAAY,OAAO;AAC5B,eAAS,UAAU,CAAC;AAAA,IACxB,WACS,SAAS,YAAY,UAAU;AACpC,eAAS,UAAU;AAAA,IACvB,WACS,SAAS,YAAY,SAAS;AACnC,eAAS,UAAU,QAAQ,CAAC,SAAS;AAAA,IACzC,WACS,SAAS,YAAY,OAAO;AACjC,eAAS,UAAU,QAAQ,SAAS,CAAC;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACT,UAAM,QAAQ,CAAC,KAAK,QAAQ,KAAK,KAAK,SAAS;AAC/C,UAAM,WAAW,KAAK;AACtB,QAAI;AACJ,QAAI,YAAY,WAAW,YAAY,SAAS;AAC5C,uBAAiB,EAAE,SAAS,UAAU,SAAS,YAAY,UAAU,QAAQ,SAAS;AAAA,IAC1F,WACS,YAAY,YAChB,YAAY,UAAU,SACtB,YAAY,WAAW,CAAC,OAAQ;AACjC,uBAAiB,EAAE,SAAS,SAAS,SAAS,SAAS;AAAA,IAC3D,WACS,YAAY,WAChB,YAAY,WAAW,SACvB,YAAY,UAAU,CAAC,OAAQ;AAChC,uBAAiB,EAAE,SAAS,OAAO,SAAS,SAAS;AAAA,IACzD,WACS,OAAO,cAAc,eAAe,WAAW;AACpD,YAAM,kCAAkC,QAAQ;AAAA,IACpD;AACA,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK,gBAAgB,eAAe,SAAS,eAAe,OAAO;AACpF,WAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU,EAAE,SAAS,GAAG,SAAS,EAAE;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA,EAEA,sBAAsB;AAClB,UAAM,QAAQ,CAAC,KAAK,QAAQ,KAAK,KAAK,SAAS;AAC/C,UAAM,WAAW,KAAK;AACtB,QAAI;AACJ,QAAI,YAAY,SAAS;AACrB,wBAAkB,EAAE,UAAU,UAAU,UAAU,SAAS;AAAA,IAC/D,WACS,YAAY,SAAS;AAC1B,wBAAkB,EAAE,UAAU,UAAU,UAAU,MAAM;AAAA,IAC5D,WACS,YAAY,YAChB,YAAY,UAAU,SACtB,YAAY,WAAW,CAAC,OAAQ;AACjC,wBAAkB,EAAE,UAAU,OAAO,UAAU,SAAS;AAAA,IAC5D,WACS,YAAY,WAChB,YAAY,WAAW,SACvB,YAAY,UAAU,CAAC,OAAQ;AAChC,wBAAkB,EAAE,UAAU,SAAS,UAAU,SAAS;AAAA,IAC9D,WACS,OAAO,cAAc,eAAe,WAAW;AACpD,YAAM,kCAAkC,QAAQ;AAAA,IACpD;AACA,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK,gBAAgB,gBAAgB,UAAU,gBAAgB,QAAQ;AACxF,WAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU,EAAE,UAAU,GAAG,UAAU,EAAE;AAAA,IACzC;AAAA,EACJ;AAAA;AAAA,EAEA,wBAAwB;AAGpB,QAAI,KAAK,kBAAkB;AACvB,WAAK,iBAAiB,UAAU,KAAK;AACrC,WAAK,iBAAiB,cAAc;AACpC,uCAAgB,MAAM;AAClB,YAAI,KAAK,kBAAkB;AACvB,eAAK,YAAY,eAAe;AAAA,QACpC;AAAA,MACJ,GAAG;AAAA,QACC,UAAU,KAAK;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA,EAEA,iBAAiB,cAAc;AAC3B,QAAI,KAAK,kBAAkB;AACvB,WAAK,iBAAiB,eAAe;AACrC,WAAK,iBAAiB,cAAc;AAAA,IACxC;AAAA,EACJ;AAAA;AAAA,EAEA,gBAAgB,GAAG,GAAG;AAClB,QAAI,KAAK,aAAa,WAAW,KAAK,aAAa,SAAS;AACxD,UAAI,MAAM,OAAO;AACb,YAAI;AAAA,MACR,WACS,MAAM,UAAU;AACrB,YAAI;AAAA,MACR;AAAA,IACJ,OACK;AACD,UAAI,MAAM,OAAO;AACb,YAAI;AAAA,MACR,WACS,MAAM,SAAS;AACpB,YAAI;AAAA,MACR;AAAA,IACJ;AACA,WAAO,EAAE,GAAG,EAAE;AAAA,EAClB;AAAA;AAAA,EAEA,4BAA4B,gBAAgB;AACxC,UAAM,EAAE,UAAU,SAAS,QAAQ,IAAI;AACvC,QAAI;AAGJ,QAAI,aAAa,UAAU;AAIvB,UAAI,KAAK,QAAQ,KAAK,KAAK,UAAU,OAAO;AACxC,sBAAc,YAAY,QAAQ,SAAS;AAAA,MAC/C,OACK;AACD,sBAAc,YAAY,UAAU,SAAS;AAAA,MACjD;AAAA,IACJ,OACK;AACD,oBAAc,aAAa,YAAY,YAAY,QAAQ,UAAU;AAAA,IACzE;AACA,QAAI,gBAAgB,KAAK,kBAAkB;AACvC,YAAM,aAAa,KAAK;AACxB,UAAI,YAAY;AACZ,cAAM,cAAc,GAAG,KAAK,eAAe,IAAI,WAAW;AAC1D,mBAAW,iBAAiB,cAAc,KAAK,gBAAgB;AAC/D,mBAAW,cAAc,cAAc,WAAW;AAAA,MACtD;AACA,WAAK,mBAAmB;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA,EAEA,mCAAmC;AAE/B,QAAI,KAAK,aACL,CAAC,KAAK,WACN,CAAC,KAAK,oBACN,KAAK,kBAAkB,QAAQ;AAC/B;AAAA,IACJ;AAGA,QAAI,KAAK,6BAA6B,GAAG;AACrC,WAAK,kBAAkB,KAAK;AAAA,QACxB;AAAA,QACA,WAAS;AACL,eAAK,gCAAgC;AACrC,cAAI,QAAQ;AACZ,cAAI,MAAM,MAAM,UAAa,MAAM,MAAM,QAAW;AAChD,oBAAQ;AAAA,UACZ;AACA,eAAK,KAAK,QAAW,KAAK;AAAA,QAC9B;AAAA,MACJ,CAAC;AAAA,IACL,WACS,KAAK,kBAAkB,OAAO;AACnC,WAAK,kCAAkC;AACvC,WAAK,kBAAkB,KAAK;AAAA,QACxB;AAAA,QACA,WAAS;AA/jBzB;AAgkBoB,gBAAM,SAAQ,WAAM,kBAAN,mBAAsB;AACpC,gBAAM,SAAS,QAAQ,EAAE,GAAG,MAAM,SAAS,GAAG,MAAM,QAAQ,IAAI;AAGhE,eAAK,gCAAgC;AACrC,cAAI,KAAK,oBAAoB;AACzB,yBAAa,KAAK,kBAAkB;AAAA,UACxC;AACA,gBAAM,0BAA0B;AAChC,eAAK,qBAAqB,WAAW,MAAM;AACvC,iBAAK,qBAAqB;AAC1B,iBAAK,KAAK,QAAW,MAAM;AAAA,UAC/B,IAAG,UAAK,gBAAgB,4BAArB,YAAgD,uBAAuB;AAAA,QAC9E;AAAA,MACJ,CAAC;AAAA,IACL;AACA,SAAK,cAAc,KAAK,iBAAiB;AAAA,EAC7C;AAAA,EACA,kCAAkC;AAC9B,QAAI,KAAK,+BAA+B;AACpC;AAAA,IACJ;AACA,SAAK,gCAAgC;AACrC,UAAM,gBAAgB,CAAC;AACvB,QAAI,KAAK,6BAA6B,GAAG;AACrC,oBAAc,KAAK;AAAA,QACf;AAAA,QACA,WAAS;AA3lBzB;AA4lBoB,gBAAM,YAAY,MAAM;AACxB,cAAI,CAAC,aAAa,GAAC,UAAK,gBAAL,mBAAkB,eAAe,SAAS,aAAY;AACrE,iBAAK,KAAK;AAAA,UACd;AAAA,QACJ;AAAA,MACJ,GAAG,CAAC,SAAS,WAAS,KAAK,eAAe,KAAK,CAAC,CAAC;AAAA,IACrD,WACS,KAAK,kBAAkB,OAAO;AACnC,WAAK,kCAAkC;AACvC,YAAM,mBAAmB,MAAM;AAC3B,YAAI,KAAK,oBAAoB;AACzB,uBAAa,KAAK,kBAAkB;AAAA,QACxC;AACA,aAAK,KAAK,KAAK,gBAAgB,iBAAiB;AAAA,MACpD;AACA,oBAAc,KAAK,CAAC,YAAY,gBAAgB,GAAG,CAAC,eAAe,gBAAgB,CAAC;AAAA,IACxF;AACA,SAAK,cAAc,aAAa;AAChC,SAAK,kBAAkB,KAAK,GAAG,aAAa;AAAA,EAChD;AAAA,EACA,cAAc,WAAW;AACrB,cAAU,QAAQ,CAAC,CAAC,OAAO,QAAQ,MAAM;AACrC,WAAK,YAAY,cAAc,iBAAiB,OAAO,UAAU,sBAAsB;AAAA,IAC3F,CAAC;AAAA,EACL;AAAA,EACA,+BAA+B;AAC3B,WAAO,CAAC,KAAK,UAAU,OAAO,CAAC,KAAK,UAAU;AAAA,EAClD;AAAA;AAAA,EAEA,eAAe,OAAO;AAClB,QAAI,KAAK,kBAAkB,GAAG;AAC1B,YAAM,sBAAsB,KAAK,UAAU,iBAAiB,MAAM,SAAS,MAAM,OAAO;AACxF,YAAM,UAAU,KAAK,YAAY;AAKjC,UAAI,wBAAwB,WAAW,CAAC,QAAQ,SAAS,mBAAmB,GAAG;AAC3E,aAAK,KAAK;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,oCAAoC;AAChC,UAAM,WAAW,KAAK;AACtB,QAAI,aAAa,OAAO;AACpB,YAAM,UAAU,KAAK,YAAY;AACjC,YAAMC,SAAQ,QAAQ;AAGtB,UAAI,aAAa,QAAS,QAAQ,aAAa,WAAW,QAAQ,aAAa,YAAa;AACxF,QAAAA,OAAM,aACFA,OAAM,eACFA,OAAM,mBACFA,OAAM,gBACF;AAAA,MACpB;AAGA,UAAI,aAAa,QAAQ,CAAC,QAAQ,WAAW;AACzC,QAAAA,OAAM,iBAAiB;AAAA,MAC3B;AACA,MAAAA,OAAM,cAAc;AACpB,MAAAA,OAAM,0BAA0B;AAAA,IACpC;AAAA,EACJ;AAAA;AAAA,EAEA,qBAAqB,YAAY;AAC7B,QAAI,KAAK,yBAAyB;AAC9B;AAAA,IACJ;AACA,SAAK,0BAA0B;AAC/B,SAAK,eAAe,kBAAkB,KAAK,YAAY,eAAe,YAAY,SAAS;AAC3F,SAAK,QAAQ,kBAAkB,MAAM;AAKjC,cAAQ,QAAQ,EAAE,KAAK,MAAM;AACzB,aAAK,0BAA0B;AAC/B,YAAI,KAAK,WAAW,CAAC,KAAK,UAAU;AAChC,eAAK,eAAe,SAAS,KAAK,YAAY,eAAe,KAAK,SAAS,SAAS;AAAA,QACxF;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAGJ;AAFa,YAAK,YAAO,GAAG,6BAAmB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,aAAY,MAAM,CAAC,EAAE,OAAO,GAAG,QAAQ,GAAG,EAAE,OAAO,GAAG,WAAW,GAAG,EAAE,OAAO,GAAG,iBAAiB,GAAG,EAAE,OAAO,GAAG,iBAAiB,GAAG,EAAE,OAAO,GAAG,OAAO,GAAG,EAAE,OAAO,GAAG,SAAS,GAAG,EAAE,OAAO,GAAG,cAAc,GAAG,EAAE,OAAO,GAAG,aAAa,GAAG,EAAE,OAAO,4BAA4B,GAAG,EAAE,OAAO,GAAG,eAAe,GAAG,EAAE,OAAO,6BAA6B,UAAU,KAAK,GAAG,EAAE,OAAO,uBAAS,CAAC,GAAG,QAAQ,GAAG,0BAAgB,UAAU,CAAC;AAC7gB,YAAK,YAAO,GAAG,+BAAqB,EAAE,YAAY,UAAU,SAAS,iBAAiB,MAAM,aAAY,cAAc,MAAM,UAAU,gBAAgB,QAAQ,EAAE,UAAU,CAAC,sBAAsB,UAAU,GAAG,kBAAkB,CAAC,8BAA8B,kBAAkB,GAAG,UAAU,CAAC,sBAAsB,UAAU,GAAG,WAAW,CAAC,uBAAuB,WAAW,GAAG,WAAW,CAAC,uBAAuB,WAAW,GAAG,eAAe,CAAC,2BAA2B,eAAe,GAAG,SAAS,CAAC,cAAc,SAAS,GAAG,cAAc,CAAC,mBAAmB,cAAc,EAAE,GAAG,MAAM,EAAE,YAAY,EAAE,kCAAkC,WAAW,GAAG,gBAAgB,0BAA0B,GAAG,UAAU,CAAC,YAAY,GAAG,UAAU,GAAG,CAAC;AAnmBluB,IAAM,aAAN;AAqmBA,GAAG,mCAAyB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,YAAY,YAAY,CAAC;AAAA,EAC/G,MAAM;AAAA,EACN,MAAM,CAAC;AAAA,IACC,UAAU;AAAA,IACV,UAAU;AAAA,IACV,MAAM;AAAA,MACF,SAAS;AAAA,MACT,oCAAoC;AAAA,IACxC;AAAA,IACA,YAAY;AAAA,EAChB,CAAC;AACT,CAAC,GAAG,gBAAgB,MAAM,CAAC,EAAE,MAAM,GAAG,QAAQ,GAAG,EAAE,MAAM,GAAG,WAAW,GAAG,EAAE,MAAM,GAAG,iBAAiB,GAAG,EAAE,MAAM,GAAG,iBAAiB,GAAG,EAAE,MAAM,GAAG,OAAO,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,EAAE,MAAM,GAAG,cAAc,GAAG,EAAE,MAAM,GAAG,aAAa,GAAG,EAAE,MAAM,QAAW,YAAY,CAAC;AAAA,EAC/P,MAAM;AAAA,EACN,MAAM,CAAC,2BAA2B;AACtC,CAAC,EAAE,GAAG,EAAE,MAAM,GAAG,eAAe,GAAG,EAAE,MAAM,QAAW,YAAY,CAAC;AAAA,EAC/D,MAAM;AACV,GAAG;AAAA,EACC,MAAM;AAAA,EACN,MAAM,CAAC,2BAA2B;AACtC,CAAC,EAAE,GAAG,EAAE,MAAM,QAAW,YAAY,CAAC;AAAA,EAClC,MAAM;AAAA,EACN,MAAM,CAAC,sBAAQ;AACnB,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,UAAU,CAAC;AAAA,EACpC,MAAM;AAAA,EACN,MAAM,CAAC,oBAAoB;AAC/B,CAAC,GAAG,kBAAkB,CAAC;AAAA,EACnB,MAAM;AAAA,EACN,MAAM,CAAC,4BAA4B;AACvC,CAAC,GAAG,UAAU,CAAC;AAAA,EACX,MAAM;AAAA,EACN,MAAM,CAAC,oBAAoB;AAC/B,CAAC,GAAG,WAAW,CAAC;AAAA,EACZ,MAAM;AAAA,EACN,MAAM,CAAC,qBAAqB;AAChC,CAAC,GAAG,WAAW,CAAC;AAAA,EACZ,MAAM;AAAA,EACN,MAAM,CAAC,qBAAqB;AAChC,CAAC,GAAG,eAAe,CAAC;AAAA,EAChB,MAAM;AAAA,EACN,MAAM,CAAC,yBAAyB;AACpC,CAAC,GAAG,SAAS,CAAC;AAAA,EACV,MAAM;AAAA,EACN,MAAM,CAAC,YAAY;AACvB,CAAC,GAAG,cAAc,CAAC;AAAA,EACf,MAAM;AAAA,EACN,MAAM,CAAC,iBAAiB;AAC5B,CAAC,EAAE,EAAE,CAAC;AAKlB,MAAM,oBAAN,MAAM,kBAAiB;AAAA,EACnB,YAAY,oBAAoB,aAAa,eAAe;AACxD,SAAK,qBAAqB;AAC1B,SAAK,cAAc;AAEnB,SAAK,eAAe;AAEpB,SAAK,sBAAsB;AAE3B,SAAK,aAAa;AAElB,SAAK,UAAU,IAAI,oBAAQ;AAE3B,SAAK,iBAAiB;AAEtB,SAAK,iBAAiB;AACtB,SAAK,sBAAsB,kBAAkB;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,KAAK,OAAO;AAER,QAAI,KAAK,kBAAkB,MAAM;AAC7B,mBAAa,KAAK,cAAc;AAAA,IACpC;AACA,SAAK,iBAAiB,WAAW,MAAM;AACnC,WAAK,kBAAkB,IAAI;AAC3B,WAAK,iBAAiB;AAAA,IAC1B,GAAG,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,KAAK,OAAO;AAER,QAAI,KAAK,kBAAkB,MAAM;AAC7B,mBAAa,KAAK,cAAc;AAAA,IACpC;AACA,SAAK,iBAAiB,WAAW,MAAM;AACnC,WAAK,kBAAkB,KAAK;AAC5B,WAAK,iBAAiB;AAAA,IAC1B,GAAG,KAAK;AAAA,EACZ;AAAA;AAAA,EAEA,cAAc;AACV,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,cAAc;AACV,SAAK,yBAAyB;AAC9B,SAAK,QAAQ,SAAS;AACtB,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,yBAAyB;AACrB,QAAI,KAAK,qBAAqB;AAC1B,WAAK,KAAK,CAAC;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACZ,SAAK,mBAAmB,aAAa;AAAA,EACzC;AAAA,EACA,kBAAkB,EAAE,cAAc,GAAG;AACjC,QAAI,CAAC,iBAAiB,CAAC,KAAK,gBAAgB,SAAS,aAAa,GAAG;AACjE,UAAI,KAAK,UAAU,GAAG;AAClB,aAAK,KAAK,KAAK,oBAAoB;AAAA,MACvC,OACK;AACD,aAAK,mBAAmB,KAAK;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU;AACN,SAAK,eAAe,KAAK,oBAAoB;AAC7C,SAAK,cAAc;AAAA,EACvB;AAAA;AAAA,EAEA,sBAAsB;AAClB,UAAM,OAAO,KAAK,YAAY,cAAc,sBAAsB;AAClE,WAAO,KAAK,SAAS,cAAc,KAAK,SAAS;AAAA,EACrD;AAAA;AAAA,EAEA,oBAAoB,EAAE,cAAc,GAAG;AACnC,QAAI,kBAAkB,KAAK,kBAAkB,kBAAkB,KAAK,gBAAgB;AAChF,WAAK,mBAAmB,kBAAkB,KAAK,cAAc;AAAA,IACjE;AAAA,EACJ;AAAA;AAAA,EAEA,2BAA2B;AACvB,QAAI,KAAK,kBAAkB,MAAM;AAC7B,mBAAa,KAAK,cAAc;AAAA,IACpC;AACA,QAAI,KAAK,kBAAkB,MAAM;AAC7B,mBAAa,KAAK,cAAc;AAAA,IACpC;AACA,SAAK,iBAAiB,KAAK,iBAAiB;AAAA,EAChD;AAAA;AAAA,EAEA,mBAAmB,WAAW;AAC1B,QAAI,WAAW;AACX,WAAK,sBAAsB;AAAA,IAC/B,WACS,CAAC,KAAK,UAAU,GAAG;AACxB,WAAK,QAAQ,KAAK;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA,EAEA,kBAAkB,WAAW;AAIzB,UAAM,UAAU,KAAK,SAAS;AAC9B,UAAM,YAAY,KAAK;AACvB,UAAM,YAAY,KAAK;AACvB,YAAQ,UAAU,OAAO,YAAY,YAAY,SAAS;AAC1D,YAAQ,UAAU,IAAI,YAAY,YAAY,SAAS;AACvD,QAAI,KAAK,eAAe,WAAW;AAC/B,WAAK,aAAa;AAClB,WAAK,mBAAmB,aAAa;AAAA,IACzC;AAGA,QAAI,aAAa,CAAC,KAAK,uBAAuB,OAAO,qBAAqB,YAAY;AAClF,YAAM,SAAS,iBAAiB,OAAO;AAEvC,UAAI,OAAO,iBAAiB,oBAAoB,MAAM,QAClD,OAAO,iBAAiB,gBAAgB,MAAM,QAAQ;AACtD,aAAK,sBAAsB;AAAA,MAC/B;AAAA,IACJ;AACA,QAAI,WAAW;AACX,WAAK,QAAQ;AAAA,IACjB;AACA,QAAI,KAAK,qBAAqB;AAC1B,cAAQ,UAAU,IAAI,yBAAyB;AAC/C,WAAK,mBAAmB,SAAS;AAAA,IACrC;AAAA,EACJ;AAGJ;AAFa,kBAAK,YAAO,GAAG,6BAAmB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,mBAAkB,MAAM,CAAC,EAAE,OAAO,GAAG,kBAAkB,GAAG,EAAE,OAAO,GAAG,WAAW,GAAG,EAAE,OAAO,mCAAuB,UAAU,KAAK,CAAC,GAAG,QAAQ,GAAG,0BAAgB,UAAU,CAAC;AACrR,kBAAK,YAAO,GAAG,+BAAqB,EAAE,YAAY,UAAU,SAAS,iBAAiB,MAAM,mBAAkB,cAAc,MAAM,UAAU,yBAAyB,MAAM,EAAE,YAAY,EAAE,eAAe,OAAO,GAAG,WAAW,EAAE,cAAc,4BAA4B,EAAE,GAAG,aAAa,CAAC,EAAE,cAAc,YAAY,OAAO,MAAM,WAAW,CAAC,SAAS,GAAG,aAAa,MAAM,QAAQ,KAAK,CAAC,GAAG,UAAU,IAAI,UAAU,kRAA4R,QAAQ,CAAC,6uEAAivE,GAAG,cAAc,CAAC,EAAE,MAAM,aAAa,MAAM,uBAAS,UAAU,aAAa,QAAQ,CAAC,SAAS,SAAS,EAAE,CAAC,GAAG,iBAAiB,GAAG,wBAAwB,QAAQ,eAAe,GAAG,kBAAkB,KAAK,CAAC;AA/J1oG,IAAM,mBAAN;AAiKA,GAAG,mCAAyB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,kBAAkB,YAAY,CAAC;AAAA,EACrH,MAAM;AAAA,EACN,MAAM,CAAC,EAAE,UAAU,yBAAyB,eAAe,8BAAkB,MAAM,iBAAiB,oCAAwB,QAAQ,MAAM;AAAA,IAC9H,gBAAgB;AAAA,IAChB,eAAe;AAAA,EACnB,GAAG,YAAY,MAAM,SAAS,CAAC,qBAAO,GAAG,UAAU,kRAA4R,QAAQ,CAAC,6uEAAivE,EAAE,CAAC;AACxlF,CAAC,GAAG,gBAAgB,MAAM,CAAC,EAAE,MAAM,GAAG,kBAAkB,GAAG,EAAE,MAAM,GAAG,WAAW,GAAG,EAAE,MAAM,QAAW,YAAY,CAAC;AAAA,EACxG,MAAM;AACV,GAAG;AAAA,EACC,MAAM;AAAA,EACN,MAAM,CAAC,iCAAqB;AAChC,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,UAAU,CAAC;AAAA,EACpC,MAAM;AAAA,EACN,MAAM,CAAC,WAAW;AAAA;AAAA;AAAA,IAGV,QAAQ;AAAA,EACZ,CAAC;AACT,CAAC,EAAE,EAAE,CAAC;AAMlB,MAAM,uBAAuB;AAAA;AAAA,EAEzB,kBAAc,2BAAQ,SAAS;AAAA;AAAA;AAAA,QAG3B,yBAAM,6BAAyB,yBAAM,EAAE,SAAS,GAAG,WAAW,aAAa,CAAC,CAAC;AAAA,QAC7E,yBAAM,eAAW,yBAAM,EAAE,WAAW,WAAW,CAAC,CAAC;AAAA,QACjD,8BAAW,oBAAgB,2BAAQ,kCAAkC,CAAC;AAAA,QACtE,8BAAW,mBAAe,2BAAQ,iCAAiC,CAAC;AAAA,EACxE,CAAC;AACL;AAEA,MAAM,oBAAN,MAAM,kBAAiB;AAIvB;AAHa,kBAAK,YAAO,GAAG,6BAAmB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,mBAAkB,MAAM,CAAC,GAAG,QAAQ,GAAG,0BAAgB,SAAS,CAAC;AACzK,kBAAK,YAAO,GAAG,8BAAoB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,mBAAkB,SAAS,CAAC,wBAAY,4BAAc,8BAAe,8BAAiB,YAAY,gBAAgB,GAAG,SAAS,CAAC,YAAY,kBAAkB,8BAAiB,oCAAmB,EAAE,CAAC;AAC7S,kBAAK,YAAO,GAAG,8BAAoB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,mBAAkB,WAAW,CAAC,4CAA4C,GAAG,SAAS,CAAC,wBAAY,4BAAc,8BAAe,8BAAiB,8BAAiB,oCAAmB,EAAE,CAAC;AAH9S,IAAM,mBAAN;AAKA,GAAG,mCAAyB,EAAE,YAAY,UAAU,SAAS,iBAAiB,UAAU,IAAI,MAAM,kBAAkB,YAAY,CAAC;AAAA,EACrH,MAAM;AAAA,EACN,MAAM,CAAC;AAAA,IACC,SAAS,CAAC,wBAAY,4BAAc,8BAAe,8BAAiB,YAAY,gBAAgB;AAAA,IAChG,SAAS,CAAC,YAAY,kBAAkB,8BAAiB,oCAAmB;AAAA,IAC5E,WAAW,CAAC,4CAA4C;AAAA,EAC5D,CAAC;AACT,CAAC,EAAE,CAAC;",
  "names": ["import_core", "_a", "style"]
}
