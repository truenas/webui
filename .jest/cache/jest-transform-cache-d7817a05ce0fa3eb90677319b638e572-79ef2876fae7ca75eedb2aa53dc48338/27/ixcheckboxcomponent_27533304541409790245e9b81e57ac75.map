{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component.ts","mappings":";;;;;;;;;AAAA,wCAGuB;AACvB,0CAEwB;AACxB,yDAA4E;AAC5E,6DAAuD;AACvD,yDAAqD;AACrD,6GAAwG;AACxG,gHAA2G;AAC3G,yFAAoF;AACpF,uEAAmE;AACnE,6EAAyE;AAkBlE,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAU9B,YACS,gBAA2B,EAC1B,GAAsB,EACtB,WAA0B,EAC1B,UAAmC;QAHpC,qBAAgB,GAAhB,gBAAgB,CAAW;QAC1B,QAAG,GAAH,GAAG,CAAmB;QACtB,gBAAW,GAAX,WAAW,CAAe;QAC1B,eAAU,GAAV,UAAU,CAAyB;QAP7C,eAAU,GAAG,KAAK,CAAC;QAoBnB,aAAQ,GAA6B,GAAS,EAAE,GAAE,CAAC,CAAC;QACpD,YAAO,GAAe,GAAS,EAAE,GAAE,CAAC,CAAC;QAZnC,IAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,IAAI,CAAC;IAC7C,CAAC;IAED,eAAe;QACb,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3E,CAAC;IAED,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5D,CAAC;IAKD,UAAU,CAAC,KAAc;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,gBAAgB,CAAC,QAAkC;QACjD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,iBAAiB,CAAC,SAAqB;QACrC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC3B,CAAC;IAED,gBAAgB,CAAE,UAAmB;QACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,iBAAiB,CAAC,KAAwB;QACxC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;;AAnDU,kDAAmB;;;;;;;;oBAC7B,YAAK;mBACL,YAAK;sBACL,YAAK;sBACL,YAAK;uBACL,YAAK;;8BALK,mBAAmB;IAhB/B,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,aAAa;QAEvB,iDAA2C;QAC3C,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE;YACP,sBAAW;YACX,oCAAgB;YAChB,yCAAkB;YAClB,uCAAiB;YACjB,oBAAO;YACP,8BAAa;SACd;KACF,CAAC;GACW,mBAAmB,CAoD/B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component.ts"],"sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy,\n} from '@angular/core';\nimport {\n  ControlValueAccessor, NgControl,\n} from '@angular/forms';\nimport { MatCheckboxChange, MatCheckbox } from '@angular/material/checkbox';\nimport { MatHint } from '@angular/material/form-field';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { IxErrorsComponent } from 'app/modules/forms/ix-forms/components/ix-errors/ix-errors.component';\nimport { IxWarningComponent } from 'app/modules/forms/ix-forms/components/ix-warning/ix-warning.component';\nimport { IxFormService } from 'app/modules/forms/ix-forms/services/ix-form.service';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { TooltipComponent } from 'app/modules/tooltip/tooltip.component';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-checkbox',\n  styleUrls: ['./ix-checkbox.component.scss'],\n  templateUrl: './ix-checkbox.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatCheckbox,\n    TooltipComponent,\n    IxWarningComponent,\n    IxErrorsComponent,\n    MatHint,\n    TestDirective,\n  ],\n})\nexport class IxCheckboxComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() tooltip: string;\n  @Input() warning: string;\n  @Input() required: boolean;\n\n  isDisabled = false;\n  value: boolean;\n\n  constructor(\n    public controlDirective: NgControl,\n    private cdr: ChangeDetectorRef,\n    private formService: IxFormService,\n    private elementRef: ElementRef<HTMLElement>,\n  ) {\n    this.controlDirective.valueAccessor = this;\n  }\n\n  ngAfterViewInit(): void {\n    this.formService.registerControl(this.controlDirective, this.elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.formService.unregisterControl(this.controlDirective);\n  }\n\n  onChange: (value: boolean) => void = (): void => {};\n  onTouch: () => void = (): void => {};\n\n  writeValue(value: boolean): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(onChange: (value: boolean) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: () => void): void {\n    this.onTouch = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  onCheckboxChanged(event: MatCheckboxChange): void {\n    this.value = event.checked;\n    this.onChange(event.checked);\n  }\n}\n"],"version":3}