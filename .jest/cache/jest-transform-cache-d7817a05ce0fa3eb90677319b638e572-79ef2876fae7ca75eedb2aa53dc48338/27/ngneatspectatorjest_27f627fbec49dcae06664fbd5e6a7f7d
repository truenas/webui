2336dbaab27fbec5b450327480cee16d
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ngneat_spectator_jest_exports = {};
__export(ngneat_spectator_jest_exports, {
  HttpMethod: () => import_spectator2.HttpMethod,
  Spectator: () => Spectator,
  SpectatorDirective: () => SpectatorDirective,
  SpectatorHost: () => SpectatorHost,
  SpectatorPipe: () => SpectatorPipe,
  SpectatorRouting: () => SpectatorRouting,
  byAltText: () => import_spectator2.byAltText,
  byLabel: () => import_spectator2.byLabel,
  byPlaceholder: () => import_spectator2.byPlaceholder,
  byRole: () => import_spectator2.byRole,
  byTestId: () => import_spectator2.byTestId,
  byText: () => import_spectator2.byText,
  byTextContent: () => import_spectator2.byTextContent,
  byTitle: () => import_spectator2.byTitle,
  byValue: () => import_spectator2.byValue,
  createComponentFactory: () => createComponentFactory,
  createDirectiveFactory: () => createDirectiveFactory,
  createHostFactory: () => createHostFactory,
  createHttpFactory: () => createHttpFactory,
  createPipeFactory: () => createPipeFactory,
  createRoutingFactory: () => createRoutingFactory,
  createServiceFactory: () => createServiceFactory,
  createSpyObject: () => createSpyObject,
  mockProvider: () => mockProvider
});
module.exports = __toCommonJS(ngneat_spectator_jest_exports);
var import_spectator = require("@ngneat/spectator");
var import_spectator2 = require("@ngneat/spectator");
var import_globals = require("@jest/globals");
function createSpyObject(type, template) {
  const mock = __spreadValues({}, template) || {};
  (0, import_spectator.installProtoMethods)(mock, type.prototype, () => {
    const jestFn = import_globals.jest.fn();
    const newSpy = jestFn;
    newSpy.andCallFake = (fn) => {
      jestFn.mockImplementation(fn);
      return newSpy;
    };
    newSpy.andReturn = (val) => {
      jestFn.mockReturnValue(val);
    };
    newSpy.reset = () => {
      jestFn.mockReset();
    };
    return newSpy;
  });
  return mock;
}
function mockProvider(type, properties) {
  return {
    provide: type,
    useFactory: () => createSpyObject(type, properties)
  };
}
function createComponentFactory(typeOrOptions) {
  return (0, import_spectator.createComponentFactory)(__spreadValues({
    mockProvider
  }, (0, import_spectator.isType)(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions));
}
class Spectator extends import_spectator.Spectator {
  inject(token, fromComponentInjector = false) {
    return super.inject(token, fromComponentInjector);
  }
}
function createHttpFactory(typeOrOptions) {
  return (0, import_spectator.createHttpFactory)(__spreadValues({
    mockProvider
  }, (0, import_spectator.isType)(typeOrOptions) ? { service: typeOrOptions } : typeOrOptions));
}
class SpectatorDirective extends import_spectator.SpectatorDirective {
  inject(token, fromComponentInjector = false) {
    return super.inject(token, fromComponentInjector);
  }
}
function createDirectiveFactory(typeOrOptions) {
  return (0, import_spectator.createDirectiveFactory)(__spreadValues({
    mockProvider
  }, (0, import_spectator.isType)(typeOrOptions) ? { directive: typeOrOptions } : typeOrOptions));
}
function createServiceFactory(typeOrOptions) {
  return (0, import_spectator.createServiceFactory)(__spreadValues({
    mockProvider
  }, (0, import_spectator.isType)(typeOrOptions) ? { service: typeOrOptions } : typeOrOptions));
}
class SpectatorHost extends import_spectator.SpectatorHost {
  inject(token, fromComponentInjector = false) {
    return super.inject(token, fromComponentInjector);
  }
}
function createHostFactory(typeOrOptions) {
  return (0, import_spectator.createHostFactory)(__spreadValues({
    mockProvider
  }, (0, import_spectator.isType)(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions));
}
class SpectatorRouting extends import_spectator.SpectatorRouting {
  inject(token, fromComponentInjector = false) {
    return super.inject(token, fromComponentInjector);
  }
}
function createRoutingFactory(typeOrOptions) {
  return (0, import_spectator.createRoutingFactory)(__spreadValues({
    mockProvider
  }, (0, import_spectator.isType)(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions));
}
class SpectatorPipe extends import_spectator.SpectatorPipe {
  inject(token) {
    return super.inject(token);
  }
}
function createPipeFactory(typeOrOptions) {
  return (0, import_spectator.createPipeFactory)(__spreadValues({
    mockProvider
  }, (0, import_spectator.isType)(typeOrOptions) ? { pipe: typeOrOptions } : typeOrOptions));
}
