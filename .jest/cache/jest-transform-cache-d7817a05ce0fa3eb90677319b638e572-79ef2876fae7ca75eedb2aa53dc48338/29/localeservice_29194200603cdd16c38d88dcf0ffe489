9e4d8d487fa38dff5a5b58773d2feac7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocaleService = void 0;
const core_1 = require("@angular/core");
const ngx_translate_extract_marker_1 = require("@biesbjerg/ngx-translate-extract-marker");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const date_fns_1 = require("date-fns");
const date_fns_tz_1 = require("date-fns-tz");
const rxjs_1 = require("rxjs");
const preferences_selectors_1 = require("app/store/preferences/preferences.selectors");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
let LocaleService = class LocaleService {
    constructor(store$, translate) {
        this.store$ = store$;
        this.translate = translate;
        this.t24 = (0, ngx_translate_extract_marker_1.marker)('(24 Hours)');
        this.dateFormat = 'yyyy-MM-dd';
        this.timeFormat = 'HH:mm:ss';
        (0, rxjs_1.combineLatest)([
            this.store$.select(system_config_selectors_1.selectTimezone),
            this.store$.pipe(preferences_selectors_1.waitForPreferences),
        ]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(([timezone, preferences]) => {
            this.timezone = timezone;
            if (preferences === null || preferences === void 0 ? void 0 : preferences.dateFormat) {
                this.dateFormat = this.formatDateTimeToDateFns(preferences.dateFormat);
            }
            if (preferences === null || preferences === void 0 ? void 0 : preferences.timeFormat) {
                this.timeFormat = this.formatDateTimeToDateFns(preferences.timeFormat);
            }
        });
    }
    getDateFormatOptions(tz) {
        let date = new Date();
        if (tz) {
            date = (0, date_fns_tz_1.utcToZonedTime)(new Date().valueOf(), tz);
        }
        return [
            { label: (0, date_fns_tz_1.format)(date, 'yyyy-MM-dd'), value: 'yyyy-MM-dd' },
            { label: (0, date_fns_tz_1.format)(date, 'MMMM d, yyyy'), value: 'MMMM d, yyyy' },
            { label: (0, date_fns_tz_1.format)(date, 'd MMMM, yyyy'), value: 'd MMMM, yyyy' },
            { label: (0, date_fns_tz_1.format)(date, 'MMM d, yyyy'), value: 'MMM d, yyyy' },
            { label: (0, date_fns_tz_1.format)(date, 'd MMM yyyy'), value: 'd MMM yyyy' },
            { label: (0, date_fns_tz_1.format)(date, 'MM/dd/yyyy'), value: 'MM/dd/yyyy' },
            { label: (0, date_fns_tz_1.format)(date, 'dd/MM/yyyy'), value: 'dd/MM/yyyy' },
            { label: (0, date_fns_tz_1.format)(date, 'dd.MM.yyyy'), value: 'dd.MM.yyyy' },
        ];
    }
    getTimeFormatOptions(tz) {
        let date = new Date();
        if (tz) {
            date = (0, date_fns_tz_1.utcToZonedTime)(new Date().valueOf(), tz);
        }
        return [
            { label: `${(0, date_fns_tz_1.format)(date, 'HH:mm:ss')} ${this.translate.instant(this.t24)}`, value: 'HH:mm:ss' },
            { label: (0, date_fns_tz_1.format)(date, 'hh:mm:ss aaaaa\'m\''), value: 'hh:mm:ss aaaaa\'m\'' },
            { label: (0, date_fns_tz_1.format)(date, 'hh:mm:ss aa'), value: 'hh:mm:ss aa' },
        ];
    }
    getDateFromString(timestamp, timezone) {
        const normalizedTimestamp = timestamp.trim();
        const dateFormats = this.getDateFormatOptions().map((option) => option.value);
        const timeFormats = this.getTimeFormatOptions().map((option) => option.value);
        const formats = [
            ...dateFormats,
            ...dateFormats.flatMap((dateFormat) => timeFormats.map((timeFormat) => `${dateFormat} ${timeFormat}`)),
        ];
        for (const dateFormat of formats) {
            const parsedDate = (0, date_fns_1.parse)(normalizedTimestamp, dateFormat, new Date());
            if ((0, date_fns_1.isValid)(parsedDate)) {
                if (timezone) {
                    return (0, date_fns_tz_1.zonedTimeToUtc)(parsedDate, timezone);
                }
                return parsedDate;
            }
        }
        throw new Error(`Invalid date format: ${timestamp}`);
    }
    getPreferredDateFormat() {
        return this.dateFormat;
    }
    getPreferredTimeFormat() {
        return this.timeFormat;
    }
    getDateAndTime(tz) {
        let date = new Date();
        if (tz) {
            date = (0, date_fns_tz_1.utcToZonedTime)(new Date().valueOf(), tz);
        }
        else if (this.timezone) {
            date = (0, date_fns_tz_1.utcToZonedTime)(new Date().valueOf(), this.timezone);
        }
        return [(0, date_fns_tz_1.format)(date, this.dateFormat), (0, date_fns_tz_1.format)(date, this.timeFormat)];
    }
    formatDateTimeToDateFns(dateTimeFormat) {
        let dateFnsFormat = dateTimeFormat
            .replace('YYYY', 'yyyy')
            .replace('YY', 'y')
            .replace('DD', 'dd')
            .replace('D', 'd')
            .replace(' A', ' aa');
        if (dateFnsFormat && !dateFnsFormat.includes('aa')) {
            dateFnsFormat = dateFnsFormat.replace(' a', ' aaaaa\'m\'');
        }
        return dateFnsFormat;
    }
};
exports.LocaleService = LocaleService;
LocaleService.ctorParameters = () => [
    { type: store_1.Store },
    { type: core_2.TranslateService }
];
exports.LocaleService = LocaleService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({ providedIn: 'root' })
], LocaleService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,