{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/components/installed-apps/docker-status/docker-status.component.spec.ts","mappings":";;AACA,iDAA8E;AAC9E,+BAA0B;AAC1B,qEAA4D;AAC5D,+EAA0E;AAC1E,4HAAuH;AACvH,oEAAgE;AAEhE,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,SAA2C,CAAC;IAEhD,MAAM,eAAe,GAAG,IAAA,6BAAsB,EAAC;QAC7C,SAAS,EAAE,+CAAqB;QAChC,OAAO,EAAE,CAAC,6BAAY,CAAC;KACxB,CAAC,CAAC;IAEH,SAAS,SAAS,CAAC,MAAoB;QACrC,SAAS,GAAG,eAAe,CAAC;YAC1B,SAAS,EAAE;gBACT,IAAA,mBAAY,EAAC,0BAAW,EAAE;oBACxB,OAAO,EAAE,IAAA,SAAE,EAAC,MAAM,CAAC;iBACpB,CAAC;aACH;SACF,CAAC,CAAC;IACL,CAAC;IAED,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,SAAS,CAAC,iCAAY,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,SAAS,CAAC,iCAAY,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;IAC1F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,SAAS,CAAC,iCAAY,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,SAAS,CAAC,iCAAY,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,SAAS,CAAC,iCAAY,CAAC,QAAQ,CAAC,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,SAAS,CAAC,iCAAY,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,SAAS,CAAC,iCAAY,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,6BAA6B,CAAC,CAAC;IAC5F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,SAAS,CAAC,IAAI,CAAC,CAAC;QAChB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/components/installed-apps/docker-status/docker-status.component.spec.ts"],"sourcesContent":["import { Spectator } from '@ngneat/spectator';\nimport { createComponentFactory, mockProvider } from '@ngneat/spectator/jest';\nimport { of } from 'rxjs';\nimport { DockerStatus } from 'app/enums/docker-status.enum';\nimport { MapValuePipe } from 'app/modules/pipes/map-value/map-value.pipe';\nimport { DockerStatusComponent } from 'app/pages/apps/components/installed-apps/docker-status/docker-status.component';\nimport { DockerStore } from 'app/pages/apps/store/docker.store';\n\ndescribe('DockerStatusComponent', () => {\n  let spectator: Spectator<DockerStatusComponent>;\n\n  const createComponent = createComponentFactory({\n    component: DockerStatusComponent,\n    imports: [MapValuePipe],\n  });\n\n  function setupTest(status: DockerStatus): void {\n    spectator = createComponent({\n      providers: [\n        mockProvider(DockerStore, {\n          status$: of(status),\n        }),\n      ],\n    });\n  }\n\n  it('checks status for Running docker status', () => {\n    setupTest(DockerStatus.Running);\n    expect(spectator.query('.status-wrapper span')).toHaveText('Apps Service Running');\n  });\n\n  it('checks status for Initializing docker status', () => {\n    setupTest(DockerStatus.Initializing);\n    expect(spectator.query('.status-wrapper span')).toHaveText('Initializing Apps Service');\n  });\n\n  it('checks status for Failed docker status', () => {\n    setupTest(DockerStatus.Failed);\n    expect(spectator.query('.status-wrapper span')).toHaveText('Error In Apps Service');\n  });\n\n  it('checks status for Stopped docker status', () => {\n    setupTest(DockerStatus.Stopped);\n    expect(spectator.query('.status-wrapper span')).toHaveText('Apps Service Stopped');\n  });\n\n  it('checks status for Stopping docker status', () => {\n    setupTest(DockerStatus.Stopping);\n    expect(spectator.query('.status-wrapper span')).toHaveText('Stopping Apps Service');\n  });\n\n  it('checks status for Pending docker status', () => {\n    setupTest(DockerStatus.Pending);\n    expect(spectator.query('.status-wrapper span')).toHaveText('Apps Service Pending');\n  });\n\n  it('checks status for Unconfigured docker status', () => {\n    setupTest(DockerStatus.Unconfigured);\n    expect(spectator.query('.status-wrapper span')).toHaveText('Apps Service Not Configured');\n  });\n\n  it('hides docker status when it is not set', () => {\n    setupTest(null);\n    expect(spectator.query('.status-wrapper span')).not.toExist();\n  });\n});\n"],"version":3}