{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/locale.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/locale.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { marker as T } from '@biesbjerg/ngx-translate-extract-marker';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isValid, parse } from 'date-fns';\nimport { format, utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport { combineLatest } from 'rxjs';\nimport { Option } from 'app/interfaces/option.interface';\nimport { AppState } from 'app/store';\nimport { waitForPreferences } from 'app/store/preferences/preferences.selectors';\nimport { selectTimezone } from 'app/store/system-config/system-config.selectors';\n\n@UntilDestroy()\n@Injectable({ providedIn: 'root' })\nexport class LocaleService {\n  t24 = T('(24 Hours)');\n  timezone: string;\n  dateFormat = 'yyyy-MM-dd';\n  timeFormat = 'HH:mm:ss';\n\n  constructor(\n    private store$: Store<AppState>,\n    private translate: TranslateService,\n  ) {\n    combineLatest([\n      this.store$.select(selectTimezone),\n      this.store$.pipe(waitForPreferences),\n    ]).pipe(untilDestroyed(this)).subscribe(([timezone, preferences]) => {\n      this.timezone = timezone;\n\n      if (preferences?.dateFormat) {\n        this.dateFormat = this.formatDateTimeToDateFns(preferences.dateFormat);\n      }\n\n      if (preferences?.timeFormat) {\n        this.timeFormat = this.formatDateTimeToDateFns(preferences.timeFormat);\n      }\n    });\n  }\n\n  getDateFormatOptions(tz?: string): Option[] {\n    let date = new Date();\n    if (tz) {\n      date = utcToZonedTime(new Date().valueOf(), tz);\n    }\n\n    return [\n      { label: format(date, 'yyyy-MM-dd'), value: 'yyyy-MM-dd' },\n      { label: format(date, 'MMMM d, yyyy'), value: 'MMMM d, yyyy' },\n      { label: format(date, 'd MMMM, yyyy'), value: 'd MMMM, yyyy' },\n      { label: format(date, 'MMM d, yyyy'), value: 'MMM d, yyyy' },\n      { label: format(date, 'd MMM yyyy'), value: 'd MMM yyyy' },\n      { label: format(date, 'MM/dd/yyyy'), value: 'MM/dd/yyyy' },\n      { label: format(date, 'dd/MM/yyyy'), value: 'dd/MM/yyyy' },\n      { label: format(date, 'dd.MM.yyyy'), value: 'dd.MM.yyyy' },\n    ];\n  }\n\n  getTimeFormatOptions(tz?: string): Option[] {\n    let date = new Date();\n    if (tz) {\n      date = utcToZonedTime(new Date().valueOf(), tz);\n    }\n    return [\n      { label: `${format(date, 'HH:mm:ss')} ${this.translate.instant(this.t24)}`, value: 'HH:mm:ss' },\n      { label: format(date, 'hh:mm:ss aaaaa\\'m\\''), value: 'hh:mm:ss aaaaa\\'m\\'' },\n      { label: format(date, 'hh:mm:ss aa'), value: 'hh:mm:ss aa' },\n    ];\n  }\n\n  getDateFromString(timestamp: string, timezone?: string): Date {\n    const normalizedTimestamp = timestamp.trim();\n\n    const dateFormats = this.getDateFormatOptions().map((option) => option.value);\n    const timeFormats = this.getTimeFormatOptions().map((option) => option.value);\n\n    const formats = [\n      ...dateFormats,\n      ...dateFormats.flatMap((dateFormat) => timeFormats.map((timeFormat) => `${dateFormat} ${timeFormat}`)),\n    ] as string[];\n\n    for (const dateFormat of formats) {\n      const parsedDate = parse(normalizedTimestamp, dateFormat, new Date());\n      if (isValid(parsedDate)) {\n        if (timezone) {\n          return zonedTimeToUtc(parsedDate, timezone);\n        }\n        return parsedDate;\n      }\n    }\n\n    throw new Error(`Invalid date format: ${timestamp}`);\n  }\n\n  getPreferredDateFormat(): string {\n    return this.dateFormat;\n  }\n\n  getPreferredTimeFormat(): string {\n    return this.timeFormat;\n  }\n\n  getDateAndTime(tz?: string): [string, string] {\n    let date = new Date();\n    if (tz) {\n      date = utcToZonedTime(new Date().valueOf(), tz);\n    } else if (this.timezone) {\n      date = utcToZonedTime(new Date().valueOf(), this.timezone);\n    }\n    return [format(date, this.dateFormat), format(date, this.timeFormat)];\n  }\n\n  formatDateTimeToDateFns(dateTimeFormat: string): string {\n    let dateFnsFormat = dateTimeFormat\n      .replace('YYYY', 'yyyy')\n      .replace('YY', 'y')\n      .replace('DD', 'dd')\n      .replace('D', 'd')\n      .replace(' A', ' aa');\n    if (dateFnsFormat && !dateFnsFormat.includes('aa')) {\n      dateFnsFormat = dateFnsFormat.replace(' a', ' aaaaa\\'m\\'');\n    }\n    return dateFnsFormat;\n  }\n}\n"],"version":3}