c58b759c7b2a06682613208bff7318ed
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  MatInputHarness: () => MatInputHarness,
  MatNativeOptionHarness: () => MatNativeOptionHarness,
  MatNativeSelectHarness: () => MatNativeSelectHarness
});
module.exports = __toCommonJS(testing_exports);
var import_testing = require("@angular/cdk/testing");
var import_control = require("@angular/material/form-field/testing/control");
const _MatInputHarness = class _MatInputHarness extends import_control.MatFormFieldControlHarness {
  /**
   * Gets a `HarnessPredicate` that can be used to search for a `MatInputHarness` that meets
   * certain criteria.
   * @param options Options for filtering which input instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(_MatInputHarness, options).addOption("value", options.value, (harness, value) => {
      return import_testing.HarnessPredicate.stringMatches(harness.getValue(), value);
    }).addOption("placeholder", options.placeholder, (harness, placeholder) => {
      return import_testing.HarnessPredicate.stringMatches(harness.getPlaceholder(), placeholder);
    });
  }
  /** Whether the input is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("disabled");
    });
  }
  /** Whether the input is required. */
  isRequired() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("required");
    });
  }
  /** Whether the input is readonly. */
  isReadonly() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("readOnly");
    });
  }
  /** Gets the value of the input. */
  getValue() {
    return __async(this, null, function* () {
      return yield (yield this.host()).getProperty("value");
    });
  }
  /** Gets the name of the input. */
  getName() {
    return __async(this, null, function* () {
      return yield (yield this.host()).getProperty("name");
    });
  }
  /**
   * Gets the type of the input. Returns "textarea" if the input is
   * a textarea.
   */
  getType() {
    return __async(this, null, function* () {
      return yield (yield this.host()).getProperty("type");
    });
  }
  /** Gets the placeholder of the input. */
  getPlaceholder() {
    return __async(this, null, function* () {
      const host = yield this.host();
      const [nativePlaceholder, fallback] = yield (0, import_testing.parallel)(() => [
        host.getProperty("placeholder"),
        host.getAttribute("data-placeholder")
      ]);
      return nativePlaceholder || fallback || "";
    });
  }
  /** Gets the id of the input. */
  getId() {
    return __async(this, null, function* () {
      return yield (yield this.host()).getProperty("id");
    });
  }
  /**
   * Focuses the input and returns a promise that indicates when the
   * action is complete.
   */
  focus() {
    return __async(this, null, function* () {
      return (yield this.host()).focus();
    });
  }
  /**
   * Blurs the input and returns a promise that indicates when the
   * action is complete.
   */
  blur() {
    return __async(this, null, function* () {
      return (yield this.host()).blur();
    });
  }
  /** Whether the input is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this.host()).isFocused();
    });
  }
  /**
   * Sets the value of the input. The value will be set by simulating
   * keypresses that correspond to the given value.
   */
  setValue(newValue) {
    return __async(this, null, function* () {
      const inputEl = yield this.host();
      yield inputEl.clear();
      if (newValue) {
        yield inputEl.sendKeys(newValue);
      }
      yield inputEl.setInputValue(newValue);
    });
  }
};
_MatInputHarness.hostSelector = "[matInput], input[matNativeControl], textarea[matNativeControl]";
let MatInputHarness = _MatInputHarness;
const _MatNativeOptionHarness = class _MatNativeOptionHarness extends import_testing.ComponentHarness {
  /**
   * Gets a `HarnessPredicate` that can be used to search for a `MatNativeOptionHarness` that meets
   * certain criteria.
   * @param options Options for filtering which option instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(_MatNativeOptionHarness, options).addOption("text", options.text, (harness, title) => __async(this, null, function* () {
      return import_testing.HarnessPredicate.stringMatches(yield harness.getText(), title);
    })).addOption("index", options.index, (harness, index) => __async(this, null, function* () {
      return (yield harness.getIndex()) === index;
    })).addOption("isSelected", options.isSelected, (harness, isSelected) => __async(this, null, function* () {
      return (yield harness.isSelected()) === isSelected;
    }));
  }
  /** Gets the option's label text. */
  getText() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("label");
    });
  }
  /** Index of the option within the native `select` element. */
  getIndex() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("index");
    });
  }
  /** Gets whether the option is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("disabled");
    });
  }
  /** Gets whether the option is selected. */
  isSelected() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("selected");
    });
  }
};
_MatNativeOptionHarness.hostSelector = "select[matNativeControl] option";
let MatNativeOptionHarness = _MatNativeOptionHarness;
const _MatNativeSelectHarness = class _MatNativeSelectHarness extends import_control.MatFormFieldControlHarness {
  /**
   * Gets a `HarnessPredicate` that can be used to search for a `MatNativeSelectHarness` that meets
   * certain criteria.
   * @param options Options for filtering which select instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(_MatNativeSelectHarness, options);
  }
  /** Gets a boolean promise indicating if the select is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("disabled");
    });
  }
  /** Gets a boolean promise indicating if the select is required. */
  isRequired() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("required");
    });
  }
  /** Gets a boolean promise indicating if the select is in multi-selection mode. */
  isMultiple() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("multiple");
    });
  }
  /** Gets the name of the select. */
  getName() {
    return __async(this, null, function* () {
      return yield (yield this.host()).getProperty("name");
    });
  }
  /** Gets the id of the select. */
  getId() {
    return __async(this, null, function* () {
      return yield (yield this.host()).getProperty("id");
    });
  }
  /** Focuses the select and returns a void promise that indicates when the action is complete. */
  focus() {
    return __async(this, null, function* () {
      return (yield this.host()).focus();
    });
  }
  /** Blurs the select and returns a void promise that indicates when the action is complete. */
  blur() {
    return __async(this, null, function* () {
      return (yield this.host()).blur();
    });
  }
  /** Whether the select is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this.host()).isFocused();
    });
  }
  /** Gets the options inside the select panel. */
  getOptions() {
    return __async(this, arguments, function* (filter = {}) {
      return this.locatorForAll(MatNativeOptionHarness.with(filter))();
    });
  }
  /**
   * Selects the options that match the passed-in filter. If the select is in multi-selection
   * mode all options will be clicked, otherwise the harness will pick the first matching option.
   */
  selectOptions() {
    return __async(this, arguments, function* (filter = {}) {
      const [isMultiple, options] = yield (0, import_testing.parallel)(() => {
        return [this.isMultiple(), this.getOptions(filter)];
      });
      if (options.length === 0) {
        throw Error("Select does not have options matching the specified filter");
      }
      const [host, optionIndexes] = yield (0, import_testing.parallel)(() => [
        this.host(),
        (0, import_testing.parallel)(() => options.slice(0, isMultiple ? void 0 : 1).map((option) => option.getIndex()))
      ]);
      yield host.selectOptions(...optionIndexes);
    });
  }
};
_MatNativeSelectHarness.hostSelector = "select[matNativeControl]";
let MatNativeSelectHarness = _MatNativeSelectHarness;
