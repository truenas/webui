1fe5432a325b713426e01beef399419d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("@angular/common/http");
const jest_1 = require("@ngneat/spectator/jest");
const download_service_1 = require("app/services/download.service");
describe('DownloadService', () => {
    let spectator;
    let anchorMock;
    const createService = (0, jest_1.createServiceFactory)({
        service: download_service_1.DownloadService,
        providers: [
            (0, jest_1.mockProvider)(http_1.HttpClient),
        ],
    });
    beforeEach(() => {
        spectator = createService();
        anchorMock = {
            download: '',
            href: '',
            click: () => { },
            remove: () => { },
        };
        jest.spyOn(anchorMock, 'click').mockImplementation();
        jest.spyOn(anchorMock, 'remove').mockImplementation();
        jest.spyOn(document, 'createElement').mockReturnValue(anchorMock);
        jest.spyOn(document.body, 'appendChild').mockImplementation();
    });
    describe('downloadBlob', () => {
        it('initiates download by creating an anchor element and clicking on it', () => {
            const blob = new Blob(['test'], { type: 'text/plain' });
            const filename = 'test.txt';
            spectator.service.downloadBlob(blob, filename);
            expect(document.createElement).toHaveBeenCalledWith('a');
            expect(document.body.appendChild).toHaveBeenCalledWith(anchorMock);
            expect(anchorMock.download).toBe(filename);
            expect(anchorMock.click).toHaveBeenCalled();
            expect(anchorMock.remove).toHaveBeenCalled();
        });
    });
    describe('downloadText', () => {
        it('download text content with a filename', () => {
            jest.spyOn(spectator.service, 'downloadBlob');
            const content = 'Lorem';
            const filename = 'test.txt';
            spectator.service.downloadText(content, filename);
            expect(spectator.service.downloadBlob)
                .toHaveBeenCalledWith(new Blob([content], { type: 'text/plain' }), filename);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2Rvd25sb2FkLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLCtDQUFrRDtBQUNsRCxpREFBOEY7QUFDOUYsb0VBQWdFO0FBRWhFLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsSUFBSSxTQUE0QyxDQUFDO0lBQ2pELElBQUksVUFBNkIsQ0FBQztJQUNsQyxNQUFNLGFBQWEsR0FBRyxJQUFBLDJCQUFvQixFQUFDO1FBQ3pDLE9BQU8sRUFBRSxrQ0FBZTtRQUN4QixTQUFTLEVBQUU7WUFDVCxJQUFBLG1CQUFZLEVBQUMsaUJBQVUsQ0FBQztTQUN6QjtLQUNGLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxTQUFTLEdBQUcsYUFBYSxFQUFFLENBQUM7UUFFNUIsVUFBVSxHQUFHO1lBQ1gsUUFBUSxFQUFFLEVBQUU7WUFDWixJQUFJLEVBQUUsRUFBRTtZQUNSLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO1lBQ2YsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7U0FDSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUV0RCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMscUVBQXFFLEVBQUUsR0FBRyxFQUFFO1lBQzdFLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztZQUN4RCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUM7WUFFNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRS9DLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbkUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0MsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDNUIsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtZQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFFOUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQ3hCLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQztZQUU1QixTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFbEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO2lCQUNuQyxvQkFBb0IsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9kb3dubG9hZC5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGNyZWF0ZVNlcnZpY2VGYWN0b3J5LCBtb2NrUHJvdmlkZXIsIFNwZWN0YXRvclNlcnZpY2UgfSBmcm9tICdAbmduZWF0L3NwZWN0YXRvci9qZXN0JztcbmltcG9ydCB7IERvd25sb2FkU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9kb3dubG9hZC5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0Rvd25sb2FkU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNwZWN0YXRvcjogU3BlY3RhdG9yU2VydmljZTxEb3dubG9hZFNlcnZpY2U+O1xuICBsZXQgYW5jaG9yTW9jazogSFRNTEFuY2hvckVsZW1lbnQ7XG4gIGNvbnN0IGNyZWF0ZVNlcnZpY2UgPSBjcmVhdGVTZXJ2aWNlRmFjdG9yeSh7XG4gICAgc2VydmljZTogRG93bmxvYWRTZXJ2aWNlLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgbW9ja1Byb3ZpZGVyKEh0dHBDbGllbnQpLFxuICAgIF0sXG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHNwZWN0YXRvciA9IGNyZWF0ZVNlcnZpY2UoKTtcblxuICAgIGFuY2hvck1vY2sgPSB7XG4gICAgICBkb3dubG9hZDogJycsXG4gICAgICBocmVmOiAnJyxcbiAgICAgIGNsaWNrOiAoKSA9PiB7fSxcbiAgICAgIHJlbW92ZTogKCkgPT4ge30sXG4gICAgfSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICBqZXN0LnNweU9uKGFuY2hvck1vY2ssICdjbGljaycpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgIGplc3Quc3B5T24oYW5jaG9yTW9jaywgJ3JlbW92ZScpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgamVzdC5zcHlPbihkb2N1bWVudCwgJ2NyZWF0ZUVsZW1lbnQnKS5tb2NrUmV0dXJuVmFsdWUoYW5jaG9yTW9jayk7XG4gICAgamVzdC5zcHlPbihkb2N1bWVudC5ib2R5LCAnYXBwZW5kQ2hpbGQnKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2Rvd25sb2FkQmxvYicsICgpID0+IHtcbiAgICBpdCgnaW5pdGlhdGVzIGRvd25sb2FkIGJ5IGNyZWF0aW5nIGFuIGFuY2hvciBlbGVtZW50IGFuZCBjbGlja2luZyBvbiBpdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbJ3Rlc3QnXSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XG4gICAgICBjb25zdCBmaWxlbmFtZSA9ICd0ZXN0LnR4dCc7XG5cbiAgICAgIHNwZWN0YXRvci5zZXJ2aWNlLmRvd25sb2FkQmxvYihibG9iLCBmaWxlbmFtZSk7XG5cbiAgICAgIGV4cGVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYScpO1xuICAgICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGFuY2hvck1vY2spO1xuICAgICAgZXhwZWN0KGFuY2hvck1vY2suZG93bmxvYWQpLnRvQmUoZmlsZW5hbWUpO1xuICAgICAgZXhwZWN0KGFuY2hvck1vY2suY2xpY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChhbmNob3JNb2NrLnJlbW92ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZG93bmxvYWRUZXh0JywgKCkgPT4ge1xuICAgIGl0KCdkb3dubG9hZCB0ZXh0IGNvbnRlbnQgd2l0aCBhIGZpbGVuYW1lJywgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihzcGVjdGF0b3Iuc2VydmljZSwgJ2Rvd25sb2FkQmxvYicpO1xuXG4gICAgICBjb25zdCBjb250ZW50ID0gJ0xvcmVtJztcbiAgICAgIGNvbnN0IGZpbGVuYW1lID0gJ3Rlc3QudHh0JztcblxuICAgICAgc3BlY3RhdG9yLnNlcnZpY2UuZG93bmxvYWRUZXh0KGNvbnRlbnQsIGZpbGVuYW1lKTtcblxuICAgICAgZXhwZWN0KHNwZWN0YXRvci5zZXJ2aWNlLmRvd25sb2FkQmxvYilcbiAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG5ldyBCbG9iKFtjb250ZW50XSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSksIGZpbGVuYW1lKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==