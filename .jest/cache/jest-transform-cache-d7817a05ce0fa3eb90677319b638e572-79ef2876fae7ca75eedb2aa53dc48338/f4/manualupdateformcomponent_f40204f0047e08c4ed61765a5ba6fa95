68b37a58058a5aea97909debd8f10618
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManualUpdateFormComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const dialog_1 = require("@angular/material/dialog");
const progress_bar_1 = require("@angular/material/progress-bar");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const ui_search_directive_1 = require("app/directives/ui-search.directive");
const job_state_enum_1 = require("app/enums/job-state.enum");
const role_enum_1 = require("app/enums/role.enum");
const observe_job_operator_1 = require("app/helpers/operators/observe-job.operator");
const update_1 = require("app/helptext/system/update");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_file_input_component_1 = require("app/modules/forms/ix-forms/components/ix-file-input/ix-file-input.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const job_selectors_1 = require("app/modules/jobs/store/job.selectors");
const test_directive_1 = require("app/modules/test-id/test.directive");
const manual_update_form_elements_1 = require("app/pages/system/update/components/manual-update-form/manual-update-form.elements");
const update_again_code_constant_1 = require("app/pages/system/update/utils/update-again-code.constant");
const auth_service_1 = require("app/services/auth/auth.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const system_general_service_1 = require("app/services/system-general.service");
const upload_service_1 = require("app/services/upload.service");
const ws_service_1 = require("app/services/ws.service");
const ha_info_selectors_1 = require("app/store/ha-info/ha-info.selectors");
const preferences_actions_1 = require("app/store/preferences/preferences.actions");
const preferences_selectors_1 = require("app/store/preferences/preferences.selectors");
const system_info_selectors_1 = require("app/store/system-info/system-info.selectors");
let ManualUpdateFormComponent = class ManualUpdateFormComponent {
    constructor(dialogService, matDialog, router, systemService, formBuilder, ws, errorHandler, authService, translate, store$, cdr, upload) {
        this.dialogService = dialogService;
        this.matDialog = matDialog;
        this.router = router;
        this.systemService = systemService;
        this.formBuilder = formBuilder;
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.authService = authService;
        this.translate = translate;
        this.store$ = store$;
        this.cdr = cdr;
        this.upload = upload;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.searchableElements = manual_update_form_elements_1.systemManualUpdateFormElements;
        this.isFormLoading$ = new rxjs_1.BehaviorSubject(false);
        this.form = this.formBuilder.group({
            filelocation: ['', forms_1.Validators.required],
            updateFile: [null],
            rebootAfterManualUpdate: [false],
        });
        this.helptext = update_1.helptextSystemUpdate;
        this.currentVersion = '';
        this.isHaLicensed = false;
        this.handleUpdateFailure = (failure) => {
            this.isFormLoading$.next(false);
            this.cdr.markForCheck();
            if (failure.error.includes(update_again_code_constant_1.updateAgainCode)) {
                this.dialogService.confirm({
                    title: update_1.helptextSystemUpdate.continueDialogTitle,
                    message: failure.error.replace(update_again_code_constant_1.updateAgainCode, ''),
                    buttonText: update_1.helptextSystemUpdate.continueDialogAction,
                }).pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                    this.resumeUpdateAfterFailure();
                });
                return;
            }
            this.dialogService.error(this.errorHandler.parseError(failure));
        };
        this.authService.authToken$.pipe((0, operators_1.tap)((token) => {
            this.apiEndPoint = '/_upload?auth_token=' + token;
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
    }
    ngOnInit() {
        this.checkHaLicenseAndUpdateStatus();
        this.getVersionNoFromSysInfo();
        this.setPoolOptions();
        this.getUserPrefs();
    }
    getUserPrefs() {
        this.store$.pipe(preferences_selectors_1.waitForPreferences).pipe((0, operators_1.tap)((userPrefs) => {
            if (userPrefs.rebootAfterManualUpdate === undefined) {
                userPrefs.rebootAfterManualUpdate = false;
            }
            this.form.controls.rebootAfterManualUpdate.setValue(userPrefs.rebootAfterManualUpdate);
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe(rxjs_1.noop);
    }
    getVersionNoFromSysInfo() {
        this.store$.pipe(system_info_selectors_1.waitForSystemInfo, (0, until_destroy_1.untilDestroyed)(this)).subscribe((sysInfo) => {
            this.currentVersion = sysInfo.version;
            this.cdr.markForCheck();
        });
    }
    setPoolOptions() {
        this.ws.call('pool.query').pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((pools) => {
            if (!pools) {
                return;
            }
            const options = [{ label: this.translate.instant('Memory device'), value: ':temp:' }];
            pools.forEach((pool) => {
                options.push({
                    label: '/mnt/' + pool.name, value: '/mnt/' + pool.name,
                });
            });
            this.fileLocationOptions$ = (0, rxjs_1.of)(options);
        });
    }
    checkHaLicenseAndUpdateStatus() {
        if (this.systemService.isEnterprise) {
            this.store$.select(ha_info_selectors_1.selectIsHaLicensed).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isHaLicensed) => {
                this.isHaLicensed = isHaLicensed;
                this.checkForUpdateRunning();
                this.cdr.markForCheck();
                if (this.isHaLicensed) {
                    this.form.removeControl('filelocation');
                }
            });
        }
    }
    checkForUpdateRunning() {
        this.ws.call('core.get_jobs', [[['method', '=', 'failover.upgrade'], ['state', '=', job_state_enum_1.JobState.Running]]])
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (jobs) => {
                if (jobs && jobs.length > 0) {
                    this.showRunningUpdate(jobs[0].id);
                }
            },
            error: (err) => {
                console.error(err);
            },
        });
    }
    // TODO: Same code as in update-actions-card
    showRunningUpdate(jobId) {
        const job$ = this.store$.pipe((0, store_1.select)((0, job_selectors_1.selectJob)(jobId)), (0, observe_job_operator_1.observeJob)());
        this.dialogService.jobDialog(job$, {
            title: this.translate.instant('Update'),
            canMinimize: true,
        })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.router.navigate(['/system-tasks/restart'], { skipLocationChange: true });
        });
    }
    onSubmit() {
        this.isFormLoading$.next(true);
        const value = this.form.value;
        value.filelocation = value.filelocation === ':temp:' ? null : value.filelocation;
        this.store$.dispatch((0, preferences_actions_1.updateRebootAfterManualUpdate)({
            rebootAfterManualUpdate: value.rebootAfterManualUpdate,
        }));
        this.systemService.updateRunningNoticeSent.emit();
        this.cdr.markForCheck();
        this.setupAndOpenUpdateJobDialog(value.updateFile, value.filelocation);
    }
    setupAndOpenUpdateJobDialog(files, fileLocation) {
        if (!files.length) {
            return;
        }
        const params = this.isHaLicensed
            ? {
                method: 'failover.upgrade',
                file: files[0],
            }
            : {
                method: 'update.file',
                params: [{ destination: fileLocation }],
                file: files[0],
            };
        const job$ = this.upload.uploadAsJob(params);
        this.dialogService
            .jobDialog(job$, { title: this.translate.instant(update_1.helptextSystemUpdate.manual_update_action) })
            .afterClosed()
            .pipe((0, rxjs_1.finalize)(() => {
            this.isFormLoading$.next(false);
            this.cdr.markForCheck();
        }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => this.handleUpdateSuccess(),
            error: (job) => this.handleUpdateFailure(job),
        });
    }
    finishNonHaUpdate() {
        if (this.form.value.rebootAfterManualUpdate) {
            this.router.navigate(['/system-tasks/restart'], { skipLocationChange: true });
        }
        else {
            this.dialogService.confirm({
                title: this.translate.instant('Restart'),
                message: this.translate.instant(update_1.helptextSystemUpdate.rebootAfterManualUpdate.manual_reboot_msg),
            }).pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.router.navigate(['/system-tasks/restart'], { skipLocationChange: true }));
        }
    }
    finishHaUpdate() {
        this.dialogService.closeAllDialogs();
        this.systemService.updateDone(); // Send 'finished' signal to topbar
        this.cdr.markForCheck();
        this.router.navigate(['/']);
        this.dialogService.confirm({
            title: update_1.helptextSystemUpdate.ha_update.complete_title,
            message: update_1.helptextSystemUpdate.ha_update.complete_msg,
            hideCheckbox: true,
            buttonText: update_1.helptextSystemUpdate.ha_update.complete_action,
            hideCancel: true,
        }).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(() => { });
    }
    handleUpdateSuccess() {
        if (this.isHaLicensed) {
            this.finishHaUpdate();
        }
        else {
            this.finishNonHaUpdate();
        }
    }
    resumeUpdateAfterFailure() {
        const job$ = this.isHaLicensed
            ? this.ws.job('failover.upgrade', [{ resume: true, resume_manual: true }])
            : this.ws.job('update.file', [{ resume: true }]);
        this.dialogService
            .jobDialog(job$, { title: update_1.helptextSystemUpdate.manual_update_action })
            .afterClosed()
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => this.handleUpdateSuccess(),
            error: (job) => this.handleUpdateFailure(job),
        });
    }
};
exports.ManualUpdateFormComponent = ManualUpdateFormComponent;
ManualUpdateFormComponent.ctorParameters = () => [
    { type: dialog_service_1.DialogService },
    { type: dialog_1.MatDialog },
    { type: router_1.Router },
    { type: system_general_service_1.SystemGeneralService },
    { type: forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: auth_service_1.AuthService },
    { type: core_2.TranslateService },
    { type: store_1.Store },
    { type: core_1.ChangeDetectorRef },
    { type: upload_service_1.UploadService }
];
exports.ManualUpdateFormComponent = ManualUpdateFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-manual-update-form',
        template: require("./manual-update-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            card_1.MatCard,
            ui_search_directive_1.UiSearchDirective,
            card_1.MatCardContent,
            progress_bar_1.MatProgressBar,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_file_input_component_1.IxFileInputComponent,
            ix_select_component_1.IxSelectComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], ManualUpdateFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,