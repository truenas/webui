{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/page-title.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,4CAAwD;AACxD,yDAAqE;AACrE,+BAAuC;AACvC,8CAAwC;AACxC,sFAAiF;AAM1E,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAI3B,YACU,MAAc,EACd,iBAAoC;QADpC,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QAL9C,WAAM,GAAG,IAAI,sBAAe,CAAC,EAAE,CAAC,CAAC;QACjC,qBAAgB,GAAG,IAAI,sBAAe,CAAC,KAAK,CAAC,CAAC;QAM5C,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAEO,mBAAmB;QACzB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CACrB,IAAA,kBAAM,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,YAAY,sBAAa,CAAC,EACjD,IAAA,8BAAc,EAAC,IAAI,CAAC,CACrB,CAAC,SAAS,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,kBAAkB;QAChB,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC;QACtD,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;YAClE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;;AAnCU,4CAAgB;;;;;2BAAhB,gBAAgB;IAJ5B,IAAA,4BAAY,GAAE;IACd,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,gBAAgB,CAoC5B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/page-title.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { RoutePartsService } from 'app/services/route-parts/route-parts.service';\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageTitleService {\n  title$ = new BehaviorSubject('');\n  hasNewIndicator$ = new BehaviorSubject(false);\n\n  constructor(\n    private router: Router,\n    private routePartsService: RoutePartsService,\n  ) {\n    this.observeRouteChanges();\n  }\n\n  /**\n   * Sets page title manually.\n   * Will be valid until next page navigation.\n   */\n  setTitle(title: string): void {\n    this.title$.next(title);\n  }\n\n  private observeRouteChanges(): void {\n    this.emitTitleFromRoute();\n    this.router.events.pipe(\n      filter((event) => event instanceof NavigationEnd),\n      untilDestroyed(this),\n    ).subscribe(() => {\n      this.emitTitleFromRoute();\n    });\n  }\n\n  emitTitleFromRoute(): void {\n    const breadcrumbs = this.routePartsService.routeParts;\n    if (breadcrumbs.length > 0) {\n      this.title$.next(breadcrumbs[breadcrumbs.length - 1].title || '');\n      this.hasNewIndicator$.next(breadcrumbs.some((breadcrumb) => breadcrumb.isNew));\n    }\n  }\n}\n"],"version":3}