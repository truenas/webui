8867c6593920e6950d37673adb6a7677
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  MatAutocompleteHarness: () => MatAutocompleteHarness
});
module.exports = __toCommonJS(testing_exports);
var import_coercion = require("@angular/cdk/coercion");
var import_testing = require("@angular/cdk/testing");
var import_testing2 = require("@angular/material/core/testing");
const _MatAutocompleteHarness = class _MatAutocompleteHarness extends import_testing.ComponentHarness {
  constructor() {
    super(...arguments);
    this._documentRootLocator = this.documentRootLocatorFactory();
  }
  /**
   * Gets a `HarnessPredicate` that can be used to search for an autocomplete with specific
   * attributes.
   * @param options Options for filtering which autocomplete instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(this, options).addOption("value", options.value, (harness, value) => import_testing.HarnessPredicate.stringMatches(harness.getValue(), value)).addOption("disabled", options.disabled, (harness, disabled) => __async(this, null, function* () {
      return (yield harness.isDisabled()) === disabled;
    }));
  }
  /** Gets the value of the autocomplete input. */
  getValue() {
    return __async(this, null, function* () {
      return (yield this.host()).getProperty("value");
    });
  }
  /** Whether the autocomplete input is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      const disabled = (yield this.host()).getAttribute("disabled");
      return (0, import_coercion.coerceBooleanProperty)(yield disabled);
    });
  }
  /** Focuses the autocomplete input. */
  focus() {
    return __async(this, null, function* () {
      return (yield this.host()).focus();
    });
  }
  /** Blurs the autocomplete input. */
  blur() {
    return __async(this, null, function* () {
      return (yield this.host()).blur();
    });
  }
  /** Whether the autocomplete input is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this.host()).isFocused();
    });
  }
  /** Enters text into the autocomplete. */
  enterText(value) {
    return __async(this, null, function* () {
      return (yield this.host()).sendKeys(value);
    });
  }
  /** Clears the input value. */
  clear() {
    return __async(this, null, function* () {
      return (yield this.host()).clear();
    });
  }
  /** Gets the options inside the autocomplete panel. */
  getOptions(filters) {
    return __async(this, null, function* () {
      if (!(yield this.isOpen())) {
        throw new Error("Unable to retrieve options for autocomplete. Autocomplete panel is closed.");
      }
      return this._documentRootLocator.locatorForAll(import_testing2.MatOptionHarness.with(__spreadProps(__spreadValues({}, filters || {}), {
        ancestor: yield this._getPanelSelector()
      })))();
    });
  }
  /** Gets the option groups inside the autocomplete panel. */
  getOptionGroups(filters) {
    return __async(this, null, function* () {
      if (!(yield this.isOpen())) {
        throw new Error("Unable to retrieve option groups for autocomplete. Autocomplete panel is closed.");
      }
      return this._documentRootLocator.locatorForAll(import_testing2.MatOptgroupHarness.with(__spreadProps(__spreadValues({}, filters || {}), {
        ancestor: yield this._getPanelSelector()
      })))();
    });
  }
  /** Selects the first option matching the given filters. */
  selectOption(filters) {
    return __async(this, null, function* () {
      yield this.focus();
      const options = yield this.getOptions(filters);
      if (!options.length) {
        throw Error(`Could not find a mat-option matching ${JSON.stringify(filters)}`);
      }
      yield options[0].click();
    });
  }
  /** Whether the autocomplete is open. */
  isOpen() {
    return __async(this, null, function* () {
      const panel = yield this._getPanel();
      return !!panel && (yield panel.hasClass(`mat-mdc-autocomplete-visible`));
    });
  }
  /** Gets the panel associated with this autocomplete trigger. */
  _getPanel() {
    return __async(this, null, function* () {
      return this._documentRootLocator.locatorForOptional(yield this._getPanelSelector())();
    });
  }
  /** Gets the selector that can be used to find the autocomplete trigger's panel. */
  _getPanelSelector() {
    return __async(this, null, function* () {
      return `#${yield (yield this.host()).getAttribute("aria-controls")}`;
    });
  }
};
_MatAutocompleteHarness.hostSelector = ".mat-mdc-autocomplete-trigger";
let MatAutocompleteHarness = _MatAutocompleteHarness;
