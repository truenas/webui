{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/system-general.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/system-general.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { sortBy } from 'lodash-es';\nimport {\n  Subject, Observable,\n} from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { ProductType } from 'app/enums/product-type.enum';\nimport { CertificateAuthority } from 'app/interfaces/certificate-authority.interface';\nimport { Certificate } from 'app/interfaces/certificate.interface';\nimport { Choices } from 'app/interfaces/choices.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { Option } from 'app/interfaces/option.interface';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SystemGeneralService {\n  private productType: ProductType;\n  protected certificateList = 'certificate.query' as const;\n  protected caList = 'certificateauthority.query' as const;\n\n  updateRunning = new EventEmitter<string>();\n  updateRunningNoticeSent = new EventEmitter<string>();\n  updateIsDone$ = new Subject<void>();\n\n  /**\n   * @deprecated\n   * Use selectIsEnterprise selector instead\n   */\n  get isEnterprise(): boolean {\n    return this.getProductType() === ProductType.ScaleEnterprise;\n  }\n\n  /**\n   * @deprecated\n   * Use selectProductType selector instead\n   */\n  getProductType(): ProductType {\n    return this.productType;\n  }\n\n  loadProductType(): Observable<void> {\n    return this.getProductType$.pipe(\n      map((productType) => {\n        this.productType = productType;\n        return undefined;\n      }),\n    );\n  }\n\n  /**\n   * @deprecated\n   * Use selectProductType selector instead\n   */\n  getProductType$ = this.ws.call('system.product_type').pipe(shareReplay({ refCount: false, bufferSize: 1 }));\n\n  /**\n   * @deprecated\n   * Use selectIsEnterprise selector instead\n   */\n  readonly isEnterprise$ = this.getProductType$.pipe(\n    map((productType) => productType === ProductType.ScaleEnterprise),\n    shareReplay({ refCount: true, bufferSize: 1 }),\n  );\n\n  constructor(\n    protected ws: WebSocketService,\n  ) {}\n\n  getCertificateAuthorities(): Observable<CertificateAuthority[]> {\n    return this.ws.call(this.caList, []);\n  }\n\n  getCertificates(): Observable<Certificate[]> {\n    return this.ws.call(this.certificateList);\n  }\n\n  getUnsignedCertificates(): Observable<Certificate[]> {\n    return this.ws.call(this.certificateList, [[['CSR', '!=', null]]]);\n  }\n\n  getUnsignedCas(): Observable<CertificateAuthority[]> {\n    return this.ws.call(this.caList, [[['privatekey', '!=', null]]]);\n  }\n\n  getCertificateCountryChoices(): Observable<Choices> {\n    return this.ws.call('certificate.country_choices');\n  }\n\n  ipChoicesv4(): Observable<Choices> {\n    return this.ws.call('system.general.ui_address_choices');\n  }\n\n  ipChoicesv6(): Observable<Choices> {\n    return this.ws.call('system.general.ui_v6address_choices');\n  }\n\n  kbdMapChoices(): Observable<Option[]> {\n    return this.ws.call('system.general.kbdmap_choices').pipe(\n      map((response) => {\n        return Object.keys(response || {}).map((key) => ({\n          label: `${response[key]} (${key})`,\n          value: key,\n        }));\n      }),\n    );\n  }\n\n  languageChoices(): Observable<Choices> {\n    return this.ws.call('system.general.language_choices');\n  }\n\n  languageOptions(sortLanguagesByName: boolean): Observable<Option[]> {\n    return this.languageChoices().pipe(map((languageList: Choices): Option[] => {\n      let options = Object.keys(languageList || {}).map((key) => ({\n        label: sortLanguagesByName\n          ? `${languageList[key]} (${key})`\n          : `${key} (${languageList[key]})`,\n        value: key,\n      }));\n      options = sortBy(\n        options,\n        sortLanguagesByName ? 'label' : 'value',\n      );\n      return options;\n    }));\n  }\n\n  timezoneChoices(): Observable<Option[]> {\n    return this.ws.call('system.general.timezone_choices').pipe(\n      map((response) => {\n        return Object.keys(response || {}).map((key) => ({\n          label: response[key],\n          value: key,\n        }));\n      }),\n    );\n  }\n\n  uiCertificateOptions(): Observable<Choices> {\n    return this.ws.call('system.general.ui_certificate_choices');\n  }\n\n  uiHttpsProtocolsOptions(): Observable<Choices> {\n    return this.ws.call('system.general.ui_httpsprotocols_choices');\n  }\n\n  refreshDirServicesCache(): Observable<Job> {\n    return this.ws.job('directoryservices.cache_refresh');\n  }\n\n  updateDone(): void {\n    this.updateIsDone$.next();\n  }\n}\n"],"version":3}