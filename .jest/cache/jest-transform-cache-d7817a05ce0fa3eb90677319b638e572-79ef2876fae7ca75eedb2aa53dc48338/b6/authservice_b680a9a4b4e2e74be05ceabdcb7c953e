87cfa28730fa49a480c266ae8b1aba7a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const core_1 = require("@angular/core");
const store_1 = require("@ngrx/store");
const angular2_uuid_1 = require("angular2-uuid");
const ngx_webstorage_1 = require("ngx-webstorage");
const rxjs_1 = require("rxjs");
const account_attribute_enum_1 = require("app/enums/account-attribute.enum");
const api_message_type_enum_1 = require("app/enums/api-message-type.enum");
const login_result_enum_1 = require("app/enums/login-result.enum");
const role_enum_1 = require("app/enums/role.enum");
const window_helper_1 = require("app/helpers/window.helper");
const token_last_used_service_1 = require("app/services/token-last-used.service");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const ws_service_1 = require("app/services/ws.service");
const admin_actions_1 = require("app/store/admin-panel/admin.actions");
let AuthService = class AuthService {
    get authToken$() {
        return this.latestTokenGenerated$.asObservable().pipe((0, rxjs_1.filter)((token) => !!token));
    }
    get hasAuthToken() {
        return this.token && this.token !== 'null';
    }
    constructor(wsManager, store$, ws, tokenLastUsedService, window) {
        this.wsManager = wsManager;
        this.store$ = store$;
        this.ws = ws;
        this.tokenLastUsedService = tokenLastUsedService;
        this.window = window;
        this.loggedInUser$ = new rxjs_1.BehaviorSubject(null);
        /**
         * This is 10 seconds less than 300 seconds which is the default life
         * time of a token generated with auth.generate_token. The 10 seconds
         * difference is to allow for delays in request send/receive
         */
        this.tokenRegenerationTimeMillis = 290 * 1000;
        this.latestTokenGenerated$ = new rxjs_1.ReplaySubject(1);
        this.isLoggedIn$ = new rxjs_1.BehaviorSubject(false);
        this.isAuthenticated$ = (0, rxjs_1.combineLatest)([
            this.wsManager.isConnected$,
            this.isLoggedIn$.asObservable(),
        ]).pipe((0, rxjs_1.switchMap)(([isConnected, isLoggedIn]) => {
            return (0, rxjs_1.of)(isConnected && isLoggedIn);
        }));
        this.user$ = this.loggedInUser$.asObservable();
        /**
         * Special case that only matches root and admin users.
         */
        this.isSysAdmin$ = this.user$.pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.map)((user) => user.account_attributes.includes(account_attribute_enum_1.AccountAttribute.SysAdmin)));
        this.userTwoFactorConfig$ = this.user$.pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.map)((user) => user.two_factor_config));
        this.setupAuthenticationUpdate();
        this.setupWsConnectionUpdate();
        this.setupTokenUpdate();
    }
    getGlobalTwoFactorConfig() {
        if (this.cachedGlobalTwoFactorConfig) {
            return (0, rxjs_1.of)(this.cachedGlobalTwoFactorConfig);
        }
        return this.ws.call('auth.twofactor.config').pipe((0, rxjs_1.tap)((config) => {
            this.cachedGlobalTwoFactorConfig = config;
        }));
    }
    globalTwoFactorConfigUpdated() {
        this.cachedGlobalTwoFactorConfig = null;
    }
    /**
     * This method exists so removing authToken is deliberate instead of allowing
     * use of the lastGeneratedToken$ and setting token to null/undefined by mistake
     */
    clearAuthToken() {
        this.window.sessionStorage.removeItem('loginBannerDismissed');
        this.tokenLastUsedService.clearTokenLastUsed();
        this.latestTokenGenerated$.next(null);
        this.latestTokenGenerated$.complete();
        this.latestTokenGenerated$ = new rxjs_1.ReplaySubject(1);
        this.setupTokenUpdate();
    }
    login(username, password, otp = null) {
        return this.makeRequest('auth.login', otp ? [username, password, otp] : [username, password]).pipe((0, rxjs_1.switchMap)((wasLoggedIn) => {
            return this.processLoginResult(wasLoggedIn).pipe((0, rxjs_1.switchMap)((loginResult) => {
                if (loginResult === login_result_enum_1.LoginResult.Success) {
                    return this.authToken$.pipe((0, rxjs_1.map)(() => login_result_enum_1.LoginResult.Success));
                }
                return (0, rxjs_1.of)(loginResult);
            }));
        }));
    }
    loginWithToken() {
        if (!this.token) {
            return (0, rxjs_1.of)(login_result_enum_1.LoginResult.NoToken);
        }
        performance.mark('Login Start');
        return this.makeRequest('auth.login_with_token', [this.token]).pipe((0, rxjs_1.switchMap)((wasLoggedIn) => {
            return this.processLoginResult(wasLoggedIn);
        }));
    }
    /**
     * Checks whether user has any of the supplied roles.
     * Does not ensure that user was loaded.
     *
     * Use mockAuth if you need to set user role in tests.
     */
    hasRole(roles) {
        return this.user$.pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.map)((user) => {
            var _a, _b;
            const currentRoles = ((_b = (_a = user === null || user === void 0 ? void 0 : user.privilege) === null || _a === void 0 ? void 0 : _a.roles) === null || _b === void 0 ? void 0 : _b.$set) || [];
            const neededRoles = Array.isArray(roles) ? roles : [roles];
            if (!(neededRoles === null || neededRoles === void 0 ? void 0 : neededRoles.length) || !currentRoles.length) {
                return false;
            }
            if (currentRoles.includes(role_enum_1.Role.FullAdmin)) {
                return true;
            }
            return neededRoles.some((role) => currentRoles.includes(role));
        }));
    }
    logout() {
        return this.makeRequest('auth.logout').pipe((0, rxjs_1.tap)(() => {
            this.clearAuthToken();
            this.ws.clearSubscriptions();
            this.isLoggedIn$.next(false);
        }));
    }
    refreshUser() {
        this.loggedInUser$.next(null);
        return this.getLoggedInUserInformation().pipe((0, rxjs_1.map)(() => null));
    }
    processLoginResult(wasLoggedIn) {
        return (0, rxjs_1.of)(wasLoggedIn).pipe((0, rxjs_1.switchMap)((loggedIn) => {
            if (!loggedIn) {
                this.isLoggedIn$.next(false);
                return (0, rxjs_1.of)(login_result_enum_1.LoginResult.IncorrectDetails);
            }
            // Check if user has access to webui.
            return this.getLoggedInUserInformation().pipe((0, rxjs_1.switchMap)((user) => {
                var _a;
                if (!((_a = user === null || user === void 0 ? void 0 : user.privilege) === null || _a === void 0 ? void 0 : _a.webui_access)) {
                    this.isLoggedIn$.next(false);
                    return (0, rxjs_1.of)(login_result_enum_1.LoginResult.NoAccess);
                }
                this.isLoggedIn$.next(true);
                this.window.sessionStorage.setItem('loginBannerDismissed', 'true');
                return this.authToken$.pipe((0, rxjs_1.take)(1), (0, rxjs_1.map)(() => login_result_enum_1.LoginResult.Success));
            }));
        }));
    }
    // TODO: See if we can move this somewhere, like in wsManager.
    // TODO: Rewrite tests not to rely on mocking this private method.
    makeRequest(method, params) {
        const uuid = angular2_uuid_1.UUID.UUID();
        const payload = {
            method,
            params,
            id: uuid,
            msg: api_message_type_enum_1.IncomingApiMessageType.Method,
        };
        const requestTrigger$ = new rxjs_1.Observable((subscriber) => {
            performance.mark(`${method} - ${uuid} - start`);
            this.wsManager.send(payload);
            subscriber.next();
        }).pipe((0, rxjs_1.take)(1));
        const uuidFilteredResponse$ = this.getFilteredWebSocketResponse(uuid);
        return (0, rxjs_1.combineLatest)([
            requestTrigger$,
            uuidFilteredResponse$,
        ]).pipe((0, rxjs_1.take)(1), (0, rxjs_1.tap)(() => {
            performance.mark(`${method} - ${uuid} - end`);
            performance.measure(method, `${method} - ${uuid} - start`, `${method} - ${uuid} - end`);
        }), (0, rxjs_1.map)(([, response]) => response));
    }
    getFilteredWebSocketResponse(uuid) {
        return this.wsManager.websocket$.pipe((0, rxjs_1.filter)((data) => data.msg === api_message_type_enum_1.IncomingApiMessageType.Result && data.id === uuid), (0, rxjs_1.map)((data) => data.result), (0, rxjs_1.take)(1));
    }
    setupPeriodicTokenGeneration() {
        if (!this.generateTokenSubscription || this.generateTokenSubscription.closed) {
            this.generateTokenSubscription = (0, rxjs_1.timer)(0, this.tokenRegenerationTimeMillis).pipe((0, rxjs_1.switchMap)(() => this.isAuthenticated$.pipe((0, rxjs_1.take)(1))), (0, rxjs_1.filter)((isAuthenticated) => isAuthenticated), (0, rxjs_1.switchMap)(() => this.makeRequest('auth.generate_token')), (0, rxjs_1.tap)((token) => this.latestTokenGenerated$.next(token))).subscribe();
        }
    }
    getLoggedInUserInformation() {
        return this.ws.call('auth.me').pipe((0, rxjs_1.tap)((loggedInUser) => {
            this.loggedInUser$.next(loggedInUser);
        }));
    }
    setupAuthenticationUpdate() {
        this.isAuthenticated$.subscribe({
            next: (isAuthenticated) => {
                var _a;
                if (isAuthenticated) {
                    this.store$.dispatch((0, admin_actions_1.adminUiInitialized)());
                    this.setupPeriodicTokenGeneration();
                }
                else if (this.generateTokenSubscription) {
                    (_a = this.latestTokenGenerated$) === null || _a === void 0 ? void 0 : _a.complete();
                    this.latestTokenGenerated$ = new rxjs_1.ReplaySubject(1);
                    this.setupTokenUpdate();
                    this.generateTokenSubscription.unsubscribe();
                    this.generateTokenSubscription = null;
                }
            },
        });
    }
    setupWsConnectionUpdate() {
        this.wsManager.isConnected$.pipe((0, rxjs_1.filter)((isConnected) => !isConnected)).subscribe(() => {
            this.isLoggedIn$.next(false);
        });
    }
    setupTokenUpdate() {
        this.latestTokenGenerated$.subscribe((token) => {
            this.token = token;
        });
    }
};
exports.AuthService = AuthService;
AuthService.ctorParameters = () => [
    { type: websocket_connection_service_1.WebSocketConnectionService },
    { type: store_1.Store },
    { type: ws_service_1.WebSocketService },
    { type: token_last_used_service_1.TokenLastUsedService },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
__decorate([
    (0, ngx_webstorage_1.LocalStorage)()
], AuthService.prototype, "token", void 0);
exports.AuthService = AuthService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], AuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,