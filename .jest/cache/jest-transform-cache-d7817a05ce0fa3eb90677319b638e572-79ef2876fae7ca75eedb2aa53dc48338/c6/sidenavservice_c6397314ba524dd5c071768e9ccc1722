5b4fb3fd13b7571c18f9b73279810c0a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SidenavService = exports.collapsedMenuClass = void 0;
const layout_1 = require("@angular/cdk/layout");
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const effects_1 = require("@ngrx/effects");
const store_1 = require("@ngrx/store");
const rxjs_1 = require("rxjs");
const preferences_selectors_1 = require("app/store/preferences/preferences.selectors");
const topbar_actions_1 = require("app/store/topbar/topbar.actions");
exports.collapsedMenuClass = 'collapsed-menu';
let SidenavService = class SidenavService {
    get sidenavWidth() {
        const iconified = this.isMenuCollapsed;
        if (this.isOpen && iconified && this.mode === 'side') {
            return '48px';
        }
        if (this.isOpen && !iconified && this.mode === 'side') {
            return '240px';
        }
        return '0px';
    }
    get isMenuCollapsed() {
        return document.getElementsByClassName(exports.collapsedMenuClass).length === 1;
    }
    set isMenuCollapsed(isCollapsed) {
        const appBody = document.body;
        if (isCollapsed) {
            appBody.classList.add(exports.collapsedMenuClass);
        }
        else {
            appBody.classList.remove(exports.collapsedMenuClass);
        }
        for (const element of document.getElementsByClassName('has-submenu')) {
            element.classList.remove('open');
        }
    }
    constructor(router, breakpointObserver, store$, actions$) {
        this.router = router;
        this.breakpointObserver = breakpointObserver;
        this.store$ = store$;
        this.actions$ = actions$;
        this.isOpen = true;
        // TODO: How is this different from isMenuCollapsed?
        this.isCollapsed = false;
        this.mode = 'over';
        this.isOpenSecondaryMenu = false;
        this.isMobile = (0, core_1.signal)(false);
        this.listenForScreenSizeChanges();
        this.listenForRouteChanges();
        this.listenForSidenavIndicatorPressed();
    }
    setSidenav(sidenav) {
        this.sidenav = sidenav;
    }
    setSidenavStatus(sidenav) {
        this.isOpen = sidenav.isOpen;
        this.mode = sidenav.mode;
        this.isCollapsed = sidenav.isCollapsed;
    }
    toggleSecondaryMenu(menuInfo) {
        const [state, subItems] = menuInfo || [];
        if ((this.isOpenSecondaryMenu && !menuInfo) || (this.isOpenSecondaryMenu && state === this.menuName)) {
            this.isOpenSecondaryMenu = false;
            this.subs = [];
        }
        else if (menuInfo) {
            this.menuName = state;
            this.subs = subItems;
            this.isOpenSecondaryMenu = true;
        }
    }
    closeSecondaryMenu() {
        this.isOpenSecondaryMenu = false;
    }
    listenForScreenSizeChanges() {
        this.breakpointObserver
            .observe([layout_1.Breakpoints.XSmall, layout_1.Breakpoints.Small])
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((state) => {
            const isMobile = state.matches;
            this.isMobile.set(isMobile);
            this.isOpen = !isMobile;
            this.mode = isMobile ? 'over' : 'side';
            if (!isMobile) {
                // TODO: This is hack to resolve issue described here: https://ixsystems.atlassian.net/browse/NAS-110404
                setTimeout(() => {
                    var _a;
                    (_a = this.sidenav) === null || _a === void 0 ? void 0 : _a.open();
                });
                this.store$.pipe(preferences_selectors_1.waitForPreferences, (0, rxjs_1.take)(1), (0, rxjs_1.filter)((preferences) => Boolean(preferences.sidenavStatus))).subscribe(({ sidenavStatus }) => {
                    this.isMenuCollapsed = sidenavStatus.isCollapsed;
                    this.isCollapsed = sidenavStatus.isCollapsed;
                });
            }
            else {
                this.isMenuCollapsed = false;
                this.isOpen = false;
            }
        });
    }
    listenForSidenavIndicatorPressed() {
        this.actions$
            .pipe((0, effects_1.ofType)(topbar_actions_1.sidenavIndicatorPressed), (0, rxjs_1.distinctUntilChanged)()).subscribe(() => {
            this.toggleSidenav();
        });
    }
    toggleSidenav() {
        var _a, _b;
        if (this.isMobile()) {
            (_a = this.sidenav) === null || _a === void 0 ? void 0 : _a.toggle();
        }
        else {
            (_b = this.sidenav) === null || _b === void 0 ? void 0 : _b.open();
            this.isMenuCollapsed = !this.isMenuCollapsed;
        }
        const data = {
            isOpen: this.sidenav.opened,
            mode: this.sidenav.mode,
            isCollapsed: this.isMenuCollapsed,
        };
        if (!this.isMobile()) {
            this.store$.dispatch((0, topbar_actions_1.sidenavUpdated)(data));
        }
        this.setSidenavStatus(data);
    }
    listenForRouteChanges() {
        this.router.events.pipe((0, rxjs_1.filter)((routeChange) => routeChange instanceof router_1.NavigationEnd && this.isMobile())).subscribe(() => {
            var _a;
            (_a = this.sidenav) === null || _a === void 0 ? void 0 : _a.close();
        });
    }
};
exports.SidenavService = SidenavService;
SidenavService.ctorParameters = () => [
    { type: router_1.Router },
    { type: layout_1.BreakpointObserver },
    { type: store_1.Store },
    { type: effects_1.Actions }
];
exports.SidenavService = SidenavService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], SidenavService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,