eec62c6f04f8c1031e06087fe30f0bf7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FailoverSettingsComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const progress_bar_1 = require("@angular/material/progress-bar");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const ui_search_directive_1 = require("app/directives/ui-search.directive");
const role_enum_1 = require("app/enums/role.enum");
const failover_1 = require("app/helptext/system/failover");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const failover_settings_elements_1 = require("app/pages/system/failover-settings/failover-settings.elements");
const auth_service_1 = require("app/services/auth/auth.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const ws_service_1 = require("app/services/ws.service");
const ha_info_actions_1 = require("app/store/ha-info/ha-info.actions");
let FailoverSettingsComponent = class FailoverSettingsComponent {
    constructor(formBuilder, ws, cdr, dialogService, authService, errorHandler, formErrorHandler, translate, snackbar, store$, wsManager) {
        this.formBuilder = formBuilder;
        this.ws = ws;
        this.cdr = cdr;
        this.dialogService = dialogService;
        this.authService = authService;
        this.errorHandler = errorHandler;
        this.formErrorHandler = formErrorHandler;
        this.translate = translate;
        this.snackbar = snackbar;
        this.store$ = store$;
        this.wsManager = wsManager;
        this.searchableElements = failover_settings_elements_1.failoverElements;
        this.isLoading = false;
        this.form = this.formBuilder.group({
            disabled: [false],
            master: [true],
            timeout: [null],
        });
        this.subscriptions = [];
        this.requiredRoles = [role_enum_1.Role.FailoverWrite];
        this.submitButtonText$ = this.form.select((values) => {
            if (!values.master) {
                return this.translate.instant('Save And Failover');
            }
            return this.translate.instant('Save');
        });
        this.helptext = failover_1.helptextSystemFailover;
    }
    ngOnInit() {
        this.loadFormValues();
    }
    onSubmit() {
        this.isLoading = true;
        const values = this.form.getRawValue();
        this.ws.call('failover.update', [values])
            .pipe((0, operators_1.map)(() => { this.store$.dispatch((0, ha_info_actions_1.haSettingsUpdated)()); }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.snackbar.success(this.translate.instant('Settings saved.'));
                this.isLoading = false;
                this.cdr.markForCheck();
                if (values.disabled && !values.master) {
                    this.authService.logout().pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
                        next: () => {
                            this.authService.clearAuthToken();
                            this.wsManager.closeWebSocketConnection();
                        },
                    });
                }
            },
            error: (error) => {
                this.formErrorHandler.handleWsFormError(error, this.form);
                this.isLoading = false;
                this.cdr.markForCheck();
            },
        });
    }
    onSyncToPeerPressed() {
        this.dialogService.confirm({
            title: failover_1.helptextSystemFailover.dialog_sync_to_peer_title,
            message: failover_1.helptextSystemFailover.dialog_sync_to_peer_message,
            buttonText: failover_1.helptextSystemFailover.dialog_button_ok,
            secondaryCheckbox: true,
            secondaryCheckboxText: failover_1.helptextSystemFailover.dialog_sync_to_peer_checkbox,
        })
            .pipe((0, operators_1.filter)((result) => result.confirmed), (0, operators_1.switchMap)((result) => {
            this.isLoading = true;
            this.cdr.markForCheck();
            return this.ws.call('failover.sync_to_peer', [{ reboot: result.secondaryCheckbox }]);
        }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.snackbar.success(failover_1.helptextSystemFailover.confirm_dialogs.sync_to_message);
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialogService.error(this.errorHandler.parseError(error));
            },
        });
    }
    onSyncFromPeerPressed() {
        this.dialogService.confirm({
            title: failover_1.helptextSystemFailover.dialog_sync_from_peer_title,
            message: failover_1.helptextSystemFailover.dialog_sync_from_peer_message,
            buttonText: failover_1.helptextSystemFailover.dialog_button_ok,
        })
            .pipe((0, operators_1.filter)(Boolean), (0, operators_1.switchMap)(() => {
            this.isLoading = true;
            this.cdr.markForCheck();
            return this.ws.call('failover.sync_from_peer');
        }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.snackbar.success(this.translate.instant(failover_1.helptextSystemFailover.confirm_dialogs.sync_from_message));
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialogService.error(this.errorHandler.parseError(error));
            },
        });
    }
    loadFormValues() {
        this.isLoading = true;
        this.ws.call('failover.config')
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (config) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.form.patchValue(Object.assign(Object.assign({}, config), { master: true }));
                this.setFailoverConfirmation();
                this.setFormRelations();
            },
            error: (error) => {
                this.isLoading = false;
                this.dialogService.error(this.errorHandler.parseError(error));
                this.cdr.markForCheck();
            },
        });
    }
    setFailoverConfirmation() {
        this.form.controls.master.valueChanges
            .pipe((0, operators_1.filter)((isMaster) => !isMaster), (0, operators_1.switchMap)(() => {
            return this.dialogService.confirm({
                title: failover_1.helptextSystemFailover.master_dialog_title,
                message: failover_1.helptextSystemFailover.master_dialog_warning,
                buttonText: this.translate.instant('Continue'),
                cancelText: this.translate.instant('Cancel'),
                disableClose: true,
            });
        }), (0, operators_1.take)(1), (0, operators_1.filter)((wasConfirmed) => !wasConfirmed), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.form.patchValue({ master: true });
        });
    }
    setFormRelations() {
        this.subscriptions.push(this.form.controls.master.disabledWhile(this.form.select((values) => !values.disabled)));
    }
};
exports.FailoverSettingsComponent = FailoverSettingsComponent;
FailoverSettingsComponent.ctorParameters = () => [
    { type: reactive_forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: dialog_service_1.DialogService },
    { type: auth_service_1.AuthService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_2.TranslateService },
    { type: snackbar_service_1.SnackbarService },
    { type: store_1.Store },
    { type: websocket_connection_service_1.WebSocketConnectionService }
];
exports.FailoverSettingsComponent = FailoverSettingsComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)({
        arrayName: 'subscriptions',
    }),
    (0, core_1.Component)({
        selector: 'ix-failover-settings',
        template: require("./failover-settings.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            card_1.MatCard,
            ui_search_directive_1.UiSearchDirective,
            card_1.MatCardContent,
            progress_bar_1.MatProgressBar,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            ix_input_component_1.IxInputComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], FailoverSettingsComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,