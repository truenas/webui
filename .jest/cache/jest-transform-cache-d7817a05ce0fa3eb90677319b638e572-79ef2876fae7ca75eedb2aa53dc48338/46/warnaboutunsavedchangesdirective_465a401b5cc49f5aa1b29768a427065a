6066fef74ddb7ded14bdca2ef9ea7b17
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WarnAboutUnsavedChangesDirective = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
let WarnAboutUnsavedChangesDirective = class WarnAboutUnsavedChangesDirective {
    constructor(translate, dialogService, slideInRef) {
        this.translate = translate;
        this.dialogService = dialogService;
        this.slideInRef = slideInRef;
        this.formChanged = false;
    }
    ngOnInit() {
        this.trackFormChanges();
        this.overrideSlideInClose();
    }
    closeWithConfirmation(response) {
        if (!this.formChanged) {
            this.emitClose(response);
            return (0, rxjs_1.of)(true);
        }
        return this.showConfirmDialog().pipe((0, operators_1.switchMap)((shouldClose) => {
            if (shouldClose) {
                this.formChanged = false;
                this.emitClose(response);
            }
            return (0, rxjs_1.of)(shouldClose);
        }));
    }
    trackFormChanges() {
        this.formGroup.valueChanges
            .pipe((0, operators_1.filter)(() => !this.formGroup.pristine), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.formChanged = true;
        });
    }
    overrideSlideInClose() {
        this.slideInRef.close = (response) => this.closeWithConfirmation(response)
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe();
    }
    showConfirmDialog() {
        return this.dialogService.confirm({
            title: this.translate.instant('Unsaved Changes'),
            message: this.translate.instant('You have unsaved changes. Are you sure you want to close?'),
            cancelText: this.translate.instant('No'),
            buttonText: this.translate.instant('Yes'),
            buttonColor: 'red',
            hideCheckbox: true,
        });
    }
    emitClose(response) {
        this.slideInRef.slideInClosed$.next(response);
        this.slideInRef.slideInClosed$.complete();
    }
};
exports.WarnAboutUnsavedChangesDirective = WarnAboutUnsavedChangesDirective;
WarnAboutUnsavedChangesDirective.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: dialog_service_1.DialogService },
    { type: ix_slide_in_ref_1.IxSlideInRef }
];
WarnAboutUnsavedChangesDirective.propDecorators = {
    formGroup: [{ type: core_1.Input }]
};
exports.WarnAboutUnsavedChangesDirective = WarnAboutUnsavedChangesDirective = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Directive)({
        selector: '[warnAboutUnsavedChanges]',
        standalone: true,
    })
], WarnAboutUnsavedChangesDirective);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMuZGlyZWN0aXZlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUV1QjtBQUV2Qix5REFBcUU7QUFDckUsOENBQXVEO0FBQ3ZELCtCQUFzQztBQUN0Qyw4Q0FBbUQ7QUFDbkQsc0VBQWtFO0FBQ2xFLHVHQUFpRztBQU8xRixJQUFNLGdDQUFnQyxHQUF0QyxNQUFNLGdDQUFnQztJQUszQyxZQUNVLFNBQTJCLEVBQzNCLGFBQTRCLEVBQzVCLFVBQTJCO1FBRjNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGVBQVUsR0FBVixVQUFVLENBQWlCO1FBTHJDLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBTWpCLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELHFCQUFxQixDQUFDLFFBQVk7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sSUFBQSxTQUFFLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUNsQyxJQUFBLHFCQUFTLEVBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN4QixJQUFJLFdBQVcsRUFBRSxDQUFDO2dCQUNoQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztnQkFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQixDQUFDO1lBQ0QsT0FBTyxJQUFBLFNBQUUsRUFBQyxXQUFXLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVk7YUFDeEIsSUFBSSxDQUNILElBQUEsa0JBQU0sRUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQ3RDLElBQUEsOEJBQWMsRUFBQyxJQUFJLENBQUMsQ0FDckI7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLENBQUMsUUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDO2FBQzNFLElBQUksQ0FBQyxJQUFBLDhCQUFjLEVBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUIsU0FBUyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1lBQ2hDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUNoRCxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsMkRBQTJELENBQUM7WUFDNUYsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUN4QyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ3pDLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxTQUFTLENBQUMsUUFBWTtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUMsQ0FBQzs7QUFoRVUsNEVBQWdDOzs7Ozs7O3dCQUMxQyxZQUFLOzsyQ0FESyxnQ0FBZ0M7SUFMNUMsSUFBQSw0QkFBWSxHQUFFO0lBQ2QsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLDJCQUEyQjtRQUNyQyxVQUFVLEVBQUUsSUFBSTtLQUNqQixDQUFDO0dBQ1csZ0NBQWdDLENBaUU1QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvZGlyZWN0aXZlcy93YXJuLWFib3V0LXVuc2F2ZWQtY2hhbmdlcy93YXJuLWFib3V0LXVuc2F2ZWQtY2hhbmdlcy5kaXJlY3RpdmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL2RpYWxvZy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBJeFNsaWRlSW5SZWYgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LXNsaWRlLWluL2l4LXNsaWRlLWluLXJlZic7XG5cbkBVbnRpbERlc3Ryb3koKVxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3dhcm5BYm91dFVuc2F2ZWRDaGFuZ2VzXScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIFdhcm5BYm91dFVuc2F2ZWRDaGFuZ2VzRGlyZWN0aXZlPFQ+IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG5cbiAgZm9ybUNoYW5nZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcml2YXRlIGRpYWxvZ1NlcnZpY2U6IERpYWxvZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBzbGlkZUluUmVmOiBJeFNsaWRlSW5SZWY8VD4sXG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnRyYWNrRm9ybUNoYW5nZXMoKTtcbiAgICB0aGlzLm92ZXJyaWRlU2xpZGVJbkNsb3NlKCk7XG4gIH1cblxuICBjbG9zZVdpdGhDb25maXJtYXRpb24ocmVzcG9uc2U/OiBUKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgaWYgKCF0aGlzLmZvcm1DaGFuZ2VkKSB7XG4gICAgICB0aGlzLmVtaXRDbG9zZShyZXNwb25zZSk7XG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzaG91bGRDbG9zZSkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkQ2xvc2UpIHtcbiAgICAgICAgICB0aGlzLmZvcm1DaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5lbWl0Q2xvc2UocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZihzaG91bGRDbG9zZSk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB0cmFja0Zvcm1DaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybUdyb3VwLnZhbHVlQ2hhbmdlc1xuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigoKSA9PiAhdGhpcy5mb3JtR3JvdXAucHJpc3RpbmUpLFxuICAgICAgICB1bnRpbERlc3Ryb3llZCh0aGlzKSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmZvcm1DaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBvdmVycmlkZVNsaWRlSW5DbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNsaWRlSW5SZWYuY2xvc2UgPSAocmVzcG9uc2U/OiBUKSA9PiB0aGlzLmNsb3NlV2l0aENvbmZpcm1hdGlvbihyZXNwb25zZSlcbiAgICAgIC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKVxuICAgICAgLnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93Q29uZmlybURpYWxvZygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5kaWFsb2dTZXJ2aWNlLmNvbmZpcm0oe1xuICAgICAgdGl0bGU6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1Vuc2F2ZWQgQ2hhbmdlcycpLFxuICAgICAgbWVzc2FnZTogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnWW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xvc2U/JyksXG4gICAgICBjYW5jZWxUZXh0OiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdObycpLFxuICAgICAgYnV0dG9uVGV4dDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnWWVzJyksXG4gICAgICBidXR0b25Db2xvcjogJ3JlZCcsXG4gICAgICBoaWRlQ2hlY2tib3g6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGVtaXRDbG9zZShyZXNwb25zZT86IFQpOiB2b2lkIHtcbiAgICB0aGlzLnNsaWRlSW5SZWYuc2xpZGVJbkNsb3NlZCQubmV4dChyZXNwb25zZSk7XG4gICAgdGhpcy5zbGlkZUluUmVmLnNsaWRlSW5DbG9zZWQkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==