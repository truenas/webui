7c50568453810056c4febc6b280811c3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnackbarService = void 0;
const core_1 = require("@angular/core");
const snack_bar_1 = require("@angular/material/snack-bar");
const icon_marker_util_1 = require("app/modules/ix-icon/icon-marker.util");
const snackbar_component_1 = require("app/modules/snackbar/components/snackbar/snackbar.component");
/**
 * If you need more options for your custom case,
 * use SnackbarComponent or even MatSnackBar directly.
 */
let SnackbarService = class SnackbarService {
    constructor(matSnackBar) {
        this.matSnackBar = matSnackBar;
    }
    success(message) {
        return this.matSnackBar.openFromComponent(snackbar_component_1.SnackbarComponent, {
            announcementMessage: message,
            politeness: 'assertive',
            data: {
                message,
                icon: (0, icon_marker_util_1.iconMarker)('check'),
                iconCssColor: 'var(--green)',
            },
        });
    }
};
exports.SnackbarService = SnackbarService;
SnackbarService.ctorParameters = () => [
    { type: snack_bar_1.MatSnackBar }
];
exports.SnackbarService = SnackbarService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], SnackbarService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvc25hY2tiYXIvc2VydmljZXMvc25hY2tiYXIuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBMkM7QUFDM0MsMkRBQTBFO0FBQzFFLDJFQUFrRTtBQUNsRSxvR0FBZ0c7QUFFaEc7OztHQUdHO0FBSUksSUFBTSxlQUFlLEdBQXJCLE1BQU0sZUFBZTtJQUMxQixZQUNVLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQy9CLENBQUM7SUFFSixPQUFPLENBQUMsT0FBZTtRQUNyQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsc0NBQWlCLEVBQUU7WUFDM0QsbUJBQW1CLEVBQUUsT0FBTztZQUM1QixVQUFVLEVBQUUsV0FBVztZQUN2QixJQUFJLEVBQUU7Z0JBQ0osT0FBTztnQkFDUCxJQUFJLEVBQUUsSUFBQSw2QkFBVSxFQUFDLE9BQU8sQ0FBQztnQkFDekIsWUFBWSxFQUFFLGNBQWM7YUFDN0I7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOztBQWZVLDBDQUFlOzs7OzBCQUFmLGVBQWU7SUFIM0IsSUFBQSxpQkFBVSxFQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLGVBQWUsQ0FnQjNCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL3NuYWNrYmFyL3NlcnZpY2VzL3NuYWNrYmFyLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0U25hY2tCYXIsIE1hdFNuYWNrQmFyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcbmltcG9ydCB7IGljb25NYXJrZXIgfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2ljb24tbWFya2VyLnV0aWwnO1xuaW1wb3J0IHsgU25hY2tiYXJDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9zbmFja2Jhci9jb21wb25lbnRzL3NuYWNrYmFyL3NuYWNrYmFyLmNvbXBvbmVudCc7XG5cbi8qKlxuICogSWYgeW91IG5lZWQgbW9yZSBvcHRpb25zIGZvciB5b3VyIGN1c3RvbSBjYXNlLFxuICogdXNlIFNuYWNrYmFyQ29tcG9uZW50IG9yIGV2ZW4gTWF0U25hY2tCYXIgZGlyZWN0bHkuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBTbmFja2JhclNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG1hdFNuYWNrQmFyOiBNYXRTbmFja0JhcixcbiAgKSB7fVxuXG4gIHN1Y2Nlc3MobWVzc2FnZTogc3RyaW5nKTogTWF0U25hY2tCYXJSZWY8U25hY2tiYXJDb21wb25lbnQ+IHtcbiAgICByZXR1cm4gdGhpcy5tYXRTbmFja0Jhci5vcGVuRnJvbUNvbXBvbmVudChTbmFja2JhckNvbXBvbmVudCwge1xuICAgICAgYW5ub3VuY2VtZW50TWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHBvbGl0ZW5lc3M6ICdhc3NlcnRpdmUnLFxuICAgICAgZGF0YToge1xuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBpY29uOiBpY29uTWFya2VyKCdjaGVjaycpLFxuICAgICAgICBpY29uQ3NzQ29sb3I6ICd2YXIoLS1ncmVlbiknLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9