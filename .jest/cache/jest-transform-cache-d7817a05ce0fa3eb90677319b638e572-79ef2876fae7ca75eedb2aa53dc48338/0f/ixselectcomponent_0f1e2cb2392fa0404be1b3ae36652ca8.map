{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-select/ix-select.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-select/ix-select.component.ts"],"sourcesContent":["import { AsyncPipe } from '@angular/common';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, Input, OnChanges, OnInit,\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl, FormsModule } from '@angular/forms';\nimport { MatOption } from '@angular/material/core';\nimport { MatHint } from '@angular/material/form-field';\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\nimport { MatSelect, MatSelectTrigger } from '@angular/material/select';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { catchError, debounceTime, tap } from 'rxjs/operators';\nimport { SelectOption, SelectOptionValueType } from 'app/interfaces/option.interface';\nimport { IxErrorsComponent } from 'app/modules/forms/ix-forms/components/ix-errors/ix-errors.component';\nimport { IxLabelComponent } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.component';\nimport { IxIconComponent } from 'app/modules/ix-icon/ix-icon.component';\nimport { TestOverrideDirective } from 'app/modules/test-id/test-override/test-override.directive';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { TooltipComponent } from 'app/modules/tooltip/tooltip.component';\n\nexport type IxSelectValue = SelectOptionValueType;\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-select',\n  styleUrls: ['./ix-select.component.scss'],\n  templateUrl: './ix-select.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    IxLabelComponent,\n    MatSelect,\n    FormsModule,\n    MatSelectTrigger,\n    IxIconComponent,\n    MatOption,\n    MatTooltip,\n    TooltipComponent,\n    MatProgressSpinner,\n    IxErrorsComponent,\n    MatHint,\n    AsyncPipe,\n    TranslateModule,\n    TestDirective,\n    TestOverrideDirective,\n  ],\n})\nexport class IxSelectComponent implements ControlValueAccessor, OnInit, OnChanges {\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() options: Observable<SelectOption[]>;\n  @Input() required: boolean;\n  @Input() tooltip: string;\n  @Input() multiple: boolean;\n  @Input() emptyValue: string = null;\n  @Input() hideEmpty = false;\n  @Input() showSelectAll = false;\n  @Input() compareWith: (val1: unknown, val2: unknown) => boolean = (val1: unknown, val2: unknown) => val1 === val2;\n\n  protected value: IxSelectValue;\n  protected isDisabled = false;\n  protected hasErrorInOptions = false;\n  protected opts$: Observable<SelectOption[]>;\n  protected isLoading = false;\n\n  protected selectAllState = {\n    checked: false,\n  };\n\n  private opts: SelectOption[] = [];\n\n  get selectedLabel(): string {\n    if (this.value === undefined) {\n      return '';\n    }\n\n    if (this.multiple) {\n      return this.multipleLabels.join(',');\n    }\n\n    const selectedOption = this.opts.find((opt) => this.compareWith(opt.value, this.value));\n    return selectedOption ? selectedOption.label : '';\n  }\n\n  get multipleLabels(): string[] {\n    const selectedLabels: string[] = [];\n    this.opts.forEach((opt) => {\n      if (Array.isArray(this.value) && this.value.some((val) => val === opt.value)) {\n        selectedLabels.push(` ${opt.label}`);\n      }\n    });\n    return selectedLabels.length > 0 ? selectedLabels : [];\n  }\n\n  get disabledState(): boolean {\n    return this.isDisabled || !this.options;\n  }\n\n  get isLoadingState(): boolean {\n    return this.isLoading || !this.options;\n  }\n\n  constructor(public controlDirective: NgControl, private cdr: ChangeDetectorRef) {\n    this.controlDirective.valueAccessor = this;\n  }\n\n  ngOnChanges(): void {\n    if (!this.options) {\n      this.hasErrorInOptions = true;\n    } else {\n      this.hasErrorInOptions = false;\n      this.isLoading = true;\n      this.opts$ = this.options.pipe(\n        catchError((error: unknown) => {\n          console.error(error);\n          this.hasErrorInOptions = true;\n          return EMPTY;\n        }),\n        tap(() => {\n          this.isLoading = false;\n          this.cdr.markForCheck();\n        }),\n      );\n\n      this.opts$.pipe(untilDestroyed(this)).subscribe((opts) => {\n        this.opts = opts;\n      });\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.multiple) {\n      this.controlDirective.control.valueChanges.pipe(debounceTime(0), untilDestroyed(this)).subscribe(() => {\n        this.updateSelectAllState();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  onChange: (value: IxSelectValue) => void = (): void => {};\n  onTouch: () => void = (): void => {};\n\n  writeValue(val: IxSelectValue): void {\n    this.value = val;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(onChange: (value: IxSelectValue) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: () => void): void {\n    this.onTouch = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  onOptionTooltipClicked(event: MouseEvent): void {\n    event.stopPropagation();\n  }\n\n  selectAll(): void {\n    if (this.multiple) {\n      this.value = this.opts.map((opt) => opt.value) as SelectOptionValueType;\n      this.onChange(this.value);\n    }\n  }\n\n  unselectAll(): void {\n    this.value = [];\n    this.onChange(this.value);\n  }\n\n  toggleSelectAll(checked: boolean): void {\n    if (checked) {\n      this.selectAll();\n    } else {\n      this.unselectAll();\n    }\n    this.updateSelectAllState();\n  }\n\n  updateSelectAllState(): void {\n    if (Array.isArray(this.value)) {\n      if (this.value.length === 0) {\n        this.selectAllState.checked = false;\n      } else if (this.value.length === this.opts.length) {\n        this.selectAllState.checked = true;\n      } else {\n        this.selectAllState.checked = false;\n      }\n    }\n  }\n}\n"],"version":3}