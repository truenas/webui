cb2e028dfd5e0683222d61723125f0ac
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const core_1 = require("@angular/core");
const testing_1 = require("@angular/material/button/testing");
const dialog_1 = require("@angular/material/dialog");
const router_1 = require("@angular/router");
const jest_1 = require("@ngneat/spectator/jest");
const testing_2 = require("@ngrx/store/testing");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const job_state_enum_1 = require("app/enums/job-state.enum");
const system_update_enum_1 = require("app/enums/system-update.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const save_config_dialog_component_1 = require("app/pages/system/general-settings/save-config-dialog/save-config-dialog.component");
const update_actions_card_component_1 = require("app/pages/system/update/components/update-actions-card/update-actions-card.component");
const train_service_1 = require("app/pages/system/update/services/train.service");
const update_service_1 = require("app/pages/system/update/services/update.service");
const system_general_service_1 = require("app/services/system-general.service");
const ws_service_1 = require("app/services/ws.service");
const ha_info_selectors_1 = require("app/store/ha-info/ha-info.selectors");
describe('UpdateActionsCardComponent', () => {
    let spectator;
    let loader;
    const mockDialogRef = {
        close: jest.fn(),
        afterClosed: () => (0, rxjs_1.of)(true),
    };
    const createComponent = (0, jest_1.createComponentFactory)({
        component: update_actions_card_component_1.UpdateActionsCardComponent,
        providers: [
            (0, mock_auth_utils_1.mockAuth)(),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('core.get_jobs', []),
                (0, mock_websocket_utils_1.mockCall)('update.check_available', {
                    status: system_update_enum_1.SystemUpdateStatus.Available,
                    changes: [],
                }),
                (0, mock_websocket_utils_1.mockJob)('update.update'),
            ]),
            (0, jest_1.mockProvider)(router_1.Router),
            (0, jest_1.mockProvider)(train_service_1.TrainService),
            (0, jest_1.mockProvider)(snackbar_service_1.SnackbarService),
            (0, jest_1.mockProvider)(update_service_1.UpdateService, {
                updatesAvailable$: (0, rxjs_1.of)(true),
                updateDownloaded$: (0, rxjs_1.of)(true),
                status$: new rxjs_1.BehaviorSubject(undefined),
                error$: new rxjs_1.BehaviorSubject(false),
                packages$: new rxjs_1.BehaviorSubject([]),
            }),
            (0, jest_1.mockProvider)(system_general_service_1.SystemGeneralService, {
                updateRunning: (0, rxjs_1.of)('false'),
                updateRunningNoticeSent: new core_1.EventEmitter(),
            }),
            (0, jest_1.mockProvider)(dialog_1.MatDialog, {
                open: jest.fn(() => mockDialogRef),
            }),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)({
                    confirmed: true,
                    secondaryCheckbox: true,
                })),
                jobDialog: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)({}),
                })),
            }),
            (0, testing_2.provideMockStore)({
                selectors: [{
                        selector: ha_info_selectors_1.selectIsHaLicensed,
                        value: false,
                    }],
            }),
        ],
    });
    beforeEach(() => {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
    });
    it('shows save configuration dialog and runs update when Apply Pending Update button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const applyPendingButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Apply Pending update' }));
        yield applyPendingButton.click();
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(save_config_dialog_component_1.SaveConfigDialogComponent, {
            data: {
                cancelButton: 'Do not save',
                saveButton: 'Save Configuration',
                title: 'Save configuration settings from this machine before updating?',
            },
        });
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith({
            message: 'The system will restart and be briefly unavailable while applying updates. Apply updates and restart?',
            title: 'Apply Pending Updates',
        });
        expect(spectator.inject(ws_service_1.WebSocketService).job).toHaveBeenCalledWith('update.update', [{ reboot: true, resume: false }]);
    }));
    it('shows save configuration dialog and runs update when Download Updates button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const downloadUpdatesButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Download Updates' }));
        yield downloadUpdatesButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('core.get_jobs', [
            [['method', '=', 'update.update'], ['state', '=', job_state_enum_1.JobState.Running]],
        ]);
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('update.check_available');
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(save_config_dialog_component_1.SaveConfigDialogComponent, {
            data: {
                cancelButton: 'Do not save',
                saveButton: 'Save Configuration',
                title: 'Save configuration settings from this machine before updating?',
            },
        });
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith({
            buttonText: 'Download',
            hideCheckbox: true,
            message: 'Continue with download?',
            secondaryCheckbox: true,
            secondaryCheckboxText: 'Apply updates and restart system after downloading.',
            title: 'Download Update',
        });
        expect(spectator.inject(ws_service_1.WebSocketService).job).toHaveBeenCalledWith('update.update', [{ reboot: true, resume: false }]);
    }));
    it('shows save configuration dialog and redirects to the manual update page when Install Manual Update File button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const installManualButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Install Manual Update File' }));
        yield installManualButton.click();
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(save_config_dialog_component_1.SaveConfigDialogComponent, {
            data: {
                cancelButton: 'Do not save',
                saveButton: 'Save Configuration',
                title: 'Save configuration settings from this machine before updating?',
            },
        });
        expect(spectator.inject(router_1.Router).navigate).toHaveBeenCalledWith(['/system/update/manualupdate']);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,