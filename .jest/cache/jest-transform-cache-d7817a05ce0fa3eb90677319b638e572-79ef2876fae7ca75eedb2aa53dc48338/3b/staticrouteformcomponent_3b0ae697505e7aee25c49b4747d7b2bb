bfe2ff22438256809246046881c1bcd2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticRouteFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const warn_about_unsaved_changes_directive_1 = require("app/directives/warn-about-unsaved-changes/warn-about-unsaved-changes.directive");
const role_enum_1 = require("app/enums/role.enum");
const static_routes_1 = require("app/helptext/network/static-routes/static-routes");
const static_route_interface_1 = require("app/interfaces/static-route.interface");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ip_validation_1 = require("app/modules/forms/ix-forms/validators/ip-validation");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const ws_service_1 = require("app/services/ws.service");
let StaticRouteFormComponent = class StaticRouteFormComponent {
    get isNew() {
        return !this.editingRoute;
    }
    get title() {
        return this.isNew ? this.translate.instant('Add Static Route') : this.translate.instant('Edit Static Route');
    }
    constructor(fb, ws, cdr, snackbar, errorHandler, translate, slideInRef, editingRoute) {
        this.fb = fb;
        this.ws = ws;
        this.cdr = cdr;
        this.snackbar = snackbar;
        this.errorHandler = errorHandler;
        this.translate = translate;
        this.slideInRef = slideInRef;
        this.editingRoute = editingRoute;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.isFormLoading = false;
        this.form = this.fb.group({
            destination: ['', [forms_1.Validators.required]],
            gateway: ['', [forms_1.Validators.required, (0, ip_validation_1.ipv4or6Validator)()]],
            description: [''],
        });
        this.tooltips = {
            destination: static_routes_1.helptextStaticRoutes.sr_destination_tooltip,
            gateway: static_routes_1.helptextStaticRoutes.sr_gateway_tooltip,
            description: static_routes_1.helptextStaticRoutes.sr_description_tooltip,
        };
    }
    ngOnInit() {
        if (this.editingRoute) {
            this.setEditingStaticRoute();
        }
    }
    setEditingStaticRoute() {
        this.form.patchValue(this.editingRoute);
    }
    onSubmit() {
        this.isFormLoading = true;
        const values = this.form.value;
        let request$;
        if (this.isNew) {
            request$ = this.ws.call('staticroute.create', [values]);
        }
        else {
            request$ = this.ws.call('staticroute.update', [
                this.editingRoute.id,
                values,
            ]);
        }
        request$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                if (this.isNew) {
                    this.snackbar.success(this.translate.instant('Static route added'));
                }
                else {
                    this.snackbar.success(this.translate.instant('Static route updated'));
                }
                this.isFormLoading = false;
                this.cdr.markForCheck();
                this.slideInRef.close(true);
            },
            error: (error) => {
                this.isFormLoading = false;
                this.cdr.markForCheck();
                this.errorHandler.handleWsFormError(error, this.form);
            },
        });
    }
};
exports.StaticRouteFormComponent = StaticRouteFormComponent;
StaticRouteFormComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: snackbar_service_1.SnackbarService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_2.TranslateService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: static_route_interface_1.StaticRoute, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.StaticRouteFormComponent = StaticRouteFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-static-route-form',
        template: require("./static-route-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header_component_1.IxModalHeaderComponent,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_input_component_1.IxInputComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
            warn_about_unsaved_changes_directive_1.WarnAboutUnsavedChangesDirective,
        ],
    })
], StaticRouteFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL25ldHdvcmsvY29tcG9uZW50cy9zdGF0aWMtcm91dGUtZm9ybS9zdGF0aWMtcm91dGUtZm9ybS5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBRXVCO0FBQ3ZCLDBDQUE4RTtBQUM5RSxxREFBcUQ7QUFDckQsaURBQWlFO0FBQ2pFLHlEQUFxRTtBQUNyRSw4Q0FBd0U7QUFFeEUscUdBQWdHO0FBQ2hHLHlJQUFrSTtBQUNsSSxtREFBMkM7QUFDM0Msb0ZBQXdGO0FBQ3hGLGtGQUF1RjtBQUN2RixzSEFBaUg7QUFDakgsbUhBQThHO0FBQzlHLDBHQUFxRztBQUNyRyxzSkFBZ0o7QUFDaEosdUdBQWlHO0FBQ2pHLDJHQUFvRztBQUNwRywrR0FBeUc7QUFDekcsdUZBQXVGO0FBQ3ZGLHFGQUFpRjtBQUNqRix1RUFBbUU7QUFDbkUsd0RBQTJEO0FBdUJwRCxJQUFNLHdCQUF3QixHQUE5QixNQUFNLHdCQUF3QjtJQUduQyxJQUFJLEtBQUs7UUFDUCxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQy9HLENBQUM7SUFnQkQsWUFDVSxFQUFlLEVBQ2YsRUFBb0IsRUFDcEIsR0FBc0IsRUFDdEIsUUFBeUIsRUFDekIsWUFBcUMsRUFDckMsU0FBMkIsRUFDM0IsVUFBa0QsRUFDM0IsWUFBeUI7UUFQaEQsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUNmLE9BQUUsR0FBRixFQUFFLENBQWtCO1FBQ3BCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3RCLGFBQVEsR0FB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QUMsSUFBSSxDQUFDLENBQUM7WUFDeEQsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBN0VVLDREQUF3Qjs7Ozs7Ozs7O3VFQWlDaEMsYUFBTSxTQUFDLGlDQUFhOzttQ0FqQ1osd0JBQXdCO0lBckJwQyxJQUFBLDRCQUFZLEdBQUU7SUFDZCxJQUFBLGdCQUFTLEVBQUM7UUFDVCxRQUFRLEVBQUUsc0JBQXNCO1FBQ2hDLHVEQUFpRDtRQUNqRCxlQUFlLEVBQUUsOEJBQXVCLENBQUMsTUFBTTtRQUMvQyxVQUFVLEVBQUUsSUFBSTtRQUNoQixPQUFPLEVBQUU7WUFDUCxrREFBc0I7WUFDdEIsY0FBTztZQUNQLHFCQUFjO1lBQ2QsMkJBQW1CO1lBQ25CLDJDQUFtQjtZQUNuQixxQ0FBZ0I7WUFDaEIsNkNBQW9CO1lBQ3BCLGlEQUFzQjtZQUN0QixrQkFBUztZQUNULDhCQUFhO1lBQ2Isc0JBQWU7WUFDZix1RUFBZ0M7U0FDakM7S0FDRixDQUFDO0dBQ1csd0JBQXdCLENBOEVwQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvcGFnZXMvbmV0d29yay9jb21wb25lbnRzL3N0YXRpYy1yb3V0ZS1mb3JtL3N0YXRpYy1yb3V0ZS1mb3JtLmNvbXBvbmVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5qZWN0LCBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXRCdXR0b24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9idXR0b24nO1xuaW1wb3J0IHsgTWF0Q2FyZCwgTWF0Q2FyZENvbnRlbnQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jYXJkJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSwgVHJhbnNsYXRlTW9kdWxlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZXF1aXJlc1JvbGVzRGlyZWN0aXZlIH0gZnJvbSAnYXBwL2RpcmVjdGl2ZXMvcmVxdWlyZXMtcm9sZXMvcmVxdWlyZXMtcm9sZXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IFdhcm5BYm91dFVuc2F2ZWRDaGFuZ2VzRGlyZWN0aXZlIH0gZnJvbSAnYXBwL2RpcmVjdGl2ZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJvbGUgfSBmcm9tICdhcHAvZW51bXMvcm9sZS5lbnVtJztcbmltcG9ydCB7IGhlbHB0ZXh0U3RhdGljUm91dGVzIH0gZnJvbSAnYXBwL2hlbHB0ZXh0L25ldHdvcmsvc3RhdGljLXJvdXRlcy9zdGF0aWMtcm91dGVzJztcbmltcG9ydCB7IFN0YXRpY1JvdXRlLCBVcGRhdGVTdGF0aWNSb3V0ZSB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL3N0YXRpYy1yb3V0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRm9ybUFjdGlvbnNDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2Zvcm0tYWN0aW9ucy9mb3JtLWFjdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IEl4RmllbGRzZXRDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWZpZWxkc2V0L2l4LWZpZWxkc2V0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJeElucHV0Q29tcG9uZW50IH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1pbnB1dC9peC1pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSXhNb2RhbEhlYWRlckNvbXBvbmVudCB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc2xpZGUtaW4vY29tcG9uZW50cy9peC1tb2RhbC1oZWFkZXIvaXgtbW9kYWwtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJeFNsaWRlSW5SZWYgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LXNsaWRlLWluL2l4LXNsaWRlLWluLXJlZic7XG5pbXBvcnQgeyBTTElERV9JTl9EQVRBIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zbGlkZS1pbi9peC1zbGlkZS1pbi50b2tlbic7XG5pbXBvcnQgeyBGb3JtRXJyb3JIYW5kbGVyU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL3NlcnZpY2VzL2Zvcm0tZXJyb3ItaGFuZGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IGlwdjRvcjZWYWxpZGF0b3IgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy92YWxpZGF0b3JzL2lwLXZhbGlkYXRpb24nO1xuaW1wb3J0IHsgU25hY2tiYXJTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvc25hY2tiYXIvc2VydmljZXMvc25hY2tiYXIuc2VydmljZSc7XG5pbXBvcnQgeyBUZXN0RGlyZWN0aXZlIH0gZnJvbSAnYXBwL21vZHVsZXMvdGVzdC1pZC90ZXN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dzLnNlcnZpY2UnO1xuXG5AVW50aWxEZXN0cm95KClcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LXN0YXRpYy1yb3V0ZS1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N0YXRpYy1yb3V0ZS1mb3JtLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBJeE1vZGFsSGVhZGVyQ29tcG9uZW50LFxuICAgIE1hdENhcmQsXG4gICAgTWF0Q2FyZENvbnRlbnQsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBJeEZpZWxkc2V0Q29tcG9uZW50LFxuICAgIEl4SW5wdXRDb21wb25lbnQsXG4gICAgRm9ybUFjdGlvbnNDb21wb25lbnQsXG4gICAgUmVxdWlyZXNSb2xlc0RpcmVjdGl2ZSxcbiAgICBNYXRCdXR0b24sXG4gICAgVGVzdERpcmVjdGl2ZSxcbiAgICBUcmFuc2xhdGVNb2R1bGUsXG4gICAgV2FybkFib3V0VW5zYXZlZENoYW5nZXNEaXJlY3RpdmUsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFN0YXRpY1JvdXRlRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByb3RlY3RlZCByZWFkb25seSByZXF1aXJlZFJvbGVzID0gW1JvbGUuRnVsbEFkbWluXTtcblxuICBnZXQgaXNOZXcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmVkaXRpbmdSb3V0ZTtcbiAgfVxuXG4gIGdldCB0aXRsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlzTmV3ID8gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnQWRkIFN0YXRpYyBSb3V0ZScpIDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnRWRpdCBTdGF0aWMgUm91dGUnKTtcbiAgfVxuXG4gIGlzRm9ybUxvYWRpbmcgPSBmYWxzZTtcblxuICBmb3JtID0gdGhpcy5mYi5ncm91cCh7XG4gICAgZGVzdGluYXRpb246IFsnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWRdXSxcbiAgICBnYXRld2F5OiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBpcHY0b3I2VmFsaWRhdG9yKCldXSxcbiAgICBkZXNjcmlwdGlvbjogWycnXSxcbiAgfSk7XG5cbiAgcmVhZG9ubHkgdG9vbHRpcHMgPSB7XG4gICAgZGVzdGluYXRpb246IGhlbHB0ZXh0U3RhdGljUm91dGVzLnNyX2Rlc3RpbmF0aW9uX3Rvb2x0aXAsXG4gICAgZ2F0ZXdheTogaGVscHRleHRTdGF0aWNSb3V0ZXMuc3JfZ2F0ZXdheV90b29sdGlwLFxuICAgIGRlc2NyaXB0aW9uOiBoZWxwdGV4dFN0YXRpY1JvdXRlcy5zcl9kZXNjcmlwdGlvbl90b29sdGlwLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyLFxuICAgIHByaXZhdGUgd3M6IFdlYlNvY2tldFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgc25hY2tiYXI6IFNuYWNrYmFyU2VydmljZSxcbiAgICBwcml2YXRlIGVycm9ySGFuZGxlcjogRm9ybUVycm9ySGFuZGxlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBzbGlkZUluUmVmOiBJeFNsaWRlSW5SZWY8U3RhdGljUm91dGVGb3JtQ29tcG9uZW50PixcbiAgICBASW5qZWN0KFNMSURFX0lOX0RBVEEpIHByaXZhdGUgZWRpdGluZ1JvdXRlOiBTdGF0aWNSb3V0ZSxcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmVkaXRpbmdSb3V0ZSkge1xuICAgICAgdGhpcy5zZXRFZGl0aW5nU3RhdGljUm91dGUoKTtcbiAgICB9XG4gIH1cblxuICBzZXRFZGl0aW5nU3RhdGljUm91dGUoKTogdm9pZCB7XG4gICAgdGhpcy5mb3JtLnBhdGNoVmFsdWUodGhpcy5lZGl0aW5nUm91dGUpO1xuICB9XG5cbiAgb25TdWJtaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pc0Zvcm1Mb2FkaW5nID0gdHJ1ZTtcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmZvcm0udmFsdWUgYXMgVXBkYXRlU3RhdGljUm91dGU7XG5cbiAgICBsZXQgcmVxdWVzdCQ6IE9ic2VydmFibGU8dW5rbm93bj47XG4gICAgaWYgKHRoaXMuaXNOZXcpIHtcbiAgICAgIHJlcXVlc3QkID0gdGhpcy53cy5jYWxsKCdzdGF0aWNyb3V0ZS5jcmVhdGUnLCBbdmFsdWVzXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QkID0gdGhpcy53cy5jYWxsKCdzdGF0aWNyb3V0ZS51cGRhdGUnLCBbXG4gICAgICAgIHRoaXMuZWRpdGluZ1JvdXRlLmlkLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICBdKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0JC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc05ldykge1xuICAgICAgICAgIHRoaXMuc25hY2tiYXIuc3VjY2Vzcyh0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdTdGF0aWMgcm91dGUgYWRkZWQnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zbmFja2Jhci5zdWNjZXNzKHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1N0YXRpYyByb3V0ZSB1cGRhdGVkJykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNGb3JtTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgdGhpcy5zbGlkZUluUmVmLmNsb3NlKHRydWUpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiAoZXJyb3I6IHVua25vd24pID0+IHtcbiAgICAgICAgdGhpcy5pc0Zvcm1Mb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVXc0Zvcm1FcnJvcihlcnJvciwgdGhpcy5mb3JtKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==