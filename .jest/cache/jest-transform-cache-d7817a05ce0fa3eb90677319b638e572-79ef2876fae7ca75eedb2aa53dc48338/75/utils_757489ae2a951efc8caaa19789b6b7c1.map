{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/utils.ts","mappings":";;AAIA,8CAQC;AAED,kCAaC;AAED,0CAeC;AA5CD,yCAAgC;AAIhC,SAAgB,iBAAiB,CAAC,WAAmB;IACnD,IAAI,MAAM,GAAG,WAAW,CAAC;IAEzB,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;QAC5C,MAAM,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,KAAI,EAAE,CAAC;IAClD,CAAC;IAED,OAAO,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACnD,CAAC;AAED,SAAgB,WAAW,CACzB,OAAwC,EACxC,MAA8E;IAE9E,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QAC5B,MAAM,YAAY,GAAG,CAAC,GAAM,EAAU,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QACrF,MAAM,UAAU,GAAG,CAAC,GAAM,EAAY,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAChE,uCACK,MAAM,KACT,YAAY;YACZ,UAAU,IACV;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,eAAe,CAAI,MAAsB;IACvD,MAAM,EACJ,IAAI,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,EAAE,aAAa,GACtD,GAAG,MAAM,CAAC;IAEX,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IACzC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;QAC1B,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;;YACnC,IAAI,KAAK,GAAG,IAAA,eAAG,EAAC,IAAI,EAAE,SAAS,CAAuB,CAAC;YACvD,IAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAG,SAAS,CAAC,EAAE,CAAC;gBAC/B,KAAK,GAAG,MAAA,aAAa,CAAC,SAAS,CAAC,8DAAG,KAAmB,CAAC,CAAC;YAC1D,CAAC;YACD,OAAO,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,EAAE,0CAAE,WAAW,EAAE,0CAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/utils.ts"],"sourcesContent":["import { get } from 'lodash-es';\nimport { Column, ColumnComponent } from 'app/modules/ix-table/interfaces/column-component.class';\nimport { TableFilter } from 'app/modules/ix-table/interfaces/table-filter.interface';\n\nexport function convertStringToId(inputString: string): string {\n  let result = inputString;\n\n  if (!result || result.includes('undefined')) {\n    result = result?.replace('undefined', '') || '';\n  }\n\n  return result.toLowerCase().replace(/\\s+/g, '-');\n}\n\nexport function createTable<T>(\n  columns: Column<T, ColumnComponent<T>>[],\n  config: { uniqueRowTag: (row: T) => string; ariaLabels: (row: T) => string[] },\n): Column<T, ColumnComponent<T>>[] {\n  return columns.map((column) => {\n    const uniqueRowTag = (row: T): string => convertStringToId(config.uniqueRowTag(row));\n    const ariaLabels = (row: T): string[] => config.ariaLabels(row);\n    return {\n      ...column,\n      uniqueRowTag,\n      ariaLabels,\n    };\n  });\n}\n\nexport function filterTableRows<T>(filter: TableFilter<T>): T[] {\n  const {\n    list = [], query = '', columnKeys = [], preprocessMap,\n  } = filter;\n\n  const filterString = query.toLowerCase();\n  return list.filter((item) => {\n    return columnKeys.some((columnKey) => {\n      let value = get(item, columnKey) as string | undefined;\n      if (preprocessMap?.[columnKey]) {\n        value = preprocessMap[columnKey]?.(value as T[keyof T]);\n      }\n      return value?.toString()?.toLowerCase()?.includes(filterString);\n    });\n  });\n}\n"],"version":3}