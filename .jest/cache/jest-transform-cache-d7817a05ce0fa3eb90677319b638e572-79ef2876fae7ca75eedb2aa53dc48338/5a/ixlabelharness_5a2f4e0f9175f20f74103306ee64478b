8de4bcd530eafd54c367dd0262bf2a52
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxLabelHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const tooltip_harness_1 = require("app/modules/tooltip/tooltip.harness");
class IxLabelHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getTooltip = this.locatorFor(tooltip_harness_1.IxTooltipHarness);
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxLabelHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabel(), label));
    }
    getLabel() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional('label')();
            if (!label) {
                return '';
            }
            return label.text({ exclude: '.required' });
        });
    }
    isRequired() {
        return __awaiter(this, void 0, void 0, function* () {
            const required = yield this.locatorForOptional('.required')();
            return Boolean(required);
        });
    }
}
exports.IxLabelHarness = IxLabelHarness;
IxLabelHarness.hostSelector = 'ix-label';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1sYWJlbC9peC1sYWJlbC5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUU4QjtBQUM5Qix5RUFBdUU7QUFNdkUsTUFBYSxjQUFlLFNBQVEsMEJBQWdCO0lBQXBEOztRQUdXLGVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGtDQUFnQixDQUFDLENBQUM7SUFvQjFELENBQUM7SUFsQkMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUF1QjtRQUNqQyxPQUFPLElBQUksMEJBQWdCLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQzthQUNqRCxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQywwQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUVLLFFBQVE7O1lBQ1osTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUN2RCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQzlELE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLENBQUM7S0FBQTs7QUF0Qkgsd0NBdUJDO0FBdEJpQiwyQkFBWSxHQUFHLFVBQVUsQUFBYixDQUFjIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtbGFiZWwvaXgtbGFiZWwuaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYXNlSGFybmVzc0ZpbHRlcnMsIENvbXBvbmVudEhhcm5lc3MsIEhhcm5lc3NQcmVkaWNhdGUsXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IEl4VG9vbHRpcEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy90b29sdGlwL3Rvb2x0aXAuaGFybmVzcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXhMYWJlbEZpbHRlcnMgZXh0ZW5kcyBCYXNlSGFybmVzc0ZpbHRlcnMge1xuICBsYWJlbDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhMYWJlbEhhcm5lc3MgZXh0ZW5kcyBDb21wb25lbnRIYXJuZXNzIHtcbiAgc3RhdGljIHJlYWRvbmx5IGhvc3RTZWxlY3RvciA9ICdpeC1sYWJlbCc7XG5cbiAgcmVhZG9ubHkgZ2V0VG9vbHRpcCA9IHRoaXMubG9jYXRvckZvcihJeFRvb2x0aXBIYXJuZXNzKTtcblxuICBzdGF0aWMgd2l0aChvcHRpb25zOiBJeExhYmVsRmlsdGVycyk6IEhhcm5lc3NQcmVkaWNhdGU8SXhMYWJlbEhhcm5lc3M+IHtcbiAgICByZXR1cm4gbmV3IEhhcm5lc3NQcmVkaWNhdGUoSXhMYWJlbEhhcm5lc3MsIG9wdGlvbnMpXG4gICAgICAuYWRkT3B0aW9uKCdsYWJlbCcsIG9wdGlvbnMubGFiZWwsIChoYXJuZXNzLCBsYWJlbCkgPT4gSGFybmVzc1ByZWRpY2F0ZS5zdHJpbmdNYXRjaGVzKGhhcm5lc3MuZ2V0TGFiZWwoKSwgbGFiZWwpKTtcbiAgfVxuXG4gIGFzeW5jIGdldExhYmVsKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgbGFiZWwgPSBhd2FpdCB0aGlzLmxvY2F0b3JGb3JPcHRpb25hbCgnbGFiZWwnKSgpO1xuICAgIGlmICghbGFiZWwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gbGFiZWwudGV4dCh7IGV4Y2x1ZGU6ICcucmVxdWlyZWQnIH0pO1xuICB9XG5cbiAgYXN5bmMgaXNSZXF1aXJlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXF1aXJlZCA9IGF3YWl0IHRoaXMubG9jYXRvckZvck9wdGlvbmFsKCcucmVxdWlyZWQnKSgpO1xuICAgIHJldHVybiBCb29sZWFuKHJlcXVpcmVkKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9