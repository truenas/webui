25469a7af0e025112ae9d2a5aa43cbe4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const a11y_1 = require("@angular/cdk/a11y");
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const jest_1 = require("@ngneat/spectator/jest");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.component");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
/** Simple component for testing IxSlideInComponent */
let TestComponent = class TestComponent {
    constructor(slideInRef, value) {
        this.slideInRef = slideInRef;
        this.value = value;
        this.text = value;
    }
    close() {
        this.slideInRef.close();
    }
};
TestComponent.ctorParameters = () => [
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: String, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
TestComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-test',
        template: '<h1>{{text}}</h1>',
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], TestComponent);
describe('IxSlideInService', () => {
    let spectator;
    let service;
    let spectatorComponent;
    const createService = (0, jest_1.createServiceFactory)({
        service: ix_slide_in_service_1.IxSlideInService,
        providers: [
            common_1.Location,
            router_1.Router,
        ],
    });
    const createComponent = (0, jest_1.createComponentFactory)({
        component: ix_slide_in_component_1.IxSlideInComponent,
        providers: [
            (0, jest_1.mockProvider)(core_1.ElementRef),
            ix_slide_in_service_1.IxSlideInService,
        ],
        imports: [
            a11y_1.A11yModule,
        ],
    });
    beforeEach(() => {
        spectator = createService();
        service = spectator.service;
        spectatorComponent = createComponent({
            props: { id: 'ix-slide-in-form' },
        });
    });
    describe('slideInService', () => {
        it('the \'open\' method should return instance of IxSlideInRef', () => {
            jest.spyOn(service.slideInComponent, 'openSlideIn');
            const instanceRef = service.open(TestComponent, { wide: true, data: 'Component created dynamically' });
            expect(service.slideInComponent.openSlideIn).toHaveBeenCalledWith(TestComponent, { wide: true, data: 'Component created dynamically' });
            expect(instanceRef).toBeInstanceOf(ix_slide_in_ref_1.IxSlideInRef);
        });
        it('should be call \'closeAll\' method after route navigation', () => __awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(service, 'closeAll');
            service.open(TestComponent);
            yield spectator.inject(router_1.Router).navigate(['/']);
            expect(service.closeAll).toHaveBeenCalled();
        }));
        it('should be call \'closeAll\' method after changing URL using location service', (0, testing_1.fakeAsync)(() => {
            const location = spectator.inject(common_1.Location);
            location.go('/');
            jest.spyOn(service, 'closeAll');
            service.open(TestComponent, { wide: true, data: '' });
            location.back();
            (0, testing_1.tick)(200);
            expect(service.closeAll).toHaveBeenCalled();
        }));
    });
    describe('IxSlideInRef', () => {
        it('should be passed the correct data to the dynamically created component after call \'open\'', () => {
            const slideInRef = service.open(TestComponent, { wide: true, data: 'Component created dynamically' });
            // check injected (SLIDE_IN_DATA)
            const componentInstance = slideInRef.componentInstance;
            expect(componentInstance.text).toBe('Component created dynamically');
        });
        it('should be injected IxSlideInRef to the dynamically created component after calling \'open\',', () => {
            const slideInRef = service.open(TestComponent, { wide: true, data: 'Component created dynamically' });
            // check injected SlideInRef
            expect(slideInRef.componentInstance.slideInRef).toBeInstanceOf(ix_slide_in_ref_1.IxSlideInRef);
        });
        it('after close slide observable \'slideInClosed$\' should emit response', () => {
            jest.spyOn(spectatorComponent.component, 'closeSlideIn');
            let response;
            const data = { value: true };
            const slideInRef = service.open(TestComponent);
            slideInRef.slideInClosed$.subscribe((val) => response = val);
            slideInRef.close(data);
            expect(response).toBe(data);
            expect(spectatorComponent.component.closeSlideIn).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,