a0906f8d2ca56c0146374b7af16d472a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxTableBodyComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const progress_spinner_1 = require("@angular/material/progress-spinner");
const tooltip_1 = require("@angular/material/tooltip");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const ui_search_directive_1 = require("app/directives/ui-search.directive");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const ix_body_cell_directive_1 = require("app/modules/ix-table/directives/ix-body-cell.directive");
const ix_table_cell_directive_1 = require("app/modules/ix-table/directives/ix-table-cell.directive");
const ix_table_details_row_directive_1 = require("app/modules/ix-table/directives/ix-table-details-row.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
const i0 = __importStar(require("@angular/core"));
let IxTableBodyComponent = class IxTableBodyComponent {
    get displayedColumns() {
        var _a;
        return (_a = this.columns) === null || _a === void 0 ? void 0 : _a.filter((column) => !(column === null || column === void 0 ? void 0 : column.hidden));
    }
    get detailsTemplate() {
        var _a;
        return (_a = this.detailsRow) === null || _a === void 0 ? void 0 : _a.templateRef;
    }
    constructor(cdr) {
        this.cdr = cdr;
        this.isLoading = false;
        this.detailsRowIdentifier = 'id';
        this.expanded = (0, core_1.output)();
    }
    ngAfterViewInit() {
        const templatedCellIndexes = this.customCells.toArray().map((cell) => cell.columnIndex);
        const availableIndexes = Array.from({ length: this.columns.length }, (_, idx) => idx)
            .filter((idx) => !templatedCellIndexes.includes(idx));
        this.customCells.forEach((cell) => {
            if (cell.columnIndex === undefined) {
                cell.columnIndex = availableIndexes.shift();
            }
        });
        this.dataProvider.currentPage$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.cdr.detectChanges();
            this.cdr.markForCheck();
        });
    }
    getRowTag(row) {
        var _a, _b;
        return (_b = (_a = this.columns[0]) === null || _a === void 0 ? void 0 : _a.uniqueRowTag(row)) !== null && _b !== void 0 ? _b : '';
    }
    getTemplateByColumnIndex(idx) {
        var _a;
        return (_a = this.customCells.toArray().find((cell) => cell.columnIndex === idx)) === null || _a === void 0 ? void 0 : _a.templateRef;
    }
    onToggle(row) {
        this.dataProvider.expandedRow = this.isExpanded(row) ? null : row;
        this.expanded.emit(this.dataProvider.expandedRow);
    }
    isExpanded(row) {
        var _a, _b;
        return this.detailsRowIdentifier
            && (((_b = (_a = this.dataProvider) === null || _a === void 0 ? void 0 : _a.expandedRow) === null || _b === void 0 ? void 0 : _b[this.detailsRowIdentifier]) === (row === null || row === void 0 ? void 0 : row[this.detailsRowIdentifier]));
    }
    trackRowByIdentity(item) {
        return this.getRowTag(item);
    }
    trackColumnByIdentity(column) {
        return column;
    }
};
exports.IxTableBodyComponent = IxTableBodyComponent;
IxTableBodyComponent.ctorParameters = () => [
    { type: core_1.ChangeDetectorRef }
];
IxTableBodyComponent.propDecorators = {
    columns: [{ type: core_1.Input }],
    dataProvider: [{ type: core_1.Input }],
    isLoading: [{ type: core_1.Input }],
    detailsRowIdentifier: [{ type: core_1.Input }],
    expanded: [{ type: i0.Output, args: ["expanded",] }],
    customCells: [{ type: core_1.ContentChildren, args: [ix_table_cell_directive_1.IxTableCellDirective,] }],
    detailsRow: [{ type: core_1.ContentChild, args: [ix_table_details_row_directive_1.IxTableDetailsRowDirective,] }]
};
exports.IxTableBodyComponent = IxTableBodyComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-table-body, tbody[ix-table-body]',
        template: require("./ix-table-body.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ui_search_directive_1.UiSearchDirective,
            common_1.NgStyle,
            common_1.NgClass,
            common_1.NgTemplateOutlet,
            ix_body_cell_directive_1.IxTableBodyCellDirective,
            button_1.MatIconButton,
            tooltip_1.MatTooltip,
            ix_icon_component_1.IxIconComponent,
            progress_spinner_1.MatProgressSpinner,
            core_2.TranslateModule,
            common_1.AsyncPipe,
            test_directive_1.TestDirective,
        ],
    })
], IxTableBodyComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,