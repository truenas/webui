3d4377d1458262c6fa40a96bfc3629db
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("@angular/common/http");
const jest_1 = require("@ngneat/spectator/jest");
const store_1 = require("@ngrx/store");
const rxjs_1 = require("rxjs");
const auth_service_1 = require("app/services/auth/auth.service");
const upload_service_1 = require("app/services/upload.service");
describe('UploadService', () => {
    let spectator;
    let httpClientMock;
    const job = {};
    const createService = (0, jest_1.createServiceFactory)({
        service: upload_service_1.UploadService,
        providers: [
            (0, jest_1.mockProvider)(http_1.HttpClient),
            (0, jest_1.mockProvider)(store_1.Store, {
                select: jest.fn(() => (0, rxjs_1.of)(job)),
            }),
            (0, jest_1.mockProvider)(auth_service_1.AuthService, {
                authToken$: (0, rxjs_1.of)('token'),
            }),
        ],
    });
    beforeEach(() => {
        spectator = createService();
        httpClientMock = spectator.inject(http_1.HttpClient);
        httpClientMock.request.mockReturnValue((0, rxjs_1.of)(new http_1.HttpResponse({ body: { job_id: 1 } })));
    });
    const options = {
        file: new File([''], 'file.txt'),
        method: 'filesystem.put',
        params: ['somePath', { mode: 493 }],
    };
    describe('upload', () => {
        it('sends a correct HTTP request when upload is called', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, rxjs_1.firstValueFrom)(spectator.service.upload(options));
            const request = httpClientMock.request.mock.calls[0][0];
            expect(request).toBeInstanceOf(http_1.HttpRequest);
            expect(request.method).toBe('POST');
            expect(request.url).toMatch('_upload');
            expect(request.body).toBeInstanceOf(FormData);
            expect(request.body.get('data')).toBe(JSON.stringify({
                method: options.method,
                params: options.params,
            }));
            expect(request.body.get('file')).toEqual(options.file);
        }));
    });
    describe('uploadAsJob', () => {
        it('starts an upload and returns Job from the store', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, rxjs_1.firstValueFrom)(spectator.service.uploadAsJob(options));
            const request = httpClientMock.request.mock.calls[0][0];
            expect(request).toBeInstanceOf(http_1.HttpRequest);
            expect(request.method).toBe('POST');
            expect(request.url).toMatch('_upload');
            expect(request.body).toBeInstanceOf(FormData);
            expect(request.body.get('data')).toBe(JSON.stringify({
                method: options.method,
                params: options.params,
            }));
            expect(request.body.get('file')).toEqual(options.file);
            expect(spectator.inject(store_1.Store).select).toHaveBeenCalled();
            expect(response).toBe(job);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3VwbG9hZC5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSwrQ0FBNkU7QUFDN0UsaURBRWdDO0FBQ2hDLHVDQUFvQztBQUNwQywrQkFBMEM7QUFHMUMsaUVBQTZEO0FBQzdELGdFQUE0RDtBQUU1RCxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixJQUFJLFNBQTBDLENBQUM7SUFDL0MsSUFBSSxjQUFxQyxDQUFDO0lBRTFDLE1BQU0sR0FBRyxHQUFHLEVBQVMsQ0FBQztJQUV0QixNQUFNLGFBQWEsR0FBRyxJQUFBLDJCQUFvQixFQUFDO1FBQ3pDLE9BQU8sRUFBRSw4QkFBYTtRQUN0QixTQUFTLEVBQUU7WUFDVCxJQUFBLG1CQUFZLEVBQUMsaUJBQVUsQ0FBQztZQUN4QixJQUFBLG1CQUFZLEVBQUMsYUFBSyxFQUFFO2dCQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLFNBQUUsRUFBQyxHQUFHLENBQUMsQ0FBQzthQUMvQixDQUFDO1lBQ0YsSUFBQSxtQkFBWSxFQUFDLDBCQUFXLEVBQUU7Z0JBQ3hCLFVBQVUsRUFBRSxJQUFBLFNBQUUsRUFBQyxPQUFPLENBQUM7YUFDeEIsQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFNBQVMsR0FBRyxhQUFhLEVBQUUsQ0FBQztRQUM1QixjQUFjLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxpQkFBVSxDQUFDLENBQUM7UUFDOUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBQSxTQUFFLEVBQUMsSUFBSSxtQkFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sR0FBRztRQUNkLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQztRQUNoQyxNQUFNLEVBQUUsZ0JBQWdDO1FBQ3hDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztLQUNwQyxDQUFDO0lBRUYsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDdEIsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLEdBQVMsRUFBRTtZQUNsRSxNQUFNLElBQUEscUJBQWMsRUFBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRXhELE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQXFDLENBQUM7WUFDNUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxrQkFBVyxDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ25ELE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtnQkFDdEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtRQUMzQixFQUFFLENBQUMsaURBQWlELEVBQUUsR0FBUyxFQUFFO1lBQy9ELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxxQkFBYyxFQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFOUUsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBcUMsQ0FBQztZQUM1RixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLGtCQUFXLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkQsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2dCQUN0QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07YUFDdkIsQ0FBQyxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXZELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGFBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFFMUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvc2VydmljZXMvdXBsb2FkLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtcbiAgY3JlYXRlU2VydmljZUZhY3RvcnksIFNwZWN0YXRvclNlcnZpY2UsIG1vY2tQcm92aWRlciwgU3B5T2JqZWN0LFxufSBmcm9tICdAbmduZWF0L3NwZWN0YXRvci9qZXN0JztcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgZmlyc3RWYWx1ZUZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBcGlKb2JNZXRob2QgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9hcGkvYXBpLWpvYi1kaXJlY3RvcnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IEpvYiB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2pvYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvYXV0aC9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXBsb2FkU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy91cGxvYWQuc2VydmljZSc7XG5cbmRlc2NyaWJlKCdVcGxvYWRTZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgc3BlY3RhdG9yOiBTcGVjdGF0b3JTZXJ2aWNlPFVwbG9hZFNlcnZpY2U+O1xuICBsZXQgaHR0cENsaWVudE1vY2s6IFNweU9iamVjdDxIdHRwQ2xpZW50PjtcblxuICBjb25zdCBqb2IgPSB7fSBhcyBKb2I7XG5cbiAgY29uc3QgY3JlYXRlU2VydmljZSA9IGNyZWF0ZVNlcnZpY2VGYWN0b3J5KHtcbiAgICBzZXJ2aWNlOiBVcGxvYWRTZXJ2aWNlLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgbW9ja1Byb3ZpZGVyKEh0dHBDbGllbnQpLFxuICAgICAgbW9ja1Byb3ZpZGVyKFN0b3JlLCB7XG4gICAgICAgIHNlbGVjdDogamVzdC5mbigoKSA9PiBvZihqb2IpKSxcbiAgICAgIH0pLFxuICAgICAgbW9ja1Byb3ZpZGVyKEF1dGhTZXJ2aWNlLCB7XG4gICAgICAgIGF1dGhUb2tlbiQ6IG9mKCd0b2tlbicpLFxuICAgICAgfSksXG4gICAgXSxcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3BlY3RhdG9yID0gY3JlYXRlU2VydmljZSgpO1xuICAgIGh0dHBDbGllbnRNb2NrID0gc3BlY3RhdG9yLmluamVjdChIdHRwQ2xpZW50KTtcbiAgICBodHRwQ2xpZW50TW9jay5yZXF1ZXN0Lm1vY2tSZXR1cm5WYWx1ZShvZihuZXcgSHR0cFJlc3BvbnNlKHsgYm9keTogeyBqb2JfaWQ6IDEgfSB9KSkpO1xuICB9KTtcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGZpbGU6IG5ldyBGaWxlKFsnJ10sICdmaWxlLnR4dCcpLFxuICAgIG1ldGhvZDogJ2ZpbGVzeXN0ZW0ucHV0JyBhcyBBcGlKb2JNZXRob2QsXG4gICAgcGFyYW1zOiBbJ3NvbWVQYXRoJywgeyBtb2RlOiA0OTMgfV0sXG4gIH07XG5cbiAgZGVzY3JpYmUoJ3VwbG9hZCcsICgpID0+IHtcbiAgICBpdCgnc2VuZHMgYSBjb3JyZWN0IEhUVFAgcmVxdWVzdCB3aGVuIHVwbG9hZCBpcyBjYWxsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBmaXJzdFZhbHVlRnJvbShzcGVjdGF0b3Iuc2VydmljZS51cGxvYWQob3B0aW9ucykpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0ID0gaHR0cENsaWVudE1vY2sucmVxdWVzdC5tb2NrLmNhbGxzWzBdWzBdIGFzIHVua25vd24gYXMgSHR0cFJlcXVlc3Q8Rm9ybURhdGE+O1xuICAgICAgZXhwZWN0KHJlcXVlc3QpLnRvQmVJbnN0YW5jZU9mKEh0dHBSZXF1ZXN0KTtcbiAgICAgIGV4cGVjdChyZXF1ZXN0Lm1ldGhvZCkudG9CZSgnUE9TVCcpO1xuICAgICAgZXhwZWN0KHJlcXVlc3QudXJsKS50b01hdGNoKCdfdXBsb2FkJyk7XG4gICAgICBleHBlY3QocmVxdWVzdC5ib2R5KS50b0JlSW5zdGFuY2VPZihGb3JtRGF0YSk7XG4gICAgICBleHBlY3QocmVxdWVzdC5ib2R5LmdldCgnZGF0YScpKS50b0JlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgcGFyYW1zOiBvcHRpb25zLnBhcmFtcyxcbiAgICAgIH0pKTtcbiAgICAgIGV4cGVjdChyZXF1ZXN0LmJvZHkuZ2V0KCdmaWxlJykpLnRvRXF1YWwob3B0aW9ucy5maWxlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3VwbG9hZEFzSm9iJywgKCkgPT4ge1xuICAgIGl0KCdzdGFydHMgYW4gdXBsb2FkIGFuZCByZXR1cm5zIEpvYiBmcm9tIHRoZSBzdG9yZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmlyc3RWYWx1ZUZyb20oc3BlY3RhdG9yLnNlcnZpY2UudXBsb2FkQXNKb2Iob3B0aW9ucykpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0ID0gaHR0cENsaWVudE1vY2sucmVxdWVzdC5tb2NrLmNhbGxzWzBdWzBdIGFzIHVua25vd24gYXMgSHR0cFJlcXVlc3Q8Rm9ybURhdGE+O1xuICAgICAgZXhwZWN0KHJlcXVlc3QpLnRvQmVJbnN0YW5jZU9mKEh0dHBSZXF1ZXN0KTtcbiAgICAgIGV4cGVjdChyZXF1ZXN0Lm1ldGhvZCkudG9CZSgnUE9TVCcpO1xuICAgICAgZXhwZWN0KHJlcXVlc3QudXJsKS50b01hdGNoKCdfdXBsb2FkJyk7XG4gICAgICBleHBlY3QocmVxdWVzdC5ib2R5KS50b0JlSW5zdGFuY2VPZihGb3JtRGF0YSk7XG4gICAgICBleHBlY3QocmVxdWVzdC5ib2R5LmdldCgnZGF0YScpKS50b0JlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgcGFyYW1zOiBvcHRpb25zLnBhcmFtcyxcbiAgICAgIH0pKTtcbiAgICAgIGV4cGVjdChyZXF1ZXN0LmJvZHkuZ2V0KCdmaWxlJykpLnRvRXF1YWwob3B0aW9ucy5maWxlKTtcblxuICAgICAgZXhwZWN0KHNwZWN0YXRvci5pbmplY3QoU3RvcmUpLnNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UpLnRvQmUoam9iKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==