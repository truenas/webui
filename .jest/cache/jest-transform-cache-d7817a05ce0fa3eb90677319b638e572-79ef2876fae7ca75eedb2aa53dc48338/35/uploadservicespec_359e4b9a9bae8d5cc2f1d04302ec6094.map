{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/upload.service.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/upload.service.spec.ts"],"sourcesContent":["import { HttpClient, HttpRequest, HttpResponse } from '@angular/common/http';\nimport {\n  createServiceFactory, SpectatorService, mockProvider, SpyObject,\n} from '@ngneat/spectator/jest';\nimport { Store } from '@ngrx/store';\nimport { firstValueFrom, of } from 'rxjs';\nimport { ApiJobMethod } from 'app/interfaces/api/api-job-directory.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { UploadService } from 'app/services/upload.service';\n\ndescribe('UploadService', () => {\n  let spectator: SpectatorService<UploadService>;\n  let httpClientMock: SpyObject<HttpClient>;\n\n  const job = {} as Job;\n\n  const createService = createServiceFactory({\n    service: UploadService,\n    providers: [\n      mockProvider(HttpClient),\n      mockProvider(Store, {\n        select: jest.fn(() => of(job)),\n      }),\n      mockProvider(AuthService, {\n        authToken$: of('token'),\n      }),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createService();\n    httpClientMock = spectator.inject(HttpClient);\n    httpClientMock.request.mockReturnValue(of(new HttpResponse({ body: { job_id: 1 } })));\n  });\n\n  const options = {\n    file: new File([''], 'file.txt'),\n    method: 'filesystem.put' as ApiJobMethod,\n    params: ['somePath', { mode: 493 }],\n  };\n\n  describe('upload', () => {\n    it('sends a correct HTTP request when upload is called', async () => {\n      await firstValueFrom(spectator.service.upload(options));\n\n      const request = httpClientMock.request.mock.calls[0][0] as unknown as HttpRequest<FormData>;\n      expect(request).toBeInstanceOf(HttpRequest);\n      expect(request.method).toBe('POST');\n      expect(request.url).toMatch('_upload');\n      expect(request.body).toBeInstanceOf(FormData);\n      expect(request.body.get('data')).toBe(JSON.stringify({\n        method: options.method,\n        params: options.params,\n      }));\n      expect(request.body.get('file')).toEqual(options.file);\n    });\n  });\n\n  describe('uploadAsJob', () => {\n    it('starts an upload and returns Job from the store', async () => {\n      const response = await firstValueFrom(spectator.service.uploadAsJob(options));\n\n      const request = httpClientMock.request.mock.calls[0][0] as unknown as HttpRequest<FormData>;\n      expect(request).toBeInstanceOf(HttpRequest);\n      expect(request.method).toBe('POST');\n      expect(request.url).toMatch('_upload');\n      expect(request.body).toBeInstanceOf(FormData);\n      expect(request.body.get('data')).toBe(JSON.stringify({\n        method: options.method,\n        params: options.params,\n      }));\n      expect(request.body.get('file')).toEqual(options.file);\n\n      expect(spectator.inject(Store).select).toHaveBeenCalled();\n\n      expect(response).toBe(job);\n    });\n  });\n});\n"],"version":3}