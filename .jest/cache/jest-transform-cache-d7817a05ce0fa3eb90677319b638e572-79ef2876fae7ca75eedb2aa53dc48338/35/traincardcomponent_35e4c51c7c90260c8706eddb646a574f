09a2d7fcfec58776b83798c58b77b9b9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrainCardComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const progress_spinner_1 = require("@angular/material/progress-spinner");
const tooltip_1 = require("@angular/material/tooltip");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const role_enum_1 = require("app/enums/role.enum");
const system_update_enum_1 = require("app/enums/system-update.enum");
const filter_async_operator_1 = require("app/helpers/operators/filter-async.operator");
const update_1 = require("app/helptext/system/update");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
const train_service_1 = require("app/pages/system/update/services/train.service");
const update_service_1 = require("app/pages/system/update/services/update.service");
const auth_service_1 = require("app/services/auth/auth.service");
const system_general_service_1 = require("app/services/system-general.service");
let TrainCardComponent = class TrainCardComponent {
    constructor(sysGenService, dialogService, translate, fb, authService, trainService, updateService, cdr) {
        this.sysGenService = sysGenService;
        this.dialogService = dialogService;
        this.translate = translate;
        this.fb = fb;
        this.authService = authService;
        this.trainService = trainService;
        this.updateService = updateService;
        this.cdr = cdr;
        this.isUpdateRunning = false;
        this.checkable = false;
        this.trains = [];
        this.form = this.fb.group({
            auto_check: [false],
            train: ['', forms_1.Validators.required],
        });
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.clickForInformationLink = update_1.helptextSystemUpdate.clickForInformationLink;
        this.SystemUpdateStatus = system_update_enum_1.SystemUpdateStatus;
        this.sysGenService.updateRunning.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isUpdating) => {
            this.isUpdateRunning = isUpdating === 'true';
            this.cdr.markForCheck();
        });
    }
    get trains$() {
        return (0, rxjs_1.of)(this.trains);
    }
    ngOnInit() {
        (0, rxjs_1.forkJoin)([
            this.trainService.getAutoDownload(),
            this.trainService.getTrains(),
        ]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ([isAutoDownloadOn, trains]) => {
                var _a;
                this.form.controls.auto_check.patchValue(isAutoDownloadOn);
                this.checkable = true;
                this.cdr.markForCheck();
                this.trainService.fullTrainList$.next(trains.trains);
                this.trainService.trainValue$.next(trains.selected || '');
                this.trainService.selectedTrain$.next(trains.selected);
                if (isAutoDownloadOn) {
                    this.trainService.check();
                }
                this.trains = Object.entries(trains.trains).map(([name, train]) => ({
                    label: train.description,
                    value: name,
                }));
                if (this.trains.length > 0) {
                    this.singleDescription = (_a = Object.values(trains.trains)[0]) === null || _a === void 0 ? void 0 : _a.description;
                }
                let currentTrainDescription = '';
                if (trains.trains[trains.current]) {
                    if (trains.trains[trains.current].description.toLowerCase().includes('[nightly]')) {
                        currentTrainDescription = '[nightly]';
                    }
                    else if (trains.trains[trains.current].description.toLowerCase().includes('[release]')) {
                        currentTrainDescription = '[release]';
                    }
                    else if (trains.trains[trains.current].description.toLowerCase().includes('[prerelease]')) {
                        currentTrainDescription = '[prerelease]';
                    }
                    else {
                        currentTrainDescription = trains.trains[trains.selected].description.toLowerCase();
                    }
                }
                this.trainService.currentTrainDescription$.next(currentTrainDescription);
                // To remember train description if user switches away and then switches back
                this.trainService.trainDescriptionOnPageLoad$.next(currentTrainDescription);
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.dialogService.warn(error.trace.class, this.translate.instant('TrueNAS was unable to reach update servers.'));
            },
        });
        this.trainService.trainValue$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((trainValue) => {
            this.form.controls.train.patchValue(trainValue);
        });
        this.form.controls.train.valueChanges.pipe((0, rxjs_1.pairwise)(), (0, until_destroy_1.untilDestroyed)(this)).subscribe(([prevTrain, newTrain]) => {
            this.trainService.onTrainChanged(newTrain, prevTrain);
        });
        this.form.controls.auto_check.valueChanges.pipe((0, filter_async_operator_1.filterAsync)(() => this.authService.hasRole(role_enum_1.Role.FullAdmin)), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.trainService.toggleAutoCheck(this.form.controls.auto_check.value);
        });
    }
};
exports.TrainCardComponent = TrainCardComponent;
TrainCardComponent.ctorParameters = () => [
    { type: system_general_service_1.SystemGeneralService },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: forms_1.FormBuilder },
    { type: auth_service_1.AuthService },
    { type: train_service_1.TrainService },
    { type: update_service_1.UpdateService },
    { type: core_1.ChangeDetectorRef }
];
exports.TrainCardComponent = TrainCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-train-card',
        template: require("./train-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            card_1.MatCard,
            progress_spinner_1.MatProgressSpinner,
            forms_1.ReactiveFormsModule,
            requires_roles_directive_1.RequiresRolesDirective,
            ix_checkbox_component_1.IxCheckboxComponent,
            ix_select_component_1.IxSelectComponent,
            button_1.MatMiniFabButton,
            tooltip_1.MatTooltip,
            test_directive_1.TestDirective,
            ix_icon_component_1.IxIconComponent,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], TrainCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,