e85e601857f5a75898705d8a805b1dbf
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jest-preset-angular/setup-jest");
const a11y_1 = require("@angular/cdk/a11y");
const common_1 = require("@angular/common");
const http_1 = require("@angular/common/http");
const badge_1 = require("@angular/material/badge");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const checkbox_1 = require("@angular/material/checkbox");
const core_1 = require("@angular/material/core");
const datepicker_1 = require("@angular/material/datepicker");
const dialog_1 = require("@angular/material/dialog");
const expansion_1 = require("@angular/material/expansion");
const list_1 = require("@angular/material/list");
const menu_1 = require("@angular/material/menu");
const progress_bar_1 = require("@angular/material/progress-bar");
const progress_spinner_1 = require("@angular/material/progress-spinner");
const select_1 = require("@angular/material/select");
const slide_toggle_1 = require("@angular/material/slide-toggle");
const sort_1 = require("@angular/material/sort");
const toolbar_1 = require("@angular/material/toolbar");
const tooltip_1 = require("@angular/material/tooltip");
const router_1 = require("@angular/router");
const spectator_1 = require("@ngneat/spectator");
const jest_1 = require("@ngneat/spectator/jest");
const effects_1 = require("@ngrx/effects");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const jest_fail_on_console_1 = __importDefault(require("jest-fail-on-console"));
const ng_mocks_1 = require("ng-mocks");
const ngx_translate_messageformat_compiler_1 = require("ngx-translate-messageformat-compiler");
const icu_missing_translation_handler_1 = require("app/core/classes/icu-missing-translation-handler");
const empty_auth_service_1 = require("app/core/testing/utils/empty-auth.service");
const empty_ws_service_1 = require("app/core/testing/utils/empty-ws.service");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const ui_search_directive_1 = require("app/directives/ui-search.directive");
const window_helper_1 = require("app/helpers/window.helper");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_button_group_component_1 = require("app/modules/forms/ix-forms/components/ix-button-group/ix-button-group.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_checkbox_list_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox-list/ix-checkbox-list.component");
const ix_chips_component_1 = require("app/modules/forms/ix-forms/components/ix-chips/ix-chips.component");
const ix_combobox_component_1 = require("app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.component");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
const ix_explorer_component_1 = require("app/modules/forms/ix-forms/components/ix-explorer/ix-explorer.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_file_input_component_1 = require("app/modules/forms/ix-forms/components/ix-file-input/ix-file-input.component");
const ix_icon_group_component_1 = require("app/modules/forms/ix-forms/components/ix-icon-group/ix-icon-group.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_label_component_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.component");
const ix_list_item_component_1 = require("app/modules/forms/ix-forms/components/ix-list/ix-list-item/ix-list-item.component");
const ix_list_component_1 = require("app/modules/forms/ix-forms/components/ix-list/ix-list.component");
const ix_radio_group_component_1 = require("app/modules/forms/ix-forms/components/ix-radio-group/ix-radio-group.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_modal_header2_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header2/ix-modal-header2.component");
const ix_slide_toggle_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component");
const ix_textarea_component_1 = require("app/modules/forms/ix-forms/components/ix-textarea/ix-textarea.component");
const ix_warning_component_1 = require("app/modules/forms/ix-forms/components/ix-warning/ix-warning.component");
const ix_icon_testing_module_1 = require("app/modules/ix-icon/ix-icon-testing.module");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const ix_table_component_1 = require("app/modules/ix-table/components/ix-table/ix-table.component");
const ix_table_body_component_1 = require("app/modules/ix-table/components/ix-table-body/ix-table-body.component");
const ix_table_head_component_1 = require("app/modules/ix-table/components/ix-table-head/ix-table-head.component");
const ix_table_pager_component_1 = require("app/modules/ix-table/components/ix-table-pager/ix-table-pager.component");
const ix_table_empty_directive_1 = require("app/modules/ix-table/directives/ix-table-empty.directive");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const with_loading_state_directive_1 = require("app/modules/loader/directives/with-loading-state/with-loading-state.directive");
const snackbar_module_1 = require("app/modules/snackbar/snackbar.module");
const test_override_directive_1 = require("app/modules/test-id/test-override/test-override.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
const auth_service_1 = require("app/services/auth/auth.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
(0, jest_fail_on_console_1.default)();
jest.setTimeout(30 * 1000);
(0, spectator_1.defineGlobalsInjections)({
    imports: [
        http_1.HttpClientModule,
        checkbox_1.MatCheckboxModule,
        slide_toggle_1.MatSlideToggleModule,
        menu_1.MatMenuModule,
        ix_icon_component_1.IxIconComponent,
        ix_icon_testing_module_1.IxIconTestingModule,
        datepicker_1.MatDatepickerModule,
        core_1.MatNativeDateModule,
        select_1.MatSelectModule,
        dialog_1.MatDialogModule,
        sort_1.MatSortModule,
        progress_bar_1.MatProgressBarModule,
        tooltip_1.MatTooltipModule,
        card_1.MatCardModule,
        list_1.MatListModule,
        toolbar_1.MatToolbarModule,
        badge_1.MatBadgeModule,
        expansion_1.MatExpansionModule,
        progress_spinner_1.MatProgressSpinnerModule,
        button_1.MatButtonModule,
        ix_input_component_1.IxInputComponent,
        ix_checkbox_component_1.IxCheckboxComponent,
        ix_radio_group_component_1.IxRadioGroupComponent,
        ix_select_component_1.IxSelectComponent,
        ix_fieldset_component_1.IxFieldsetComponent,
        ix_modal_header_component_1.IxModalHeaderComponent,
        ix_modal_header2_component_1.IxModalHeader2Component,
        ix_button_group_component_1.IxButtonGroupComponent,
        ix_explorer_component_1.IxExplorerComponent,
        ix_file_input_component_1.IxFileInputComponent,
        ix_textarea_component_1.IxTextareaComponent,
        ix_slide_toggle_component_1.IxSlideToggleComponent,
        ix_icon_group_component_1.IxIconGroupComponent,
        ix_chips_component_1.IxChipsComponent,
        ix_combobox_component_1.IxComboboxComponent,
        ix_list_component_1.IxListComponent,
        ix_list_item_component_1.IxListItemComponent,
        ix_errors_component_1.IxErrorsComponent,
        ix_label_component_1.IxLabelComponent,
        ix_warning_component_1.IxWarningComponent,
        ix_checkbox_list_component_1.IxCheckboxListComponent,
        form_actions_component_1.FormActionsComponent,
        router_1.RouterModule.forRoot([]),
        snackbar_module_1.SnackbarModule,
        ui_search_directive_1.UiSearchDirective,
        requires_roles_directive_1.RequiresRolesDirective,
        ix_table_component_1.IxTableComponent,
        ix_table_pager_component_1.IxTablePagerComponent,
        ix_table_empty_directive_1.IxTableEmptyDirective,
        ix_table_head_component_1.IxTableHeadComponent,
        ix_table_body_component_1.IxTableBodyComponent,
        test_directive_1.TestDirective,
        test_override_directive_1.TestOverrideDirective,
        with_loading_state_directive_1.WithLoadingStateDirective,
        core_2.TranslateModule.forRoot({
            defaultLanguage: 'en',
            loader: {
                provide: core_2.TranslateLoader,
                useClass: core_2.TranslateFakeLoader,
            },
            compiler: {
                provide: core_2.TranslateCompiler,
                useClass: ngx_translate_messageformat_compiler_1.TranslateMessageFormatCompiler,
            },
            missingTranslationHandler: {
                provide: core_2.MissingTranslationHandler,
                useClass: icu_missing_translation_handler_1.IcuMissingTranslationHandler,
            },
            useDefaultLang: false,
        }),
        store_1.StoreModule.forRoot({}),
        effects_1.EffectsModule.forRoot([]),
    ],
    providers: [
        (0, ng_mocks_1.MockProvider)(a11y_1.HighContrastModeDetector),
        {
            provide: common_1.APP_BASE_HREF,
            useValue: '',
        },
        {
            provide: core_1.MATERIAL_SANITY_CHECKS,
            useValue: false,
        },
        {
            provide: window_helper_1.WINDOW,
            // eslint-disable-next-line no-restricted-globals
            useValue: window,
        },
        (0, jest_1.mockProvider)(app_loader_service_1.AppLoaderService, {
            withLoader: () => (source$) => source$,
        }),
        (0, jest_1.mockProvider)(error_handler_service_1.ErrorHandlerService, {
            catchError: () => (source$) => source$,
        }),
        {
            provide: auth_service_1.AuthService,
            useClass: empty_auth_service_1.EmptyAuthService,
        },
        {
            provide: ws_service_1.WebSocketService,
            useClass: empty_ws_service_1.EmptyWebsocketService,
        },
    ],
});
beforeEach(() => {
    // eslint-disable-next-line no-restricted-globals
    Object.defineProperty(window, 'matchMedia', {
        writable: true,
        value: jest.fn().mockImplementation((query) => ({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn(),
        })),
    });
    // eslint-disable-next-line no-restricted-globals
    Object.defineProperty(window, 'ResizeObserver', {
        writable: true,
        value: jest.fn().mockImplementation(() => ({
            disconnect: jest.fn(),
            observe: jest.fn(),
            unobserve: jest.fn(),
        })),
    });
});
// https://github.com/jsdom/jsdom/issues/3002
Range.prototype.getBoundingClientRect = () => ({
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0,
});
Range.prototype.getClientRects = () => ({
    item: () => null,
    length: 0,
    [Symbol.iterator]: jest.fn(),
});
// eslint-disable-next-line no-restricted-globals
Object.defineProperty(window.URL, 'createObjectURL', { value: () => '' });
Object.defineProperty(global, 'performance', {
    writable: true,
    value: {
        mark: () => { },
        measure: () => { },
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,