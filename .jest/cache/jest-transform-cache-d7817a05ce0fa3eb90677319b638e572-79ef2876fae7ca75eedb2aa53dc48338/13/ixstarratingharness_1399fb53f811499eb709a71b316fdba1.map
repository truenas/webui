{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-star-rating/ix-star-rating.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAE8B;AAC9B,8DAAoE;AACpE,sGAAiG;AAEjG,kFAA8E;AAC9E,yEAAoE;AAMpE,MAAa,mBAAoB,SAAQ,0BAAgB;IAAzD;;QAQE,eAAU,GAAG,IAAI,CAAC,aAAa,CAAC,0BAAgB,CAAC,CAAC;QAClD,iBAAY,GAAG,4BAAY,CAAC;IA0B9B,CAAC;IAhCC,MAAM,CAAC,IAAI,CAAC,OAA4B;QACtC,OAAO,IAAI,0BAAgB,CAAC,mBAAmB,EAAE,OAAO,CAAC;aACtD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,0BAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1H,CAAC;IAKK,YAAY;;YAChB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,iCAAc,CAAC,EAAE,CAAC;YAC9D,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,QAAQ;;YACZ,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,+BAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC;YAC3F,OAAO,aAAa,CAAC,MAAM,CAAC;QAC9B,CAAC;KAAA;IAEK,QAAQ,CAAC,KAAa;;YAC1B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxC,OAAO,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACpC,CAAC;KAAA;IAEK,UAAU;;YACd,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,UAAU,GAAG,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAExF,OAAO,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;KAAA;;AAlCH,kDAmCC;AAlCiB,gCAAY,GAAG,gBAAgB,AAAnB,CAAoB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-star-rating/ix-star-rating.harness.ts"],"sourcesContent":["import {\n  BaseHarnessFilters, ComponentHarness, HarnessPredicate, parallel,\n} from '@angular/cdk/testing';\nimport { MatButtonHarness } from '@angular/material/button/testing';\nimport { IxLabelHarness } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\nimport { IxIconHarness } from 'app/modules/ix-icon/ix-icon.harness';\n\nexport interface IxStarRatingFilters extends BaseHarnessFilters {\n  label?: string;\n}\n\nexport class IxStarRatingHarness extends ComponentHarness implements IxFormControlHarness {\n  static readonly hostSelector = 'ix-star-rating';\n\n  static with(options: IxStarRatingFilters): HarnessPredicate<IxStarRatingHarness> {\n    return new HarnessPredicate(IxStarRatingHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getButtons = this.locatorForAll(MatButtonHarness);\n  getErrorText = getErrorText;\n\n  async getLabelText(): Promise<string> {\n    const label = await this.locatorForOptional(IxLabelHarness)();\n    if (!label) {\n      return '';\n    }\n    return label.getLabel();\n  }\n\n  async getValue(): Promise<number> {\n    const selectedIcons = await this.locatorForAll(IxIconHarness.with({ name: 'mdi-star' }))();\n    return selectedIcons.length;\n  }\n\n  async setValue(value: number): Promise<void> {\n    const buttons = await this.getButtons();\n    return buttons[value - 1].click();\n  }\n\n  async isDisabled(): Promise<boolean> {\n    const buttons = await this.getButtons();\n    const inputState = await parallel(() => buttons.map((control) => control.isDisabled()));\n\n    return inputState.every(Boolean);\n  }\n}\n"],"version":3}