14b6c5f69a40f9c41e9b660ad3cd7d99
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxStarRatingHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/button/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
const ix_icon_harness_1 = require("app/modules/ix-icon/ix-icon.harness");
class IxStarRatingHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getButtons = this.locatorForAll(testing_2.MatButtonHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxStarRatingHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const selectedIcons = yield this.locatorForAll(ix_icon_harness_1.IxIconHarness.with({ name: 'mdi-star' }))();
            return selectedIcons.length;
        });
    }
    setValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const buttons = yield this.getButtons();
            return buttons[value - 1].click();
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            const buttons = yield this.getButtons();
            const inputState = yield (0, testing_1.parallel)(() => buttons.map((control) => control.isDisabled()));
            return inputState.every(Boolean);
        });
    }
}
exports.IxStarRatingHarness = IxStarRatingHarness;
IxStarRatingHarness.hostSelector = 'ix-star-rating';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zdGFyLXJhdGluZy9peC1zdGFyLXJhdGluZy5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUU4QjtBQUM5Qiw4REFBb0U7QUFDcEUsc0dBQWlHO0FBRWpHLGtGQUE4RTtBQUM5RSx5RUFBb0U7QUFNcEUsTUFBYSxtQkFBb0IsU0FBUSwwQkFBZ0I7SUFBekQ7O1FBUUUsZUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsMEJBQWdCLENBQUMsQ0FBQztRQUNsRCxpQkFBWSxHQUFHLDRCQUFZLENBQUM7SUEwQjlCLENBQUM7SUFoQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUE0QjtRQUN0QyxPQUFPLElBQUksMEJBQWdCLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDO2FBQ3RELFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLDBCQUFnQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMxSCxDQUFDO0lBS0ssWUFBWTs7WUFDaEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUNBQWMsQ0FBQyxFQUFFLENBQUM7WUFDOUQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNYLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQztZQUNELE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFCLENBQUM7S0FBQTtJQUVLLFFBQVE7O1lBQ1osTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLCtCQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNGLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUM5QixDQUFDO0tBQUE7SUFFSyxRQUFRLENBQUMsS0FBYTs7WUFDMUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDeEMsT0FBTyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BDLENBQUM7S0FBQTtJQUVLLFVBQVU7O1lBQ2QsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDeEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFBLGtCQUFRLEVBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUV4RixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsQ0FBQztLQUFBOztBQWxDSCxrREFtQ0M7QUFsQ2lCLGdDQUFZLEdBQUcsZ0JBQWdCLEFBQW5CLENBQW9CIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc3Rhci1yYXRpbmcvaXgtc3Rhci1yYXRpbmcuaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYXNlSGFybmVzc0ZpbHRlcnMsIENvbXBvbmVudEhhcm5lc3MsIEhhcm5lc3NQcmVkaWNhdGUsIHBhcmFsbGVsLFxufSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZyc7XG5pbXBvcnQgeyBNYXRCdXR0b25IYXJuZXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYnV0dG9uL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSXhMYWJlbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWxhYmVsL2l4LWxhYmVsLmhhcm5lc3MnO1xuaW1wb3J0IHsgSXhGb3JtQ29udHJvbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9pbnRlcmZhY2VzL2l4LWZvcm0tY29udHJvbC1oYXJuZXNzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBnZXRFcnJvclRleHQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy91dGlscy9oYXJuZXNzLnV0aWxzJztcbmltcG9ydCB7IEl4SWNvbkhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2l4LWljb24uaGFybmVzcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXhTdGFyUmF0aW5nRmlsdGVycyBleHRlbmRzIEJhc2VIYXJuZXNzRmlsdGVycyB7XG4gIGxhYmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhTdGFyUmF0aW5nSGFybmVzcyBleHRlbmRzIENvbXBvbmVudEhhcm5lc3MgaW1wbGVtZW50cyBJeEZvcm1Db250cm9sSGFybmVzcyB7XG4gIHN0YXRpYyByZWFkb25seSBob3N0U2VsZWN0b3IgPSAnaXgtc3Rhci1yYXRpbmcnO1xuXG4gIHN0YXRpYyB3aXRoKG9wdGlvbnM6IEl4U3RhclJhdGluZ0ZpbHRlcnMpOiBIYXJuZXNzUHJlZGljYXRlPEl4U3RhclJhdGluZ0hhcm5lc3M+IHtcbiAgICByZXR1cm4gbmV3IEhhcm5lc3NQcmVkaWNhdGUoSXhTdGFyUmF0aW5nSGFybmVzcywgb3B0aW9ucylcbiAgICAgIC5hZGRPcHRpb24oJ2xhYmVsJywgb3B0aW9ucy5sYWJlbCwgKGhhcm5lc3MsIGxhYmVsKSA9PiBIYXJuZXNzUHJlZGljYXRlLnN0cmluZ01hdGNoZXMoaGFybmVzcy5nZXRMYWJlbFRleHQoKSwgbGFiZWwpKTtcbiAgfVxuXG4gIGdldEJ1dHRvbnMgPSB0aGlzLmxvY2F0b3JGb3JBbGwoTWF0QnV0dG9uSGFybmVzcyk7XG4gIGdldEVycm9yVGV4dCA9IGdldEVycm9yVGV4dDtcblxuICBhc3luYyBnZXRMYWJlbFRleHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBsYWJlbCA9IGF3YWl0IHRoaXMubG9jYXRvckZvck9wdGlvbmFsKEl4TGFiZWxIYXJuZXNzKSgpO1xuICAgIGlmICghbGFiZWwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGxhYmVsLmdldExhYmVsKCk7XG4gIH1cblxuICBhc3luYyBnZXRWYWx1ZSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHNlbGVjdGVkSWNvbnMgPSBhd2FpdCB0aGlzLmxvY2F0b3JGb3JBbGwoSXhJY29uSGFybmVzcy53aXRoKHsgbmFtZTogJ21kaS1zdGFyJyB9KSkoKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRJY29ucy5sZW5ndGg7XG4gIH1cblxuICBhc3luYyBzZXRWYWx1ZSh2YWx1ZTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgYnV0dG9ucyA9IGF3YWl0IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgIHJldHVybiBidXR0b25zW3ZhbHVlIC0gMV0uY2xpY2soKTtcbiAgfVxuXG4gIGFzeW5jIGlzRGlzYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgYnV0dG9ucyA9IGF3YWl0IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgIGNvbnN0IGlucHV0U3RhdGUgPSBhd2FpdCBwYXJhbGxlbCgoKSA9PiBidXR0b25zLm1hcCgoY29udHJvbCkgPT4gY29udHJvbC5pc0Rpc2FibGVkKCkpKTtcblxuICAgIHJldHVybiBpbnB1dFN0YXRlLmV2ZXJ5KEJvb2xlYW4pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=