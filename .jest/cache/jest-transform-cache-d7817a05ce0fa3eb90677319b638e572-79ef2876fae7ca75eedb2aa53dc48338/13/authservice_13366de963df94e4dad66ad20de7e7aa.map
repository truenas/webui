{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/auth/auth.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/auth/auth.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { UUID } from 'angular2-uuid';\nimport { LocalStorage } from 'ngx-webstorage';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  filter,\n  map,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  switchMap,\n  take,\n  tap,\n  timer,\n} from 'rxjs';\nimport { AccountAttribute } from 'app/enums/account-attribute.enum';\nimport { IncomingApiMessageType } from 'app/enums/api-message-type.enum';\nimport { LoginResult } from 'app/enums/login-result.enum';\nimport { Role } from 'app/enums/role.enum';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport {\n  ApiCallMethod,\n  ApiCallParams,\n  ApiCallResponse,\n} from 'app/interfaces/api/api-call-directory.interface';\nimport { IncomingWebSocketMessage, ResultMessage } from 'app/interfaces/api-message.interface';\nimport { LoggedInUser } from 'app/interfaces/ds-cache.interface';\nimport { GlobalTwoFactorConfig } from 'app/interfaces/two-factor-config.interface';\nimport { TokenLastUsedService } from 'app/services/token-last-used.service';\nimport { WebSocketConnectionService } from 'app/services/websocket-connection.service';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { AppState } from 'app/store';\nimport { adminUiInitialized } from 'app/store/admin-panel/admin.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  @LocalStorage() private token: string;\n  protected loggedInUser$ = new BehaviorSubject<LoggedInUser>(null);\n\n  /**\n   * This is 10 seconds less than 300 seconds which is the default life\n   * time of a token generated with auth.generate_token. The 10 seconds\n   * difference is to allow for delays in request send/receive\n   */\n  private readonly tokenRegenerationTimeMillis = 290 * 1000;\n\n  private latestTokenGenerated$ = new ReplaySubject<string>(1);\n  get authToken$(): Observable<string> {\n    return this.latestTokenGenerated$.asObservable().pipe(filter((token) => !!token));\n  }\n\n  get hasAuthToken(): boolean {\n    return this.token && this.token !== 'null';\n  }\n\n  private isLoggedIn$ = new BehaviorSubject<boolean>(false);\n\n  private generateTokenSubscription: Subscription;\n\n  readonly isAuthenticated$ = combineLatest([\n    this.wsManager.isConnected$,\n    this.isLoggedIn$.asObservable(),\n  ]).pipe(\n    switchMap(([isConnected, isLoggedIn]) => {\n      return of(isConnected && isLoggedIn);\n    }),\n  );\n\n  readonly user$ = this.loggedInUser$.asObservable();\n\n  /**\n   * Special case that only matches root and admin users.\n   */\n  readonly isSysAdmin$ = this.user$.pipe(\n    filter(Boolean),\n    map((user) => user.account_attributes.includes(AccountAttribute.SysAdmin)),\n  );\n\n  readonly userTwoFactorConfig$ = this.user$.pipe(\n    filter(Boolean),\n    map((user) => user.two_factor_config),\n  );\n\n  private cachedGlobalTwoFactorConfig: GlobalTwoFactorConfig;\n\n  constructor(\n    private wsManager: WebSocketConnectionService,\n    private store$: Store<AppState>,\n    private ws: WebSocketService,\n    private tokenLastUsedService: TokenLastUsedService,\n    @Inject(WINDOW) private window: Window,\n  ) {\n    this.setupAuthenticationUpdate();\n    this.setupWsConnectionUpdate();\n    this.setupTokenUpdate();\n  }\n\n  getGlobalTwoFactorConfig(): Observable<GlobalTwoFactorConfig> {\n    if (this.cachedGlobalTwoFactorConfig) {\n      return of(this.cachedGlobalTwoFactorConfig);\n    }\n\n    return this.ws.call('auth.twofactor.config').pipe(\n      tap((config) => {\n        this.cachedGlobalTwoFactorConfig = config;\n      }),\n    );\n  }\n\n  globalTwoFactorConfigUpdated(): void {\n    this.cachedGlobalTwoFactorConfig = null;\n  }\n\n  /**\n   * This method exists so removing authToken is deliberate instead of allowing\n   * use of the lastGeneratedToken$ and setting token to null/undefined by mistake\n   */\n  clearAuthToken(): void {\n    this.window.sessionStorage.removeItem('loginBannerDismissed');\n    this.tokenLastUsedService.clearTokenLastUsed();\n    this.latestTokenGenerated$.next(null);\n    this.latestTokenGenerated$.complete();\n    this.latestTokenGenerated$ = new ReplaySubject<string>(1);\n    this.setupTokenUpdate();\n  }\n\n  login(username: string, password: string, otp: string = null): Observable<LoginResult> {\n    return this.makeRequest('auth.login', otp ? [username, password, otp] : [username, password]).pipe(\n      switchMap((wasLoggedIn) => {\n        return this.processLoginResult(wasLoggedIn).pipe(\n          switchMap((loginResult) => {\n            if (loginResult === LoginResult.Success) {\n              return this.authToken$.pipe(\n                map(() => LoginResult.Success),\n              );\n            }\n\n            return of(loginResult);\n          }),\n        );\n      }),\n    );\n  }\n\n  loginWithToken(): Observable<LoginResult> {\n    if (!this.token) {\n      return of(LoginResult.NoToken);\n    }\n\n    performance.mark('Login Start');\n    return this.makeRequest('auth.login_with_token', [this.token]).pipe(\n      switchMap((wasLoggedIn) => {\n        return this.processLoginResult(wasLoggedIn);\n      }),\n    );\n  }\n\n  /**\n   * Checks whether user has any of the supplied roles.\n   * Does not ensure that user was loaded.\n   *\n   * Use mockAuth if you need to set user role in tests.\n   */\n  hasRole(roles: Role[] | Role): Observable<boolean> {\n    return this.user$.pipe(\n      filter(Boolean),\n      map((user) => {\n        const currentRoles = user?.privilege?.roles?.$set || [];\n        const neededRoles = Array.isArray(roles) ? roles : [roles];\n        if (!neededRoles?.length || !currentRoles.length) {\n          return false;\n        }\n\n        if (currentRoles.includes(Role.FullAdmin)) {\n          return true;\n        }\n\n        return neededRoles.some((role) => currentRoles.includes(role));\n      }),\n    );\n  }\n\n  logout(): Observable<void> {\n    return this.makeRequest('auth.logout').pipe(\n      tap(() => {\n        this.clearAuthToken();\n        this.ws.clearSubscriptions();\n        this.isLoggedIn$.next(false);\n      }),\n    );\n  }\n\n  refreshUser(): Observable<void> {\n    this.loggedInUser$.next(null);\n    return this.getLoggedInUserInformation().pipe(\n      map(() => null),\n    );\n  }\n\n  private processLoginResult(wasLoggedIn: boolean): Observable<LoginResult> {\n    return of(wasLoggedIn).pipe(\n      switchMap((loggedIn) => {\n        if (!loggedIn) {\n          this.isLoggedIn$.next(false);\n          return of(LoginResult.IncorrectDetails);\n        }\n\n        // Check if user has access to webui.\n        return this.getLoggedInUserInformation().pipe(\n          switchMap((user) => {\n            if (!user?.privilege?.webui_access) {\n              this.isLoggedIn$.next(false);\n              return of(LoginResult.NoAccess);\n            }\n\n            this.isLoggedIn$.next(true);\n            this.window.sessionStorage.setItem('loginBannerDismissed', 'true');\n            return this.authToken$.pipe(\n              take(1),\n              map(() => LoginResult.Success),\n            );\n          }),\n        );\n      }),\n    );\n  }\n\n  // TODO: See if we can move this somewhere, like in wsManager.\n  // TODO: Rewrite tests not to rely on mocking this private method.\n  makeRequest<M extends ApiCallMethod>(method: M, params?: ApiCallParams<M>): Observable<ApiCallResponse<M>> {\n    const uuid = UUID.UUID();\n    const payload = {\n      method,\n      params,\n      id: uuid,\n      msg: IncomingApiMessageType.Method,\n    };\n\n    const requestTrigger$ = new Observable((subscriber) => {\n      performance.mark(`${method} - ${uuid} - start`);\n      this.wsManager.send(payload);\n      subscriber.next();\n    }).pipe(take(1));\n\n    const uuidFilteredResponse$ = this.getFilteredWebSocketResponse<boolean>(uuid);\n\n    return combineLatest([\n      requestTrigger$,\n      uuidFilteredResponse$,\n    ]).pipe(\n      take(1),\n      tap(() => {\n        performance.mark(`${method} - ${uuid} - end`);\n        performance.measure(method, `${method} - ${uuid} - start`, `${method} - ${uuid} - end`);\n      }),\n      map(([, response]) => response),\n    );\n  }\n\n  private getFilteredWebSocketResponse<T>(uuid: string): Observable<T> {\n    return this.wsManager.websocket$.pipe(\n      filter((data: IncomingWebSocketMessage) => data.msg === IncomingApiMessageType.Result && data.id === uuid),\n      map((data: ResultMessage<T>) => data.result),\n      take(1),\n    );\n  }\n\n  private setupPeriodicTokenGeneration(): void {\n    if (!this.generateTokenSubscription || this.generateTokenSubscription.closed) {\n      this.generateTokenSubscription = timer(0, this.tokenRegenerationTimeMillis).pipe(\n        switchMap(() => this.isAuthenticated$.pipe(take(1))),\n        filter((isAuthenticated) => isAuthenticated),\n        switchMap(() => this.makeRequest('auth.generate_token')),\n        tap((token) => this.latestTokenGenerated$.next(token)),\n      ).subscribe();\n    }\n  }\n\n  private getLoggedInUserInformation(): Observable<LoggedInUser> {\n    return this.ws.call('auth.me').pipe(\n      tap((loggedInUser) => {\n        this.loggedInUser$.next(loggedInUser);\n      }),\n    );\n  }\n\n  private setupAuthenticationUpdate(): void {\n    this.isAuthenticated$.subscribe({\n      next: (isAuthenticated) => {\n        if (isAuthenticated) {\n          this.store$.dispatch(adminUiInitialized());\n          this.setupPeriodicTokenGeneration();\n        } else if (this.generateTokenSubscription) {\n          this.latestTokenGenerated$?.complete();\n          this.latestTokenGenerated$ = new ReplaySubject<string>(1);\n          this.setupTokenUpdate();\n          this.generateTokenSubscription.unsubscribe();\n          this.generateTokenSubscription = null;\n        }\n      },\n    });\n  }\n\n  private setupWsConnectionUpdate(): void {\n    this.wsManager.isConnected$.pipe(filter((isConnected) => !isConnected)).subscribe(() => {\n      this.isLoggedIn$.next(false);\n    });\n  }\n\n  private setupTokenUpdate(): void {\n    this.latestTokenGenerated$.subscribe((token) => {\n      this.token = token;\n    });\n  }\n}\n"],"version":3}