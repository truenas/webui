38557bcea5dda8b1e6d333a0a6add7da
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetCapacitySettingsComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const bytes_constant_1 = require("app/constants/bytes.constant");
const role_enum_1 = require("app/enums/role.enum");
const with_inherit_enum_1 = require("app/enums/with-inherit.enum");
const dataset_form_1 = require("app/helptext/storage/volumes/datasets/dataset-form");
const dataset_interface_1 = require("app/interfaces/dataset.interface");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ix_formatter_service_1 = require("app/modules/forms/ix-forms/services/ix-formatter.service");
const ix_validators_service_1 = require("app/modules/forms/ix-forms/services/ix-validators.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
const ws_service_1 = require("app/services/ws.service");
let DatasetCapacitySettingsComponent = class DatasetCapacitySettingsComponent {
    constructor(ws, formBuilder, formatter, cdr, errorHandler, snackbarService, translate, validators, slideInRef, dataset) {
        this.ws = ws;
        this.formBuilder = formBuilder;
        this.formatter = formatter;
        this.cdr = cdr;
        this.errorHandler = errorHandler;
        this.snackbarService = snackbarService;
        this.translate = translate;
        this.validators = validators;
        this.slideInRef = slideInRef;
        this.dataset = dataset;
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.defaultQuotaWarning = 80;
        this.defaultQuotaCritical = 95;
        this.form = this.formBuilder.group({
            refquota: [null, this.validators.withMessage(forms_1.Validators.min(bytes_constant_1.GiB), this.translate.instant(dataset_form_1.helptextDatasetForm.dataset_form_quota_too_small))],
            refquota_warning: [this.defaultQuotaWarning, [
                    forms_1.Validators.min(0),
                    forms_1.Validators.max(100),
                ]],
            refquota_warning_inherit: [false],
            refquota_critical: [this.defaultQuotaCritical, [
                    forms_1.Validators.min(0),
                    forms_1.Validators.max(100),
                ]],
            refquota_critical_inherit: [false],
            quota: [null, this.validators.withMessage(forms_1.Validators.min(bytes_constant_1.GiB), this.translate.instant(dataset_form_1.helptextDatasetForm.dataset_form_quota_too_small))],
            quota_warning: [this.defaultQuotaWarning, [
                    forms_1.Validators.min(0),
                    forms_1.Validators.max(100),
                ]],
            quota_warning_inherit: [false],
            quota_critical: [this.defaultQuotaCritical, [
                    forms_1.Validators.min(0),
                    forms_1.Validators.max(100),
                ]],
            quota_critical_inherit: [false],
            refreservation: [null],
            reservation: [null],
        });
        this.isLoading = false;
        this.helptext = dataset_form_1.helptextDatasetForm;
        this.inheritRelations = {
            refquota_warning_inherit: 'refquota_warning',
            refquota_critical_inherit: 'refquota_critical',
            quota_warning_inherit: 'quota_warning',
            quota_critical_inherit: 'quota_critical',
        };
        this.setFormRelations();
    }
    ngOnInit() {
        if (this.dataset) {
            this.setDatasetForEdit();
        }
    }
    setFormRelations() {
        this.form.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((values) => {
            Object.entries(this.inheritRelations).forEach(([inheritField, valueField]) => {
                if (values[inheritField]) {
                    this.form.controls[valueField].disable({ emitEvent: false });
                    this.form.controls[valueField].removeValidators(forms_1.Validators.required);
                }
                else {
                    this.form.controls[valueField].enable({ emitEvent: false });
                    this.form.controls[valueField].addValidators(forms_1.Validators.required);
                }
            });
        });
    }
    get isRoot() {
        return (0, dataset_utils_1.isRootDataset)(this.dataset);
    }
    setDatasetForEdit() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.oldValues = {
            refquota: this.dataset.refquota.parsed,
            refquota_warning: (_b = (_a = this.dataset.refquota_warning) === null || _a === void 0 ? void 0 : _a.parsed) !== null && _b !== void 0 ? _b : this.defaultQuotaWarning,
            refquota_warning_inherit: (0, dataset_utils_1.isPropertyInherited)(this.dataset.refquota_warning),
            refquota_critical: (_d = (_c = this.dataset.refquota_critical) === null || _c === void 0 ? void 0 : _c.parsed) !== null && _d !== void 0 ? _d : this.defaultQuotaCritical,
            refquota_critical_inherit: (0, dataset_utils_1.isPropertyInherited)(this.dataset.refquota_critical),
            quota: this.dataset.quota.parsed,
            quota_warning: (_f = (_e = this.dataset.quota_warning) === null || _e === void 0 ? void 0 : _e.parsed) !== null && _f !== void 0 ? _f : this.defaultQuotaWarning,
            quota_warning_inherit: (0, dataset_utils_1.isPropertyInherited)(this.dataset.quota_warning),
            quota_critical: (_h = (_g = this.dataset.quota_critical) === null || _g === void 0 ? void 0 : _g.parsed) !== null && _h !== void 0 ? _h : this.defaultQuotaCritical,
            quota_critical_inherit: (0, dataset_utils_1.isPropertyInherited)(this.dataset.quota_critical),
            refreservation: this.dataset.refreservation.parsed,
            reservation: this.dataset.reservation.parsed,
        };
        this.form.patchValue(this.oldValues);
        this.cdr.markForCheck();
    }
    onSubmit() {
        this.isLoading = true;
        this.cdr.markForCheck();
        const payload = this.getChangedFormValues();
        this.ws.call('pool.dataset.update', [this.dataset.id, payload])
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.isLoading = false;
                this.snackbarService.success(this.translate.instant('Dataset settings updated.'));
                this.slideInRef.close();
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.errorHandler.handleWsFormError(error, this.form);
                this.isLoading = false;
                this.cdr.markForCheck();
            },
        });
    }
    getChangedFormValues() {
        const newValues = this.form.getRawValue();
        const oldValues = this.oldValues;
        const changedValues = {};
        ['refquota', 'quota', 'refreservation', 'reservation'].forEach((field) => {
            if (newValues[field] !== oldValues[field]) {
                changedValues[field] = newValues[field] || 0;
            }
        });
        ['refquota_warning', 'refquota_critical', 'quota_warning', 'quota_critical'].forEach((field) => {
            if (newValues[field] !== oldValues[field]) {
                changedValues[field] = newValues[field];
            }
        });
        Object.entries(this.inheritRelations).forEach(([untypedInheritField, valueField]) => {
            const inheritField = untypedInheritField;
            if (newValues[inheritField] === oldValues[inheritField]) {
                if (newValues[valueField] !== oldValues[valueField]) {
                    // Inherit checkbox wasn't changed, but value was.
                    changedValues[valueField] = newValues[valueField];
                }
                return;
            }
            // Inherit checkbox was changed.
            changedValues[valueField] = newValues[inheritField] ? with_inherit_enum_1.inherit : newValues[valueField];
        });
        return changedValues;
    }
};
exports.DatasetCapacitySettingsComponent = DatasetCapacitySettingsComponent;
DatasetCapacitySettingsComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: forms_1.FormBuilder },
    { type: ix_formatter_service_1.IxFormatterService },
    { type: core_1.ChangeDetectorRef },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: snackbar_service_1.SnackbarService },
    { type: core_2.TranslateService },
    { type: ix_validators_service_1.IxValidatorsService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: dataset_interface_1.DatasetDetails, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.DatasetCapacitySettingsComponent = DatasetCapacitySettingsComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-dataset-capacity-settings',
        template: require("./dataset-capacity-settings.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], DatasetCapacitySettingsComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,