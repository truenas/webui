82ec56c3a0dd784417e246b45d75e3d3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchOthersFgValidator = matchOthersFgValidator;
exports.doesNotEqualFgValidator = doesNotEqualFgValidator;
const lodash_es_1 = require("lodash-es");
function matchOthersFgValidator(controlName, comparateControlNames, errMsg) {
    return function matchOthersFgValidate(fg) {
        if (!(fg === null || fg === void 0 ? void 0 : fg.get(controlName))) {
            return null;
        }
        const errFields = [];
        const subjectControl = fg.get(controlName);
        for (const name of comparateControlNames) {
            const otherControl = fg.get(name);
            if (!otherControl) {
                throw new Error('matchOtherValidator(): other control is not found in the group');
            }
            if (otherControl.value !== subjectControl.value) {
                errFields.push(name);
            }
        }
        if (errFields.length) {
            fg.get(controlName).setErrors({
                matchOther: errMsg ? { message: errMsg } : true,
            });
            return {
                [controlName]: { matchOther: errMsg ? { message: errMsg } : true },
            };
        }
        let prevErrors = Object.assign({}, fg.get(controlName).errors);
        delete prevErrors.matchOther;
        if ((0, lodash_es_1.isEmpty)(prevErrors)) {
            prevErrors = null;
        }
        fg.get(controlName).setErrors(prevErrors);
        return null;
    };
}
function doesNotEqualFgValidator(controlName, comparateControlNames, errMsg) {
    return (fg) => {
        if (!(fg === null || fg === void 0 ? void 0 : fg.get(controlName))) {
            return null;
        }
        const errFields = [];
        const subjectControl = fg.get(controlName);
        for (const name of comparateControlNames) {
            const otherControl = fg.get(name);
            if (!otherControl) {
                throw new Error('doesNotEqual(): other control is not found in the group');
            }
            if (subjectControl.value && otherControl.value && otherControl.value === subjectControl.value) {
                errFields.push(name);
            }
        }
        if (errFields.length) {
            fg.get(controlName).setErrors({
                matchesOther: errMsg ? { message: errMsg } : true,
            });
            return {
                [controlName]: { matchesOther: errMsg ? { message: errMsg } : true },
            };
        }
        let prevErrors = Object.assign({}, fg.get(controlName).errors);
        delete prevErrors.matchesOther;
        if ((0, lodash_es_1.isEmpty)(prevErrors)) {
            prevErrors = null;
        }
        fg.get(controlName).setErrors(prevErrors);
        return null;
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdmFsaWRhdG9ycy9wYXNzd29yZC12YWxpZGF0aW9uL3Bhc3N3b3JkLXZhbGlkYXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7QUFHQSx3REF1Q0M7QUFFRCwwREF1Q0M7QUFsRkQseUNBQW9DO0FBRXBDLFNBQWdCLHNCQUFzQixDQUNwQyxXQUFtQixFQUNuQixxQkFBK0IsRUFDL0IsTUFBZTtJQUVmLE9BQU8sU0FBUyxxQkFBcUIsQ0FBQyxFQUFzQjtRQUMxRCxJQUFJLENBQUMsQ0FBQSxFQUFFLGFBQUYsRUFBRSx1QkFBRixFQUFFLENBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBLEVBQUUsQ0FBQztZQUMxQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxNQUFNLFNBQVMsR0FBYSxFQUFFLENBQUM7UUFDL0IsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQXVCLENBQUM7UUFDakUsS0FBSyxNQUFNLElBQUksSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUF1QixDQUFDO1lBQ3hELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDbEIsTUFBTSxJQUFJLEtBQUssQ0FDYixnRUFBZ0UsQ0FDakUsQ0FBQztZQUNKLENBQUM7WUFDRCxJQUFJLFlBQVksQ0FBQyxLQUFLLEtBQUssY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNoRCxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7UUFDSCxDQUFDO1FBQ0QsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDckIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQzVCLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FB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b2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdmFsaWRhdG9ycy9wYXNzd29yZC12YWxpZGF0aW9uL3Bhc3N3b3JkLXZhbGlkYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUdyb3VwLCBVbnR5cGVkRm9ybUNvbnRyb2wsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaE90aGVyc0ZnVmFsaWRhdG9yKFxuICBjb250cm9sTmFtZTogc3RyaW5nLFxuICBjb21wYXJhdGVDb250cm9sTmFtZXM6IHN0cmluZ1tdLFxuICBlcnJNc2c/OiBzdHJpbmcsXG4pOiBWYWxpZGF0b3JGbiB7XG4gIHJldHVybiBmdW5jdGlvbiBtYXRjaE90aGVyc0ZnVmFsaWRhdGUoZmc6IEZvcm1Hcm91cDx1bmtub3duPikge1xuICAgIGlmICghZmc/LmdldChjb250cm9sTmFtZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGVyckZpZWxkczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBzdWJqZWN0Q29udHJvbCA9IGZnLmdldChjb250cm9sTmFtZSkgYXMgVW50eXBlZEZvcm1Db250cm9sO1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBjb21wYXJhdGVDb250cm9sTmFtZXMpIHtcbiAgICAgIGNvbnN0IG90aGVyQ29udHJvbCA9IGZnLmdldChuYW1lKSBhcyBVbnR5cGVkRm9ybUNvbnRyb2w7XG4gICAgICBpZiAoIW90aGVyQ29udHJvbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ21hdGNoT3RoZXJWYWxpZGF0b3IoKTogb3RoZXIgY29udHJvbCBpcyBub3QgZm91bmQgaW4gdGhlIGdyb3VwJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChvdGhlckNvbnRyb2wudmFsdWUgIT09IHN1YmplY3RDb250cm9sLnZhbHVlKSB7XG4gICAgICAgIGVyckZpZWxkcy5wdXNoKG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyRmllbGRzLmxlbmd0aCkge1xuICAgICAgZmcuZ2V0KGNvbnRyb2xOYW1lKS5zZXRFcnJvcnMoe1xuICAgICAgICBtYXRjaE90aGVyOiBlcnJNc2cgPyB7IG1lc3NhZ2U6IGVyck1zZyB9IDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2NvbnRyb2xOYW1lXTogeyBtYXRjaE90aGVyOiBlcnJNc2cgPyB7IG1lc3NhZ2U6IGVyck1zZyB9IDogdHJ1ZSB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHByZXZFcnJvcnMgPSB7IC4uLmZnLmdldChjb250cm9sTmFtZSkuZXJyb3JzIH07XG4gICAgZGVsZXRlIHByZXZFcnJvcnMubWF0Y2hPdGhlcjtcbiAgICBpZiAoaXNFbXB0eShwcmV2RXJyb3JzKSkge1xuICAgICAgcHJldkVycm9ycyA9IG51bGw7XG4gICAgfVxuICAgIGZnLmdldChjb250cm9sTmFtZSkuc2V0RXJyb3JzKHByZXZFcnJvcnMpO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9lc05vdEVxdWFsRmdWYWxpZGF0b3IoXG4gIGNvbnRyb2xOYW1lOiBzdHJpbmcsXG4gIGNvbXBhcmF0ZUNvbnRyb2xOYW1lczogc3RyaW5nW10sXG4gIGVyck1zZz86IHN0cmluZyxcbik6IFZhbGlkYXRvckZuIHtcbiAgcmV0dXJuIChmZzogRm9ybUdyb3VwPHVua25vd24+KSA9PiB7XG4gICAgaWYgKCFmZz8uZ2V0KGNvbnRyb2xOYW1lKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyRmllbGRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHN1YmplY3RDb250cm9sID0gZmcuZ2V0KGNvbnRyb2xOYW1lKSBhcyBVbnR5cGVkRm9ybUNvbnRyb2w7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGNvbXBhcmF0ZUNvbnRyb2xOYW1lcykge1xuICAgICAgY29uc3Qgb3RoZXJDb250cm9sID0gZmcuZ2V0KG5hbWUpIGFzIFVudHlwZWRGb3JtQ29udHJvbDtcbiAgICAgIGlmICghb3RoZXJDb250cm9sKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnZG9lc05vdEVxdWFsKCk6IG90aGVyIGNvbnRyb2wgaXMgbm90IGZvdW5kIGluIHRoZSBncm91cCcsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoc3ViamVjdENvbnRyb2wudmFsdWUgJiYgb3RoZXJDb250cm9sLnZhbHVlICYmIG90aGVyQ29udHJvbC52YWx1ZSA9PT0gc3ViamVjdENvbnRyb2wudmFsdWUpIHtcbiAgICAgICAgZXJyRmllbGRzLnB1c2gobmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlcnJGaWVsZHMubGVuZ3RoKSB7XG4gICAgICBmZy5nZXQoY29udHJvbE5hbWUpLnNldEVycm9ycyh7XG4gICAgICAgIG1hdGNoZXNPdGhlcjogZXJyTXNnID8geyBtZXNzYWdlOiBlcnJNc2cgfSA6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjb250cm9sTmFtZV06IHsgbWF0Y2hlc090aGVyOiBlcnJNc2cgPyB7IG1lc3NhZ2U6IGVyck1zZyB9IDogdHJ1ZSB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHByZXZFcnJvcnMgPSB7IC4uLmZnLmdldChjb250cm9sTmFtZSkuZXJyb3JzIH07XG4gICAgZGVsZXRlIHByZXZFcnJvcnMubWF0Y2hlc090aGVyO1xuICAgIGlmIChpc0VtcHR5KHByZXZFcnJvcnMpKSB7XG4gICAgICBwcmV2RXJyb3JzID0gbnVsbDtcbiAgICB9XG4gICAgZmcuZ2V0KGNvbnRyb2xOYW1lKS5zZXRFcnJvcnMocHJldkVycm9ycyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG4iXSwidmVyc2lvbiI6M30=