{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/validators/password-validation/password-validation.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/validators/password-validation/password-validation.ts"],"sourcesContent":["import { FormGroup, UntypedFormControl, ValidatorFn } from '@angular/forms';\nimport { isEmpty } from 'lodash-es';\n\nexport function matchOthersFgValidator(\n  controlName: string,\n  comparateControlNames: string[],\n  errMsg?: string,\n): ValidatorFn {\n  return function matchOthersFgValidate(fg: FormGroup<unknown>) {\n    if (!fg?.get(controlName)) {\n      return null;\n    }\n\n    const errFields: string[] = [];\n    const subjectControl = fg.get(controlName) as UntypedFormControl;\n    for (const name of comparateControlNames) {\n      const otherControl = fg.get(name) as UntypedFormControl;\n      if (!otherControl) {\n        throw new Error(\n          'matchOtherValidator(): other control is not found in the group',\n        );\n      }\n      if (otherControl.value !== subjectControl.value) {\n        errFields.push(name);\n      }\n    }\n    if (errFields.length) {\n      fg.get(controlName).setErrors({\n        matchOther: errMsg ? { message: errMsg } : true,\n      });\n      return {\n        [controlName]: { matchOther: errMsg ? { message: errMsg } : true },\n      };\n    }\n    let prevErrors = { ...fg.get(controlName).errors };\n    delete prevErrors.matchOther;\n    if (isEmpty(prevErrors)) {\n      prevErrors = null;\n    }\n    fg.get(controlName).setErrors(prevErrors);\n    return null;\n  };\n}\n\nexport function doesNotEqualFgValidator(\n  controlName: string,\n  comparateControlNames: string[],\n  errMsg?: string,\n): ValidatorFn {\n  return (fg: FormGroup<unknown>) => {\n    if (!fg?.get(controlName)) {\n      return null;\n    }\n\n    const errFields: string[] = [];\n    const subjectControl = fg.get(controlName) as UntypedFormControl;\n    for (const name of comparateControlNames) {\n      const otherControl = fg.get(name) as UntypedFormControl;\n      if (!otherControl) {\n        throw new Error(\n          'doesNotEqual(): other control is not found in the group',\n        );\n      }\n      if (subjectControl.value && otherControl.value && otherControl.value === subjectControl.value) {\n        errFields.push(name);\n      }\n    }\n    if (errFields.length) {\n      fg.get(controlName).setErrors({\n        matchesOther: errMsg ? { message: errMsg } : true,\n      });\n      return {\n        [controlName]: { matchesOther: errMsg ? { message: errMsg } : true },\n      };\n    }\n    let prevErrors = { ...fg.get(controlName).errors };\n    delete prevErrors.matchesOther;\n    if (isEmpty(prevErrors)) {\n      prevErrors = null;\n    }\n    fg.get(controlName).setErrors(prevErrors);\n    return null;\n  };\n}\n"],"version":3}