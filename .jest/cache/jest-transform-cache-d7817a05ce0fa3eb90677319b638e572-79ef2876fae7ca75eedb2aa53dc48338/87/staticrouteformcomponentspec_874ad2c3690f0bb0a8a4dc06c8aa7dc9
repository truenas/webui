e4c6d6e18b7c70bd8cb8cbe8ee7c022e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const static_route_form_component_1 = require("app/pages/network/components/static-route-form/static-route-form.component");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const ws_service_1 = require("app/services/ws.service");
describe('StaticRouteFormComponent', () => {
    let spectator;
    let loader;
    let ws;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: static_route_form_component_1.StaticRouteFormComponent,
        imports: [
            forms_1.ReactiveFormsModule,
        ],
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('staticroute.create'),
                (0, mock_websocket_utils_1.mockCall)('staticroute.update'),
            ]),
            (0, jest_1.mockProvider)(ix_slide_in_service_1.IxSlideInService),
            (0, jest_1.mockProvider)(form_error_handler_service_1.FormErrorHandlerService),
            (0, jest_1.mockProvider)(ix_slide_in_ref_1.IxSlideInRef),
            (0, mock_auth_utils_1.mockAuth)(),
            { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: undefined },
        ],
    });
    describe('adding a static route', () => {
        beforeEach(() => {
            spectator = createComponent();
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
            ws = spectator.inject(ws_service_1.WebSocketService);
        });
        it('sends a create payload to websocket and closes modal when save is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                Destination: '10.24.12.13/16',
                Gateway: '10.24.12.1',
                Description: 'My route',
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(ws.call).toHaveBeenCalledWith('staticroute.create', [{
                    destination: '10.24.12.13/16',
                    gateway: '10.24.12.1',
                    description: 'My route',
                }]);
        }));
    });
    describe('editing a group', () => {
        beforeEach(() => {
            spectator = createComponent({
                providers: [
                    {
                        provide: ix_slide_in_token_1.SLIDE_IN_DATA,
                        useValue: {
                            id: 13,
                            description: 'Existing route',
                            destination: '20.24.12.13/16',
                            gateway: '20.24.12.1',
                        },
                    },
                ],
            });
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
            ws = spectator.inject(ws_service_1.WebSocketService);
        });
        it('shows current group values when form is being edited', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            const values = yield form.getValues();
            expect(values).toEqual({
                Destination: '20.24.12.13/16',
                Gateway: '20.24.12.1',
                Description: 'Existing route',
            });
        }));
        it('sends an update payload to websocket and closes modal when save is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                Destination: '15.24.12.13/16',
                Gateway: '15.24.12.1',
                Description: 'Updated route',
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(ws.call).toHaveBeenCalledWith('staticroute.update', [
                13,
                {
                    destination: '15.24.12.13/16',
                    gateway: '15.24.12.1',
                    description: 'Updated route',
                },
            ]);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,