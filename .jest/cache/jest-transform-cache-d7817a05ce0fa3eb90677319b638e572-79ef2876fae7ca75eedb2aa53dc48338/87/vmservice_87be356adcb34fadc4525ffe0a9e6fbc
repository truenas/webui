3e601893b5b492daa5aea109eb8ebf79
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VmService = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const vm_enum_1 = require("app/enums/vm.enum");
const websocket_error_name_enum_1 = require("app/enums/websocket-error-name.enum");
const window_helper_1 = require("app/helpers/window.helper");
const vm_list_1 = require("app/helptext/vm/vm-list");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const stop_vm_dialog_component_1 = require("app/pages/vm/vm-list/stop-vm-dialog/stop-vm-dialog.component");
const download_service_1 = require("app/services/download.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let VmService = class VmService {
    constructor(ws, loader, dialogService, translate, errorHandler, download, matDialog, window) {
        this.ws = ws;
        this.loader = loader;
        this.dialogService = dialogService;
        this.translate = translate;
        this.errorHandler = errorHandler;
        this.download = download;
        this.matDialog = matDialog;
        this.window = window;
        this.hasVirtualizationSupport$ = new rxjs_1.BehaviorSubject(true);
        this.refreshVmList$ = new rxjs_1.Subject();
        this.checkMemory$ = new rxjs_1.Subject();
        this.wsMethods = {
            start: 'vm.start',
            restart: 'vm.restart',
            poweroff: 'vm.poweroff',
        };
        this.getVirtualizationDetails().pipe((0, rxjs_1.take)(1)).subscribe((details) => {
            this.hasVirtualizationSupport$.next(details.supported);
        });
    }
    getVirtualizationDetails() {
        return this.ws.call('vm.virtualization_details');
    }
    getAvailableMemory() {
        return this.ws.call('vm.get_available_memory').pipe((0, rxjs_1.repeat)({ delay: () => this.checkMemory$ }));
    }
    checkMemory() {
        this.checkMemory$.next();
    }
    doStart(vm, overcommit = false) {
        if (overcommit) {
            this.doAction(vm, this.wsMethods.start, [vm.id, { overcommit: true }]);
        }
        else {
            this.doAction(vm, this.wsMethods.start);
        }
    }
    doStop(vm) {
        this.matDialog.open(stop_vm_dialog_component_1.StopVmDialogComponent, { data: vm })
            .afterClosed()
            .pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.take)(1))
            .subscribe((data) => {
            this.doStopJob(vm, data.forceAfterTimeout);
        });
    }
    doRestart(vm) {
        return this.ws.startJob(this.wsMethods.restart, [vm.id]).pipe(this.loader.withLoader());
    }
    doPowerOff(vm) {
        this.doAction(vm, this.wsMethods.poweroff, [vm.id]);
    }
    downloadLogs(vm) {
        const filename = `${vm.id}_${vm.name}.log`;
        return this.ws.call('core.download', ['vm.log_file_download', [vm.id], filename]).pipe((0, rxjs_1.switchMap)(([, url]) => this.download.downloadUrl(url, filename, 'text/plain')));
    }
    openDisplay(vm) {
        this.ws.call('vm.get_display_devices', [vm.id])
            .pipe(this.loader.withLoader(), (0, rxjs_1.take)(1))
            .subscribe({
            next: () => this.openDisplayWebUri(vm.id),
            error: (error) => this.errorHandler.showErrorModal(error),
        });
    }
    toggleVmStatus(vm) {
        if (vm.status.state === vm_enum_1.VmState.Running) {
            this.doStop(vm);
        }
        else {
            this.doStart(vm);
        }
    }
    toggleVmAutostart(vm) {
        this.ws.call('vm.update', [vm.id, { autostart: !vm.autostart }])
            .pipe(this.loader.withLoader(), (0, rxjs_1.take)(1))
            .subscribe({
            next: () => {
                this.checkMemory();
                this.refreshVmList$.next();
            },
            error: (error) => {
                this.refreshVmList$.next();
                this.errorHandler.showErrorModal(error);
            },
        });
    }
    doAction(vm, method, params = [vm.id]) {
        this.ws.call(method, params)
            .pipe(this.loader.withLoader(), (0, rxjs_1.take)(1))
            .subscribe({
            next: () => {
                this.checkMemory();
                this.refreshVmList$.next();
            },
            error: (error) => {
                if (method === this.wsMethods.start
                    && error.errname === websocket_error_name_enum_1.WebSocketErrorName.NoMemory) {
                    this.onMemoryError(vm);
                    return;
                }
                this.refreshVmList$.next();
                this.errorHandler.showErrorModal(error);
            },
        });
    }
    openDisplayWebUri(vmId) {
        const displayOptions = {
            protocol: this.window.location.protocol.replace(':', '').toUpperCase(),
        };
        const requestParams = [
            vmId,
            this.window.location.host,
            displayOptions,
        ];
        this.ws.call('vm.get_display_web_uri', requestParams)
            .pipe(this.loader.withLoader(), (0, rxjs_1.take)(1))
            .subscribe({
            next: (webUri) => {
                if (webUri.error) {
                    this.dialogService.warn(this.translate.instant('Error'), webUri.error);
                    return;
                }
                this.window.open(webUri.uri, '_blank');
            },
            error: (error) => {
                this.errorHandler.showErrorModal(error);
            },
        });
    }
    doStopJob(vm, forceAfterTimeout) {
        this.dialogService.jobDialog(this.ws.job('vm.stop', [vm.id, {
                force: false,
                force_after_timeout: forceAfterTimeout,
            }]), {
            title: this.translate.instant('Stopping {rowName}', { rowName: vm.name }),
        })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.checkMemory();
            this.refreshVmList$.next();
            this.dialogService.info(this.translate.instant('Finished'), this.translate.instant(vm_list_1.helptextVmList.stop_dialog.successMessage, { vmName: vm.name }), true);
        });
    }
    onMemoryError(vm) {
        this.dialogService.confirm({
            title: vm_list_1.helptextVmList.memory_dialog.title,
            message: vm_list_1.helptextVmList.memory_dialog.message,
            confirmationCheckboxText: vm_list_1.helptextVmList.memory_dialog.secondaryCheckboxMessage,
            buttonText: vm_list_1.helptextVmList.memory_dialog.buttonMessage,
        })
            .pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.take)(1))
            .subscribe(() => {
            this.doStart(vm, true);
        });
    }
};
exports.VmService = VmService;
VmService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: app_loader_service_1.AppLoaderService },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: download_service_1.DownloadService },
    { type: dialog_1.MatDialog },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.VmService = VmService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], VmService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,