6a6b232e894cbbb96be6a8a48c8cf486
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateDatasetDialogComponent = void 0;
const scrolling_1 = require("@angular/cdk/scrolling");
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const progress_bar_1 = require("@angular/material/progress-bar");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const name_validator_constant_1 = require("app/constants/name-validator.constant");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const dataset_enum_1 = require("app/enums/dataset.enum");
const role_enum_1 = require("app/enums/role.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const forbidden_values_validation_1 = require("app/modules/forms/ix-forms/validators/forbidden-values-validation/forbidden-values-validation");
const test_directive_1 = require("app/modules/test-id/test.directive");
const name_length_validation_1 = require("app/pages/datasets/components/dataset-form/utils/name-length-validation");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let CreateDatasetDialogComponent = class CreateDatasetDialogComponent {
    constructor(fb, cdr, ws, dialog, errorHandler, dialogRef, data) {
        this.fb = fb;
        this.cdr = cdr;
        this.ws = ws;
        this.dialog = dialog;
        this.errorHandler = errorHandler;
        this.dialogRef = dialogRef;
        this.data = data;
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.isLoading$ = new rxjs_1.BehaviorSubject(false);
        this.form = this.fb.group({
            name: ['', [
                    forms_1.Validators.required,
                    forms_1.Validators.pattern(name_validator_constant_1.nameValidatorRegex),
                ]],
        });
    }
    ngOnInit() {
        this.loadParentDataset();
        this.isLoading$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isLoading) => {
            if (isLoading) {
                this.form.controls.name.disable();
            }
            else {
                this.form.controls.name.enable();
            }
        });
    }
    createDataset() {
        this.isLoading$.next(true);
        this.ws.call('pool.dataset.create', [Object.assign(Object.assign({}, this.data.dataset), { name: `${this.parent.name}/${this.form.value.name}` })])
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (dataset) => {
                this.isLoading$.next(false);
                this.dialogRef.close(dataset);
            },
            error: (error) => {
                this.isLoading$.next(false);
                this.dialog.error(this.errorHandler.parseError(error));
            },
        });
    }
    loadParentDataset() {
        this.isLoading$.next(true);
        this.ws.call('pool.dataset.query', [[['id', '=', this.data.parentId]]])
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((parent) => {
            this.isLoading$.next(false);
            this.parent = parent[0];
            this.cdr.markForCheck();
            this.addNameValidators();
        });
    }
    addNameValidators() {
        const isNameCaseSensitive = this.parent.casesensitivity.value === dataset_enum_1.DatasetCaseSensitivity.Sensitive;
        const namesInUse = this.parent.children.map((child) => {
            const childName = /[^/]*$/.exec(child.name)[0];
            if (isNameCaseSensitive) {
                return childName.toLowerCase();
            }
            return childName;
        });
        this.form.controls.name.addValidators([
            (0, name_length_validation_1.datasetNameTooLong)(this.parent.name),
            (0, forbidden_values_validation_1.forbiddenValues)(namesInUse, isNameCaseSensitive),
        ]);
    }
};
exports.CreateDatasetDialogComponent = CreateDatasetDialogComponent;
CreateDatasetDialogComponent.ctorParameters = () => [
    { type: reactive_forms_1.FormBuilder },
    { type: core_1.ChangeDetectorRef },
    { type: ws_service_1.WebSocketService },
    { type: dialog_service_1.DialogService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_1.MatDialogRef },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.CreateDatasetDialogComponent = CreateDatasetDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-create-dataset-dialog',
        template: require("./create-dataset-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            progress_bar_1.MatProgressBar,
            scrolling_1.CdkScrollable,
            dialog_1.MatDialogContent,
            forms_1.FormsModule,
            forms_1.ReactiveFormsModule,
            ix_input_component_1.IxInputComponent,
            form_actions_component_1.FormActionsComponent,
            dialog_1.MatDialogActions,
            button_1.MatButton,
            dialog_1.MatDialogClose,
            common_1.AsyncPipe,
            core_2.TranslateModule,
            requires_roles_directive_1.RequiresRolesDirective,
            test_directive_1.TestDirective,
        ],
    })
], CreateDatasetDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,