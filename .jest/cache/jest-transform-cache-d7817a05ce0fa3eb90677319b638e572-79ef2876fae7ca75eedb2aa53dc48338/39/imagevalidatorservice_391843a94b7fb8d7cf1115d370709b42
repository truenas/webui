54405eb2dfba1787c75b8dcc0219f7ea
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageValidatorService = void 0;
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const bytes_constant_1 = require("app/constants/bytes.constant");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
let ImageValidatorService = class ImageValidatorService {
    constructor(translate) {
        this.translate = translate;
    }
    getImagesValidator(fileSizeLimitBytes) {
        return (control) => {
            return this.validateImages(control.value, fileSizeLimitBytes).pipe((0, rxjs_1.map)((validatedFiles) => {
                const invalidFiles = validatedFiles
                    .filter((file) => file.error)
                    .map((file) => file.error);
                if (!invalidFiles.length) {
                    return null;
                }
                const message = invalidFiles.map((error) => `${error.name} â€“ ${error.errorMessage}`).join('\n');
                return { [ix_errors_component_1.ixManualValidateError]: { message } };
            }));
        };
    }
    validateImages(screenshots, sizeLimitBytes) {
        return (0, rxjs_1.from)(screenshots).pipe((0, rxjs_1.take)(screenshots.length), (0, rxjs_1.concatMap)((file) => {
            return this.validateImage(file, sizeLimitBytes).pipe((0, rxjs_1.catchError)((error) => (0, rxjs_1.of)(error)));
        }), (0, rxjs_1.toArray)());
    }
    validateImage(file, sizeLimitBytes) {
        const fileReader = new FileReader();
        const { type, name, size } = file;
        return new rxjs_1.Observable((observer) => {
            if (sizeLimitBytes != null
                && !Number.isNaN(sizeLimitBytes)
                && size > sizeLimitBytes) {
                observer.error({
                    error: {
                        name,
                        errorMessage: this.translate.instant('File size is limited to {n} MiB.', { n: sizeLimitBytes / bytes_constant_1.MiB }),
                    },
                });
            }
            fileReader.readAsDataURL(file);
            fileReader.onload = () => {
                if (type.startsWith('image/')) {
                    const image = new Image();
                    image.onload = () => {
                        observer.next({ file });
                        observer.complete();
                    };
                    image.onerror = () => {
                        observer.error({ error: { name, errorMessage: this.translate.instant('Invalid image') } });
                    };
                    image.src = fileReader.result;
                }
                else {
                    observer.next({ file });
                    observer.complete();
                }
            };
            fileReader.onerror = () => {
                observer.error({ error: { name, errorMessage: this.translate.instant('Invalid file') } });
            };
        });
    }
};
exports.ImageValidatorService = ImageValidatorService;
ImageValidatorService.ctorParameters = () => [
    { type: core_2.TranslateService }
];
exports.ImageValidatorService = ImageValidatorService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], ImageValidatorService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,