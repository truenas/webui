63299043eea36fbd49fb63224efe6514
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BootenvStatsDialogComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const pool_status_enum_1 = require("app/enums/pool-status.enum");
const role_enum_1 = require("app/enums/role.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const file_size_pipe_1 = require("app/modules/pipes/file-size/file-size.pipe");
const format_datetime_pipe_1 = require("app/modules/pipes/format-date-time/format-datetime.pipe");
const map_value_pipe_1 = require("app/modules/pipes/map-value/map-value.pipe");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
let BootenvStatsDialogComponent = class BootenvStatsDialogComponent {
    constructor(ws, loader, store$, dialogRef, translate, fb, errorHandler, dialogService, formErrorHandler, cdr, snackbar) {
        this.ws = ws;
        this.loader = loader;
        this.store$ = store$;
        this.dialogRef = dialogRef;
        this.translate = translate;
        this.fb = fb;
        this.errorHandler = errorHandler;
        this.dialogService = dialogService;
        this.formErrorHandler = formErrorHandler;
        this.cdr = cdr;
        this.snackbar = snackbar;
        this.form = this.fb.group({
            interval: [null, [forms_1.Validators.required, forms_1.Validators.min(1)]],
        });
        this.PoolStatus = pool_status_enum_1.PoolStatus;
        this.poolStatusLabels = pool_status_enum_1.poolStatusLabels;
        this.Role = role_enum_1.Role;
    }
    get condition() {
        return this.state.status;
    }
    ngOnInit() {
        this.loadBootState();
        this.loadScrubInterval();
    }
    onSubmit() {
        const interval = this.form.value.interval;
        this.ws.call('boot.set_scrub_interval', [interval])
            .pipe(this.loader.withLoader(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.dialogRef.close();
                this.snackbar.success(this.translate.instant('Scrub interval set to {scrubIntervalValue} days', { scrubIntervalValue: interval }));
            },
            error: (error) => {
                this.formErrorHandler.handleWsFormError(error, this.form);
            },
        });
    }
    loadScrubInterval() {
        this.store$.pipe(system_config_selectors_1.waitForAdvancedConfig, (0, until_destroy_1.untilDestroyed)(this)).subscribe((config) => {
            this.form.patchValue({ interval: config.boot_scrub });
        });
    }
    loadBootState() {
        this.ws.call('boot.get_state')
            .pipe(this.loader.withLoader(), this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((state) => {
            this.state = state;
            this.cdr.markForCheck();
        });
    }
};
exports.BootenvStatsDialogComponent = BootenvStatsDialogComponent;
BootenvStatsDialogComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: app_loader_service_1.AppLoaderService },
    { type: store_1.Store },
    { type: dialog_1.MatDialogRef },
    { type: core_2.TranslateService },
    { type: forms_1.FormBuilder },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_service_1.DialogService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_1.ChangeDetectorRef },
    { type: snackbar_service_1.SnackbarService }
];
exports.BootenvStatsDialogComponent = BootenvStatsDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-bootenv-stats-dialog',
        template: require("./bootenv-stats-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            forms_1.ReactiveFormsModule,
            ix_input_component_1.IxInputComponent,
            form_actions_component_1.FormActionsComponent,
            button_1.MatButton,
            dialog_1.MatDialogClose,
            test_directive_1.TestDirective,
            requires_roles_directive_1.RequiresRolesDirective,
            core_2.TranslateModule,
            file_size_pipe_1.FileSizePipe,
            format_datetime_pipe_1.FormatDateTimePipe,
            map_value_pipe_1.MapValuePipe,
        ],
    })
], BootenvStatsDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,