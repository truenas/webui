b1c2815c9d2754d5962963748efd091c
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const testing_2 = require("@ngrx/store/testing");
const ng_mocks_1 = require("ng-mocks");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const dataset_enum_1 = require("app/enums/dataset.enum");
const mobile_back_button_component_1 = require("app/modules/buttons/mobile-back-button/mobile-back-button.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const data_protection_card_component_1 = require("app/pages/datasets/components/data-protection-card/data-protection-card.component");
const dataset_capacity_management_card_component_1 = require("app/pages/datasets/components/dataset-capacity-management-card/dataset-capacity-management-card.component");
const dataset_details_card_component_1 = require("app/pages/datasets/components/dataset-details-card/dataset-details-card.component");
const dataset_details_panel_component_1 = require("app/pages/datasets/components/dataset-details-panel/dataset-details-panel.component");
const dataset_form_component_1 = require("app/pages/datasets/components/dataset-form/dataset-form.component");
const dataset_icon_component_1 = require("app/pages/datasets/components/dataset-icon/dataset-icon.component");
const roles_card_component_1 = require("app/pages/datasets/components/roles-card/roles-card.component");
const zvol_form_component_1 = require("app/pages/datasets/components/zvol-form/zvol-form.component");
const zfs_encryption_card_component_1 = require("app/pages/datasets/modules/encryption/components/zfs-encryption-card/zfs-encryption-card.component");
const permissions_card_component_1 = require("app/pages/datasets/modules/permissions/containers/permissions-card/permissions-card.component");
const dataset_store_service_1 = require("app/pages/datasets/store/dataset-store.service");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const system_info_selectors_1 = require("app/store/system-info/system-info.selectors");
describe('DatasetDetailsPanelComponent', () => {
    let spectator;
    let loader;
    const dataset = {
        id: 'root/parent/child',
        pool: 'my-pool',
        name: 'root/parent/child',
        mountpoint: '/mnt/root/parent/child',
        type: dataset_enum_1.DatasetType.Filesystem,
        encrypted: true,
    };
    const datasetDetails = Object.assign({}, dataset);
    const parentDatasetDetails = {
        name: 'root/parent',
    };
    const createComponent = (0, jest_1.createComponentFactory)({
        component: dataset_details_panel_component_1.DatasetDetailsPanelComponent,
        declarations: [
            (0, ng_mocks_1.MockComponents)(dataset_icon_component_1.DatasetIconComponent, dataset_details_card_component_1.DatasetDetailsCardComponent, permissions_card_component_1.PermissionsCardComponent, zfs_encryption_card_component_1.ZfsEncryptionCardComponent, dataset_capacity_management_card_component_1.DatasetCapacityManagementCardComponent, data_protection_card_component_1.DataProtectionCardComponent, roles_card_component_1.RolesCardComponent, mobile_back_button_component_1.MobileBackButtonComponent),
        ],
        providers: [
            (0, mock_auth_utils_1.mockAuth)(),
            (0, jest_1.mockProvider)(ix_slide_in_service_1.IxSlideInService, {
                open: jest.fn(() => ({
                    slideInClosed$: (0, rxjs_1.of)(),
                })),
                onClose$: (0, rxjs_1.of)(),
            }),
            (0, jest_1.mockProvider)(dataset_store_service_1.DatasetTreeStore, {
                selectedDataset$: (0, rxjs_1.of)(datasetDetails),
                selectedParentDataset$: (0, rxjs_1.of)(parentDatasetDetails),
            }),
            (0, testing_2.provideMockStore)({
                selectors: [
                    {
                        selector: system_info_selectors_1.selectSystemInfo,
                        value: {
                            version: 'TrueNAS-SCALE-22.12',
                        },
                    },
                ],
            }),
            (0, jest_1.mockProvider)(snackbar_service_1.SnackbarService),
            (0, jest_1.mockProvider)(ix_slide_in_ref_1.IxSlideInRef),
            { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: undefined },
        ],
    });
    beforeEach(() => {
        spectator = createComponent({
            props: {
                dataset,
            },
        });
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
    });
    it('shows a title of current dataset', () => {
        expect(spectator.query('.title .prefix')).toHaveText('Details for');
        expect(spectator.query('.title .mobile-prefix')).toHaveText('Details for');
        expect(spectator.query('.title .full-path')).toHaveText('child');
    });
    it('opens a dataset form when Add Dataset is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const addDatasetButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Add Dataset' }));
        yield addDatasetButton.click();
        expect(spectator.inject(ix_slide_in_service_1.IxSlideInService).open).toHaveBeenCalledWith(dataset_form_component_1.DatasetFormComponent, { data: { datasetId: 'root/parent/child', isNew: true }, wide: true });
    }));
    it('opens a zvol form when Add Zvol is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const addZvolButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Add Zvol' }));
        yield addZvolButton.click();
        expect(spectator.inject(ix_slide_in_service_1.IxSlideInService).open).toHaveBeenCalledWith(zvol_form_component_1.ZvolFormComponent, { data: { parentId: 'root/parent/child', isNew: true } });
    }));
    it('shows all the cards', () => {
        const datasetDetailsCard = spectator.query(dataset_details_card_component_1.DatasetDetailsCardComponent);
        expect(datasetDetailsCard).toBeTruthy();
        expect(datasetDetailsCard.dataset).toBe(dataset);
        const dataProtectionCard = spectator.query(data_protection_card_component_1.DataProtectionCardComponent);
        expect(dataProtectionCard).toBeTruthy();
        expect(dataProtectionCard.dataset).toStrictEqual(datasetDetails);
        const permissionsCard = spectator.query(permissions_card_component_1.PermissionsCardComponent);
        expect(permissionsCard).toBeTruthy();
        expect(permissionsCard.dataset).toStrictEqual(datasetDetails);
        const zfsEncryptionCard = spectator.query(zfs_encryption_card_component_1.ZfsEncryptionCardComponent);
        expect(zfsEncryptionCard).toBeTruthy();
        expect(zfsEncryptionCard.dataset).toStrictEqual(datasetDetails);
        const datasetCapacityManagementCard = spectator.query(dataset_capacity_management_card_component_1.DatasetCapacityManagementCardComponent);
        expect(datasetCapacityManagementCard).toBeTruthy();
        expect(datasetCapacityManagementCard.dataset).toStrictEqual(datasetDetails);
    });
    it('hides "Permissions Card" if dataset type is Volume', () => {
        spectator.setInput('dataset', Object.assign(Object.assign({}, dataset), { type: dataset_enum_1.DatasetType.Volume }));
        expect(spectator.query('ix-permissions-card')).not.toBeVisible();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,