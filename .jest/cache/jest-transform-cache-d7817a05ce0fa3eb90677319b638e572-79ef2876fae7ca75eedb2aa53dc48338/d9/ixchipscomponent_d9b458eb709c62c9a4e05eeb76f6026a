42b8bceee513f0566622cedcd0b5d2ec
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxChipsComponent = void 0;
const keycodes_1 = require("@angular/cdk/keycodes");
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const autocomplete_1 = require("@angular/material/autocomplete");
const chips_1 = require("@angular/material/chips");
const core_2 = require("@angular/material/core");
const form_field_1 = require("@angular/material/form-field");
const until_destroy_1 = require("@ngneat/until-destroy");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
const ix_label_component_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.component");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_override_directive_1 = require("app/modules/test-id/test-override/test-override.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
let IxChipsComponent = class IxChipsComponent {
    get labels() {
        var _a;
        if (!this.resolveValue) {
            return this.values;
        }
        return (_a = this.values) === null || _a === void 0 ? void 0 : _a.map((value) => {
            var _a, _b;
            if ((_a = this.resolvedOptions) === null || _a === void 0 ? void 0 : _a.length) {
                return (_b = this.resolvedOptions.find((option) => option.value === parseInt(value))) === null || _b === void 0 ? void 0 : _b.label;
            }
            return value;
        }).filter(Boolean);
    }
    constructor(controlDirective, cdr) {
        this.controlDirective = controlDirective;
        this.cdr = cdr;
        this.allowNewEntries = true;
        this.resolveValue = false;
        this.resolvedOptions = [];
        this.values = [];
        this.isDisabled = false;
        this.inputReset$ = new rxjs_1.Subject();
        this.onChange = () => { };
        this.onTouch = () => { };
        this.separatorKeysCodes = [keycodes_1.ENTER];
        this.controlDirective.valueAccessor = this;
    }
    ngOnChanges() {
        this.setAutocomplete();
        this.setOptions();
    }
    writeValue(value) {
        this.values = value;
        this.cdr.markForCheck();
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.cdr.markForCheck();
    }
    onRemove(itemToRemove) {
        var _a, _b;
        if (this.resolveValue && ((_a = this.resolvedOptions) === null || _a === void 0 ? void 0 : _a.length)) {
            itemToRemove = (_b = this.resolvedOptions.find((option) => option.label === itemToRemove)) === null || _b === void 0 ? void 0 : _b.value.toString();
        }
        const updatedValues = this.values.filter((value) => String(value) !== String(itemToRemove));
        this.updateValues(updatedValues);
    }
    onAdd(value) {
        var _a, _b;
        let newValue = (_a = (value || '')) === null || _a === void 0 ? void 0 : _a.trim();
        if (!newValue || this.values.includes(newValue)) {
            return;
        }
        if (this.resolveValue && ((_b = this.resolvedOptions) === null || _b === void 0 ? void 0 : _b.length)) {
            const newOption = this.resolvedOptions.find((option) => option.label === newValue);
            if (newOption) {
                newValue = newOption.value;
            }
            else {
                // Do not allow to add string values for number arrays
                return;
            }
        }
        this.clearInput();
        this.updateValues([...this.values, newValue]);
    }
    onInputBlur() {
        if (!this.allowNewEntries || this.resolveValue) {
            this.chipInput.nativeElement.value = null;
            return;
        }
        this.onAdd(this.chipInput.nativeElement.value);
    }
    // TODO: Workaround for https://github.com/angular/angular/issues/56471
    trackByIdentity(item) {
        return item;
    }
    setOptions() {
        var _a;
        if (!this.resolveValue) {
            this.resolvedOptions = null;
            return;
        }
        (_a = this.resolveOptions) === null || _a === void 0 ? void 0 : _a.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((options) => {
            this.resolvedOptions = options;
        });
    }
    setAutocomplete() {
        if (!this.autocompleteProvider) {
            this.suggestions$ = null;
            return;
        }
        this.suggestions$ = (0, rxjs_1.merge)((0, rxjs_1.fromEvent)(this.chipInput.nativeElement, 'input')
            .pipe((0, operators_1.startWith)(''), (0, operators_1.debounceTime)(100), (0, operators_1.distinctUntilChanged)()), this.inputReset$).pipe((0, operators_1.switchMap)(() => {
            return this.autocompleteProvider(this.chipInput.nativeElement.value);
        }));
    }
    updateValues(updatedValues) {
        this.values = updatedValues;
        this.onChange(this.values);
        this.onTouch();
    }
    clearInput() {
        this.chipInput.nativeElement.value = '';
        this.inputReset$.next();
    }
};
exports.IxChipsComponent = IxChipsComponent;
IxChipsComponent.ctorParameters = () => [
    { type: forms_1.NgControl },
    { type: core_1.ChangeDetectorRef }
];
IxChipsComponent.propDecorators = {
    label: [{ type: core_1.Input }],
    placeholder: [{ type: core_1.Input }],
    hint: [{ type: core_1.Input }],
    tooltip: [{ type: core_1.Input }],
    required: [{ type: core_1.Input }],
    allowNewEntries: [{ type: core_1.Input }],
    autocompleteProvider: [{ type: core_1.Input }],
    resolveValue: [{ type: core_1.Input }],
    resolveOptions: [{ type: core_1.Input }],
    chipInput: [{ type: core_1.ViewChild, args: ['chipInput', { static: true },] }]
};
exports.IxChipsComponent = IxChipsComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-chips',
        template: require("./ix-chips.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_label_component_1.IxLabelComponent,
            chips_1.MatChipGrid,
            chips_1.MatChipRow,
            ix_icon_component_1.IxIconComponent,
            chips_1.MatChipRemove,
            autocomplete_1.MatAutocompleteTrigger,
            chips_1.MatChipInput,
            autocomplete_1.MatAutocomplete,
            core_2.MatOption,
            ix_errors_component_1.IxErrorsComponent,
            form_field_1.MatHint,
            common_1.AsyncPipe,
            test_directive_1.TestDirective,
            test_override_directive_1.TestOverrideDirective,
        ],
    })
], IxChipsComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,