{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_createPadding.js","mappings":";;;;;AAAA,sEAA0C;AAC1C,0EAA8C;AAC9C,oEAAwC;AACxC,sEAA0C;AAC1C,sEAA0C;AAC1C,4EAAgD;AAEhD,wFAAwF;AACxF,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;AAE3B;;;;;;;;GAQG;AACH,SAAS,aAAa,CAAC,MAAM,EAAE,KAAK;IAClC,KAAK,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAA,0BAAY,EAAC,KAAK,CAAC,CAAC;IAExD,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IAC/B,IAAI,WAAW,GAAG,CAAC,EAAE,CAAC;QACpB,OAAO,WAAW,CAAC,CAAC,CAAC,IAAA,wBAAU,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACzD,CAAC;IACD,IAAI,MAAM,GAAG,IAAA,wBAAU,EAAC,KAAK,EAAE,UAAU,CAAC,MAAM,GAAG,IAAA,wBAAU,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvE,OAAO,IAAA,wBAAU,EAAC,KAAK,CAAC;QACtB,CAAC,CAAC,IAAA,uBAAS,EAAC,IAAA,2BAAa,EAAC,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;QACtD,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAC9B,CAAC;AAED,kBAAe,aAAa,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_createPadding.js"],"sourcesContent":["import baseRepeat from './_baseRepeat.js';\nimport baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport stringSize from './_stringSize.js';\nimport stringToArray from './_stringToArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\nexport default createPadding;\n"],"version":3}