{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ws.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,4CAAyC;AACzC,8CAAuD;AACvD,iDAAqC;AACrC,+BAEc;AACd,8CAEwB;AACxB,2EAAyE;AACzE,iFAAuE;AACvE,mFAAyE;AACzE,6FAA+E;AAC/E,qFAAwE;AAiBxE,4FAAuF;AAKhF,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAI3B,YACY,MAAc,EACd,SAAqC,EACrC,SAA2B;;QAF3B,WAAM,GAAN,MAAM,CAAQ;QACd,cAAS,GAAT,SAAS,CAA4B;QACrC,cAAS,GAAT,SAAS,CAAkB;QANtB,qBAAgB,GAAG,IAAI,GAAG,EAA6C,CAAC;QAChF,wBAAmB,GAAG,IAAI,cAAO,EAAQ,CAAC;QAOjD,MAAA,IAAI,CAAC,SAAS,CAAC,YAAY,0CAAE,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;YACrD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAY,GAAG;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC,CAAC;IAED,IAAI,CAA0B,MAAS,EAAE,MAAyB;QAChE,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,gBAAgB,CACd,MAAS,EACT,MAAyB;QAEzB,OAAO,IAAI,CAAC,UAAU,CAAI,MAAM,EAAE,MAAM,CAAC;aACtC,IAAI,CACH,IAAA,qBAAS,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAC9C,IAAA,qBAAS,EAAC,IAAI,CAAC,EACf,IAAA,eAAG,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CACjC,CAAC,EACF,IAAA,wCAAa,GAAE,EACf,IAAA,qBAAS,EAAC,IAAI,CAAC,mBAAmB,CAAC,CACpC,CAAC;IACN,CAAC;IAED;;OAEG;IACH,QAAQ,CAAyB,MAAS,EAAE,MAAwB;QAClE,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,GAAG,CACD,MAAS,EACT,MAAwB;QAExB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CACzC,IAAA,qBAAS,EAAC,CAAC,KAAa,EAAE,EAAE;YAC1B,OAAO,IAAA,YAAK,EACV,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;YACjC,uDAAuD;YACvD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAA,eAAG,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAChF;iBACE,IAAI,CAAC,IAAA,iCAAU,GAAE,CAAC,CAAC;QACxB,CAAC,CAAC,EACF,IAAA,qBAAS,EAAC,IAAI,CAAC,mBAAmB,CAAC,CACE,CAAC;IAC1C,CAAC;IAED,SAAS,CAA4C,MAAS;QAC5D,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QACD,MAAM,WAAW,GAAG,IAAI,iBAAU,CAAC,CAAC,OAAqC,EAAE,EAAE;YAC3E,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAsB,MAAM,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACpG,OAAO,GAAG,EAAE;gBACV,YAAY,CAAC,WAAW,EAAE,CAAC;gBAC3B,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,IAAI,CACL,IAAA,qBAAS,EAAC,CAAC,QAAQ,EAAE,EAAE;YACrB,MAAM,YAAY,GAAG,QAAoC,CAAC;YAC1D,IAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,KAAK,EAAE,CAAC;gBACxB,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC7C,OAAO,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC9C,CAAC;YACD,OAAO,IAAA,SAAE,EAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,EACF,IAAA,iBAAK,GAAE,EACP,IAAA,qBAAS,EAAC,IAAI,CAAC,mBAAmB,CAAC,CACpC,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAC/C,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,eAAe,CAAC,IAAY;QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAsB,CAAsD,CAAC;IACrG,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAIO,UAAU,CAAyC,MAAS,EAAE,MAAgB;QACpF,MAAM,IAAI,GAAG,oBAAI,CAAC,IAAI,EAAE,CAAC;QACzB,OAAO,IAAA,SAAE,EAAC,IAAI,CAAC,CAAC,IAAI,CAClB,IAAA,eAAG,EAAC,GAAG,EAAE;YACP,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,MAAM,IAAI,UAAU,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,8CAAsB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;aAC7D,CAAC,CAAC;QACL,CAAC,CAAC,EACF,IAAA,qBAAS,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EACzB,IAAA,kBAAM,EAAC,CAAC,IAA8B,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,8CAAsB,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,EAC1G,IAAA,qBAAS,EAAC,CAAC,IAA8B,EAAE,EAAE;YAC3C,IAAI,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;gBAChD,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;gBACxD,OAAO,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC;YAED,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,MAAM,IAAI,QAAQ,CAAC,CAAC;YAC9C,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,MAAM,MAAM,IAAI,UAAU,EAAE,GAAG,MAAM,MAAM,IAAI,QAAQ,CAAC,CAAC;YACxF,OAAO,IAAA,SAAE,EAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,EAEF,IAAA,eAAG,EAAC,CAAC,IAAmB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EACzC,IAAA,gBAAI,EAAC,CAAC,CAAC,CACR,CAAC;IACJ,CAAC;IAEO,qBAAqB,CAAC,KAAa;QACzC,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,IAAI,CACzC,IAAA,kBAAM,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,KAAK,CAAC,EAC3C,IAAA,eAAG,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAClC,IAAA,qBAAS,EAAC,IAAI,CAAC,mBAAmB,CAAC,CACpC,CAAC;IACJ,CAAC;IAEO,UAAU,CAAC,KAAqB,EAAE,OAA4C;QACpF,IAAI,KAAK,CAAC,OAAO,KAAK,8CAAkB,CAAC,QAAQ,EAAE,CAAC;YAClD,OAAO,CAAC,KAAK,CAAC,oBAAoB,OAAO,CAAC,MAAM,SAAS,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;YAC1H,OAAO;QACT,CAAC;QAED,gCAAgC;QAChC,IAAI,KAAK,CAAC,IAAI,KAAK,4CAAiB,CAAC,UAAU,EAAE,CAAC;YAChD,OAAO;QACT,CAAC;QAED,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,2FAA2F;IACnF,YAAY,CAAC,KAAqB,EAAE,OAA2B;QACrE,IAAI,KAAK,CAAC,OAAO,KAAK,8CAAkB,CAAC,QAAQ,EAAE,CAAC;YAClD,uCACK,KAAK,KACR,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,2BAA2B,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,IACvF;QACJ,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;;AA3KU,4CAAgB;;;;;;2BAAhB,gBAAgB;IAH5B,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,gBAAgB,CA4K5B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ws.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { UUID } from 'angular2-uuid';\nimport {\n  merge, Observable, of, Subject, Subscriber, throwError,\n} from 'rxjs';\nimport {\n  filter, map, share, startWith, switchMap, take, takeUntil, tap,\n} from 'rxjs/operators';\nimport { IncomingApiMessageType } from 'app/enums/api-message-type.enum';\nimport { ResponseErrorType } from 'app/enums/response-error-type.enum';\nimport { WebSocketErrorName } from 'app/enums/websocket-error-name.enum';\nimport { applyApiEvent } from 'app/helpers/operators/apply-api-event.operator';\nimport { observeJob } from 'app/helpers/operators/observe-job.operator';\nimport { ApiCallAndSubscribeMethod, ApiCallAndSubscribeResponse } from 'app/interfaces/api/api-call-and-subscribe-directory.interface';\nimport {\n  ApiCallMethod,\n  ApiCallParams,\n  ApiCallResponse,\n} from 'app/interfaces/api/api-call-directory.interface';\nimport {\n  ApiJobMethod,\n  ApiJobParams,\n  ApiJobResponse,\n} from 'app/interfaces/api/api-job-directory.interface';\nimport {\n  ApiEvent, ApiEventMethod, ApiEventTyped, IncomingWebSocketMessage, ResultMessage,\n} from 'app/interfaces/api-message.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { WebSocketError } from 'app/interfaces/websocket-error.interface';\nimport { WebSocketConnectionService } from 'app/services/websocket-connection.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebSocketService {\n  private readonly eventSubscribers = new Map<ApiEventMethod, Observable<ApiEventTyped>>();\n  readonly clearSubscriptions$ = new Subject<void>();\n\n  constructor(\n    protected router: Router,\n    protected wsManager: WebSocketConnectionService,\n    protected translate: TranslateService,\n  ) {\n    this.wsManager.isConnected$?.subscribe((isConnected) => {\n      if (!isConnected) {\n        this.clearSubscriptions();\n      }\n    });\n  }\n\n  private get ws$(): Observable<unknown> {\n    return this.wsManager.websocket$;\n  }\n\n  call<M extends ApiCallMethod>(method: M, params?: ApiCallParams<M>): Observable<ApiCallResponse<M>> {\n    return this.callMethod(method, params);\n  }\n\n  /**\n   * For jobs better to use the `selectJob` store selector.\n   */\n  callAndSubscribe<M extends ApiCallAndSubscribeMethod>(\n    method: M,\n    params?: ApiCallParams<M>,\n  ): Observable<ApiCallAndSubscribeResponse<M>[]> {\n    return this.callMethod<M>(method, params)\n      .pipe(\n        switchMap((items) => this.subscribe(method).pipe(\n          startWith(null),\n          map((event) => ([items, event])),\n        )),\n        applyApiEvent(),\n        takeUntil(this.clearSubscriptions$),\n      );\n  }\n\n  /**\n   * Use `job` when you care about job progress or result.\n   */\n  startJob<M extends ApiJobMethod>(method: M, params?: ApiJobParams<M>): Observable<number> {\n    return this.callMethod(method, params);\n  }\n\n  /**\n   * In your subscription, next will be next job update, complete will be when the job is complete.\n   */\n  job<M extends ApiJobMethod>(\n    method: M,\n    params?: ApiJobParams<M>,\n  ): Observable<Job<ApiJobResponse<M>>> {\n    return this.callMethod(method, params).pipe(\n      switchMap((jobId: number) => {\n        return merge(\n          this.subscribeToJobUpdates(jobId),\n          // Get job status here for jobs that complete too fast.\n          this.call('core.get_jobs', [[['id', '=', jobId]]]).pipe(map((jobs) => jobs[0])),\n        )\n          .pipe(observeJob());\n      }),\n      takeUntil(this.clearSubscriptions$),\n    ) as Observable<Job<ApiJobResponse<M>>>;\n  }\n\n  subscribe<K extends ApiEventMethod = ApiEventMethod>(method: K): Observable<ApiEventTyped<K>> {\n    if (this.eventSubscribers.has(method)) {\n      return this.eventSubscribers.get(method);\n    }\n    const observable$ = new Observable((trigger: Subscriber<ApiEventTyped<K>>) => {\n      const subscription = this.wsManager.buildSubscriber<K, ApiEventTyped<K>>(method).subscribe(trigger);\n      return () => {\n        subscription.unsubscribe();\n        this.eventSubscribers.delete(method);\n      };\n    }).pipe(\n      switchMap((apiEvent) => {\n        const erroredEvent = apiEvent as unknown as ResultMessage;\n        if (erroredEvent?.error) {\n          console.error('Error: ', erroredEvent.error);\n          return throwError(() => erroredEvent.error);\n        }\n        return of(apiEvent);\n      }),\n      share(),\n      takeUntil(this.clearSubscriptions$),\n    );\n\n    this.eventSubscribers.set(method, observable$);\n    return observable$;\n  }\n\n  subscribeToLogs(name: string): Observable<ApiEvent<{ data: string }>> {\n    return this.subscribe(name as ApiEventMethod) as unknown as Observable<ApiEvent<{ data: string }>>;\n  }\n\n  clearSubscriptions(): void {\n    this.clearSubscriptions$.next();\n    this.eventSubscribers.clear();\n  }\n\n  getWebSocketStream$(): Observable<unknown> {\n    return this.ws$;\n  }\n\n  private callMethod<M extends ApiCallMethod>(method: M, params?: ApiCallParams<M>): Observable<ApiCallResponse<M>>;\n  private callMethod<M extends ApiJobMethod>(method: M, params?: ApiJobParams<M>): Observable<number>;\n  private callMethod<M extends ApiCallMethod | ApiJobMethod>(method: M, params?: unknown): Observable<unknown> {\n    const uuid = UUID.UUID();\n    return of(uuid).pipe(\n      tap(() => {\n        performance.mark(`${method} - ${uuid} - start`);\n        this.wsManager.send({\n          id: uuid, msg: IncomingApiMessageType.Method, method, params,\n        });\n      }),\n      switchMap(() => this.ws$),\n      filter((data: IncomingWebSocketMessage) => data.msg === IncomingApiMessageType.Result && data.id === uuid),\n      switchMap((data: IncomingWebSocketMessage) => {\n        if ('error' in data && data.error) {\n          this.printError(data.error, { method, params });\n          const error = this.enhanceError(data.error, { method });\n          return throwError(() => error);\n        }\n\n        performance.mark(`${method} - ${uuid} - end`);\n        performance.measure(method, `${method} - ${uuid} - start`, `${method} - ${uuid} - end`);\n        return of(data);\n      }),\n\n      map((data: ResultMessage) => data.result),\n      take(1),\n    );\n  }\n\n  private subscribeToJobUpdates(jobId: number): Observable<Job> {\n    return this.subscribe('core.get_jobs').pipe(\n      filter((apiEvent) => apiEvent.id === jobId),\n      map((apiEvent) => apiEvent.fields),\n      takeUntil(this.clearSubscriptions$),\n    );\n  }\n\n  private printError(error: WebSocketError, context: { method: string; params: unknown }): void {\n    if (error.errname === WebSocketErrorName.NoAccess) {\n      console.error(`Access denied to ${context.method} with ${context.params ? JSON.stringify(context.params) : 'no params'}`);\n      return;\n    }\n\n    // Do not log validation errors.\n    if (error.type === ResponseErrorType.Validation) {\n      return;\n    }\n\n    console.error('Error: ', error);\n  }\n\n  // TODO: Probably doesn't belong here. Consider building something similar to interceptors.\n  private enhanceError(error: WebSocketError, context: { method: string }): WebSocketError {\n    if (error.errname === WebSocketErrorName.NoAccess) {\n      return {\n        ...error,\n        reason: this.translate.instant('Access denied to {method}', { method: context.method }),\n      };\n    }\n\n    return error;\n  }\n}\n"],"version":3}