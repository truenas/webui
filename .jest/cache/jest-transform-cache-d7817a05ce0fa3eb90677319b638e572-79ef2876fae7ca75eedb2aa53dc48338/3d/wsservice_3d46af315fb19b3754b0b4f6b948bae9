7f3293bc37ef2661e3083395cde7af13
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketService = void 0;
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const core_2 = require("@ngx-translate/core");
const angular2_uuid_1 = require("angular2-uuid");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const api_message_type_enum_1 = require("app/enums/api-message-type.enum");
const response_error_type_enum_1 = require("app/enums/response-error-type.enum");
const websocket_error_name_enum_1 = require("app/enums/websocket-error-name.enum");
const apply_api_event_operator_1 = require("app/helpers/operators/apply-api-event.operator");
const observe_job_operator_1 = require("app/helpers/operators/observe-job.operator");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
let WebSocketService = class WebSocketService {
    constructor(router, wsManager, translate) {
        var _a;
        this.router = router;
        this.wsManager = wsManager;
        this.translate = translate;
        this.eventSubscribers = new Map();
        this.clearSubscriptions$ = new rxjs_1.Subject();
        (_a = this.wsManager.isConnected$) === null || _a === void 0 ? void 0 : _a.subscribe((isConnected) => {
            if (!isConnected) {
                this.clearSubscriptions();
            }
        });
    }
    get ws$() {
        return this.wsManager.websocket$;
    }
    call(method, params) {
        return this.callMethod(method, params);
    }
    /**
     * For jobs better to use the `selectJob` store selector.
     */
    callAndSubscribe(method, params) {
        return this.callMethod(method, params)
            .pipe((0, operators_1.switchMap)((items) => this.subscribe(method).pipe((0, operators_1.startWith)(null), (0, operators_1.map)((event) => ([items, event])))), (0, apply_api_event_operator_1.applyApiEvent)(), (0, operators_1.takeUntil)(this.clearSubscriptions$));
    }
    /**
     * Use `job` when you care about job progress or result.
     */
    startJob(method, params) {
        return this.callMethod(method, params);
    }
    /**
     * In your subscription, next will be next job update, complete will be when the job is complete.
     */
    job(method, params) {
        return this.callMethod(method, params).pipe((0, operators_1.switchMap)((jobId) => {
            return (0, rxjs_1.merge)(this.subscribeToJobUpdates(jobId), 
            // Get job status here for jobs that complete too fast.
            this.call('core.get_jobs', [[['id', '=', jobId]]]).pipe((0, operators_1.map)((jobs) => jobs[0])))
                .pipe((0, observe_job_operator_1.observeJob)());
        }), (0, operators_1.takeUntil)(this.clearSubscriptions$));
    }
    subscribe(method) {
        if (this.eventSubscribers.has(method)) {
            return this.eventSubscribers.get(method);
        }
        const observable$ = new rxjs_1.Observable((trigger) => {
            const subscription = this.wsManager.buildSubscriber(method).subscribe(trigger);
            return () => {
                subscription.unsubscribe();
                this.eventSubscribers.delete(method);
            };
        }).pipe((0, operators_1.switchMap)((apiEvent) => {
            const erroredEvent = apiEvent;
            if (erroredEvent === null || erroredEvent === void 0 ? void 0 : erroredEvent.error) {
                console.error('Error: ', erroredEvent.error);
                return (0, rxjs_1.throwError)(() => erroredEvent.error);
            }
            return (0, rxjs_1.of)(apiEvent);
        }), (0, operators_1.share)(), (0, operators_1.takeUntil)(this.clearSubscriptions$));
        this.eventSubscribers.set(method, observable$);
        return observable$;
    }
    subscribeToLogs(name) {
        return this.subscribe(name);
    }
    clearSubscriptions() {
        this.clearSubscriptions$.next();
        this.eventSubscribers.clear();
    }
    getWebSocketStream$() {
        return this.ws$;
    }
    callMethod(method, params) {
        const uuid = angular2_uuid_1.UUID.UUID();
        return (0, rxjs_1.of)(uuid).pipe((0, operators_1.tap)(() => {
            performance.mark(`${method} - ${uuid} - start`);
            this.wsManager.send({
                id: uuid, msg: api_message_type_enum_1.IncomingApiMessageType.Method, method, params,
            });
        }), (0, operators_1.switchMap)(() => this.ws$), (0, operators_1.filter)((data) => data.msg === api_message_type_enum_1.IncomingApiMessageType.Result && data.id === uuid), (0, operators_1.switchMap)((data) => {
            if ('error' in data && data.error) {
                this.printError(data.error, { method, params });
                const error = this.enhanceError(data.error, { method });
                return (0, rxjs_1.throwError)(() => error);
            }
            performance.mark(`${method} - ${uuid} - end`);
            performance.measure(method, `${method} - ${uuid} - start`, `${method} - ${uuid} - end`);
            return (0, rxjs_1.of)(data);
        }), (0, operators_1.map)((data) => data.result), (0, operators_1.take)(1));
    }
    subscribeToJobUpdates(jobId) {
        return this.subscribe('core.get_jobs').pipe((0, operators_1.filter)((apiEvent) => apiEvent.id === jobId), (0, operators_1.map)((apiEvent) => apiEvent.fields), (0, operators_1.takeUntil)(this.clearSubscriptions$));
    }
    printError(error, context) {
        if (error.errname === websocket_error_name_enum_1.WebSocketErrorName.NoAccess) {
            console.error(`Access denied to ${context.method} with ${context.params ? JSON.stringify(context.params) : 'no params'}`);
            return;
        }
        // Do not log validation errors.
        if (error.type === response_error_type_enum_1.ResponseErrorType.Validation) {
            return;
        }
        console.error('Error: ', error);
    }
    // TODO: Probably doesn't belong here. Consider building something similar to interceptors.
    enhanceError(error, context) {
        if (error.errname === websocket_error_name_enum_1.WebSocketErrorName.NoAccess) {
            return Object.assign(Object.assign({}, error), { reason: this.translate.instant('Access denied to {method}', { method: context.method }) });
        }
        return error;
    }
};
exports.WebSocketService = WebSocketService;
WebSocketService.ctorParameters = () => [
    { type: router_1.Router },
    { type: websocket_connection_service_1.WebSocketConnectionService },
    { type: core_2.TranslateService }
];
exports.WebSocketService = WebSocketService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], WebSocketService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,