ca600f75adc706c20ecb4a4f9009a2d5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskTemperatureService = void 0;
const core_1 = require("@angular/core");
const rxjs_1 = require("rxjs");
const api_message_type_enum_1 = require("app/enums/api-message-type.enum");
const enclosure_slot_status_enum_1 = require("app/enums/enclosure-slot-status.enum");
const ws_service_1 = require("app/services/ws.service");
let DiskTemperatureService = class DiskTemperatureService {
    constructor(websocket) {
        this.websocket = websocket;
        this.disksChanged$ = this.websocket.subscribe('disk.query').pipe((0, rxjs_1.filter)((event) => [
            api_message_type_enum_1.IncomingApiMessageType.Added,
            api_message_type_enum_1.IncomingApiMessageType.Changed,
            api_message_type_enum_1.IncomingApiMessageType.Removed,
        ].includes(event.msg)));
    }
    getTemperature() {
        return this.websocket
            .call('webui.enclosure.dashboard')
            .pipe((0, rxjs_1.repeat)(({ delay: () => this.disksChanged$ })), (0, rxjs_1.map)((enclosures) => {
            return enclosures.map((enclosure) => {
                return Object.values(enclosure.elements[enclosure_slot_status_enum_1.EnclosureElementType.ArrayDeviceSlot])
                    .filter((element) => element.dev)
                    .map((element) => element.dev);
            }).flat();
        }), (0, rxjs_1.switchMap)((disks) => {
            return this.websocket.call('disk.temperatures', [disks]).pipe((0, rxjs_1.repeat)({ delay: 10000 }), (0, rxjs_1.takeUntil)(this.disksChanged$));
        }));
    }
};
exports.DiskTemperatureService = DiskTemperatureService;
DiskTemperatureService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.DiskTemperatureService = DiskTemperatureService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], DiskTemperatureService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2Rpc2stdGVtcGVyYXR1cmUuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBMkM7QUFDM0MsK0JBS2M7QUFDZCwyRUFBeUU7QUFDekUscUZBQTRFO0FBRTVFLHdEQUEyRDtBQVlwRCxJQUFNLHNCQUFzQixHQUE1QixNQUFNLHNCQUFzQjtJQVNqQyxZQUNZLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBVC9CLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNqRSxJQUFBLGFBQU0sRUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDaEIsOENBQXNCLENBQUMsS0FBSztZQUM1Qiw4Q0FBc0IsQ0FBQyxPQUFPO1lBQzlCLDhDQUFzQixDQUFDLE9BQU87U0FDL0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3ZCLENBQUM7SUFJRSxDQUFDO0lBRUwsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFNBQVM7YUFDbEIsSUFBSSxDQUFDLDJCQUEyQixDQUFDO2FBQ2pDLElBQUksQ0FDSCxJQUFBLGFBQU0sRUFBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQzdDLElBQUEsVUFBRyxFQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDakIsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQ2xDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGlEQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDO3FCQUMzRSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7cUJBQ2hDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLEVBQ0YsSUFBQSxnQkFBUyxFQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMzRCxJQUFBLGFBQU0sRUFBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUN4QixJQUFBLGdCQUFTLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUM5QixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7O0FBaENVLHdEQUFzQjs7OztpQ0FBdEIsc0JBQXNCO0lBSGxDLElBQUEsaUJBQVUsRUFBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyxzQkFBc0IsQ0FpQ2xDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9kaXNrLXRlbXBlcmF0dXJlLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgZmlsdGVyLFxuICBtYXAsIE9ic2VydmFibGUsIHJlcGVhdCxcbiAgc3dpdGNoTWFwLFxuICB0YWtlVW50aWwsXG59IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSW5jb21pbmdBcGlNZXNzYWdlVHlwZSB9IGZyb20gJ2FwcC9lbnVtcy9hcGktbWVzc2FnZS10eXBlLmVudW0nO1xuaW1wb3J0IHsgRW5jbG9zdXJlRWxlbWVudFR5cGUgfSBmcm9tICdhcHAvZW51bXMvZW5jbG9zdXJlLXNsb3Qtc3RhdHVzLmVudW0nO1xuaW1wb3J0IHsgRGlza1RlbXBlcmF0dXJlcyB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2Rpc2suaW50ZXJmYWNlJztcbmltcG9ydCB7IFdlYlNvY2tldFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvd3Muc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGVyYXR1cmUge1xuICBrZXlzOiBzdHJpbmdbXTtcbiAgdmFsdWVzOiBEaXNrVGVtcGVyYXR1cmVzO1xuICB1bml0OiBzdHJpbmc7XG4gIHN5bWJvbFRleHQ6IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIERpc2tUZW1wZXJhdHVyZVNlcnZpY2Uge1xuICBwcml2YXRlIGRpc2tzQ2hhbmdlZCQgPSB0aGlzLndlYnNvY2tldC5zdWJzY3JpYmUoJ2Rpc2sucXVlcnknKS5waXBlKFxuICAgIGZpbHRlcigoZXZlbnQpID0+IFtcbiAgICAgIEluY29taW5nQXBpTWVzc2FnZVR5cGUuQWRkZWQsXG4gICAgICBJbmNvbWluZ0FwaU1lc3NhZ2VUeXBlLkNoYW5nZWQsXG4gICAgICBJbmNvbWluZ0FwaU1lc3NhZ2VUeXBlLlJlbW92ZWQsXG4gICAgXS5pbmNsdWRlcyhldmVudC5tc2cpKSxcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgd2Vic29ja2V0OiBXZWJTb2NrZXRTZXJ2aWNlLFxuICApIHsgfVxuXG4gIGdldFRlbXBlcmF0dXJlKCk6IE9ic2VydmFibGU8RGlza1RlbXBlcmF0dXJlcz4ge1xuICAgIHJldHVybiB0aGlzLndlYnNvY2tldFxuICAgICAgLmNhbGwoJ3dlYnVpLmVuY2xvc3VyZS5kYXNoYm9hcmQnKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHJlcGVhdCgoeyBkZWxheTogKCkgPT4gdGhpcy5kaXNrc0NoYW5nZWQkIH0pKSxcbiAgICAgICAgbWFwKChlbmNsb3N1cmVzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGVuY2xvc3VyZXMubWFwKChlbmNsb3N1cmUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGVuY2xvc3VyZS5lbGVtZW50c1tFbmNsb3N1cmVFbGVtZW50VHlwZS5BcnJheURldmljZVNsb3RdKVxuICAgICAgICAgICAgICAuZmlsdGVyKChlbGVtZW50KSA9PiBlbGVtZW50LmRldilcbiAgICAgICAgICAgICAgLm1hcCgoZWxlbWVudCkgPT4gZWxlbWVudC5kZXYpO1xuICAgICAgICAgIH0pLmZsYXQoKTtcbiAgICAgICAgfSksXG4gICAgICAgIHN3aXRjaE1hcCgoZGlza3MpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy53ZWJzb2NrZXQuY2FsbCgnZGlzay50ZW1wZXJhdHVyZXMnLCBbZGlza3NdKS5waXBlKFxuICAgICAgICAgICAgcmVwZWF0KHsgZGVsYXk6IDEwMDAwIH0pLFxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGlza3NDaGFuZ2VkJCksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSksXG4gICAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=