a2d55ad3f4e416ab763475b5a30bb5a6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmptyService = void 0;
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const empty_type_enum_1 = require("app/enums/empty-type.enum");
let EmptyService = class EmptyService {
    constructor(translate) {
        this.translate = translate;
    }
    defaultEmptyConfig(type) {
        switch (type) {
            case empty_type_enum_1.EmptyType.Loading:
                return {
                    type: empty_type_enum_1.EmptyType.Loading,
                    large: false,
                    title: this.translate.instant('Loading...'),
                };
            case empty_type_enum_1.EmptyType.Errors:
                return {
                    type: empty_type_enum_1.EmptyType.Errors,
                    large: true,
                    title: this.translate.instant('Can not retrieve response'),
                };
            case empty_type_enum_1.EmptyType.NoSearchResults:
                return {
                    title: this.translate.instant('No matching results found'),
                    type: empty_type_enum_1.EmptyType.NoSearchResults,
                    large: true,
                };
            default:
                return {
                    title: this.translate.instant('No records have been added yet'),
                    type: empty_type_enum_1.EmptyType.NoPageData,
                    large: true,
                };
        }
    }
};
exports.EmptyService = EmptyService;
EmptyService.ctorParameters = () => [
    { type: core_2.TranslateService }
];
exports.EmptyService = EmptyService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], EmptyService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZW1wdHkvZW1wdHkuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBMkM7QUFDM0MsOENBQXVEO0FBQ3ZELCtEQUFzRDtBQU0vQyxJQUFNLFlBQVksR0FBbEIsTUFBTSxZQUFZO0lBQ3ZCLFlBQW9CLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO0lBQUksQ0FBQztJQUVwRCxrQkFBa0IsQ0FBQyxJQUFlO1FBQ2hDLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFDYixLQUFLLDJCQUFTLENBQUMsT0FBTztnQkFDcEIsT0FBTztvQkFDTCxJQUFJLEVBQUUsMkJBQVMsQ0FBQyxPQUFPO29CQUN2QixLQUFLLEVBQUUsS0FBSztvQkFDWixLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO2lCQUM1QyxDQUFDO1lBQ0osS0FBSywyQkFBUyxDQUFDLE1BQU07Z0JBQ25CLE9BQU87b0JBQ0wsSUFBSSxFQUFFLDJCQUFTLENBQUMsTUFBTTtvQkFDdEIsS0FBSyxFQUFFLElBQUk7b0JBQ1gsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDO2lCQUMzRCxDQUFDO1lBQ0osS0FBSywyQkFBUyxDQUFDLGVBQWU7Z0JBQzVCLE9BQU87b0JBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDO29CQUMxRCxJQUFJLEVBQUUsMkJBQVMsQ0FBQyxlQUFlO29CQUMvQixLQUFLLEVBQUUsSUFBSTtpQkFDWixDQUFDO1lBQ0o7Z0JBQ0UsT0FBTztvQkFDTCxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLENBQUM7b0JBQy9ELElBQUksRUFBRSwyQkFBUyxDQUFDLFVBQVU7b0JBQzFCLEtBQUssRUFBRSxJQUFJO2lCQUNaLENBQUM7UUFDTixDQUFDO0lBQ0gsQ0FBQzs7QUE5QlUsb0NBQVk7Ozs7dUJBQVosWUFBWTtJQUh4QixJQUFBLGlCQUFVLEVBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csWUFBWSxDQStCeEIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZW1wdHkvZW1wdHkuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBFbXB0eVR5cGUgfSBmcm9tICdhcHAvZW51bXMvZW1wdHktdHlwZS5lbnVtJztcbmltcG9ydCB7IEVtcHR5Q29uZmlnIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvZW1wdHktY29uZmlnLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBFbXB0eVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSkgeyB9XG5cbiAgZGVmYXVsdEVtcHR5Q29uZmlnKHR5cGU6IEVtcHR5VHlwZSk6IEVtcHR5Q29uZmlnIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgRW1wdHlUeXBlLkxvYWRpbmc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogRW1wdHlUeXBlLkxvYWRpbmcsXG4gICAgICAgICAgbGFyZ2U6IGZhbHNlLFxuICAgICAgICAgIHRpdGxlOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdMb2FkaW5nLi4uJyksXG4gICAgICAgIH07XG4gICAgICBjYXNlIEVtcHR5VHlwZS5FcnJvcnM6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogRW1wdHlUeXBlLkVycm9ycyxcbiAgICAgICAgICBsYXJnZTogdHJ1ZSxcbiAgICAgICAgICB0aXRsZTogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnQ2FuIG5vdCByZXRyaWV2ZSByZXNwb25zZScpLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBFbXB0eVR5cGUuTm9TZWFyY2hSZXN1bHRzOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRpdGxlOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdObyBtYXRjaGluZyByZXN1bHRzIGZvdW5kJyksXG4gICAgICAgICAgdHlwZTogRW1wdHlUeXBlLk5vU2VhcmNoUmVzdWx0cyxcbiAgICAgICAgICBsYXJnZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGl0bGU6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ05vIHJlY29yZHMgaGF2ZSBiZWVuIGFkZGVkIHlldCcpLFxuICAgICAgICAgIHR5cGU6IEVtcHR5VHlwZS5Ob1BhZ2VEYXRhLFxuICAgICAgICAgIGxhcmdlOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cbiAgfVxufVxuIl0sInZlcnNpb24iOjN9