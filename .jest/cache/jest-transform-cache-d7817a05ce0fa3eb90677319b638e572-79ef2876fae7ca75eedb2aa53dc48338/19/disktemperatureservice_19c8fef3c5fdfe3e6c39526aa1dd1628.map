{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/disk-temperature.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,+BAKc;AACd,2EAAyE;AACzE,qFAA4E;AAE5E,wDAA2D;AAYpD,IAAM,sBAAsB,GAA5B,MAAM,sBAAsB;IASjC,YACY,SAA2B;QAA3B,cAAS,GAAT,SAAS,CAAkB;QAT/B,kBAAa,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,IAAI,CACjE,IAAA,aAAM,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC;YAChB,8CAAsB,CAAC,KAAK;YAC5B,8CAAsB,CAAC,OAAO;YAC9B,8CAAsB,CAAC,OAAO;SAC/B,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CACvB,CAAC;IAIE,CAAC;IAEL,cAAc;QACZ,OAAO,IAAI,CAAC,SAAS;aAClB,IAAI,CAAC,2BAA2B,CAAC;aACjC,IAAI,CACH,IAAA,aAAM,EAAC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,EAC7C,IAAA,UAAG,EAAC,CAAC,UAAU,EAAE,EAAE;YACjB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;gBAClC,OAAO,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,iDAAoB,CAAC,eAAe,CAAC,CAAC;qBAC3E,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC;qBAChC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QACZ,CAAC,CAAC,EACF,IAAA,gBAAS,EAAC,CAAC,KAAK,EAAE,EAAE;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAC3D,IAAA,aAAM,EAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EACxB,IAAA,gBAAS,EAAC,IAAI,CAAC,aAAa,CAAC,CAC9B,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACN,CAAC;;AAhCU,wDAAsB;;;;iCAAtB,sBAAsB;IAHlC,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,sBAAsB,CAiClC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/disk-temperature.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  filter,\n  map, Observable, repeat,\n  switchMap,\n  takeUntil,\n} from 'rxjs';\nimport { IncomingApiMessageType } from 'app/enums/api-message-type.enum';\nimport { EnclosureElementType } from 'app/enums/enclosure-slot-status.enum';\nimport { DiskTemperatures } from 'app/interfaces/disk.interface';\nimport { WebSocketService } from 'app/services/ws.service';\n\nexport interface Temperature {\n  keys: string[];\n  values: DiskTemperatures;\n  unit: string;\n  symbolText: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DiskTemperatureService {\n  private disksChanged$ = this.websocket.subscribe('disk.query').pipe(\n    filter((event) => [\n      IncomingApiMessageType.Added,\n      IncomingApiMessageType.Changed,\n      IncomingApiMessageType.Removed,\n    ].includes(event.msg)),\n  );\n\n  constructor(\n    protected websocket: WebSocketService,\n  ) { }\n\n  getTemperature(): Observable<DiskTemperatures> {\n    return this.websocket\n      .call('webui.enclosure.dashboard')\n      .pipe(\n        repeat(({ delay: () => this.disksChanged$ })),\n        map((enclosures) => {\n          return enclosures.map((enclosure) => {\n            return Object.values(enclosure.elements[EnclosureElementType.ArrayDeviceSlot])\n              .filter((element) => element.dev)\n              .map((element) => element.dev);\n          }).flat();\n        }),\n        switchMap((disks) => {\n          return this.websocket.call('disk.temperatures', [disks]).pipe(\n            repeat({ delay: 10000 }),\n            takeUntil(this.disksChanged$),\n          );\n        }),\n      );\n  }\n}\n"],"version":3}