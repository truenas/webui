{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/autocomplete/testing.mjs"],
  "sourcesContent": ["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { MatOptionHarness, MatOptgroupHarness } from '@angular/material/core/testing';\n\nclass MatAutocompleteHarness extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        this._documentRootLocator = this.documentRootLocatorFactory();\n    }\n    /** The selector for the host element of a `MatAutocomplete` instance. */\n    static { this.hostSelector = '.mat-mdc-autocomplete-trigger'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for an autocomplete with specific\n     * attributes.\n     * @param options Options for filtering which autocomplete instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(this, options)\n            .addOption('value', options.value, (harness, value) => HarnessPredicate.stringMatches(harness.getValue(), value))\n            .addOption('disabled', options.disabled, async (harness, disabled) => {\n            return (await harness.isDisabled()) === disabled;\n        });\n    }\n    /** Gets the value of the autocomplete input. */\n    async getValue() {\n        return (await this.host()).getProperty('value');\n    }\n    /** Whether the autocomplete input is disabled. */\n    async isDisabled() {\n        const disabled = (await this.host()).getAttribute('disabled');\n        return coerceBooleanProperty(await disabled);\n    }\n    /** Focuses the autocomplete input. */\n    async focus() {\n        return (await this.host()).focus();\n    }\n    /** Blurs the autocomplete input. */\n    async blur() {\n        return (await this.host()).blur();\n    }\n    /** Whether the autocomplete input is focused. */\n    async isFocused() {\n        return (await this.host()).isFocused();\n    }\n    /** Enters text into the autocomplete. */\n    async enterText(value) {\n        return (await this.host()).sendKeys(value);\n    }\n    /** Clears the input value. */\n    async clear() {\n        return (await this.host()).clear();\n    }\n    /** Gets the options inside the autocomplete panel. */\n    async getOptions(filters) {\n        if (!(await this.isOpen())) {\n            throw new Error('Unable to retrieve options for autocomplete. Autocomplete panel is closed.');\n        }\n        return this._documentRootLocator.locatorForAll(MatOptionHarness.with({\n            ...(filters || {}),\n            ancestor: await this._getPanelSelector(),\n        }))();\n    }\n    /** Gets the option groups inside the autocomplete panel. */\n    async getOptionGroups(filters) {\n        if (!(await this.isOpen())) {\n            throw new Error('Unable to retrieve option groups for autocomplete. Autocomplete panel is closed.');\n        }\n        return this._documentRootLocator.locatorForAll(MatOptgroupHarness.with({\n            ...(filters || {}),\n            ancestor: await this._getPanelSelector(),\n        }))();\n    }\n    /** Selects the first option matching the given filters. */\n    async selectOption(filters) {\n        await this.focus(); // Focus the input to make sure the autocomplete panel is shown.\n        const options = await this.getOptions(filters);\n        if (!options.length) {\n            throw Error(`Could not find a mat-option matching ${JSON.stringify(filters)}`);\n        }\n        await options[0].click();\n    }\n    /** Whether the autocomplete is open. */\n    async isOpen() {\n        const panel = await this._getPanel();\n        return !!panel && (await panel.hasClass(`mat-mdc-autocomplete-visible`));\n    }\n    /** Gets the panel associated with this autocomplete trigger. */\n    async _getPanel() {\n        // Technically this is static, but it needs to be in a\n        // function, because the autocomplete's panel ID can changed.\n        return this._documentRootLocator.locatorForOptional(await this._getPanelSelector())();\n    }\n    /** Gets the selector that can be used to find the autocomplete trigger's panel. */\n    async _getPanelSelector() {\n        return `#${await (await this.host()).getAttribute('aria-controls')}`;\n    }\n}\n\nexport { MatAutocompleteHarness };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsC;AACtC,qBAAmD;AACnD,IAAAA,kBAAqD;AAErD,MAAM,0BAAN,MAAM,gCAA+B,gCAAiB;AAAA,EAClD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,uBAAuB,KAAK,2BAA2B;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,KAAK,UAAU,CAAC,GAAG;AACtB,WAAO,IAAI,gCAAiB,MAAM,OAAO,EACpC,UAAU,SAAS,QAAQ,OAAO,CAAC,SAAS,UAAU,gCAAiB,cAAc,QAAQ,SAAS,GAAG,KAAK,CAAC,EAC/G,UAAU,YAAY,QAAQ,UAAU,CAAO,SAAS,aAAa;AACtE,cAAQ,MAAM,QAAQ,WAAW,OAAO;AAAA,IAC5C,EAAC;AAAA,EACL;AAAA;AAAA,EAEM,WAAW;AAAA;AACb,cAAQ,MAAM,KAAK,KAAK,GAAG,YAAY,OAAO;AAAA,IAClD;AAAA;AAAA;AAAA,EAEM,aAAa;AAAA;AACf,YAAM,YAAY,MAAM,KAAK,KAAK,GAAG,aAAa,UAAU;AAC5D,iBAAO,uCAAsB,MAAM,QAAQ;AAAA,IAC/C;AAAA;AAAA;AAAA,EAEM,QAAQ;AAAA;AACV,cAAQ,MAAM,KAAK,KAAK,GAAG,MAAM;AAAA,IACrC;AAAA;AAAA;AAAA,EAEM,OAAO;AAAA;AACT,cAAQ,MAAM,KAAK,KAAK,GAAG,KAAK;AAAA,IACpC;AAAA;AAAA;AAAA,EAEM,YAAY;AAAA;AACd,cAAQ,MAAM,KAAK,KAAK,GAAG,UAAU;AAAA,IACzC;AAAA;AAAA;AAAA,EAEM,UAAU,OAAO;AAAA;AACnB,cAAQ,MAAM,KAAK,KAAK,GAAG,SAAS,KAAK;AAAA,IAC7C;AAAA;AAAA;AAAA,EAEM,QAAQ;AAAA;AACV,cAAQ,MAAM,KAAK,KAAK,GAAG,MAAM;AAAA,IACrC;AAAA;AAAA;AAAA,EAEM,WAAW,SAAS;AAAA;AACtB,UAAI,EAAE,MAAM,KAAK,OAAO,IAAI;AACxB,cAAM,IAAI,MAAM,4EAA4E;AAAA,MAChG;AACA,aAAO,KAAK,qBAAqB,cAAc,iCAAiB,KAAK,iCAC7D,WAAW,CAAC,IADiD;AAAA,QAEjE,UAAU,MAAM,KAAK,kBAAkB;AAAA,MAC3C,EAAC,CAAC,EAAE;AAAA,IACR;AAAA;AAAA;AAAA,EAEM,gBAAgB,SAAS;AAAA;AAC3B,UAAI,EAAE,MAAM,KAAK,OAAO,IAAI;AACxB,cAAM,IAAI,MAAM,kFAAkF;AAAA,MACtG;AACA,aAAO,KAAK,qBAAqB,cAAc,mCAAmB,KAAK,iCAC/D,WAAW,CAAC,IADmD;AAAA,QAEnE,UAAU,MAAM,KAAK,kBAAkB;AAAA,MAC3C,EAAC,CAAC,EAAE;AAAA,IACR;AAAA;AAAA;AAAA,EAEM,aAAa,SAAS;AAAA;AACxB,YAAM,KAAK,MAAM;AACjB,YAAM,UAAU,MAAM,KAAK,WAAW,OAAO;AAC7C,UAAI,CAAC,QAAQ,QAAQ;AACjB,cAAM,MAAM,wCAAwC,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,MACjF;AACA,YAAM,QAAQ,CAAC,EAAE,MAAM;AAAA,IAC3B;AAAA;AAAA;AAAA,EAEM,SAAS;AAAA;AACX,YAAM,QAAQ,MAAM,KAAK,UAAU;AACnC,aAAO,CAAC,CAAC,UAAU,MAAM,MAAM,SAAS,8BAA8B;AAAA,IAC1E;AAAA;AAAA;AAAA,EAEM,YAAY;AAAA;AAGd,aAAO,KAAK,qBAAqB,mBAAmB,MAAM,KAAK,kBAAkB,CAAC,EAAE;AAAA,IACxF;AAAA;AAAA;AAAA,EAEM,oBAAoB;AAAA;AACtB,aAAO,IAAI,OAAO,MAAM,KAAK,KAAK,GAAG,aAAa,eAAe,CAAC;AAAA,IACtE;AAAA;AACJ;AAvFa,wBAAK,eAAe;AANjC,IAAM,yBAAN;",
  "names": ["import_testing"]
}
