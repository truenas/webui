{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@bugsplat/angular-tree-component/fesm2022/bugsplat-angular-tree-component.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Directive, Input, Injectable, Component, ViewEncapsulation, EventEmitter, Output, HostListener, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { autorun, reaction, computed, observable, action } from 'mobx';\n\nclass TreeMobxAutorunDirective {\n    constructor(templateRef, viewContainer) {\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n        this.templateBindings = {};\n    }\n    ngOnInit() {\n        this.view = this.viewContainer.createEmbeddedView(this.templateRef);\n        if (this.dispose) {\n            this.dispose();\n        }\n        if (this.shouldDetach()) {\n            this.view.detach();\n        }\n        this.autoDetect(this.view);\n    }\n    shouldDetach() {\n        return this.treeMobxAutorun && this.treeMobxAutorun.detach;\n    }\n    autoDetect(view) {\n        this.dispose = autorun(() => view.detectChanges());\n    }\n    ngOnDestroy() {\n        if (this.dispose) {\n            this.dispose();\n        }\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeMobxAutorunDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    /** @nocollapse */ static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeMobxAutorunDirective, selector: \"[treeMobxAutorun]\", inputs: { treeMobxAutorun: \"treeMobxAutorun\" }, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeMobxAutorunDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[treeMobxAutorun]' }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }], propDecorators: { treeMobxAutorun: [{\n                type: Input\n            }] } });\n\nconst KEYS = {\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    ENTER: 13,\n    SPACE: 32,\n    CONTEXT_MENU: 32\n};\n\nconst TREE_ACTIONS = {\n    TOGGLE_ACTIVE: (tree, node, $event) => node && node.toggleActivated(),\n    TOGGLE_ACTIVE_MULTI: (tree, node, $event) => node && node.toggleActivated(true),\n    TOGGLE_SELECTED: (tree, node, $event) => node && node.toggleSelected(),\n    ACTIVATE: (tree, node, $event) => node.setIsActive(true),\n    DEACTIVATE: (tree, node, $event) => node.setIsActive(false),\n    SELECT: (tree, node, $event) => node.setIsSelected(true),\n    DESELECT: (tree, node, $event) => node.setIsSelected(false),\n    FOCUS: (tree, node, $event) => node.focus(),\n    TOGGLE_EXPANDED: (tree, node, $event) => node.hasChildren && node.toggleExpanded(),\n    EXPAND: (tree, node, $event) => node.expand(),\n    COLLAPSE: (tree, node, $event) => node.collapse(),\n    DRILL_DOWN: (tree, node, $event) => tree.focusDrillDown(),\n    DRILL_UP: (tree, node, $event) => tree.focusDrillUp(),\n    NEXT_NODE: (tree, node, $event) => tree.focusNextNode(),\n    PREVIOUS_NODE: (tree, node, $event) => tree.focusPreviousNode(),\n    MOVE_NODE: (tree, node, $event, { from, to }) => {\n        // default action assumes from = node, to = {parent, index}\n        if ($event.ctrlKey) {\n            tree.copyNode(from, to);\n        }\n        else {\n            tree.moveNode(from, to);\n        }\n    }\n};\nconst defaultActionMapping = {\n    mouse: {\n        click: TREE_ACTIONS.TOGGLE_ACTIVE,\n        dblClick: null,\n        contextMenu: null,\n        expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\n        checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\n        drop: TREE_ACTIONS.MOVE_NODE\n    },\n    keys: {\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\n    }\n};\nclass TreeOptions {\n    get hasChildrenField() { return this.options.hasChildrenField || 'hasChildren'; }\n    get childrenField() { return this.options.childrenField || 'children'; }\n    get displayField() { return this.options.displayField || 'name'; }\n    get idField() { return this.options.idField || 'id'; }\n    get isExpandedField() { return this.options.isExpandedField || 'isExpanded'; }\n    get getChildren() { return this.options.getChildren; }\n    get levelPadding() { return this.options.levelPadding || 0; }\n    get useVirtualScroll() { return this.options.useVirtualScroll; }\n    get animateExpand() { return this.options.animateExpand; }\n    get animateSpeed() { return this.options.animateSpeed || 1; }\n    get animateAcceleration() { return this.options.animateAcceleration || 1.2; }\n    get scrollOnActivate() { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\n    get rtl() { return !!this.options.rtl; }\n    get rootId() { return this.options.rootId; }\n    get useCheckbox() { return this.options.useCheckbox; }\n    get useTriState() { return this.options.useTriState === undefined ? true : this.options.useTriState; }\n    get scrollContainer() { return this.options.scrollContainer; }\n    get allowDragoverStyling() { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\n    constructor(options = {}) {\n        this.options = options;\n        this.actionMapping = {\n            mouse: {\n                click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,\n                dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,\n                contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,\n                expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,\n                checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,\n                drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,\n                dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,\n                drag: this.options?.actionMapping?.mouse?.drag ?? undefined,\n                dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,\n                dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,\n                dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,\n                dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,\n                mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,\n                mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,\n            },\n            keys: {\n                [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\n                [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\n                [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\n                [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\n                [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\n                [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\n            }\n        };\n        if (this.options?.actionMapping?.keys) {\n            this.actionMapping.keys = {\n                ...this.actionMapping.keys,\n                ...this.options.actionMapping.keys\n            };\n        }\n        if (options.rtl) {\n            this.actionMapping.keys[KEYS.RIGHT] = options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;\n            this.actionMapping.keys[KEYS.LEFT] = options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;\n        }\n    }\n    getNodeClone(node) {\n        if (this.options.getNodeClone) {\n            return this.options.getNodeClone(node);\n        }\n        // remove id from clone\n        // keeping ie11 compatibility\n        const nodeClone = Object.assign({}, node.data);\n        if (nodeClone.id) {\n            delete nodeClone.id;\n        }\n        return nodeClone;\n    }\n    allowDrop(element, to, $event) {\n        if (this.options.allowDrop instanceof Function) {\n            return this.options.allowDrop(element, to, $event);\n        }\n        else {\n            return this.options.allowDrop === undefined ? true : this.options.allowDrop;\n        }\n    }\n    allowDrag(node) {\n        if (this.options.allowDrag instanceof Function) {\n            return this.options.allowDrag(node);\n        }\n        else {\n            return this.options.allowDrag;\n        }\n    }\n    nodeClass(node) {\n        return this.options.nodeClass ? this.options.nodeClass(node) : '';\n    }\n    nodeHeight(node) {\n        if (node.data.virtual) {\n            return 0;\n        }\n        let nodeHeight = this.options.nodeHeight || 22;\n        if (typeof nodeHeight === 'function') {\n            nodeHeight = nodeHeight(node);\n        }\n        // account for drop slots:\n        return nodeHeight + (node.index === 0 ? 2 : 1) * this.dropSlotHeight;\n    }\n    get dropSlotHeight() {\n        return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\n    }\n}\n\nconst TREE_EVENTS = {\n    toggleExpanded: 'toggleExpanded',\n    activate: 'activate',\n    deactivate: 'deactivate',\n    nodeActivate: 'nodeActivate',\n    nodeDeactivate: 'nodeDeactivate',\n    select: 'select',\n    deselect: 'deselect',\n    focus: 'focus',\n    blur: 'blur',\n    initialized: 'initialized',\n    updateData: 'updateData',\n    moveNode: 'moveNode',\n    copyNode: 'copyNode',\n    event: 'event',\n    loadNodeChildren: 'loadNodeChildren',\n    changeFilter: 'changeFilter',\n    stateChange: 'stateChange'\n};\n\nvar __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$3 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nclass TreeNode {\n    get isHidden() { return this.treeModel.isHidden(this); }\n    ;\n    get isExpanded() { return this.treeModel.isExpanded(this); }\n    ;\n    get isActive() { return this.treeModel.isActive(this); }\n    ;\n    get isFocused() { return this.treeModel.isNodeFocused(this); }\n    ;\n    get isSelected() {\n        if (this.isSelectable()) {\n            return this.treeModel.isSelected(this);\n        }\n        else {\n            return this.children.some((node) => node.isSelected);\n        }\n    }\n    ;\n    get isAllSelected() {\n        if (this.isSelectable()) {\n            return this.treeModel.isSelected(this);\n        }\n        else {\n            return this.children.every((node) => node.isAllSelected);\n        }\n    }\n    ;\n    get isPartiallySelected() {\n        return this.isSelected && !this.isAllSelected;\n    }\n    get level() {\n        return this.parent ? this.parent.level + 1 : 0;\n    }\n    get path() {\n        return this.parent ? [...this.parent.path, this.id] : [];\n    }\n    get elementRef() {\n        throw `Element Ref is no longer supported since introducing virtual scroll\\n\n      You may use a template to obtain a reference to the element`;\n    }\n    get originalNode() { return this._originalNode; }\n    ;\n    constructor(data, parent, treeModel, index) {\n        this.data = data;\n        this.parent = parent;\n        this.treeModel = treeModel;\n        this.position = 0;\n        this.allowDrop = (element, $event) => {\n            return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\n        };\n        this.allowDragoverStyling = () => {\n            return this.options.allowDragoverStyling;\n        };\n        if (this.id === undefined || this.id === null) {\n            this.id = uuid();\n        } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\n        this.index = index;\n        if (this.getField('children')) {\n            this._initChildren();\n        }\n        this.autoLoadChildren();\n    }\n    // helper get functions:\n    get hasChildren() {\n        return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\n    }\n    get isCollapsed() { return !this.isExpanded; }\n    get isLeaf() { return !this.hasChildren; }\n    get isRoot() { return this.parent.data.virtual; }\n    get realParent() { return this.isRoot ? null : this.parent; }\n    // proxy functions:\n    get options() { return this.treeModel.options; }\n    fireEvent(event) { this.treeModel.fireEvent(event); }\n    // field accessors:\n    get displayField() {\n        return this.getField('display');\n    }\n    get id() {\n        return this.getField('id');\n    }\n    set id(value) {\n        this.setField('id', value);\n    }\n    getField(key) {\n        return this.data[this.options[`${key}Field`]];\n    }\n    setField(key, value) {\n        this.data[this.options[`${key}Field`]] = value;\n    }\n    // traversing:\n    _findAdjacentSibling(steps, skipHidden = false) {\n        const siblings = this._getParentsChildren(skipHidden);\n        const index = siblings.indexOf(this);\n        return siblings.length > index + steps ? siblings[index + steps] : null;\n    }\n    findNextSibling(skipHidden = false) {\n        return this._findAdjacentSibling(+1, skipHidden);\n    }\n    findPreviousSibling(skipHidden = false) {\n        return this._findAdjacentSibling(-1, skipHidden);\n    }\n    getVisibleChildren() {\n        return this.visibleChildren;\n    }\n    get visibleChildren() {\n        return (this.children || []).filter((node) => !node.isHidden);\n    }\n    getFirstChild(skipHidden = false) {\n        let children = skipHidden ? this.visibleChildren : this.children;\n        return children != null && children.length ? children[0] : null;\n    }\n    getLastChild(skipHidden = false) {\n        let children = skipHidden ? this.visibleChildren : this.children;\n        return children != null && children.length ? children[children.length - 1] : null;\n    }\n    findNextNode(goInside = true, skipHidden = false) {\n        return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\n            this.findNextSibling(skipHidden) ||\n            this.parent && this.parent.findNextNode(false, skipHidden);\n    }\n    findPreviousNode(skipHidden = false) {\n        let previousSibling = this.findPreviousSibling(skipHidden);\n        if (!previousSibling) {\n            return this.realParent;\n        }\n        return previousSibling._getLastOpenDescendant(skipHidden);\n    }\n    _getLastOpenDescendant(skipHidden = false) {\n        const lastChild = this.getLastChild(skipHidden);\n        return (this.isCollapsed || !lastChild)\n            ? this\n            : lastChild._getLastOpenDescendant(skipHidden);\n    }\n    _getParentsChildren(skipHidden = false) {\n        const children = this.parent &&\n            (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\n        return children || [];\n    }\n    getIndexInParent(skipHidden = false) {\n        return this._getParentsChildren(skipHidden).indexOf(this);\n    }\n    isDescendantOf(node) {\n        if (this === node)\n            return true;\n        else\n            return this.parent && this.parent.isDescendantOf(node);\n    }\n    getNodePadding() {\n        return this.options.levelPadding * (this.level - 1) + 'px';\n    }\n    getClass() {\n        return [this.options.nodeClass(this), `tree-node-level-${this.level}`].join(' ');\n    }\n    onDrop($event) {\n        this.mouseAction('drop', $event.event, {\n            from: $event.element,\n            to: { parent: this, index: 0, dropOnNode: true }\n        });\n    }\n    allowDrag() {\n        return this.options.allowDrag(this);\n    }\n    // helper methods:\n    loadNodeChildren() {\n        if (!this.options.getChildren) {\n            return Promise.resolve(); // Not getChildren method - for using redux\n        }\n        return Promise.resolve(this.options.getChildren(this))\n            .then((children) => {\n            if (children) {\n                this.setField('children', children);\n                this._initChildren();\n                if (this.options.useTriState && this.treeModel.isSelected(this)) {\n                    this.setIsSelected(true);\n                }\n                this.children.forEach((child) => {\n                    if (child.getField('isExpanded') && child.hasChildren) {\n                        child.expand();\n                    }\n                });\n            }\n        }).then(() => {\n            this.fireEvent({\n                eventName: TREE_EVENTS.loadNodeChildren,\n                node: this\n            });\n        });\n    }\n    expand() {\n        if (!this.isExpanded) {\n            this.toggleExpanded();\n        }\n        return this;\n    }\n    collapse() {\n        if (this.isExpanded) {\n            this.toggleExpanded();\n        }\n        return this;\n    }\n    doForAll(fn) {\n        Promise.resolve(fn(this)).then(() => {\n            if (this.children) {\n                this.children.forEach((child) => child.doForAll(fn));\n            }\n        });\n    }\n    expandAll() {\n        this.doForAll((node) => node.expand());\n    }\n    collapseAll() {\n        this.doForAll((node) => node.collapse());\n    }\n    ensureVisible() {\n        if (this.realParent) {\n            this.realParent.expand();\n            this.realParent.ensureVisible();\n        }\n        return this;\n    }\n    toggleExpanded() {\n        this.setIsExpanded(!this.isExpanded);\n        return this;\n    }\n    setIsExpanded(value) {\n        if (this.hasChildren) {\n            this.treeModel.setExpandedNode(this, value);\n        }\n        return this;\n    }\n    ;\n    autoLoadChildren() {\n        this.handler =\n            reaction(() => this.isExpanded, (isExpanded) => {\n                if (!this.children && this.hasChildren && isExpanded) {\n                    this.loadNodeChildren();\n                }\n            }, { fireImmediately: true });\n    }\n    dispose() {\n        if (this.children) {\n            this.children.forEach((child) => child.dispose());\n        }\n        if (this.handler) {\n            this.handler();\n        }\n        this.parent = null;\n        this.children = null;\n    }\n    setIsActive(value, multi = false) {\n        this.treeModel.setActiveNode(this, value, multi);\n        if (value) {\n            this.focus(this.options.scrollOnActivate);\n        }\n        return this;\n    }\n    isSelectable() {\n        return this.isLeaf || !this.children || !this.options.useTriState;\n    }\n    setIsSelected(value) {\n        if (this.isSelectable()) {\n            this.treeModel.setSelectedNode(this, value);\n        }\n        else {\n            this.visibleChildren.forEach((child) => child.setIsSelected(value));\n        }\n        return this;\n    }\n    toggleSelected() {\n        this.setIsSelected(!this.isSelected);\n        return this;\n    }\n    toggleActivated(multi = false) {\n        this.setIsActive(!this.isActive, multi);\n        return this;\n    }\n    setActiveAndVisible(multi = false) {\n        this.setIsActive(true, multi)\n            .ensureVisible();\n        setTimeout(this.scrollIntoView.bind(this));\n        return this;\n    }\n    scrollIntoView(force = false) {\n        this.treeModel.virtualScroll.scrollIntoView(this, force);\n    }\n    focus(scroll = true) {\n        let previousNode = this.treeModel.getFocusedNode();\n        this.treeModel.setFocusedNode(this);\n        if (scroll) {\n            this.scrollIntoView();\n        }\n        if (previousNode) {\n            this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\n        }\n        this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\n        return this;\n    }\n    blur() {\n        let previousNode = this.treeModel.getFocusedNode();\n        this.treeModel.setFocusedNode(null);\n        if (previousNode) {\n            this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\n        }\n        return this;\n    }\n    setIsHidden(value) {\n        this.treeModel.setIsHidden(this, value);\n    }\n    hide() {\n        this.setIsHidden(true);\n    }\n    show() {\n        this.setIsHidden(false);\n    }\n    mouseAction(actionName, $event, data = null) {\n        this.treeModel.setFocus(true);\n        const actionMapping = this.options.actionMapping.mouse;\n        const mouseAction = actionMapping[actionName];\n        if (mouseAction) {\n            mouseAction(this.treeModel, this, $event, data);\n        }\n    }\n    getSelfHeight() {\n        return this.options.nodeHeight(this);\n    }\n    _initChildren() {\n        this.children = this.getField('children')\n            .map((c, index) => new TreeNode(c, this, this.treeModel, index));\n    }\n}\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"isHidden\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"isExpanded\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"isActive\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"isFocused\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"isSelected\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"isAllSelected\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"isPartiallySelected\", null);\n__decorate$3([\n    observable,\n    __metadata$3(\"design:type\", Array)\n], TreeNode.prototype, \"children\", void 0);\n__decorate$3([\n    observable,\n    __metadata$3(\"design:type\", Number)\n], TreeNode.prototype, \"index\", void 0);\n__decorate$3([\n    observable,\n    __metadata$3(\"design:type\", Object)\n], TreeNode.prototype, \"position\", void 0);\n__decorate$3([\n    observable,\n    __metadata$3(\"design:type\", Number)\n], TreeNode.prototype, \"height\", void 0);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Number),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"level\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Array),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"path\", null);\n__decorate$3([\n    computed,\n    __metadata$3(\"design:type\", Object),\n    __metadata$3(\"design:paramtypes\", [])\n], TreeNode.prototype, \"visibleChildren\", null);\n__decorate$3([\n    action,\n    __metadata$3(\"design:type\", Function),\n    __metadata$3(\"design:paramtypes\", [Object]),\n    __metadata$3(\"design:returntype\", void 0)\n], TreeNode.prototype, \"setIsSelected\", null);\n__decorate$3([\n    action,\n    __metadata$3(\"design:type\", Function),\n    __metadata$3(\"design:paramtypes\", []),\n    __metadata$3(\"design:returntype\", void 0)\n], TreeNode.prototype, \"_initChildren\", null);\nfunction uuid() {\n    return Math.floor(Math.random() * 10000000000000);\n}\n\nvar __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$2 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nclass TreeModel {\n    constructor() {\n        this.options = new TreeOptions();\n        this.eventNames = Object.keys(TREE_EVENTS);\n        this.expandedNodeIds = {};\n        this.selectedLeafNodeIds = {};\n        this.activeNodeIds = {};\n        this.hiddenNodeIds = {};\n        this.focusedNodeId = null;\n        this.firstUpdate = true;\n        this.subscriptions = [];\n    }\n    static { this.focusedTree = null; }\n    // events\n    fireEvent(event) {\n        event.treeModel = this;\n        this.events[event.eventName].emit(event);\n        this.events.event.emit(event);\n    }\n    subscribe(eventName, fn) {\n        const subscription = this.events[eventName].subscribe(fn);\n        this.subscriptions.push(subscription);\n    }\n    // getters\n    getFocusedNode() {\n        return this.focusedNode;\n    }\n    getActiveNode() {\n        return this.activeNodes[0];\n    }\n    getActiveNodes() {\n        return this.activeNodes;\n    }\n    getVisibleRoots() {\n        return this.virtualRoot.visibleChildren;\n    }\n    getFirstRoot(skipHidden = false) {\n        const root = skipHidden ? this.getVisibleRoots() : this.roots;\n        return root != null && root.length ? root[0] : null;\n    }\n    getLastRoot(skipHidden = false) {\n        const root = skipHidden ? this.getVisibleRoots() : this.roots;\n        return root != null && root.length ? root[root.length - 1] : null;\n    }\n    get isFocused() {\n        return TreeModel.focusedTree === this;\n    }\n    isNodeFocused(node) {\n        return this.focusedNode === node;\n    }\n    isEmptyTree() {\n        return this.roots && this.roots.length === 0;\n    }\n    get focusedNode() {\n        return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\n    }\n    get expandedNodes() {\n        const nodes = Object.keys(this.expandedNodeIds)\n            .filter((id) => this.expandedNodeIds[id])\n            .map((id) => this.getNodeById(id));\n        return nodes.filter(Boolean);\n    }\n    get activeNodes() {\n        const nodes = Object.keys(this.activeNodeIds)\n            .filter((id) => this.activeNodeIds[id])\n            .map((id) => this.getNodeById(id));\n        return nodes.filter(Boolean);\n    }\n    get hiddenNodes() {\n        const nodes = Object.keys(this.hiddenNodeIds)\n            .filter((id) => this.hiddenNodeIds[id])\n            .map((id) => this.getNodeById(id));\n        return nodes.filter(Boolean);\n    }\n    get selectedLeafNodes() {\n        const nodes = Object.keys(this.selectedLeafNodeIds)\n            .filter((id) => this.selectedLeafNodeIds[id])\n            .map((id) => this.getNodeById(id));\n        return nodes.filter(Boolean);\n    }\n    // locating nodes\n    getNodeByPath(path, startNode = null) {\n        if (!path)\n            return null;\n        startNode = startNode || this.virtualRoot;\n        if (path.length === 0)\n            return startNode;\n        if (!startNode.children)\n            return null;\n        const childId = path.shift();\n        const childNode = startNode.children.find(c => c.id === childId);\n        if (!childNode)\n            return null;\n        return this.getNodeByPath(path, childNode);\n    }\n    getNodeById(id) {\n        const idStr = id.toString();\n        return this.getNodeBy((node) => node.id.toString() === idStr);\n    }\n    getNodeBy(predicate, startNode = null) {\n        startNode = startNode || this.virtualRoot;\n        if (!startNode.children)\n            return null;\n        const found = startNode.children.find(predicate);\n        if (found) { // found in children\n            return found;\n        }\n        else { // look in children's children\n            for (let child of startNode.children) {\n                const foundInChildren = this.getNodeBy(predicate, child);\n                if (foundInChildren)\n                    return foundInChildren;\n            }\n        }\n    }\n    isExpanded(node) {\n        return this.expandedNodeIds[node.id];\n    }\n    isHidden(node) {\n        return this.hiddenNodeIds[node.id];\n    }\n    isActive(node) {\n        return this.activeNodeIds[node.id];\n    }\n    isSelected(node) {\n        return this.selectedLeafNodeIds[node.id];\n    }\n    ngOnDestroy() {\n        this.dispose();\n        this.unsubscribeAll();\n    }\n    dispose() {\n        // Dispose reactions of the replaced nodes\n        if (this.virtualRoot) {\n            this.virtualRoot.dispose();\n        }\n    }\n    unsubscribeAll() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n    // actions\n    setData({ nodes, options = null, events = null }) {\n        if (options) {\n            this.options = new TreeOptions(options);\n        }\n        if (events) {\n            this.events = events;\n        }\n        if (nodes) {\n            this.nodes = nodes;\n        }\n        this.update();\n    }\n    update() {\n        // Rebuild tree:\n        let virtualRootConfig = {\n            id: this.options.rootId,\n            virtual: true,\n            [this.options.childrenField]: this.nodes\n        };\n        this.dispose();\n        this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\n        this.roots = this.virtualRoot.children;\n        // Fire event:\n        if (this.firstUpdate) {\n            if (this.roots) {\n                this.firstUpdate = false;\n                this._calculateExpandedNodes();\n            }\n        }\n        else {\n            this.fireEvent({ eventName: TREE_EVENTS.updateData });\n        }\n    }\n    setFocusedNode(node) {\n        this.focusedNodeId = node ? node.id : null;\n    }\n    setFocus(value) {\n        TreeModel.focusedTree = value ? this : null;\n    }\n    doForAll(fn) {\n        this.roots.forEach((root) => root.doForAll(fn));\n    }\n    focusNextNode() {\n        let previousNode = this.getFocusedNode();\n        let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\n        if (nextNode)\n            nextNode.focus();\n    }\n    focusPreviousNode() {\n        let previousNode = this.getFocusedNode();\n        let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\n        if (nextNode)\n            nextNode.focus();\n    }\n    focusDrillDown() {\n        let previousNode = this.getFocusedNode();\n        if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\n            previousNode.toggleExpanded();\n        }\n        else {\n            let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\n            if (nextNode)\n                nextNode.focus();\n        }\n    }\n    focusDrillUp() {\n        let previousNode = this.getFocusedNode();\n        if (!previousNode)\n            return;\n        if (previousNode.isExpanded) {\n            previousNode.toggleExpanded();\n        }\n        else {\n            let nextNode = previousNode.realParent;\n            if (nextNode)\n                nextNode.focus();\n        }\n    }\n    setActiveNode(node, value, multi = false) {\n        if (multi) {\n            this._setActiveNodeMulti(node, value);\n        }\n        else {\n            this._setActiveNodeSingle(node, value);\n        }\n        if (value) {\n            node.focus(this.options.scrollOnActivate);\n            this.fireEvent({ eventName: TREE_EVENTS.activate, node });\n            this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\n        }\n        else {\n            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\n            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\n        }\n    }\n    setSelectedNode(node, value) {\n        this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, { [node.id]: value });\n        if (value) {\n            node.focus();\n            this.fireEvent({ eventName: TREE_EVENTS.select, node });\n        }\n        else {\n            this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\n        }\n    }\n    setExpandedNode(node, value) {\n        this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [node.id]: value });\n        this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\n    }\n    expandAll() {\n        this.roots.forEach((root) => root.expandAll());\n    }\n    collapseAll() {\n        this.roots.forEach((root) => root.collapseAll());\n    }\n    setIsHidden(node, value) {\n        this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, { [node.id]: value });\n    }\n    setHiddenNodeIds(nodeIds) {\n        this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\n            [id]: true\n        }), {});\n    }\n    performKeyAction(node, $event) {\n        const keyAction = this.options.actionMapping.keys[$event.keyCode];\n        if (keyAction) {\n            $event.preventDefault();\n            keyAction(this, node, $event);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    filterNodes(filter, autoShow = true) {\n        let filterFn;\n        if (!filter) {\n            return this.clearFilter();\n        }\n        // support function and string filter\n        if (filter && typeof filter.valueOf() === 'string') {\n            filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n        }\n        else if (filter && typeof filter === 'function') {\n            filterFn = filter;\n        }\n        else {\n            console.error('Don\\'t know what to do with filter', filter);\n            console.error('Should be either a string or function');\n            return;\n        }\n        const ids = {};\n        this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\n        this.hiddenNodeIds = ids;\n        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\n    }\n    clearFilter() {\n        this.hiddenNodeIds = {};\n        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\n    }\n    moveNode(node, to) {\n        const fromIndex = node.getIndexInParent();\n        const fromParent = node.parent;\n        if (!this.canMoveNode(node, to, fromIndex))\n            return;\n        const fromChildren = fromParent.getField('children');\n        // If node doesn't have children - create children array\n        if (!to.parent.getField('children')) {\n            to.parent.setField('children', []);\n        }\n        const toChildren = to.parent.getField('children');\n        const originalNode = fromChildren.splice(fromIndex, 1)[0];\n        // Compensate for index if already removed from parent:\n        let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\n        toChildren.splice(toIndex, 0, originalNode);\n        fromParent.treeModel.update();\n        if (to.parent.treeModel !== fromParent.treeModel) {\n            to.parent.treeModel.update();\n        }\n        this.fireEvent({\n            eventName: TREE_EVENTS.moveNode,\n            node: originalNode,\n            to: { parent: to.parent.data, index: toIndex },\n            from: { parent: fromParent.data, index: fromIndex }\n        });\n    }\n    copyNode(node, to) {\n        const fromIndex = node.getIndexInParent();\n        if (!this.canMoveNode(node, to, fromIndex))\n            return;\n        // If node doesn't have children - create children array\n        if (!to.parent.getField('children')) {\n            to.parent.setField('children', []);\n        }\n        const toChildren = to.parent.getField('children');\n        const nodeCopy = this.options.getNodeClone(node);\n        toChildren.splice(to.index, 0, nodeCopy);\n        node.treeModel.update();\n        if (to.parent.treeModel !== node.treeModel) {\n            to.parent.treeModel.update();\n        }\n        this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\n    }\n    getState() {\n        return {\n            expandedNodeIds: this.expandedNodeIds,\n            selectedLeafNodeIds: this.selectedLeafNodeIds,\n            activeNodeIds: this.activeNodeIds,\n            hiddenNodeIds: this.hiddenNodeIds,\n            focusedNodeId: this.focusedNodeId\n        };\n    }\n    setState(state) {\n        if (!state)\n            return;\n        Object.assign(this, {\n            expandedNodeIds: state.expandedNodeIds || {},\n            selectedLeafNodeIds: state.selectedLeafNodeIds || {},\n            activeNodeIds: state.activeNodeIds || {},\n            hiddenNodeIds: state.hiddenNodeIds || {},\n            focusedNodeId: state.focusedNodeId\n        });\n    }\n    subscribeToState(fn) {\n        autorun(() => fn(this.getState()));\n    }\n    canMoveNode(node, to, fromIndex = undefined) {\n        const fromNodeIndex = fromIndex || node.getIndexInParent();\n        // same node:\n        if (node.parent === to.parent && fromIndex === to.index) {\n            return false;\n        }\n        return !to.parent.isDescendantOf(node);\n    }\n    calculateExpandedNodes() {\n        this._calculateExpandedNodes();\n    }\n    // private methods\n    _filterNode(ids, node, filterFn, autoShow) {\n        // if node passes function then it's visible\n        let isVisible = filterFn(node);\n        if (node.children) {\n            // if one of node's children passes filter then this node is also visible\n            node.children.forEach((child) => {\n                if (this._filterNode(ids, child, filterFn, autoShow)) {\n                    isVisible = true;\n                }\n            });\n        }\n        // mark node as hidden\n        if (!isVisible) {\n            ids[node.id] = true;\n        }\n        // auto expand parents to make sure the filtered nodes are visible\n        if (autoShow && isVisible) {\n            node.ensureVisible();\n        }\n        return isVisible;\n    }\n    _calculateExpandedNodes(startNode = null) {\n        startNode = startNode || this.virtualRoot;\n        if (startNode.data[this.options.isExpandedField]) {\n            this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [startNode.id]: true });\n        }\n        if (startNode.children) {\n            startNode.children.forEach((child) => this._calculateExpandedNodes(child));\n        }\n    }\n    _setActiveNodeSingle(node, value) {\n        // Deactivate all other nodes:\n        this.activeNodes\n            .filter((activeNode) => activeNode !== node)\n            .forEach((activeNode) => {\n            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\n            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\n        });\n        if (value) {\n            this.activeNodeIds = { [node.id]: true };\n        }\n        else {\n            this.activeNodeIds = {};\n        }\n    }\n    _setActiveNodeMulti(node, value) {\n        this.activeNodeIds = Object.assign({}, this.activeNodeIds, { [node.id]: value });\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeModel, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeModel }); }\n}\n__decorate$2([\n    observable,\n    __metadata$2(\"design:type\", Array)\n], TreeModel.prototype, \"roots\", void 0);\n__decorate$2([\n    observable,\n    __metadata$2(\"design:type\", Object)\n], TreeModel.prototype, \"expandedNodeIds\", void 0);\n__decorate$2([\n    observable,\n    __metadata$2(\"design:type\", Object)\n], TreeModel.prototype, \"selectedLeafNodeIds\", void 0);\n__decorate$2([\n    observable,\n    __metadata$2(\"design:type\", Object)\n], TreeModel.prototype, \"activeNodeIds\", void 0);\n__decorate$2([\n    observable,\n    __metadata$2(\"design:type\", Object)\n], TreeModel.prototype, \"hiddenNodeIds\", void 0);\n__decorate$2([\n    observable,\n    __metadata$2(\"design:type\", Object)\n], TreeModel.prototype, \"focusedNodeId\", void 0);\n__decorate$2([\n    observable,\n    __metadata$2(\"design:type\", TreeNode)\n], TreeModel.prototype, \"virtualRoot\", void 0);\n__decorate$2([\n    computed,\n    __metadata$2(\"design:type\", Object),\n    __metadata$2(\"design:paramtypes\", [])\n], TreeModel.prototype, \"focusedNode\", null);\n__decorate$2([\n    computed,\n    __metadata$2(\"design:type\", Object),\n    __metadata$2(\"design:paramtypes\", [])\n], TreeModel.prototype, \"expandedNodes\", null);\n__decorate$2([\n    computed,\n    __metadata$2(\"design:type\", Object),\n    __metadata$2(\"design:paramtypes\", [])\n], TreeModel.prototype, \"activeNodes\", null);\n__decorate$2([\n    computed,\n    __metadata$2(\"design:type\", Object),\n    __metadata$2(\"design:paramtypes\", [])\n], TreeModel.prototype, \"hiddenNodes\", null);\n__decorate$2([\n    computed,\n    __metadata$2(\"design:type\", Object),\n    __metadata$2(\"design:paramtypes\", [])\n], TreeModel.prototype, \"selectedLeafNodes\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setData\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"update\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setFocusedNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setFocus\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"doForAll\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"focusNextNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"focusPreviousNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"focusDrillDown\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"focusDrillUp\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object, Object, Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setActiveNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setSelectedNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setExpandedNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"expandAll\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"collapseAll\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setIsHidden\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setHiddenNodeIds\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"filterNodes\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", []),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"clearFilter\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"moveNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"copyNode\", null);\n__decorate$2([\n    action,\n    __metadata$2(\"design:type\", Function),\n    __metadata$2(\"design:paramtypes\", [Object]),\n    __metadata$2(\"design:returntype\", void 0)\n], TreeModel.prototype, \"setState\", null);\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeModel, decorators: [{\n            type: Injectable\n        }], propDecorators: { roots: [], expandedNodeIds: [], selectedLeafNodeIds: [], activeNodeIds: [], hiddenNodeIds: [], focusedNodeId: [], virtualRoot: [], focusedNode: [], expandedNodes: [], activeNodes: [], hiddenNodes: [], selectedLeafNodes: [], setData: [], update: [], setFocusedNode: [], setFocus: [], doForAll: [], focusNextNode: [], focusPreviousNode: [], focusDrillDown: [], focusDrillUp: [], setActiveNode: [], setSelectedNode: [], setExpandedNode: [], expandAll: [], collapseAll: [], setIsHidden: [], setHiddenNodeIds: [], filterNodes: [], clearFilter: [], moveNode: [], copyNode: [], setState: [] } });\n\nclass TreeDraggedElement {\n    constructor() {\n        this._draggedElement = null;\n    }\n    set(draggedElement) {\n        this._draggedElement = draggedElement;\n    }\n    get() {\n        return this._draggedElement;\n    }\n    isDragging() {\n        return !!this.get();\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeDraggedElement, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeDraggedElement, providedIn: 'root' }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeDraggedElement, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nvar __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$1 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\nclass TreeVirtualScroll {\n    get y() {\n        return this.yBlocks * Y_EPSILON;\n    }\n    get totalHeight() {\n        return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\n    }\n    constructor(treeModel) {\n        this.treeModel = treeModel;\n        this.yBlocks = 0;\n        this.x = 0;\n        this.viewportHeight = null;\n        this.viewport = null;\n        treeModel.virtualScroll = this;\n        this._dispose = [autorun(() => this.fixScroll())];\n    }\n    fireEvent(event) {\n        this.treeModel.fireEvent(event);\n    }\n    init() {\n        const fn = this.recalcPositions.bind(this);\n        fn();\n        this._dispose = [\n            ...this._dispose,\n            reaction(() => this.treeModel.roots, fn),\n            reaction(() => this.treeModel.expandedNodeIds, fn),\n            reaction(() => this.treeModel.hiddenNodeIds, fn)\n        ];\n        this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\n    }\n    isEnabled() {\n        return this.treeModel.options.useVirtualScroll;\n    }\n    _setYBlocks(value) {\n        this.yBlocks = value;\n    }\n    recalcPositions() {\n        this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\n    }\n    _getPositionAfter(nodes, startPos) {\n        let position = startPos;\n        nodes.forEach((node) => {\n            node.position = position;\n            position = this._getPositionAfterNode(node, position);\n        });\n        return position;\n    }\n    _getPositionAfterNode(node, startPos) {\n        let position = node.getSelfHeight() + startPos;\n        if (node.children && node.isExpanded) { // TBD: consider loading component as well\n            position = this._getPositionAfter(node.visibleChildren, position);\n        }\n        node.height = position - startPos;\n        return position;\n    }\n    clear() {\n        this._dispose.forEach((d) => d());\n    }\n    setViewport(viewport) {\n        Object.assign(this, {\n            viewport,\n            x: viewport.scrollLeft,\n            yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\n            viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\n        });\n    }\n    scrollIntoView(node, force, scrollToMiddle = true) {\n        if (node.options.scrollContainer) {\n            const scrollContainer = node.options.scrollContainer;\n            const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\n            const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\n            const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\n            if (force || // force scroll to node\n                nodeTop < scrollContainer.scrollTop || // node is above scroll container\n                nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\n                scrollContainer.scrollTop = scrollToMiddle ?\n                    nodeTop - scrollContainerHeight / 2 : // scroll to middle\n                    nodeTop; // scroll to start\n            }\n        }\n        else {\n            if (force || // force scroll to node\n                node.position < this.y || // node is above viewport\n                node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\n                if (this.viewport) {\n                    this.viewport.scrollTop = scrollToMiddle ?\n                        node.position - this.viewportHeight / 2 : // scroll to middle\n                        node.position; // scroll to start\n                    this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\n                }\n            }\n        }\n    }\n    getViewportNodes(nodes) {\n        if (!nodes)\n            return [];\n        const visibleNodes = nodes.filter((node) => !node.isHidden);\n        if (!this.isEnabled())\n            return visibleNodes;\n        if (!this.viewportHeight || !visibleNodes.length)\n            return [];\n        // When loading children async this method is called before their height and position is calculated.\n        // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\n        // which means that it loops through every visibleNodes item and push them into viewportNodes array.\n        // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\n        const lastVisibleNode = visibleNodes.slice(-1)[0];\n        if (!lastVisibleNode.height && lastVisibleNode.position === 0)\n            return [];\n        // Search for first node in the viewport using binary search\n        // Look for first node that starts after the beginning of the viewport (with buffer)\n        // Or that ends after the beginning of the viewport\n        const firstIndex = binarySearch(visibleNodes, (node) => {\n            return (node.position + Y_OFFSET > this.y) ||\n                (node.position + node.height > this.y);\n        });\n        // Search for last node in the viewport using binary search\n        // Look for first node that starts after the end of the viewport (with buffer)\n        const lastIndex = binarySearch(visibleNodes, (node) => {\n            return node.position - Y_OFFSET > this.y + this.viewportHeight;\n        }, firstIndex);\n        const viewportNodes = [];\n        for (let i = firstIndex; i <= lastIndex; i++) {\n            viewportNodes.push(visibleNodes[i]);\n        }\n        return viewportNodes;\n    }\n    fixScroll() {\n        const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\n        if (this.y < 0)\n            this._setYBlocks(0);\n        if (this.y > maxY)\n            this._setYBlocks(maxY / Y_EPSILON);\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeVirtualScroll, deps: [{ token: TreeModel }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeVirtualScroll }); }\n}\n__decorate$1([\n    observable,\n    __metadata$1(\"design:type\", Object)\n], TreeVirtualScroll.prototype, \"yBlocks\", void 0);\n__decorate$1([\n    observable,\n    __metadata$1(\"design:type\", Object)\n], TreeVirtualScroll.prototype, \"x\", void 0);\n__decorate$1([\n    observable,\n    __metadata$1(\"design:type\", Object)\n], TreeVirtualScroll.prototype, \"viewportHeight\", void 0);\n__decorate$1([\n    computed,\n    __metadata$1(\"design:type\", Object),\n    __metadata$1(\"design:paramtypes\", [])\n], TreeVirtualScroll.prototype, \"y\", null);\n__decorate$1([\n    computed,\n    __metadata$1(\"design:type\", Object),\n    __metadata$1(\"design:paramtypes\", [])\n], TreeVirtualScroll.prototype, \"totalHeight\", null);\n__decorate$1([\n    action,\n    __metadata$1(\"design:type\", Function),\n    __metadata$1(\"design:paramtypes\", [Object]),\n    __metadata$1(\"design:returntype\", void 0)\n], TreeVirtualScroll.prototype, \"_setYBlocks\", null);\n__decorate$1([\n    action,\n    __metadata$1(\"design:type\", Function),\n    __metadata$1(\"design:paramtypes\", []),\n    __metadata$1(\"design:returntype\", void 0)\n], TreeVirtualScroll.prototype, \"recalcPositions\", null);\n__decorate$1([\n    action,\n    __metadata$1(\"design:type\", Function),\n    __metadata$1(\"design:paramtypes\", [Object]),\n    __metadata$1(\"design:returntype\", void 0)\n], TreeVirtualScroll.prototype, \"setViewport\", null);\n__decorate$1([\n    action,\n    __metadata$1(\"design:type\", Function),\n    __metadata$1(\"design:paramtypes\", [Object, Object, Object]),\n    __metadata$1(\"design:returntype\", void 0)\n], TreeVirtualScroll.prototype, \"scrollIntoView\", null);\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeVirtualScroll, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: TreeModel }], propDecorators: { yBlocks: [], x: [], viewportHeight: [], y: [], totalHeight: [], _setYBlocks: [], recalcPositions: [], setViewport: [], scrollIntoView: [] } });\nfunction binarySearch(nodes, condition, firstIndex = 0) {\n    let index = firstIndex;\n    let toIndex = nodes.length - 1;\n    while (index !== toIndex) {\n        let midIndex = Math.floor((index + toIndex) / 2);\n        if (condition(nodes[midIndex])) {\n            toIndex = midIndex;\n        }\n        else {\n            if (index === midIndex)\n                index = toIndex;\n            else\n                index = midIndex;\n        }\n    }\n    return index;\n}\n\nclass LoadingComponent {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: LoadingComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: LoadingComponent, selector: \"tree-loading-component\", inputs: { template: \"template\", node: \"node\" }, ngImport: i0, template: `\n    <span *ngIf=\"!template\">loading...</span>\n    <ng-container\n      [ngTemplateOutlet]=\"template\"\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: LoadingComponent, decorators: [{\n            type: Component,\n            args: [{\n                    encapsulation: ViewEncapsulation.None,\n                    selector: 'tree-loading-component',\n                    template: `\n    <span *ngIf=\"!template\">loading...</span>\n    <ng-container\n      [ngTemplateOutlet]=\"template\"\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\n    </ng-container>\n  `,\n                }]\n        }], propDecorators: { template: [{\n                type: Input\n            }], node: [{\n                type: Input\n            }] } });\n\nclass TreeViewportComponent {\n    constructor(elementRef, virtualScroll) {\n        this.elementRef = elementRef;\n        this.virtualScroll = virtualScroll;\n        this.setViewport = this.throttle(() => {\n            this.virtualScroll.setViewport(this.elementRef.nativeElement);\n        }, 17);\n        this.scrollEventHandler = this.setViewport.bind(this);\n    }\n    ngOnInit() {\n        this.virtualScroll.init();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.setViewport();\n            this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\n        });\n        let el = this.elementRef.nativeElement;\n        el.addEventListener('scroll', this.scrollEventHandler);\n    }\n    ngOnDestroy() {\n        this.virtualScroll.clear();\n        let el = this.elementRef.nativeElement;\n        el.removeEventListener('scroll', this.scrollEventHandler);\n    }\n    getTotalHeight() {\n        return ((this.virtualScroll.isEnabled() &&\n            this.virtualScroll.totalHeight + 'px') ||\n            'auto');\n    }\n    throttle(func, timeFrame) {\n        let lastTime = 0;\n        return function () {\n            let now = Date.now();\n            if (now - lastTime >= timeFrame) {\n                func();\n                lastTime = now;\n            }\n        };\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeViewportComponent, deps: [{ token: i0.ElementRef }, { token: TreeVirtualScroll }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeViewportComponent, selector: \"tree-viewport\", providers: [TreeVirtualScroll], ngImport: i0, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div [style.height]=\"getTotalHeight()\">\n        <ng-content></ng-content>\n      </div>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: TreeMobxAutorunDirective, selector: \"[treeMobxAutorun]\", inputs: [\"treeMobxAutorun\"] }] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeViewportComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tree-viewport', providers: [TreeVirtualScroll], template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div [style.height]=\"getTotalHeight()\">\n        <ng-content></ng-content>\n      </div>\n    </ng-container>\n  ` }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: TreeVirtualScroll }] });\n\nconst DRAG_OVER_CLASS$1 = 'is-dragging-over';\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\nclass TreeDropDirective {\n    set treeAllowDrop(allowDrop) {\n        if (allowDrop instanceof Function) {\n            this._allowDrop = allowDrop;\n        }\n        else\n            this._allowDrop = (element, $event) => allowDrop;\n    }\n    allowDrop($event) {\n        return this._allowDrop(this.treeDraggedElement.get(), $event);\n    }\n    constructor(el, renderer, treeDraggedElement, ngZone) {\n        this.el = el;\n        this.renderer = renderer;\n        this.treeDraggedElement = treeDraggedElement;\n        this.ngZone = ngZone;\n        this.allowDragoverStyling = true;\n        this.onDropCallback = new EventEmitter();\n        this.onDragOverCallback = new EventEmitter();\n        this.onDragLeaveCallback = new EventEmitter();\n        this.onDragEnterCallback = new EventEmitter();\n        this._allowDrop = (element, $event) => true;\n        this.dragOverEventHandler = this.onDragOver.bind(this);\n        this.dragEnterEventHandler = this.onDragEnter.bind(this);\n        this.dragLeaveEventHandler = this.onDragLeave.bind(this);\n    }\n    ngAfterViewInit() {\n        let el = this.el.nativeElement;\n        this.ngZone.runOutsideAngular(() => {\n            el.addEventListener('dragover', this.dragOverEventHandler);\n            el.addEventListener('dragenter', this.dragEnterEventHandler);\n            el.addEventListener('dragleave', this.dragLeaveEventHandler);\n        });\n    }\n    ngOnDestroy() {\n        let el = this.el.nativeElement;\n        el.removeEventListener('dragover', this.dragOverEventHandler);\n        el.removeEventListener('dragenter', this.dragEnterEventHandler);\n        el.removeEventListener('dragleave', this.dragLeaveEventHandler);\n    }\n    onDragOver($event) {\n        if (!this.allowDrop($event)) {\n            if (this.allowDragoverStyling) {\n                return this.addDisabledClass();\n            }\n            return;\n        }\n        this.onDragOverCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\n        $event.preventDefault();\n        if (this.allowDragoverStyling) {\n            this.addClass();\n        }\n    }\n    onDragEnter($event) {\n        if (!this.allowDrop($event))\n            return;\n        $event.preventDefault();\n        this.onDragEnterCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\n    }\n    onDragLeave($event) {\n        if (!this.allowDrop($event)) {\n            if (this.allowDragoverStyling) {\n                return this.removeDisabledClass();\n            }\n            return;\n        }\n        this.onDragLeaveCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\n        if (this.allowDragoverStyling) {\n            this.removeClass();\n        }\n    }\n    onDrop($event) {\n        if (!this.allowDrop($event))\n            return;\n        $event.preventDefault();\n        this.onDropCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\n        if (this.allowDragoverStyling) {\n            this.removeClass();\n        }\n        this.treeDraggedElement.set(null);\n    }\n    addClass() {\n        this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS$1);\n    }\n    removeClass() {\n        this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS$1);\n    }\n    addDisabledClass() {\n        this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n    }\n    removeDisabledClass() {\n        this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeDropDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: TreeDraggedElement }, { token: i0.NgZone }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    /** @nocollapse */ static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeDropDirective, selector: \"[treeDrop]\", inputs: { allowDragoverStyling: \"allowDragoverStyling\", treeAllowDrop: \"treeAllowDrop\" }, outputs: { onDropCallback: \"treeDrop\", onDragOverCallback: \"treeDropDragOver\", onDragLeaveCallback: \"treeDropDragLeave\", onDragEnterCallback: \"treeDropDragEnter\" }, host: { listeners: { \"drop\": \"onDrop($event)\" } }, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeDropDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[treeDrop]'\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TreeDraggedElement }, { type: i0.NgZone }], propDecorators: { allowDragoverStyling: [{\n                type: Input\n            }], onDropCallback: [{\n                type: Output,\n                args: ['treeDrop']\n            }], onDragOverCallback: [{\n                type: Output,\n                args: ['treeDropDragOver']\n            }], onDragLeaveCallback: [{\n                type: Output,\n                args: ['treeDropDragLeave']\n            }], onDragEnterCallback: [{\n                type: Output,\n                args: ['treeDropDragEnter']\n            }], treeAllowDrop: [{\n                type: Input\n            }], onDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }] } });\n\nclass TreeNodeDropSlotComponent {\n    onDrop($event) {\n        this.node.mouseAction('drop', $event.event, {\n            from: $event.element,\n            to: { parent: this.node, index: this.dropIndex }\n        });\n    }\n    allowDrop(element, $event) {\n        return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeDropSlotComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeDropSlotComponent, selector: \"TreeNodeDropSlot, tree-node-drop-slot\", inputs: { node: \"node\", dropIndex: \"dropIndex\" }, ngImport: i0, template: `\n    <div\n      class=\"node-drop-slot\"\n      (treeDrop)=\"onDrop($event)\"\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\n      [allowDragoverStyling]=\"true\">\n    </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: TreeDropDirective, selector: \"[treeDrop]\", inputs: [\"allowDragoverStyling\", \"treeAllowDrop\"], outputs: [\"treeDrop\", \"treeDropDragOver\", \"treeDropDragLeave\", \"treeDropDragEnter\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeDropSlotComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'TreeNodeDropSlot, tree-node-drop-slot', encapsulation: ViewEncapsulation.None, template: `\n    <div\n      class=\"node-drop-slot\"\n      (treeDrop)=\"onDrop($event)\"\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\n      [allowDragoverStyling]=\"true\">\n    </div>\n  ` }]\n        }], propDecorators: { node: [{\n                type: Input\n            }], dropIndex: [{\n                type: Input\n            }] } });\n\nconst EASE_ACCELERATION = 1.005;\nclass TreeAnimateOpenDirective {\n    set isOpen(value) {\n        if (value) {\n            this._show();\n            if (this.isEnabled && this._isOpen === false) {\n                this._animateOpen();\n            }\n        }\n        else {\n            this.isEnabled ? this._animateClose() : this._hide();\n        }\n        this._isOpen = !!value;\n    }\n    ;\n    constructor(renderer, templateRef, viewContainerRef) {\n        this.renderer = renderer;\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n    }\n    _show() {\n        if (this.innerElement)\n            return;\n        // create child view\n        this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\n    }\n    _hide() {\n        this.viewContainerRef.clear();\n        this.innerElement = null;\n    }\n    _animateOpen() {\n        let delta = this.animateSpeed;\n        let ease = this.animateAcceleration;\n        let maxHeight = 0;\n        // set height to 0\n        this.renderer.setStyle(this.innerElement, 'max-height', `0`);\n        // increase maxHeight until height doesn't change\n        setTimeout(() => {\n            const i = setInterval(() => {\n                if (!this._isOpen || !this.innerElement)\n                    return clearInterval(i);\n                maxHeight += delta;\n                const roundedMaxHeight = Math.round(maxHeight);\n                this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\n                const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\n                delta *= ease;\n                ease *= EASE_ACCELERATION;\n                if (height < roundedMaxHeight) {\n                    // Make maxHeight auto because animation finished and container might change height later on\n                    this.renderer.setStyle(this.innerElement, 'max-height', null);\n                    clearInterval(i);\n                }\n            }, 17);\n        });\n    }\n    _animateClose() {\n        if (!this.innerElement)\n            return;\n        let delta = this.animateSpeed;\n        let ease = this.animateAcceleration;\n        let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\n        // slowly decrease maxHeight to 0, starting from current height\n        const i = setInterval(() => {\n            if (this._isOpen || !this.innerElement)\n                return clearInterval(i);\n            height -= delta;\n            this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\n            delta *= ease;\n            ease *= EASE_ACCELERATION;\n            if (height <= 0) {\n                // after animation complete - remove child element\n                this.viewContainerRef.clear();\n                this.innerElement = null;\n                clearInterval(i);\n            }\n        }, 17);\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeAnimateOpenDirective, deps: [{ token: i0.Renderer2 }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    /** @nocollapse */ static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeAnimateOpenDirective, selector: \"[treeAnimateOpen]\", inputs: { animateSpeed: [\"treeAnimateOpenSpeed\", \"animateSpeed\"], animateAcceleration: [\"treeAnimateOpenAcceleration\", \"animateAcceleration\"], isEnabled: [\"treeAnimateOpenEnabled\", \"isEnabled\"], isOpen: [\"treeAnimateOpen\", \"isOpen\"] }, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeAnimateOpenDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[treeAnimateOpen]'\n                }]\n        }], ctorParameters: () => [{ type: i0.Renderer2 }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }], propDecorators: { animateSpeed: [{\n                type: Input,\n                args: ['treeAnimateOpenSpeed']\n            }], animateAcceleration: [{\n                type: Input,\n                args: ['treeAnimateOpenAcceleration']\n            }], isEnabled: [{\n                type: Input,\n                args: ['treeAnimateOpenEnabled']\n            }], isOpen: [{\n                type: Input,\n                args: ['treeAnimateOpen']\n            }] } });\n\nclass TreeNodeContentComponent {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeContentComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeContentComponent, selector: \"tree-node-content\", inputs: { node: \"node\", index: \"index\", template: \"template\" }, ngImport: i0, template: `\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\n  <ng-container\n    [ngTemplateOutlet]=\"template\"\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\n  </ng-container>`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeContentComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'tree-node-content',\n                    encapsulation: ViewEncapsulation.None,\n                    template: `\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\n  <ng-container\n    [ngTemplateOutlet]=\"template\"\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\n  </ng-container>`,\n                }]\n        }], propDecorators: { node: [{\n                type: Input\n            }], index: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }] } });\n\nconst DRAG_OVER_CLASS = 'is-dragging-over';\nclass TreeDragDirective {\n    constructor(el, renderer, treeDraggedElement, ngZone) {\n        this.el = el;\n        this.renderer = renderer;\n        this.treeDraggedElement = treeDraggedElement;\n        this.ngZone = ngZone;\n        this.dragEventHandler = this.onDrag.bind(this);\n    }\n    ngAfterViewInit() {\n        let el = this.el.nativeElement;\n        this.ngZone.runOutsideAngular(() => {\n            el.addEventListener('drag', this.dragEventHandler);\n        });\n    }\n    ngDoCheck() {\n        this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\n    }\n    ngOnDestroy() {\n        let el = this.el.nativeElement;\n        el.removeEventListener('drag', this.dragEventHandler);\n    }\n    onDragStart(ev) {\n        // setting the data is required by firefox\n        ev.dataTransfer.setData('text', ev.target.id);\n        this.treeDraggedElement.set(this.draggedElement);\n        if (this.draggedElement.mouseAction) {\n            this.draggedElement.mouseAction('dragStart', ev);\n        }\n    }\n    onDrag(ev) {\n        if (this.draggedElement.mouseAction) {\n            this.draggedElement.mouseAction('drag', ev);\n        }\n    }\n    onDragEnd() {\n        if (this.draggedElement.mouseAction) {\n            this.draggedElement.mouseAction('dragEnd');\n        }\n        this.treeDraggedElement.set(null);\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeDragDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: TreeDraggedElement }, { token: i0.NgZone }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    /** @nocollapse */ static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeDragDirective, selector: \"[treeDrag]\", inputs: { draggedElement: [\"treeDrag\", \"draggedElement\"], treeDragEnabled: \"treeDragEnabled\" }, host: { listeners: { \"dragstart\": \"onDragStart($event)\", \"dragend\": \"onDragEnd()\" } }, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeDragDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[treeDrag]'\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TreeDraggedElement }, { type: i0.NgZone }], propDecorators: { draggedElement: [{\n                type: Input,\n                args: ['treeDrag']\n            }], treeDragEnabled: [{\n                type: Input\n            }], onDragStart: [{\n                type: HostListener,\n                args: ['dragstart', ['$event']]\n            }], onDragEnd: [{\n                type: HostListener,\n                args: ['dragend']\n            }] } });\n\nclass TreeNodeExpanderComponent {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeExpanderComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeExpanderComponent, selector: \"tree-node-expander\", inputs: { node: \"node\" }, ngImport: i0, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <span\n        *ngIf=\"node.hasChildren\"\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\n        class=\"toggle-children-wrapper\"\n        (click)=\"node.mouseAction('expanderClick', $event)\"\n      >\n        <span class=\"toggle-children\"></span>\n      </span>\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\n      </span>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: TreeMobxAutorunDirective, selector: \"[treeMobxAutorun]\", inputs: [\"treeMobxAutorun\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeExpanderComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tree-node-expander', encapsulation: ViewEncapsulation.None, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <span\n        *ngIf=\"node.hasChildren\"\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\n        class=\"toggle-children-wrapper\"\n        (click)=\"node.mouseAction('expanderClick', $event)\"\n      >\n        <span class=\"toggle-children\"></span>\n      </span>\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\n      </span>\n    </ng-container>\n  ` }]\n        }], propDecorators: { node: [{\n                type: Input\n            }] } });\n\nclass TreeNodeCheckboxComponent {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeCheckboxComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeCheckboxComponent, selector: \"tree-node-checkbox\", inputs: { node: \"node\" }, ngImport: i0, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <input\n        class=\"tree-node-checkbox\"\n        type=\"checkbox\"\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\n        [checked]=\"node.isSelected\"\n        [indeterminate]=\"node.isPartiallySelected\"\n      />\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: TreeMobxAutorunDirective, selector: \"[treeMobxAutorun]\", inputs: [\"treeMobxAutorun\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeCheckboxComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tree-node-checkbox', encapsulation: ViewEncapsulation.None, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <input\n        class=\"tree-node-checkbox\"\n        type=\"checkbox\"\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\n        [checked]=\"node.isSelected\"\n        [indeterminate]=\"node.isPartiallySelected\"\n      />\n    </ng-container>\n  ` }]\n        }], propDecorators: { node: [{\n                type: Input\n            }] } });\n\nclass TreeNodeWrapperComponent {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeWrapperComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeWrapperComponent, selector: \"tree-node-wrapper\", inputs: { node: \"node\", index: \"index\", templates: \"templates\" }, ngImport: i0, template: `\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\n          <div class=\"node-content-wrapper\"\n               [class.node-content-wrapper-active]=\"node.isActive\"\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\n               (click)=\"node.mouseAction('click', $event)\"\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\n               (treeDrop)=\"node.onDrop($event)\"\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\n               [treeAllowDrop]=\"node.allowDrop\"\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\n               [treeDrag]=\"node\"\n               [treeDragEnabled]=\"node.allowDrag()\">\n\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\n              </tree-node-content>\n          </div>\n      </div>\n      <ng-container\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\n      </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: TreeNodeContentComponent, selector: \"tree-node-content\", inputs: [\"node\", \"index\", \"template\"] }, { kind: \"directive\", type: TreeDropDirective, selector: \"[treeDrop]\", inputs: [\"allowDragoverStyling\", \"treeAllowDrop\"], outputs: [\"treeDrop\", \"treeDropDragOver\", \"treeDropDragLeave\", \"treeDropDragEnter\"] }, { kind: \"directive\", type: TreeDragDirective, selector: \"[treeDrag]\", inputs: [\"treeDrag\", \"treeDragEnabled\"] }, { kind: \"component\", type: TreeNodeExpanderComponent, selector: \"tree-node-expander\", inputs: [\"node\"] }, { kind: \"component\", type: TreeNodeCheckboxComponent, selector: \"tree-node-checkbox\", inputs: [\"node\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeWrapperComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tree-node-wrapper', encapsulation: ViewEncapsulation.None, template: `\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\n          <div class=\"node-content-wrapper\"\n               [class.node-content-wrapper-active]=\"node.isActive\"\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\n               (click)=\"node.mouseAction('click', $event)\"\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\n               (treeDrop)=\"node.onDrop($event)\"\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\n               [treeAllowDrop]=\"node.allowDrop\"\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\n               [treeDrag]=\"node\"\n               [treeDragEnabled]=\"node.allowDrag()\">\n\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\n              </tree-node-content>\n          </div>\n      </div>\n      <ng-container\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\n      </ng-container>\n  ` }]\n        }], propDecorators: { node: [{\n                type: Input\n            }], index: [{\n                type: Input\n            }], templates: [{\n                type: Input\n            }] } });\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nclass TreeNodeCollectionComponent {\n    constructor() {\n        this._dispose = [];\n    }\n    get nodes() {\n        return this._nodes;\n    }\n    set nodes(nodes) {\n        this.setNodes(nodes);\n    }\n    get marginTop() {\n        const firstNode = this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\n        const relativePosition = firstNode && firstNode.parent\n            ? firstNode.position -\n                firstNode.parent.position -\n                firstNode.parent.getSelfHeight()\n            : 0;\n        return `${relativePosition}px`;\n    }\n    setNodes(nodes) {\n        this._nodes = nodes;\n    }\n    ngOnInit() {\n        this.virtualScroll = this.treeModel.virtualScroll;\n        this._dispose = [\n            // return node indexes so we can compare structurally,\n            reaction(() => {\n                return this.virtualScroll\n                    .getViewportNodes(this.nodes)\n                    .map(n => n.index);\n            }, nodeIndexes => {\n                this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\n            }, { compareStructural: true, fireImmediately: true }),\n            reaction(() => this.nodes, nodes => {\n                this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\n            })\n        ];\n    }\n    ngOnDestroy() {\n        this._dispose.forEach(d => d());\n    }\n    trackNode(index, node) {\n        return node.id;\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeCollectionComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeCollectionComponent, selector: \"tree-node-collection\", inputs: { nodes: \"nodes\", treeModel: \"treeModel\", templates: \"templates\" }, ngImport: i0, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div [style.margin-top]=\"marginTop\">\n        <tree-node\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\n          [node]=\"node\"\n          [index]=\"i\"\n          [templates]=\"templates\"\n        >\n        </tree-node>\n      </div>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i1.NgForOf), selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"component\", type: i0.forwardRef(() => TreeNodeComponent), selector: \"TreeNode, tree-node\", inputs: [\"node\", \"index\", \"templates\"] }, { kind: \"directive\", type: i0.forwardRef(() => TreeMobxAutorunDirective), selector: \"[treeMobxAutorun]\", inputs: [\"treeMobxAutorun\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\n__decorate([\n    observable,\n    __metadata(\"design:type\", Object)\n], TreeNodeCollectionComponent.prototype, \"_nodes\", void 0);\n__decorate([\n    observable,\n    __metadata(\"design:type\", Array)\n], TreeNodeCollectionComponent.prototype, \"viewportNodes\", void 0);\n__decorate([\n    computed,\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [])\n], TreeNodeCollectionComponent.prototype, \"marginTop\", null);\n__decorate([\n    action,\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], TreeNodeCollectionComponent.prototype, \"setNodes\", null);\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeCollectionComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'tree-node-collection',\n                    encapsulation: ViewEncapsulation.None,\n                    template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div [style.margin-top]=\"marginTop\">\n        <tree-node\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\n          [node]=\"node\"\n          [index]=\"i\"\n          [templates]=\"templates\"\n        >\n        </tree-node>\n      </div>\n    </ng-container>\n  `\n                }]\n        }], propDecorators: { nodes: [{\n                type: Input\n            }], treeModel: [{\n                type: Input\n            }], _nodes: [], templates: [{\n                type: Input\n            }], viewportNodes: [], marginTop: [], setNodes: [] } });\nclass TreeNodeChildrenComponent {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeChildrenComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeChildrenComponent, selector: \"tree-node-children\", inputs: { node: \"node\", templates: \"templates\" }, ngImport: i0, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div\n        [class.tree-children]=\"true\"\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\n        *treeAnimateOpen=\"\n          node.isExpanded;\n          speed: node.options.animateSpeed;\n          acceleration: node.options.animateAcceleration;\n          enabled: node.options.animateExpand\n        \"\n      >\n        <tree-node-collection\n          *ngIf=\"node.children\"\n          [nodes]=\"node.children\"\n          [templates]=\"templates\"\n          [treeModel]=\"node.treeModel\"\n        >\n        </tree-node-collection>\n        <tree-loading-component\n          [style.padding-left]=\"node.getNodePadding()\"\n          class=\"tree-node-loading\"\n          *ngIf=\"!node.children\"\n          [template]=\"templates.loadingTemplate\"\n          [node]=\"node\"\n        ></tree-loading-component>\n      </div>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: LoadingComponent, selector: \"tree-loading-component\", inputs: [\"template\", \"node\"] }, { kind: \"component\", type: TreeNodeCollectionComponent, selector: \"tree-node-collection\", inputs: [\"nodes\", \"treeModel\", \"templates\"] }, { kind: \"directive\", type: TreeAnimateOpenDirective, selector: \"[treeAnimateOpen]\", inputs: [\"treeAnimateOpenSpeed\", \"treeAnimateOpenAcceleration\", \"treeAnimateOpenEnabled\", \"treeAnimateOpen\"] }, { kind: \"directive\", type: TreeMobxAutorunDirective, selector: \"[treeMobxAutorun]\", inputs: [\"treeMobxAutorun\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeChildrenComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tree-node-children', encapsulation: ViewEncapsulation.None, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div\n        [class.tree-children]=\"true\"\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\n        *treeAnimateOpen=\"\n          node.isExpanded;\n          speed: node.options.animateSpeed;\n          acceleration: node.options.animateAcceleration;\n          enabled: node.options.animateExpand\n        \"\n      >\n        <tree-node-collection\n          *ngIf=\"node.children\"\n          [nodes]=\"node.children\"\n          [templates]=\"templates\"\n          [treeModel]=\"node.treeModel\"\n        >\n        </tree-node-collection>\n        <tree-loading-component\n          [style.padding-left]=\"node.getNodePadding()\"\n          class=\"tree-node-loading\"\n          *ngIf=\"!node.children\"\n          [template]=\"templates.loadingTemplate\"\n          [node]=\"node\"\n        ></tree-loading-component>\n      </div>\n    </ng-container>\n  ` }]\n        }], propDecorators: { node: [{\n                type: Input\n            }], templates: [{\n                type: Input\n            }] } });\nclass TreeNodeComponent {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeComponent, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeNodeComponent, selector: \"TreeNode, tree-node\", inputs: { node: \"node\", index: \"index\", templates: \"templates\" }, ngImport: i0, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div\n        *ngIf=\"!templates.treeNodeFullTemplate\"\n        [class]=\"node.getClass()\"\n        [class.tree-node]=\"true\"\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\n        [class.tree-node-leaf]=\"node.isLeaf\"\n        [class.tree-node-active]=\"node.isActive\"\n        [class.tree-node-focused]=\"node.isFocused\"\n      >\n        <tree-node-drop-slot\n          *ngIf=\"index === 0\"\n          [dropIndex]=\"node.index\"\n          [node]=\"node.parent\"\n        ></tree-node-drop-slot>\n\n        <tree-node-wrapper\n          [node]=\"node\"\n          [index]=\"index\"\n          [templates]=\"templates\"\n        ></tree-node-wrapper>\n\n        <tree-node-children\n          [node]=\"node\"\n          [templates]=\"templates\"\n        ></tree-node-children>\n        <tree-node-drop-slot\n          [dropIndex]=\"node.index + 1\"\n          [node]=\"node.parent\"\n        ></tree-node-drop-slot>\n      </div>\n      <ng-container\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\n        [ngTemplateOutletContext]=\"{\n          $implicit: node,\n          node: node,\n          index: index,\n          templates: templates\n        }\"\n      >\n      </ng-container>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: TreeNodeChildrenComponent, selector: \"tree-node-children\", inputs: [\"node\", \"templates\"] }, { kind: \"component\", type: TreeNodeDropSlotComponent, selector: \"TreeNodeDropSlot, tree-node-drop-slot\", inputs: [\"node\", \"dropIndex\"] }, { kind: \"component\", type: TreeNodeWrapperComponent, selector: \"tree-node-wrapper\", inputs: [\"node\", \"index\", \"templates\"] }, { kind: \"directive\", type: TreeMobxAutorunDirective, selector: \"[treeMobxAutorun]\", inputs: [\"treeMobxAutorun\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeNodeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'TreeNode, tree-node', encapsulation: ViewEncapsulation.None, template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div\n        *ngIf=\"!templates.treeNodeFullTemplate\"\n        [class]=\"node.getClass()\"\n        [class.tree-node]=\"true\"\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\n        [class.tree-node-leaf]=\"node.isLeaf\"\n        [class.tree-node-active]=\"node.isActive\"\n        [class.tree-node-focused]=\"node.isFocused\"\n      >\n        <tree-node-drop-slot\n          *ngIf=\"index === 0\"\n          [dropIndex]=\"node.index\"\n          [node]=\"node.parent\"\n        ></tree-node-drop-slot>\n\n        <tree-node-wrapper\n          [node]=\"node\"\n          [index]=\"index\"\n          [templates]=\"templates\"\n        ></tree-node-wrapper>\n\n        <tree-node-children\n          [node]=\"node\"\n          [templates]=\"templates\"\n        ></tree-node-children>\n        <tree-node-drop-slot\n          [dropIndex]=\"node.index + 1\"\n          [node]=\"node.parent\"\n        ></tree-node-drop-slot>\n      </div>\n      <ng-container\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\n        [ngTemplateOutletContext]=\"{\n          $implicit: node,\n          node: node,\n          index: index,\n          templates: templates\n        }\"\n      >\n      </ng-container>\n    </ng-container>\n  ` }]\n        }], propDecorators: { node: [{\n                type: Input\n            }], index: [{\n                type: Input\n            }], templates: [{\n                type: Input\n            }] } });\n\nclass TreeComponent {\n    // Will be handled in ngOnChanges\n    set nodes(nodes) {\n    }\n    ;\n    set options(options) {\n    }\n    ;\n    set focused(value) {\n        this.treeModel.setFocus(value);\n    }\n    set state(state) {\n        this.treeModel.setState(state);\n    }\n    constructor(treeModel, treeDraggedElement) {\n        this.treeModel = treeModel;\n        this.treeDraggedElement = treeDraggedElement;\n        treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\n        treeModel.subscribeToState((state) => this.stateChange.emit(state));\n    }\n    onKeydown($event) {\n        if (!this.treeModel.isFocused)\n            return;\n        if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase()))\n            return;\n        const focusedNode = this.treeModel.getFocusedNode();\n        this.treeModel.performKeyAction(focusedNode, $event);\n    }\n    onMousedown($event) {\n        function isOutsideClick(startElement, nodeName) {\n            return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\n        }\n        if (isOutsideClick($event.target, 'tree-root')) {\n            this.treeModel.setFocus(false);\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.options || changes.nodes) {\n            this.treeModel.setData({\n                options: changes.options && changes.options.currentValue,\n                nodes: changes.nodes && changes.nodes.currentValue,\n                events: this.pick(this, this.treeModel.eventNames)\n            });\n        }\n    }\n    sizeChanged() {\n        this.viewportComponent.setViewport();\n    }\n    pick(object, keys) {\n        return keys.reduce((obj, key) => {\n            if (object && object.hasOwnProperty(key)) {\n                obj[key] = object[key];\n            }\n            return obj;\n        }, {});\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeComponent, deps: [{ token: TreeModel }, { token: TreeDraggedElement }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    /** @nocollapse */ static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.1\", type: TreeComponent, selector: \"Tree, tree-root\", inputs: { nodes: \"nodes\", options: \"options\", focused: \"focused\", state: \"state\" }, outputs: { toggleExpanded: \"toggleExpanded\", activate: \"activate\", deactivate: \"deactivate\", nodeActivate: \"nodeActivate\", nodeDeactivate: \"nodeDeactivate\", select: \"select\", deselect: \"deselect\", focus: \"focus\", blur: \"blur\", updateData: \"updateData\", initialized: \"initialized\", moveNode: \"moveNode\", copyNode: \"copyNode\", loadNodeChildren: \"loadNodeChildren\", changeFilter: \"changeFilter\", event: \"event\", stateChange: \"stateChange\" }, host: { listeners: { \"body: keydown\": \"onKeydown($event)\", \"body: mousedown\": \"onMousedown($event)\" } }, providers: [TreeModel], queries: [{ propertyName: \"loadingTemplate\", first: true, predicate: [\"loadingTemplate\"], descendants: true }, { propertyName: \"treeNodeTemplate\", first: true, predicate: [\"treeNodeTemplate\"], descendants: true }, { propertyName: \"treeNodeWrapperTemplate\", first: true, predicate: [\"treeNodeWrapperTemplate\"], descendants: true }, { propertyName: \"treeNodeFullTemplate\", first: true, predicate: [\"treeNodeFullTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"viewportComponent\", first: true, predicate: [\"viewport\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n      <tree-viewport #viewport>\n          <div\n                  class=\"angular-tree-component\"\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\n              <tree-node-collection\n                      *ngIf=\"treeModel.roots\"\n                      [nodes]=\"treeModel.roots\"\n                      [treeModel]=\"treeModel\"\n                      [templates]=\"{\n            loadingTemplate: loadingTemplate,\n            treeNodeTemplate: treeNodeTemplate,\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\n            treeNodeFullTemplate: treeNodeFullTemplate\n          }\">\n              </tree-node-collection>\n              <tree-node-drop-slot\n                      class=\"empty-tree-drop-slot\"\n                      *ngIf=\"treeModel.isEmptyTree()\"\n                      [dropIndex]=\"0\"\n                      [node]=\"treeModel.virtualRoot\">\n              </tree-node-drop-slot>\n          </div>\n      </tree-viewport>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: TreeNodeDropSlotComponent, selector: \"TreeNodeDropSlot, tree-node-drop-slot\", inputs: [\"node\", \"dropIndex\"] }, { kind: \"component\", type: TreeNodeCollectionComponent, selector: \"tree-node-collection\", inputs: [\"nodes\", \"treeModel\", \"templates\"] }, { kind: \"component\", type: TreeViewportComponent, selector: \"tree-viewport\" }] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'Tree, tree-root', providers: [TreeModel], template: `\n      <tree-viewport #viewport>\n          <div\n                  class=\"angular-tree-component\"\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\n              <tree-node-collection\n                      *ngIf=\"treeModel.roots\"\n                      [nodes]=\"treeModel.roots\"\n                      [treeModel]=\"treeModel\"\n                      [templates]=\"{\n            loadingTemplate: loadingTemplate,\n            treeNodeTemplate: treeNodeTemplate,\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\n            treeNodeFullTemplate: treeNodeFullTemplate\n          }\">\n              </tree-node-collection>\n              <tree-node-drop-slot\n                      class=\"empty-tree-drop-slot\"\n                      *ngIf=\"treeModel.isEmptyTree()\"\n                      [dropIndex]=\"0\"\n                      [node]=\"treeModel.virtualRoot\">\n              </tree-node-drop-slot>\n          </div>\n      </tree-viewport>\n  ` }]\n        }], ctorParameters: () => [{ type: TreeModel }, { type: TreeDraggedElement }], propDecorators: { loadingTemplate: [{\n                type: ContentChild,\n                args: ['loadingTemplate', { static: false }]\n            }], treeNodeTemplate: [{\n                type: ContentChild,\n                args: ['treeNodeTemplate', { static: false }]\n            }], treeNodeWrapperTemplate: [{\n                type: ContentChild,\n                args: ['treeNodeWrapperTemplate', { static: false }]\n            }], treeNodeFullTemplate: [{\n                type: ContentChild,\n                args: ['treeNodeFullTemplate', { static: false }]\n            }], viewportComponent: [{\n                type: ViewChild,\n                args: ['viewport', { static: false }]\n            }], nodes: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], focused: [{\n                type: Input\n            }], state: [{\n                type: Input\n            }], toggleExpanded: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], nodeActivate: [{\n                type: Output\n            }], nodeDeactivate: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], deselect: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], blur: [{\n                type: Output\n            }], updateData: [{\n                type: Output\n            }], initialized: [{\n                type: Output\n            }], moveNode: [{\n                type: Output\n            }], copyNode: [{\n                type: Output\n            }], loadNodeChildren: [{\n                type: Output\n            }], changeFilter: [{\n                type: Output\n            }], event: [{\n                type: Output\n            }], stateChange: [{\n                type: Output\n            }], onKeydown: [{\n                type: HostListener,\n                args: ['body: keydown', ['$event']]\n            }], onMousedown: [{\n                type: HostListener,\n                args: ['body: mousedown', ['$event']]\n            }] } });\n\nclass TreeModule {\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    /** @nocollapse */ static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeModule, declarations: [TreeComponent,\n            TreeNodeComponent,\n            TreeNodeContentComponent,\n            LoadingComponent,\n            TreeDropDirective,\n            TreeDragDirective,\n            TreeNodeExpanderComponent,\n            TreeNodeChildrenComponent,\n            TreeNodeDropSlotComponent,\n            TreeNodeCollectionComponent,\n            TreeViewportComponent,\n            TreeNodeWrapperComponent,\n            TreeNodeCheckboxComponent,\n            TreeAnimateOpenDirective,\n            TreeMobxAutorunDirective], imports: [CommonModule], exports: [TreeComponent,\n            TreeNodeComponent,\n            TreeNodeContentComponent,\n            LoadingComponent,\n            TreeDropDirective,\n            TreeDragDirective,\n            TreeNodeExpanderComponent,\n            TreeNodeChildrenComponent,\n            TreeNodeDropSlotComponent,\n            TreeNodeCollectionComponent,\n            TreeViewportComponent,\n            TreeNodeWrapperComponent,\n            TreeNodeCheckboxComponent,\n            TreeAnimateOpenDirective,\n            TreeMobxAutorunDirective] }); }\n    /** @nocollapse */ static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeModule, imports: [CommonModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.1\", ngImport: i0, type: TreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        TreeComponent,\n                        TreeNodeComponent,\n                        TreeNodeContentComponent,\n                        LoadingComponent,\n                        TreeDropDirective,\n                        TreeDragDirective,\n                        TreeNodeExpanderComponent,\n                        TreeNodeChildrenComponent,\n                        TreeNodeDropSlotComponent,\n                        TreeNodeCollectionComponent,\n                        TreeViewportComponent,\n                        TreeNodeWrapperComponent,\n                        TreeNodeCheckboxComponent,\n                        TreeAnimateOpenDirective,\n                        TreeMobxAutorunDirective\n                    ],\n                    exports: [\n                        TreeComponent,\n                        TreeNodeComponent,\n                        TreeNodeContentComponent,\n                        LoadingComponent,\n                        TreeDropDirective,\n                        TreeDragDirective,\n                        TreeNodeExpanderComponent,\n                        TreeNodeChildrenComponent,\n                        TreeNodeDropSlotComponent,\n                        TreeNodeCollectionComponent,\n                        TreeViewportComponent,\n                        TreeNodeWrapperComponent,\n                        TreeNodeCheckboxComponent,\n                        TreeAnimateOpenDirective,\n                        TreeMobxAutorunDirective\n                    ],\n                    imports: [CommonModule],\n                    providers: []\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-tree-component\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KEYS, LoadingComponent, TREE_ACTIONS, TreeAnimateOpenDirective, TreeComponent, TreeDragDirective, TreeDraggedElement, TreeDropDirective, TreeMobxAutorunDirective, TreeModel, TreeModule, TreeNode, TreeNodeCheckboxComponent, TreeNodeChildrenComponent, TreeNodeCollectionComponent, TreeNodeComponent, TreeNodeContentComponent as TreeNodeContent, TreeNodeDropSlotComponent as TreeNodeDropSlot, TreeNodeExpanderComponent, TreeNodeWrapperComponent, TreeViewportComponent, TreeVirtualScroll };\n//# sourceMappingURL=bugsplat-angular-tree-component.mjs.map\n"],
  "mappings": "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",
  "names": []
}
