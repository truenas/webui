{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/dialog.mjs"],
  "sourcesContent": ["import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, inject, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, _animationMode, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        this._animationMode = _animationMode;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Whether animations are enabled. */\n        this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n        /** Number of actions projected in the dialog. */\n        this._actionSectionCount = 0;\n        /** Host element of the dialog container component. */\n        this._hostElement = this._elementRef.nativeElement;\n        /** Duration of the dialog open animation. */\n        this._enterAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n            : 0;\n        /** Duration of the dialog close animation. */\n        this._exitAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n            : 0;\n        /** Current timer for dialog animations. */\n        this._animationTimer = null;\n        /**\n         * Completes the dialog open by clearing potential animation classes, trapping\n         * focus and emitting an opened event.\n         */\n        this._finishDialogOpen = () => {\n            this._clearAnimationClasses();\n            this._openAnimationDone(this._enterAnimationDuration);\n        };\n        /**\n         * Completes the dialog close by clearing potential animation classes, restoring\n         * focus and emitting a closed event.\n         */\n        this._finishDialogClose = () => {\n            this._clearAnimationClasses();\n            this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n        };\n    }\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i1.FocusMonitor }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: i1.FocusMonitor }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = MatDialogState.OPEN;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    constructor(_overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, _defaultOptions, _scrollStrategy, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._scrollStrategy = _scrollStrategy;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this.dialogConfigClass = MatDialogConfig;\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._dialog = injector.get(Dialog);\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || `mat-mdc-dialog-${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, providedIn: 'root' }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }] });\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    standalone: true,\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive,\n            args: [{ standalone: true }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    constructor() {\n        super(...arguments);\n        this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n    }\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, hostDirectives: [{ directive: i3.CdkScrollable }], ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    standalone: true,\n                    hostDirectives: [CdkScrollable],\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] }); }\n    static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n    ]),\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogState, MatDialogTitle, _closeDialogVia, _defaultParams, matDialogAnimations };\n//# sourceMappingURL=dialog.mjs.map\n"],
  "mappings": "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",
  "names": ["import_core", "MatDialogState"]
}
