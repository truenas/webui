{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/classes/simple-async-combobox-provider.ts","mappings":";;;AAAA,+BAAsC;AACtC,8CAA0C;AAI1C,MAAa,2BAA2B;IACtC,KAAK,CAAC,WAAmB;;QACvB,IAAI,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,EAAE,CAAC;YACzB,OAAO,IAAA,SAAE,EAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;QACpD,CAAC;QACD,OAAO,IAAI,CAAC,QAAQ;aACjB,IAAI,CACH,IAAA,eAAG,EAAC,CAAC,OAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,EAClD,IAAA,eAAG,EAAC,CAAC,OAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAC9D,CAAC;IACN,CAAC;IAED,QAAQ,KAA2B,OAAO,IAAA,SAAE,EAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEnD,MAAM,CAAC,OAAiB,EAAE,MAAc;QACtC,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,EAAE,CAAC;YACpB,IAAI,MAAM,EAAE,CAAC;gBACX,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,MAAc,EAAE,EAAE;oBACvC,OAAO,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;2BAC3D,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC5E,CAAC,CAAC,CAAC;YACL,CAAC;YACD,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;QACtB,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAGD,YAAoB,QAA8B;QAA9B,aAAQ,GAAR,QAAQ,CAAsB;IAAI,CAAC;CACxD;AA7BD,kEA6BC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/classes/simple-async-combobox-provider.ts"],"sourcesContent":["import { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Option } from 'app/interfaces/option.interface';\nimport { IxComboboxProvider } from 'app/modules/forms/ix-forms/components/ix-combobox/ix-combobox-provider';\n\nexport class SimpleAsyncComboboxProvider implements IxComboboxProvider {\n  fetch(filterValue: string): Observable<Option[]> {\n    if (this.options?.length) {\n      return of(this.filter(this.options, filterValue));\n    }\n    return this.options$\n      .pipe(\n        tap((options: Option[]) => this.options = options),\n        map((options: Option[]) => this.filter(options, filterValue)),\n      );\n  }\n\n  nextPage(): Observable<Option[]> { return of([]); }\n\n  filter(options: Option[], search: string): Option[] {\n    if (options?.length) {\n      if (search) {\n        return options.filter((option: Option) => {\n          return option.label.toLowerCase().includes(search.toLowerCase())\n            || option.value.toString().toLowerCase().includes(search.toLowerCase());\n        });\n      }\n      return [...options];\n    }\n    return [];\n  }\n\n  private options: Option[];\n  constructor(private options$: Observable<Option[]>) { }\n}\n"],"version":3}