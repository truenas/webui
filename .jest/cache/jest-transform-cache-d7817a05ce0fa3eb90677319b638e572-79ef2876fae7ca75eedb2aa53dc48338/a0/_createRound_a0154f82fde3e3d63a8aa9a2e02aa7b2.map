{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_createRound.js","mappings":";;;;;AAAA,0DAA8B;AAC9B,kEAAuC;AACvC,gEAAqC;AACrC,gEAAqC;AAErC,wFAAwF;AACxF,IAAI,cAAc,GAAG,kBAAI,CAAC,QAAQ,EAC9B,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;AAEzB;;;;;;GAMG;AACH,SAAS,WAAW,CAAC,UAAU;IAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5B,OAAO,UAAS,MAAM,EAAE,SAAS;QAC/B,MAAM,GAAG,IAAA,qBAAQ,EAAC,MAAM,CAAC,CAAC;QAC1B,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAA,sBAAS,EAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QACzE,IAAI,SAAS,IAAI,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;YACxC,kEAAkE;YAClE,6DAA6D;YAC7D,IAAI,IAAI,GAAG,CAAC,IAAA,qBAAQ,EAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAC1C,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;YAEzD,IAAI,GAAG,CAAC,IAAA,qBAAQ,EAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1C,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC,CAAC;AACJ,CAAC;AAED,kBAAe,WAAW,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_createRound.js"],"sourcesContent":["import root from './_root.js';\nimport toInteger from './toInteger.js';\nimport toNumber from './toNumber.js';\nimport toString from './toString.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nexport default createRound;\n"],"version":3}