{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/requires-roles/requires-roles.directive.ts","mappings":";;;;;;;;;AAAA,wCAEuB;AACvB,yDAAqE;AACrE,yCAAoC;AACpC,+BAA4B;AAC5B,yFAAoF;AAEpF,iEAA6D;AAOtD,IAAM,sBAAsB,GAA5B,MAAM,sBAAuB,SAAQ,yCAAkB;QAIxD,eAAe,CAAC,KAAa;QAC/B,IAAI,IAAA,mBAAO,EAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAE3B,IAAI,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAA,EAAE,CAAC;YACnB,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QAED,IAAI,CAAC,WAAW;aACb,OAAO,CAAC,KAAK,CAAC;aACd,IAAI,CAAC,IAAA,WAAI,EAAC,CAAC,CAAC,EAAE,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC;aACnC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;IACxD,CAAC;QAMY,YAAY;QACvB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,IAAa,YAAY,CAAC,GAAW;QACnC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,YACqB,WAAqC,EACrC,gBAAkC,EAC7C,WAAwB;QAEhC,KAAK,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;QAJlB,gBAAW,GAAX,WAAW,CAA0B;QACrC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAC7C,gBAAW,GAAX,WAAW,CAAa;QApC1B,kBAAa,GAAW,EAAE,CAAC;QAqBhB,iBAAY,GAAa,EAAE,CAAC;IAkB/C,CAAC;;AAxCU,wDAAsB;;;;;;;8BAGhC,YAAK;2BAqBL,YAAK,SAAC,OAAO,cACb,kBAAW,SAAC,OAAO;;iCAzBT,sBAAsB;IALlC,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,mBAAmB;QAC7B,UAAU,EAAE,IAAI;KACjB,CAAC;GACW,sBAAsB,CAyClC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/requires-roles/requires-roles.directive.ts"],"sourcesContent":["import {\n  Directive, HostBinding, Input, TemplateRef, ViewContainerRef,\n} from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { isEqual } from 'lodash-es';\nimport { take } from 'rxjs';\nimport { HasAccessDirective } from 'app/directives/has-access/has-access.directive';\nimport { Role } from 'app/enums/role.enum';\nimport { AuthService } from 'app/services/auth/auth.service';\n\n@UntilDestroy()\n@Directive({\n  selector: '[ixRequiresRoles]',\n  standalone: true,\n})\nexport class RequiresRolesDirective extends HasAccessDirective {\n  private previousRoles: Role[] = [];\n\n  @Input()\n  set ixRequiresRoles(roles: Role[]) {\n    if (isEqual(this.previousRoles, roles)) {\n      return;\n    }\n\n    this.previousRoles = roles;\n\n    if (!roles?.length) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n      return;\n    }\n\n    this.authService\n      .hasRole(roles)\n      .pipe(take(1), untilDestroyed(this))\n      .subscribe((hasRole) => this.ixHasAccess = hasRole);\n  }\n\n  protected override cssClassList: string[] = [];\n\n  @Input('class')\n  @HostBinding('class')\n  override get elementClass(): string {\n    return this.cssClassList.join(' ');\n  }\n\n  override set elementClass(val: string) {\n    this.cssClassList = val.split(' ');\n  }\n\n  constructor(\n    protected override templateRef: TemplateRef<HTMLElement>,\n    protected override viewContainerRef: ViewContainerRef,\n    private authService: AuthService,\n  ) {\n    super(templateRef, viewContainerRef);\n  }\n}\n"],"version":3}