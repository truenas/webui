{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/disable-focusable-elements/disable-focusable-elements.directive.ts","mappings":";;;;;;;;;AAAA,wCAEuB;AACvB,yDAAqE;AACrE,+BAAmC;AAQ5B,IAAM,iCAAiC,GAAvC,MAAM,iCAAiC;IAG5C,YACU,UAAmC,EACnC,QAAmB;QADnB,eAAU,GAAV,UAAU,CAAyB;QACnC,aAAQ,GAAR,QAAQ,CAAW;IAC1B,CAAC;IAEJ,WAAW,CAAC,OAA8B;QACxC,IAAI,OAAO,CAAC,wBAAwB,EAAE,CAAC;YACrC,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACjC,CAAC;IACH,CAAC;IAEO,uBAAuB;QAC7B,IAAA,YAAK,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAA,WAAI,EAAC,CAAC,CAAC,EAAE,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YAC1D,MAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,cAAc,CAAC,QAAgB;QACrC,MAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACtD,iBAAiB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrE,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,oBAAoB;QAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,gBAAgB,CACnD,gEAAgE,CACjE,CAAC;IACJ,CAAC;IAEO,uBAAuB,CAAC,OAAoB,EAAE,QAAgB;QACpE,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;QAC1D,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;;AAzCU,8EAAiC;;;;;;uCAC3C,YAAK;;4CADK,iCAAiC;IAL7C,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,4BAA4B;QACtC,UAAU,EAAE,IAAI;KACjB,CAAC;GACW,iCAAiC,CA0C7C","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/disable-focusable-elements/disable-focusable-elements.directive.ts"],"sourcesContent":["import {\n  Directive, Input, Renderer2, ElementRef, OnChanges,\n} from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { take, timer } from 'rxjs';\nimport { IxSimpleChanges } from 'app/interfaces/simple-changes.interface';\n\n@UntilDestroy()\n@Directive({\n  selector: '[disableFocusableElements]',\n  standalone: true,\n})\nexport class DisableFocusableElementsDirective implements OnChanges {\n  @Input() disableFocusableElements: boolean;\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2,\n  ) {}\n\n  ngOnChanges(changes: IxSimpleChanges<this>): void {\n    if (changes.disableFocusableElements) {\n      this.updateFocusableElements();\n    }\n  }\n\n  private updateFocusableElements(): void {\n    timer(0).pipe(take(1), untilDestroyed(this)).subscribe(() => {\n      const tabIndex = this.disableFocusableElements ? -1 : 0;\n      this.updateTabIndex(tabIndex);\n    });\n  }\n\n  private updateTabIndex(tabIndex: number): void {\n    const focusableElements = this.getFocusableElements();\n    focusableElements.forEach((element) => {\n      this.renderer.setAttribute(element, 'tabindex', tabIndex.toString());\n      this.updateDisabledAttribute(element, tabIndex);\n    });\n  }\n\n  private getFocusableElements(): NodeListOf<HTMLElement> {\n    return this.elementRef.nativeElement.querySelectorAll(\n      'a, button:not([disabled]), input, textarea, select, [tabindex]',\n    );\n  }\n\n  private updateDisabledAttribute(element: HTMLElement, tabIndex: number): void {\n    if (tabIndex === -1) {\n      this.renderer.setAttribute(element, 'disabled', 'true');\n    } else {\n      this.renderer.removeAttribute(element, 'disabled');\n    }\n  }\n}\n"],"version":3}