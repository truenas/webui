3ea9da58ba1faac39ea0aff61fe58313
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxErrorsComponent = exports.ixManualValidateError = void 0;
const core_1 = require("@angular/core");
const form_field_1 = require("@angular/material/form-field");
const tooltip_1 = require("@angular/material/tooltip");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const default_validation_error_enum_1 = require("app/enums/default-validation-error.enum");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
exports.ixManualValidateError = 'ixManualValidateError';
let IxErrorsComponent = class IxErrorsComponent {
    constructor(translate, cdr) {
        this.translate = translate;
        this.cdr = cdr;
        this.ixManualValidateError = exports.ixManualValidateError;
        this.messages = [];
        this.defaultErrMessages = {
            min: (min) => this.translate.instant('Minimum value is {min}', { min }),
            max: (max) => this.translate.instant('Maximum value is {max}', { max }),
            required: () => {
                if (this.label) {
                    return this.translate.instant('{field} is required', { field: this.label });
                }
                return this.translate.instant('Field is required');
            },
            email: () => this.translate.instant('Value must be a valid email address'),
            minlength: (minLength) => this.translate.instant(this.label
                ? 'The length of {field} should be at least {minLength}'
                : 'The length of the field should be at least {minLength}', { field: this.label, minLength }),
            maxlength: (maxLength) => this.translate.instant(this.label
                ? 'The length of {field} should be no more than {maxLength}'
                : 'The length of the field should be no more than {maxLength}', { field: this.label, maxLength }),
            pattern: () => this.translate.instant('Invalid format or character'),
            forbidden: (value) => this.translate.instant('The name "{value}" is already in use.', { value }),
            range: (min, max) => this.translate.instant('The value is out of range. Enter a value between {min} and {max}.', { min, max }),
            number: () => this.translate.instant('Value must be a number'),
            cron: () => this.translate.instant('Invalid cron expression'),
            ip2: () => this.translate.instant('Invalid IP address'),
        };
    }
    ngOnChanges(changes) {
        var _a;
        if ('control' in changes && this.control) {
            // This manually works around: https://github.com/angular/angular/issues/10816
            (_a = this.statusChangeSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            this.statusChangeSubscription = this.control.statusChanges.pipe((0, operators_1.filter)((status) => status !== 'PENDING'), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                const newErrors = Object.keys(this.control.errors || []).map((error) => {
                    var _a, _b;
                    if (error === exports.ixManualValidateError) {
                        return null;
                    }
                    const message = (_b = (_a = this.control.errors) === null || _a === void 0 ? void 0 : _a[error]) === null || _b === void 0 ? void 0 : _b.message;
                    if (message) {
                        return message;
                    }
                    return this.getDefaultError(error);
                });
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                this.messages = newErrors.filter((message) => !!message);
                if (this.control.errors) {
                    this.control.markAllAsTouched();
                }
                this.cdr.markForCheck();
            });
        }
    }
    /**
     * This method takes in an error type and returns a default error
     * message
     * @param error The name of the error on control e.g., 'required'
     * @returns A default error message for the error type
     */
    getDefaultError(error) {
        // eslint-disable-next-line
        const errors = this.control.errors;
        switch (error) {
            case default_validation_error_enum_1.DefaultValidationError.Min:
                return this.defaultErrMessages.min(errors.min.min);
            case default_validation_error_enum_1.DefaultValidationError.Max:
                return this.defaultErrMessages.max(errors.max.max);
            case default_validation_error_enum_1.DefaultValidationError.Required:
                return this.defaultErrMessages.required();
            case default_validation_error_enum_1.DefaultValidationError.Email:
                return this.defaultErrMessages.email();
            case default_validation_error_enum_1.DefaultValidationError.MinLength:
                return this.defaultErrMessages.minlength(errors.minlength.requiredLength);
            case default_validation_error_enum_1.DefaultValidationError.MaxLength:
                return this.defaultErrMessages.maxlength(errors.maxlength.requiredLength);
            case default_validation_error_enum_1.DefaultValidationError.Range:
                return this.defaultErrMessages.range(errors.rangeValue.min, errors.rangeValue.max);
            case default_validation_error_enum_1.DefaultValidationError.Pattern:
                return this.defaultErrMessages.pattern();
            case default_validation_error_enum_1.DefaultValidationError.Forbidden:
                return this.defaultErrMessages.forbidden(errors.value);
            case default_validation_error_enum_1.DefaultValidationError.Number:
                return this.defaultErrMessages.number();
            case default_validation_error_enum_1.DefaultValidationError.Cron:
                return this.defaultErrMessages.cron();
            case default_validation_error_enum_1.DefaultValidationError.Ip2:
                return this.defaultErrMessages.ip2();
            default:
                return '';
        }
    }
    removeManualError() {
        if (this.control.errors) {
            delete this.control.errors[exports.ixManualValidateError];
            delete this.control.errors.manualValidateError;
            delete this.control.errors.manualValidateErrorMsg;
        }
        this.control.updateValueAndValidity();
        this.cdr.markForCheck();
    }
    // TODO: Workaround for https://github.com/angular/angular/issues/56471
    trackMessage(message) {
        return message;
    }
};
exports.IxErrorsComponent = IxErrorsComponent;
IxErrorsComponent.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: core_1.ChangeDetectorRef }
];
IxErrorsComponent.propDecorators = {
    control: [{ type: core_1.Input }],
    label: [{ type: core_1.Input }]
};
exports.IxErrorsComponent = IxErrorsComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-errors',
        template: require("./ix-errors.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            form_field_1.MatError,
            ix_icon_component_1.IxIconComponent,
            tooltip_1.MatTooltip,
            core_2.TranslateModule,
        ],
    })
], IxErrorsComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,