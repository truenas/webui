{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/button-toggle/testing.mjs"],
  "sourcesContent": ["import { ComponentHarness, HarnessPredicate, parallel } from '@angular/cdk/testing';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Harness for interacting with a standard mat-button-toggle in tests. */\nclass MatButtonToggleHarness extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        this._label = this.locatorFor('.mat-button-toggle-label-content');\n        this._button = this.locatorFor('.mat-button-toggle-button');\n    }\n    /** The selector for the host element of a `MatButton` instance. */\n    static { this.hostSelector = '.mat-button-toggle'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleHarness` that meets\n     * certain criteria.\n     * @param options Options for filtering which button toggle instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(MatButtonToggleHarness, options)\n            .addOption('text', options.text, (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text))\n            .addOption('name', options.name, (harness, name) => HarnessPredicate.stringMatches(harness.getName(), name))\n            .addOption('checked', options.checked, async (harness, checked) => (await harness.isChecked()) === checked)\n            .addOption('disabled', options.disabled, async (harness, disabled) => {\n            return (await harness.isDisabled()) === disabled;\n        });\n    }\n    /** Gets a boolean promise indicating if the button toggle is checked. */\n    async isChecked() {\n        const button = await this._button();\n        const [checked, pressed] = await parallel(() => [\n            button.getAttribute('aria-checked'),\n            button.getAttribute('aria-pressed'),\n        ]);\n        return coerceBooleanProperty(checked) || coerceBooleanProperty(pressed);\n    }\n    /** Gets a boolean promise indicating if the button toggle is disabled. */\n    async isDisabled() {\n        const host = await this.host();\n        return host.hasClass('mat-button-toggle-disabled');\n    }\n    /** Gets a promise for the button toggle's name. */\n    async getName() {\n        return (await this._button()).getAttribute('name');\n    }\n    /** Gets a promise for the button toggle's aria-label. */\n    async getAriaLabel() {\n        return (await this._button()).getAttribute('aria-label');\n    }\n    /** Gets a promise for the button toggles's aria-labelledby. */\n    async getAriaLabelledby() {\n        return (await this._button()).getAttribute('aria-labelledby');\n    }\n    /** Gets a promise for the button toggle's text. */\n    async getText() {\n        return (await this._label()).text();\n    }\n    /** Gets the appearance that the button toggle is using. */\n    async getAppearance() {\n        const host = await this.host();\n        const className = 'mat-button-toggle-appearance-standard';\n        return (await host.hasClass(className)) ? 'standard' : 'legacy';\n    }\n    /** Focuses the toggle. */\n    async focus() {\n        return (await this._button()).focus();\n    }\n    /** Blurs the toggle. */\n    async blur() {\n        return (await this._button()).blur();\n    }\n    /** Whether the toggle is focused. */\n    async isFocused() {\n        return (await this._button()).isFocused();\n    }\n    /** Toggle the checked state of the buttons toggle. */\n    async toggle() {\n        return (await this._button()).click();\n    }\n    /**\n     * Puts the button toggle in a checked state by toggling it if it's\n     * currently unchecked, or doing nothing if it is already checked.\n     */\n    async check() {\n        if (!(await this.isChecked())) {\n            await this.toggle();\n        }\n    }\n    /**\n     * Puts the button toggle in an unchecked state by toggling it if it's\n     * currently checked, or doing nothing if it's already unchecked.\n     */\n    async uncheck() {\n        if (await this.isChecked()) {\n            await this.toggle();\n        }\n    }\n}\n\n/** Harness for interacting with a standard mat-button-toggle in tests. */\nclass MatButtonToggleGroupHarness extends ComponentHarness {\n    /** The selector for the host element of a `MatButton` instance. */\n    static { this.hostSelector = '.mat-button-toggle-group'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleGroupHarness`\n     * that meets certain criteria.\n     * @param options Options for filtering which button toggle instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(MatButtonToggleGroupHarness, options).addOption('disabled', options.disabled, async (harness, disabled) => {\n            return (await harness.isDisabled()) === disabled;\n        });\n    }\n    /**\n     * Gets the button toggles that are inside the group.\n     * @param filter Optionally filters which toggles are included.\n     */\n    async getToggles(filter = {}) {\n        return this.locatorForAll(MatButtonToggleHarness.with(filter))();\n    }\n    /** Gets whether the button toggle group is disabled. */\n    async isDisabled() {\n        return (await (await this.host()).getAttribute('aria-disabled')) === 'true';\n    }\n    /** Gets whether the button toggle group is laid out vertically. */\n    async isVertical() {\n        return (await this.host()).hasClass('mat-button-toggle-vertical');\n    }\n    /** Gets the appearance that the group is using. */\n    async getAppearance() {\n        const host = await this.host();\n        const className = 'mat-button-toggle-group-appearance-standard';\n        return (await host.hasClass(className)) ? 'standard' : 'legacy';\n    }\n}\n\nexport { MatButtonToggleGroupHarness, MatButtonToggleHarness };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": "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",
  "names": []
}
