{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/operators/observe-job.operator.ts","mappings":";;AAWA,gCAWC;AAtBD,+BAEc;AACd,8CAA2C;AAC3C,6DAAoD;AAGpD;;;GAGG;AACH,SAAgB,UAAU;IACxB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAC9B,IAAA,qBAAS,EAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,EAC5C,IAAA,gBAAS,EAAC,CAAC,GAAG,EAAE,EAAE;QAChB,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,MAAK,yBAAQ,CAAC,MAAM,EAAE,CAAC;YACnC,OAAO,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAED,OAAO,IAAA,SAAE,EAAC,GAAG,CAAC,CAAC;IACjB,CAAC,CAAC,CACH,CAAC;AACJ,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/operators/observe-job.operator.ts"],"sourcesContent":["import {\n  of, OperatorFunction, switchMap, throwError,\n} from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { JobState } from 'app/enums/job-state.enum';\nimport { Job } from 'app/interfaces/job.interface';\n\n/**\n * Converts observable with a job to an observable\n * that will complete when job completes or throw on job failure.\n */\nexport function observeJob<R, A>(): OperatorFunction<Job<R, A>, Job<R, A>> {\n  return (source$) => source$.pipe(\n    takeWhile((job) => !job.time_finished, true),\n    switchMap((job) => {\n      if (job?.state === JobState.Failed) {\n        return throwError(() => job);\n      }\n\n      return of(job);\n    }),\n  );\n}\n"],"version":3}