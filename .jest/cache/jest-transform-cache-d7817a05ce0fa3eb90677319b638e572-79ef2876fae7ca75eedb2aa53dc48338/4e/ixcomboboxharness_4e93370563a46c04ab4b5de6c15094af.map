{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAAoF;AACpF,oEAA4G;AAC5G,6DAAkE;AAClE,sGAAiG;AAEjG,kFAA8E;AAO9E,MAAa,iBAAkB,SAAQ,0BAAgB;IAAvD;;QAQE,2BAAsB,GAAG,IAAI,CAAC,UAAU,CAAC,gCAAsB,CAAC,CAAC;QACjE,uBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAe,CAAC,CAAC;QACtD,oBAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,iCAAc,CAAC,CAAC;QAC1D,iBAAY,GAAG,4BAAY,CAAC;IAyC9B,CAAC;IAjDC,MAAM,CAAC,IAAI,CAAC,OAAiC;QAC3C,OAAO,IAAI,0BAAgB,CAAC,iBAAiB,EAAE,OAAO,CAAC;aACpD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,0BAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1H,CAAC;IAOK,UAAU;;YACd,OAAO,CAAC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QACnD,CAAC;KAAA;IAEK,sBAAsB;;YAC1B,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;YACzE,OAAO,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACnE,CAAC;KAAA;IAEK,YAAY;;YAChB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,QAAQ;;YACZ,OAAO,CAAC,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC1D,CAAC;KAAA;IAED;;;OAGG;IACG,QAAQ,CAAC,WAAmB;;YAChC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACpD,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,OAAO,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;QACpD,CAAC;KAAA;IAEK,gBAAgB,CAAC,IAAY;;YACjC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC9C,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;KAAA;IAEK,UAAU;;YACd,OAAO,CAAC,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;QAC5D,CAAC;KAAA;;AAnDH,8CAoDC;AAnDQ,8BAAY,GAAG,aAAa,AAAhB,CAAiB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.harness.ts"],"sourcesContent":["import { ComponentHarness, HarnessPredicate, parallel } from '@angular/cdk/testing';\nimport { MatAutocompleteHarness, AutocompleteHarnessFilters } from '@angular/material/autocomplete/testing';\nimport { MatInputHarness } from '@angular/material/input/testing';\nimport { IxLabelHarness } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\n\nexport interface IxComboboxHarnessFilters extends AutocompleteHarnessFilters {\n  label: string;\n  allowCustomValue?: boolean;\n}\n\nexport class IxComboboxHarness extends ComponentHarness implements IxFormControlHarness {\n  static hostSelector = 'ix-combobox';\n\n  static with(options: IxComboboxHarnessFilters): HarnessPredicate<IxComboboxHarness> {\n    return new HarnessPredicate(IxComboboxHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getAutoCompleteHarness = this.locatorFor(MatAutocompleteHarness);\n  getMatInputHarness = this.locatorFor(MatInputHarness);\n  getLabelHarness = this.locatorForOptional(IxLabelHarness);\n  getErrorText = getErrorText;\n\n  async focusInput(): Promise<void> {\n    return (await this.getMatInputHarness()).focus();\n  }\n\n  async getAutocompleteOptions(): Promise<string[]> {\n    const options = await (await this.getAutoCompleteHarness()).getOptions();\n    return parallel(() => options.map((option) => option.getText()));\n  }\n\n  async getLabelText(): Promise<string> {\n    const label = await this.getLabelHarness();\n    if (!label) {\n      return '';\n    }\n    return label.getLabel();\n  }\n\n  async getValue(): Promise<string> {\n    return (await this.getAutoCompleteHarness()).getValue();\n  }\n\n  /**\n   *\n   * @param optionLabel label of the option that is to be assigned\n   */\n  async setValue(optionLabel: string): Promise<void> {\n    const harness = await this.getAutoCompleteHarness();\n    await harness.focus();\n    await harness.selectOption({ text: optionLabel });\n  }\n\n  async writeCustomValue(text: string): Promise<void> {\n    const input = await this.getMatInputHarness();\n    return input.setValue(text);\n  }\n\n  async isDisabled(): Promise<boolean> {\n    return (await this.getAutoCompleteHarness()).isDisabled();\n  }\n}\n"],"version":3}