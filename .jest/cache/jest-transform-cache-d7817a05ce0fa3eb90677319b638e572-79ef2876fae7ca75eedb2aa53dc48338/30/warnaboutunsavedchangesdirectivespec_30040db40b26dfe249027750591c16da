64fbdae34b1db9c6110e3699fe17d804
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const forms_1 = require("@angular/forms");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const warn_about_unsaved_changes_directive_1 = require("./warn-about-unsaved-changes.directive");
describe('WarnAboutUnsavedChangesDirective', () => {
    let spectator;
    const createHost = (0, jest_1.createHostFactory)({
        component: warn_about_unsaved_changes_directive_1.WarnAboutUnsavedChangesDirective,
        imports: [forms_1.ReactiveFormsModule],
        providers: [
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            {
                provide: ix_slide_in_ref_1.IxSlideInRef,
                useFactory: () => ({
                    close: jest.fn(),
                    slideInClosed$: new rxjs_1.Subject(),
                }),
            },
        ],
    });
    beforeEach(() => {
        spectator = createHost(`
      <form [formGroup]="form" warnAboutUnsavedChanges></form>
    `, {
            hostProps: {
                form: new forms_1.FormGroup({}),
            },
        });
    });
    it('should emit close event if there are no unsaved changes', () => {
        spectator.component.formGroup.markAsPristine();
        spectator.detectChanges();
        spectator.component.closeWithConfirmation().subscribe((shouldClose) => {
            expect(shouldClose).toBe(true);
        });
    });
    it('should call confirmation dialog if there are unsaved changes', () => {
        const dialogService = spectator.inject(dialog_service_1.DialogService);
        spectator.component.closeWithConfirmation().subscribe(() => {
            expect(dialogService.confirm).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMuZGlyZWN0aXZlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQ0FBZ0U7QUFDaEUsaURBRWdDO0FBQ2hDLCtCQUFtQztBQUNuQyxzRUFBa0U7QUFDbEUsdUdBQWlHO0FBQ2pHLGlHQUEwRjtBQUUxRixRQUFRLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO0lBQ2hELElBQUksU0FBbUUsQ0FBQztJQUV4RSxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFpQixFQUFDO1FBQ25DLFNBQVMsRUFBRSx1RUFBZ0M7UUFDM0MsT0FBTyxFQUFFLENBQUMsMkJBQW1CLENBQUM7UUFDOUIsU0FBUyxFQUFFO1lBQ1QsSUFBQSxtQkFBWSxFQUFDLDhCQUFhLEVBQUU7Z0JBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsU0FBRSxFQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pDLENBQUM7WUFDRjtnQkFDRSxPQUFPLEVBQUUsOEJBQVk7Z0JBQ3JCLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUNqQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtvQkFDaEIsY0FBYyxFQUFFLElBQUksY0FBTyxFQUFRO2lCQUNwQyxDQUFDO2FBQ0g7U0FDRjtLQUNGLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxTQUFTLEdBQUcsVUFBVSxDQUFDOztLQUV0QixFQUFFO1lBQ0QsU0FBUyxFQUFFO2dCQUNULElBQUksRUFBRSxJQUFJLGlCQUFTLENBQUMsRUFBRSxDQUFDO2FBQ3hCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseURBQXlELEVBQUUsR0FBRyxFQUFFO1FBQ2pFLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRS9DLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUUxQixTQUFTLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDcEUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhEQUE4RCxFQUFFLEdBQUcsRUFBRTtRQUN0RSxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLDhCQUFhLENBQUMsQ0FBQztRQUV0RCxTQUFTLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN6RCxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9kaXJlY3RpdmVzL3dhcm4tYWJvdXQtdW5zYXZlZC1jaGFuZ2VzL3dhcm4tYWJvdXQtdW5zYXZlZC1jaGFuZ2VzLmRpcmVjdGl2ZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Hcm91cCwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gIGNyZWF0ZUhvc3RGYWN0b3J5LCBTcGVjdGF0b3JIb3N0LCBtb2NrUHJvdmlkZXIsXG59IGZyb20gJ0BuZ25lYXQvc3BlY3RhdG9yL2plc3QnO1xuaW1wb3J0IHsgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdhcHAvbW9kdWxlcy9kaWFsb2cvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgSXhTbGlkZUluUmVmIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zbGlkZS1pbi9peC1zbGlkZS1pbi1yZWYnO1xuaW1wb3J0IHsgV2FybkFib3V0VW5zYXZlZENoYW5nZXNEaXJlY3RpdmUgfSBmcm9tICcuL3dhcm4tYWJvdXQtdW5zYXZlZC1jaGFuZ2VzLmRpcmVjdGl2ZSc7XG5cbmRlc2NyaWJlKCdXYXJuQWJvdXRVbnNhdmVkQ2hhbmdlc0RpcmVjdGl2ZScsICgpID0+IHtcbiAgbGV0IHNwZWN0YXRvcjogU3BlY3RhdG9ySG9zdDxXYXJuQWJvdXRVbnNhdmVkQ2hhbmdlc0RpcmVjdGl2ZTx1bmtub3duPj47XG5cbiAgY29uc3QgY3JlYXRlSG9zdCA9IGNyZWF0ZUhvc3RGYWN0b3J5KHtcbiAgICBjb21wb25lbnQ6IFdhcm5BYm91dFVuc2F2ZWRDaGFuZ2VzRGlyZWN0aXZlLFxuICAgIGltcG9ydHM6IFtSZWFjdGl2ZUZvcm1zTW9kdWxlXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgIG1vY2tQcm92aWRlcihEaWFsb2dTZXJ2aWNlLCB7XG4gICAgICAgIGNvbmZpcm06IGplc3QuZm4oKCkgPT4gb2YodHJ1ZSkpLFxuICAgICAgfSksXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IEl4U2xpZGVJblJlZixcbiAgICAgICAgdXNlRmFjdG9yeTogKCkgPT4gKHtcbiAgICAgICAgICBjbG9zZTogamVzdC5mbigpLFxuICAgICAgICAgIHNsaWRlSW5DbG9zZWQkOiBuZXcgU3ViamVjdDx2b2lkPigpLFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3BlY3RhdG9yID0gY3JlYXRlSG9zdChgXG4gICAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cImZvcm1cIiB3YXJuQWJvdXRVbnNhdmVkQ2hhbmdlcz48L2Zvcm0+XG4gICAgYCwge1xuICAgICAgaG9zdFByb3BzOiB7XG4gICAgICAgIGZvcm06IG5ldyBGb3JtR3JvdXAoe30pLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlbWl0IGNsb3NlIGV2ZW50IGlmIHRoZXJlIGFyZSBubyB1bnNhdmVkIGNoYW5nZXMnLCAoKSA9PiB7XG4gICAgc3BlY3RhdG9yLmNvbXBvbmVudC5mb3JtR3JvdXAubWFya0FzUHJpc3RpbmUoKTtcblxuICAgIHNwZWN0YXRvci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICBzcGVjdGF0b3IuY29tcG9uZW50LmNsb3NlV2l0aENvbmZpcm1hdGlvbigpLnN1YnNjcmliZSgoc2hvdWxkQ2xvc2UpID0+IHtcbiAgICAgIGV4cGVjdChzaG91bGRDbG9zZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjYWxsIGNvbmZpcm1hdGlvbiBkaWFsb2cgaWYgdGhlcmUgYXJlIHVuc2F2ZWQgY2hhbmdlcycsICgpID0+IHtcbiAgICBjb25zdCBkaWFsb2dTZXJ2aWNlID0gc3BlY3RhdG9yLmluamVjdChEaWFsb2dTZXJ2aWNlKTtcblxuICAgIHNwZWN0YXRvci5jb21wb25lbnQuY2xvc2VXaXRoQ29uZmlybWF0aW9uKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGV4cGVjdChkaWFsb2dTZXJ2aWNlLmNvbmZpcm0pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==