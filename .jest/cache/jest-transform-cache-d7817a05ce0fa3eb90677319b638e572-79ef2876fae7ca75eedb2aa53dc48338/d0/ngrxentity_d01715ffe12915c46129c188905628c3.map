{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@ngrx/entity/fesm2022/ngrx-entity.mjs"],
  "sourcesContent": ["import { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\nfunction createInitialStateFactory() {\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\nfunction createSelectorsFactory() {\n    function getSelectors(selectState) {\n        const selectIds = (state) => state.ids;\n        const selectEntities = (state) => state.entities;\n        const selectAll = createSelector(selectIds, selectEntities, (ids, entities) => ids.map((id) => entities[id]));\n        const selectTotal = createSelector(selectIds, (ids) => ids.length);\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\nvar DidMutate;\n(function (DidMutate) {\n    DidMutate[DidMutate[\"EntitiesOnly\"] = 0] = \"EntitiesOnly\";\n    DidMutate[DidMutate[\"Both\"] = 1] = \"Both\";\n    DidMutate[DidMutate[\"None\"] = 2] = \"None\";\n})(DidMutate || (DidMutate = {}));\nfunction createStateOperator(mutator) {\n    return function operation(arg, state) {\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: { ...state.entities },\n        };\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return {\n                ...state,\n                entities: clonedEntityState.entities,\n            };\n        }\n        return state;\n    };\n}\n\nfunction selectIdValue(entity, selectId) {\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\nfunction createUnsortedStateAdapter(selectId) {\n    function addOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    function addManyMutably(entities, state) {\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    function setAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    function setOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            state.entities[key] = entity;\n            return DidMutate.EntitiesOnly;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    function setManyMutably(entities, state) {\n        const didMutateSetOne = entities.map((entity) => setOneMutably(entity, state));\n        switch (true) {\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.Both):\n                return DidMutate.Both;\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.EntitiesOnly):\n                return DidMutate.EntitiesOnly;\n            default:\n                return DidMutate.None;\n        }\n    }\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    function removeManyMutably(keysOrPredicate, state) {\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((key) => keysOrPredicate(state.entities[key]));\n        const didMutate = keys\n            .filter((key) => key in state.entities)\n            .map((key) => delete state.entities[key]).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((id) => id in state.entities);\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    function takeNewKey(keys, update, state) {\n        const original = state.entities[update.id];\n        const updated = Object.assign({}, original, update.changes);\n        const newKey = selectIdValue(updated, selectId);\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    function updateManyMutably(updates, state) {\n        const newKeys = {};\n        updates = updates.filter((update) => update.id in state.entities);\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            const didMutateIds = updates.filter((update) => takeNewKey(newKeys, update, state)).length >\n                0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((id) => newKeys[id] || id);\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    function mapMutably(map, state) {\n        const changes = state.ids.reduce((changes, id) => {\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }, []);\n        const updates = changes.filter(({ id }) => id in state.entities);\n        return updateManyMutably(updates, state);\n    }\n    function mapOneMutably({ map, id }, state) {\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    function upsertManyMutably(entities, state) {\n        const added = [];\n        const updated = [];\n        for (const entity of entities) {\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    function addManyMutably(newModels, state) {\n        const models = newModels.filter((model) => !(selectIdValue(model, selectId) in state.entities));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    function setAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    function setOneMutably(entity, state) {\n        const id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            state.ids = state.ids.filter((val) => val !== id);\n            merge([entity], state);\n            return DidMutate.Both;\n        }\n        else {\n            return addOneMutably(entity, state);\n        }\n    }\n    function setManyMutably(entities, state) {\n        const didMutateSetOne = entities.map((entity) => setOneMutably(entity, state));\n        switch (true) {\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.Both):\n                return DidMutate.Both;\n            case didMutateSetOne.some((didMutate) => didMutate === DidMutate.EntitiesOnly):\n                return DidMutate.EntitiesOnly;\n            default:\n                return DidMutate.None;\n        }\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        const original = state.entities[update.id];\n        const updated = Object.assign({}, original, update.changes);\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    function updateManyMutably(updates, state) {\n        const models = [];\n        const didMutateIds = updates.filter((update) => takeUpdatedModel(models, update, state))\n            .length > 0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            const originalIds = state.ids;\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            });\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((i) => state.ids[i] === originalIds[i])) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    function mapMutably(updatesOrMap, state) {\n        const updates = state.ids.reduce((changes, id) => {\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }, []);\n        return updateManyMutably(updates, state);\n    }\n    function mapOneMutably({ map, id }, state) {\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    function upsertManyMutably(entities, state) {\n        const added = [];\n        const updated = [];\n        for (const entity of entities) {\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    function merge(models, state) {\n        models.sort(sort);\n        const ids = [];\n        let i = 0;\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            const model = models[i];\n            const modelId = selectIdValue(model, selectId);\n            const entityId = state.ids[j];\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((model, i) => {\n            state.entities[selectId(model)] = model;\n        });\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = {\n        selectId: options.selectId ?? ((entity) => entity.id),\n        sortComparer: options.sortComparer ?? false,\n    };\n    const stateFactory = createInitialStateFactory();\n    const selectorsFactory = createSelectorsFactory();\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return {\n        selectId,\n        sortComparer,\n        ...stateFactory,\n        ...selectorsFactory,\n        ...stateAdapter,\n    };\n}\n\nclass Dictionary {\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Dictionary, createEntityAdapter };\n//# sourceMappingURL=ngrx-entity.mjs.map\n"],
  "mappings": "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",
  "names": ["DidMutate", "changes", "i"]
}
