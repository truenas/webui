{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/has-access/has-access.directive.ts","mappings":";;;;;;;;;AAAA,wCAEuB;AACvB,yDAAqD;AACrD,iHAA2G;AAOpG,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;QAKzB,WAAW,CAAC,SAAkB;QAChC,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;YACtC,OAAO;QACT,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAEhC,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,gEAA6B,CAAC,CAAC;YAC7F,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;YAC3D,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;QAC3D,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;QAMG,YAAY;QACd,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,YAAY,CAAC,GAAW;QAC1B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,YACY,WAAqC,EACrC,gBAAkC;QADlC,gBAAW,GAAX,WAAW,CAA0B;QACrC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAjCtC,mBAAc,GAAY,IAAI,CAAC;QAmB7B,iBAAY,GAAa,EAAE,CAAC;IAelC,CAAC;;AApCM,gDAAkB;;;;;;0BAI5B,YAAK;2BAmBL,YAAK,SAAC,OAAO,cACb,kBAAW,SAAC,OAAO;;6BAxBT,kBAAkB;IAL9B,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,eAAe;QACzB,UAAU,EAAE,IAAI;KACjB,CAAC;GACW,kBAAkB,CAqC9B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/has-access/has-access.directive.ts"],"sourcesContent":["import {\n  ComponentRef, Directive, HostBinding, Input, TemplateRef, ViewContainerRef,\n} from '@angular/core';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { MissingAccessWrapperComponent } from 'app/directives/has-access/missing-access-wrapper.component';\n\n@UntilDestroy()\n@Directive({\n  selector: '[ixHasAccess]',\n  standalone: true,\n})\nexport class HasAccessDirective {\n  private wrapperContainer: ComponentRef<MissingAccessWrapperComponent>;\n  private previousAccess: boolean = null;\n\n  @Input()\n  set ixHasAccess(hasAccess: boolean) {\n    if (this.previousAccess === hasAccess) {\n      return;\n    }\n\n    this.previousAccess = hasAccess;\n\n    if (!hasAccess) {\n      this.wrapperContainer = this.viewContainerRef.createComponent(MissingAccessWrapperComponent);\n      this.wrapperContainer.instance.template = this.templateRef;\n      this.wrapperContainer.instance.class = this.elementClass;\n    } else {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    }\n  }\n\n  protected cssClassList: string[] = [];\n\n  @Input('class')\n  @HostBinding('class')\n  get elementClass(): string {\n    return this.cssClassList.join(' ');\n  }\n\n  set elementClass(val: string) {\n    this.cssClassList = val.split(' ');\n  }\n\n  constructor(\n    protected templateRef: TemplateRef<HTMLElement>,\n    protected viewContainerRef: ViewContainerRef,\n  ) { }\n}\n"],"version":3}