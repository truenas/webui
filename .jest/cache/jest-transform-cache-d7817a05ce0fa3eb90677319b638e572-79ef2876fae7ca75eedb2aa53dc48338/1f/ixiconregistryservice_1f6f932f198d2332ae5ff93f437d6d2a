fb227aebce2d08685181d670164bfdf2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxIconRegistry = void 0;
const common_1 = require("@angular/common");
const http_1 = require("@angular/common/http");
const core_1 = require("@angular/core");
const icon_1 = require("@angular/material/icon");
const platform_browser_1 = require("@angular/platform-browser");
const sprite_config_json_1 = __importDefault(require("app/../assets/icons/sprite-config.json"));
let IxIconRegistry = class IxIconRegistry extends icon_1.MatIconRegistry {
    constructor(httpClient, sanitizer, document, errorHandler) {
        super(httpClient, sanitizer, document, errorHandler);
        this.addSvgIconSet(sanitizer.bypassSecurityTrustResourceUrl(sprite_config_json_1.default.iconUrl));
    }
};
exports.IxIconRegistry = IxIconRegistry;
IxIconRegistry.ctorParameters = () => [
    { type: http_1.HttpClient, decorators: [{ type: core_1.Optional }] },
    { type: platform_browser_1.DomSanitizer },
    { type: Document, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [common_1.DOCUMENT,] }] },
    { type: core_1.ErrorHandler }
];
exports.IxIconRegistry = IxIconRegistry = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], IxIconRegistry);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvaXgtaWNvbi9peC1pY29uLXJlZ2lzdHJ5LnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsNENBQTJDO0FBQzNDLCtDQUFrRDtBQUNsRCx3Q0FFdUI7QUFDdkIsaURBQXlEO0FBQ3pELGdFQUF5RDtBQUN6RCxnR0FBZ0U7QUFHekQsSUFBTSxjQUFjLEdBQXBCLE1BQU0sY0FBZSxTQUFRLHNCQUFlO0lBQ2pELFlBQ1ksVUFBc0IsRUFDaEMsU0FBdUIsRUFDTyxRQUFrQixFQUNoRCxZQUEwQjtRQUUxQixLQUFLLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsNEJBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7O0FBVlUsd0NBQWM7O29EQUV4QixlQUFROzsyQ0FFTixlQUFRLFlBQUksYUFBTSxTQUFDLGlCQUFROzs7eUJBSm5CLGNBQWM7SUFEMUIsSUFBQSxpQkFBVSxFQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDO0dBQ3RCLGNBQWMsQ0FXMUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvaXgtaWNvbi9peC1pY29uLXJlZ2lzdHJ5LnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7XG4gIEVycm9ySGFuZGxlciwgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRJY29uUmVnaXN0cnkgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IGljb25Db25maWcgZnJvbSAnYXBwLy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUtY29uZmlnLmpzb24nO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEl4SWNvblJlZ2lzdHJ5IGV4dGVuZHMgTWF0SWNvblJlZ2lzdHJ5IHtcbiAgY29uc3RydWN0b3IoXG4gIEBPcHRpb25hbCgpIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXG4gICAgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IERvY3VtZW50LFxuICAgIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyLFxuICApIHtcbiAgICBzdXBlcihodHRwQ2xpZW50LCBzYW5pdGl6ZXIsIGRvY3VtZW50LCBlcnJvckhhbmRsZXIpO1xuXG4gICAgdGhpcy5hZGRTdmdJY29uU2V0KHNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoaWNvbkNvbmZpZy5pY29uVXJsKSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==