{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_equalByTag.js","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_equalByTag.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n"],"version":3}