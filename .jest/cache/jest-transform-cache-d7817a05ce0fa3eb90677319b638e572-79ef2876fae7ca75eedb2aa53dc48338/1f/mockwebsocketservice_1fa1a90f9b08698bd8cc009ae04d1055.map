{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/testing/classes/mock-websocket.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/testing/classes/mock-websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { when } from 'jest-when';\nimport { Observable, Subject, of } from 'rxjs';\nimport { ValuesType } from 'utility-types';\nimport {\n  CallResponseOrFactory,\n  JobResponseOrFactory,\n} from 'app/core/testing/interfaces/mock-websocket-responses.interface';\nimport { ApiCallAndSubscribeMethod } from 'app/interfaces/api/api-call-and-subscribe-directory.interface';\nimport {\n  ApiCallMethod,\n  ApiCallParams,\n  ApiCallResponse,\n} from 'app/interfaces/api/api-call-directory.interface';\nimport { ApiEventDirectory } from 'app/interfaces/api/api-event-directory.interface';\nimport {\n  ApiJobMethod,\n  ApiJobParams,\n  ApiJobResponse,\n} from 'app/interfaces/api/api-job-directory.interface';\nimport { ApiEvent } from 'app/interfaces/api-message.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { WebSocketConnectionService } from 'app/services/websocket-connection.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\n/**\n * Better than just expect.anything() because it allows null and undefined.\n */\nconst anyArgument = when((_: unknown) => true);\n\n/**\n * MockWebSocketService can be used to update websocket mocks on the fly.\n * For initial setup prefer mockWebSocket();\n *\n * To update on the fly:\n * @example\n * ```\n * // In test case:\n * const websocketService = spectator.inject(MockWebSocketService);\n * websocketService.mockCallOnce('filesystem.stat', { gid: 5 } as FileSystemStat);\n * ```\n */\n@Injectable()\nexport class MockWebSocketService extends WebSocketService {\n  private subscribeStream$ = new Subject<ApiEvent>();\n  private jobIdCounter = 1;\n\n  constructor(\n    protected override router: Router,\n    protected override wsManager: WebSocketConnectionService,\n    protected override translate: TranslateService,\n  ) {\n    super(router, wsManager, translate);\n\n    this.call = jest.fn();\n    this.job = jest.fn();\n    this.startJob = jest.fn();\n    this.subscribe = jest.fn(() => this.subscribeStream$.asObservable() as Observable<ApiEvent<ValuesType<ApiEventDirectory>['response']>>);\n    this.callAndSubscribe = jest.fn();\n\n    when(this.call).mockImplementation((method: ApiCallMethod, args: unknown) => {\n      throw Error(`Unmocked websocket call ${method} with ${JSON.stringify(args)}`);\n    });\n    when(this.callAndSubscribe).mockImplementation((method: ApiCallAndSubscribeMethod, args: unknown) => {\n      throw Error(`Unmocked websocket callAndSubscribe ${method} with ${JSON.stringify(args)}`);\n    });\n    when(this.job).mockImplementation((method: ApiJobMethod, args: unknown) => {\n      throw Error(`Unmocked websocket job call ${method} with ${JSON.stringify(args)}`);\n    });\n  }\n\n  mockCall<K extends ApiCallMethod>(method: K, response: CallResponseOrFactory<K>): void {\n    const mockedImplementation = (_: K, params: ApiCallParams<K>): Observable<unknown> => {\n      let preparedResponse = response;\n      if (response instanceof Function) {\n        preparedResponse = response(params);\n      }\n\n      Object.freeze(preparedResponse);\n\n      return of(preparedResponse);\n    };\n\n    when(this.call).calledWith(method).mockImplementation(mockedImplementation);\n    when(this.call)\n      .calledWith(method, anyArgument as unknown as ApiCallParams<ApiCallMethod>)\n      .mockImplementation(mockedImplementation);\n\n    when(this.callAndSubscribe)\n      .calledWith(method as ApiCallAndSubscribeMethod)\n      .mockImplementation(mockedImplementation as jest.Mock);\n    when(this.callAndSubscribe)\n      .calledWith(method as ApiCallAndSubscribeMethod)\n      .mockImplementation(mockedImplementation as jest.Mock);\n  }\n\n  mockCallOnce<M extends ApiCallMethod>(method: M, response: ApiCallResponse<M>): void {\n    when(this.call)\n      .calledWith(method, anyArgument as unknown as ApiCallParams<ApiCallMethod>)\n      .mockReturnValueOnce(of(response));\n  }\n  mockJob<M extends ApiJobMethod>(method: M, response: JobResponseOrFactory<M>): void {\n    const getJobResponse = (params: ApiJobParams<M> = undefined): Job<ApiJobResponse<M>> => {\n      let job: Job;\n      if (response instanceof Function) {\n        job = response(params);\n      } else {\n        job = response;\n      }\n\n      job = {\n        ...job,\n        id: this.jobIdCounter,\n      };\n\n      Object.freeze(job);\n      return job as Job<ApiJobResponse<M>>;\n    };\n    when(this.startJob).calledWith(method).mockReturnValue(of(this.jobIdCounter));\n    when(this.startJob).calledWith(method, anyArgument).mockReturnValue(of(this.jobIdCounter));\n    when(this.job).calledWith(method).mockImplementation(() => of(getJobResponse()));\n    when(this.job).calledWith(method, anyArgument)\n      .mockImplementation((_, params) => of(getJobResponse(params)));\n    when(this.call)\n      .calledWith('core.get_jobs', [[['id', '=', this.jobIdCounter]]])\n      .mockImplementation(() => of([getJobResponse()]));\n\n    this.jobIdCounter += 1;\n  }\n\n  emitSubscribeEvent(event: ApiEvent): void {\n    this.subscribeStream$.next(event);\n  }\n}\n"],"version":3}