{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/sidenav.service.spec.ts","mappings":";;AAAA,gDAAyD;AACzD,4CAAyC;AACzC,iDAIgC;AAChC,mDAA2D;AAC3D,iDAAuD;AACvD,+BAA2C;AAC3C,kEAA8D;AAC9D,uFAAgF;AAEhF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,SAA2C,CAAC;IAChD,MAAM,kBAAkB,GAAG,IAAI,sBAAe,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,IAAA,2BAAoB,EAAC;QACzC,OAAO,EAAE,gCAAc;QACvB,SAAS,EAAE;YACT,IAAA,mBAAY,EAAC,eAAM,EAAE;gBACnB,MAAM,EAAE,IAAA,SAAE,GAAE;aACb,CAAC;YACF,IAAA,mBAAY,EAAC,2BAAkB,EAAE;gBAC/B,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC;aAC3C,CAAC;YACF,IAAA,4BAAkB,EAAC,IAAA,SAAE,GAAE,CAAC;YACxB,IAAA,0BAAgB,EAAC;gBACf,SAAS,EAAE;oBACT;wBACE,QAAQ,EAAE,yCAAiB;wBAC3B,KAAK,EAAE;4BACL,aAAa,EAAE;gCACb,WAAW,EAAE,IAAI;6BAClB;yBACF;qBACF;iBACF;aACF,CAAC;SACH;KACF,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,aAAa,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;YACvE,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEhD,kBAAkB,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/sidenav.service.spec.ts"],"sourcesContent":["import { BreakpointObserver } from '@angular/cdk/layout';\nimport { Router } from '@angular/router';\nimport {\n  createServiceFactory,\n  mockProvider,\n  SpectatorService,\n} from '@ngneat/spectator/jest';\nimport { provideMockActions } from '@ngrx/effects/testing';\nimport { provideMockStore } from '@ngrx/store/testing';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { SidenavService } from 'app/services/sidenav.service';\nimport { selectPreferences } from 'app/store/preferences/preferences.selectors';\n\ndescribe('SidenavService', () => {\n  let spectator: SpectatorService<SidenavService>;\n  const breakpointObserve$ = new BehaviorSubject({ matches: true });\n  const createService = createServiceFactory({\n    service: SidenavService,\n    providers: [\n      mockProvider(Router, {\n        events: of(),\n      }),\n      mockProvider(BreakpointObserver, {\n        observe: jest.fn(() => breakpointObserve$),\n      }),\n      provideMockActions(of()),\n      provideMockStore({\n        selectors: [\n          {\n            selector: selectPreferences,\n            value: {\n              sidenavStatus: {\n                isCollapsed: true,\n              },\n            },\n          },\n        ],\n      }),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createService();\n  });\n\n  describe('listenForScreenSizeChanges', () => {\n    it('listens for screen size changes and sets isMobile accordingly', () => {\n      expect(spectator.service.isMobile()).toBe(true);\n\n      breakpointObserve$.next({ matches: false });\n      expect(spectator.service.isMobile()).toBe(false);\n    });\n  });\n});\n"],"version":3}