{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/classes/group-combobox-provider.ts","mappings":";;;AACA,8CAAqC;AAMrC,MAAa,qBAAqB;IAIhC,KAAK,CAAC,WAAmB;QACvB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAEzC,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC;aAClE,IAAI,CACH,IAAA,eAAG,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,EACpD,IAAA,eAAG,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,CACnF,CAAC;IACN,CAAC;IAED,qBAAqB,CAAC,OAAiB;QACrC,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;YAC/B,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,MAAe;QACpC,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAC1B,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,CAAC,WAAmB;QAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QACzC,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC;aAClE,IAAI,CACH,IAAA,eAAG,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,EACpD,IAAA,eAAG,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CACpD,CAAC;IACN,CAAC;IAED,YACY,WAAwB,EAC1B,oBAA4C,OAAO,EACjD,iBAA2B,EAAE;QAF7B,gBAAW,GAAX,WAAW,CAAa;QAC1B,sBAAiB,GAAjB,iBAAiB,CAAkC;QACjD,mBAAc,GAAd,cAAc,CAAe;QAvC/B,SAAI,GAAG,CAAC,CAAC;QACV,aAAQ,GAAG,EAAE,CAAC;IAuCpB,CAAC;CACL;AA1CD,sDA0CC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/classes/group-combobox-provider.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Group } from 'app/interfaces/group.interface';\nimport { Option } from 'app/interfaces/option.interface';\nimport { IxComboboxProvider } from 'app/modules/forms/ix-forms/components/ix-combobox/ix-combobox-provider';\nimport { UserService } from 'app/services/user.service';\n\nexport class GroupComboboxProvider implements IxComboboxProvider {\n  protected page = 1;\n  readonly pageSize = 50;\n\n  fetch(filterValue: string): Observable<Option[]> {\n    this.page = 0;\n    const offset = this.page * this.pageSize;\n\n    return this.userService.groupQueryDsCache(filterValue, false, offset)\n      .pipe(\n        map((groups) => this.groupQueryResToOptions(groups)),\n        map((options) => [...this.initialOptions, ...this.excludeInitialOptions(options)]),\n      );\n  }\n\n  excludeInitialOptions(options: Option[]): Option[] {\n    return options.filter((option) => {\n      return !this.initialOptions.find((initialOption) => initialOption.value === option.value);\n    });\n  }\n\n  groupQueryResToOptions(groups: Group[]): Option[] {\n    return groups.map((group) => {\n      return { label: group.group, value: group[this.optionsValueField] };\n    });\n  }\n\n  nextPage(filterValue: string): Observable<Option[]> {\n    this.page++;\n    const offset = this.page * this.pageSize;\n    return this.userService.groupQueryDsCache(filterValue, false, offset)\n      .pipe(\n        map((groups) => this.groupQueryResToOptions(groups)),\n        map((groups) => this.excludeInitialOptions(groups)),\n      );\n  }\n\n  constructor(\n    protected userService: UserService,\n    private optionsValueField: 'group' | 'gid' | 'id' = 'group',\n    protected initialOptions: Option[] = [],\n  ) {}\n}\n"],"version":3}