{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-combobox/ix-combobox-provider.ts","mappings":";;;AAAA,+BAAuC;AA2BvC,MAAa,yBAAyB;IACpC,YAAoB,QAA4B;QAA5B,aAAQ,GAAR,QAAQ,CAAoB;IAAI,CAAC;IACrD,KAAK,CAAC,WAAmB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAC1C,IAAA,UAAG,EAAC,CAAC,MAAM,EAAE,EAAE;YACb,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;gBAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,QAAQ,CAAC,WAAmB;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAC7C,IAAA,UAAG,EAAC,CAAC,MAAM,EAAE,EAAE;YACb,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;gBAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;AAvBD,8DAuBC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-combobox/ix-combobox-provider.ts"],"sourcesContent":["import { Observable, map } from 'rxjs';\nimport { Option } from 'app/interfaces/option.interface';\n\nexport interface IxComboboxProvider {\n  /**\n   * Filter the options based on query string. Should handle <empty string> and return normal\n   * list of options in that case.\n   * @param value The query string\n   * @returns An observable of options that will replace the current list\n   */\n  fetch(filterValue: string): Observable<Option[]>;\n\n  /**\n    * Takes the filterValue (which can be empty) and fetches the next page of options\n    * to be shown. Leaves it up to the user to manage pagination context like\n    * (total items, items per page, number of pages etc)\n    * @returns Should return a list of option to be concatenated to the current list\n    */\n  nextPage(filterValue: string): Observable<Option[]>;\n\n  /**\n   * Used to map the fetch result to a new array of options for any needed changes before\n   * the options array is consumed by IxComboboxComponent\n   */\n  mapOptions?(options: Option[]): Option[];\n}\n\nexport class IxComboboxProviderManager {\n  constructor(private provider: IxComboboxProvider) { }\n  fetch(filterValue: string): Observable<Option[]> {\n    return this.provider.fetch(filterValue).pipe(\n      map((result) => {\n        if (this.provider.mapOptions) {\n          return this.provider.mapOptions(result);\n        }\n        return result;\n      }),\n    );\n  }\n\n  nextPage(filterValue: string): Observable<Option[]> {\n    return this.provider.nextPage(filterValue).pipe(\n      map((result) => {\n        if (this.provider.mapOptions) {\n          return this.provider.mapOptions(result);\n        }\n        return result;\n      }),\n    );\n  }\n}\n"],"version":3}