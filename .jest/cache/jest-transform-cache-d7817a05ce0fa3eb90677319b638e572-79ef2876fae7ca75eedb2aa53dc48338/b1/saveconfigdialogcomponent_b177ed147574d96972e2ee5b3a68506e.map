{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/general-settings/save-config-dialog/save-config-dialog.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/general-settings/save-config-dialog/save-config-dialog.component.ts"],"sourcesContent":["import { DatePipe } from '@angular/common';\nimport {\n  ChangeDetectionStrategy, Component, Inject, Optional,\n} from '@angular/core';\nimport { FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport {\n  MAT_DIALOG_DATA, MatDialogRef, MatDialogTitle, MatDialogClose,\n} from '@angular/material/dialog';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Store } from '@ngrx/store';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\nimport { switchMap } from 'rxjs/operators';\nimport { RequiresRolesDirective } from 'app/directives/requires-roles/requires-roles.directive';\nimport { Role } from 'app/enums/role.enum';\nimport { helptextSystemGeneral as helptext } from 'app/helptext/system/general';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { FormActionsComponent } from 'app/modules/forms/ix-forms/components/form-actions/form-actions.component';\nimport { IxCheckboxComponent } from 'app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component';\nimport { AppLoaderService } from 'app/modules/loader/app-loader.service';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { DownloadService } from 'app/services/download.service';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { AppState } from 'app/store';\nimport { waitForSystemInfo } from 'app/store/system-info/system-info.selectors';\n\nexport interface SaveConfigDialogMessages {\n  title: string;\n  message: string;\n  warning: string;\n  saveButton: string;\n  cancelButton: string;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-save-config-dialog',\n  templateUrl: './save-config-dialog.component.html',\n  styleUrls: ['./save-config-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatDialogTitle,\n    ReactiveFormsModule,\n    FormsModule,\n    IxCheckboxComponent,\n    FormActionsComponent,\n    MatButton,\n    TestDirective,\n    MatDialogClose,\n    RequiresRolesDirective,\n    TranslateModule,\n  ],\n  providers: [\n    DatePipe,\n  ],\n})\nexport class SaveConfigDialogComponent {\n  readonly requiredRoles = [Role.FullAdmin];\n\n  exportSeedCheckbox = new FormControl(false);\n\n  helptext: SaveConfigDialogMessages;\n\n  readonly defaultMessages: SaveConfigDialogMessages = {\n    message: helptext.save_config_form.message,\n    title: this.translate.instant('Save Configuration'),\n    warning: helptext.save_config_form.warning,\n    saveButton: this.translate.instant('Save'),\n    cancelButton: this.translate.instant('Cancel'),\n  };\n\n  constructor(\n    private ws: WebSocketService,\n    private store$: Store<AppState>,\n    private download: DownloadService,\n    private loader: AppLoaderService,\n    private datePipe: DatePipe,\n    private dialogRef: MatDialogRef<SaveConfigDialogComponent>,\n    private errorHandler: ErrorHandlerService,\n    private dialogService: DialogService,\n    private translate: TranslateService,\n    @Optional() @Inject(MAT_DIALOG_DATA) messageOverrides: Partial<SaveConfigDialogMessages> = {},\n  ) {\n    this.helptext = {\n      ...this.defaultMessages,\n      ...messageOverrides,\n    };\n  }\n\n  onSubmit(): void {\n    this.store$.pipe(\n      waitForSystemInfo,\n      switchMap((systemInfo) => {\n        const hostname = systemInfo.hostname.split('.')[0];\n        const date = this.datePipe.transform(new Date(), 'yyyyMMddHHmmss');\n        let fileName = hostname + '-' + systemInfo.version + '-' + date;\n        let mimeType: string;\n\n        if (this.exportSeedCheckbox.value) {\n          mimeType = 'application/x-tar';\n          fileName += '.tar';\n        } else {\n          mimeType = 'application/x-sqlite3';\n          fileName += '.db';\n        }\n\n        return this.ws.call('core.download', ['config.save', [{ secretseed: this.exportSeedCheckbox.value }], fileName]).pipe(\n          this.loader.withLoader(),\n          switchMap(([, url]) => this.download.downloadUrl(url, fileName, mimeType)),\n        );\n      }),\n      untilDestroyed(this),\n    ).subscribe({\n      next: () => {\n        this.dialogRef.close(true);\n      },\n      error: (error: unknown) => {\n        this.dialogService.error(this.errorHandler.parseError(error));\n        this.dialogRef.close(false);\n      },\n    });\n  }\n}\n"],"version":3}