7e3f2c8fc67c817bfd53b0087b8c1837
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveConfigDialogComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const role_enum_1 = require("app/enums/role.enum");
const general_1 = require("app/helptext/system/general");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const download_service_1 = require("app/services/download.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const system_info_selectors_1 = require("app/store/system-info/system-info.selectors");
let SaveConfigDialogComponent = class SaveConfigDialogComponent {
    constructor(ws, store$, download, loader, datePipe, dialogRef, errorHandler, dialogService, translate, messageOverrides = {}) {
        this.ws = ws;
        this.store$ = store$;
        this.download = download;
        this.loader = loader;
        this.datePipe = datePipe;
        this.dialogRef = dialogRef;
        this.errorHandler = errorHandler;
        this.dialogService = dialogService;
        this.translate = translate;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.exportSeedCheckbox = new forms_1.FormControl(false);
        this.defaultMessages = {
            message: general_1.helptextSystemGeneral.save_config_form.message,
            title: this.translate.instant('Save Configuration'),
            warning: general_1.helptextSystemGeneral.save_config_form.warning,
            saveButton: this.translate.instant('Save'),
            cancelButton: this.translate.instant('Cancel'),
        };
        this.helptext = Object.assign(Object.assign({}, this.defaultMessages), messageOverrides);
    }
    onSubmit() {
        this.store$.pipe(system_info_selectors_1.waitForSystemInfo, (0, operators_1.switchMap)((systemInfo) => {
            const hostname = systemInfo.hostname.split('.')[0];
            const date = this.datePipe.transform(new Date(), 'yyyyMMddHHmmss');
            let fileName = hostname + '-' + systemInfo.version + '-' + date;
            let mimeType;
            if (this.exportSeedCheckbox.value) {
                mimeType = 'application/x-tar';
                fileName += '.tar';
            }
            else {
                mimeType = 'application/x-sqlite3';
                fileName += '.db';
            }
            return this.ws.call('core.download', ['config.save', [{ secretseed: this.exportSeedCheckbox.value }], fileName]).pipe(this.loader.withLoader(), (0, operators_1.switchMap)(([, url]) => this.download.downloadUrl(url, fileName, mimeType)));
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                this.dialogRef.close(true);
            },
            error: (error) => {
                this.dialogService.error(this.errorHandler.parseError(error));
                this.dialogRef.close(false);
            },
        });
    }
};
exports.SaveConfigDialogComponent = SaveConfigDialogComponent;
SaveConfigDialogComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: store_1.Store },
    { type: download_service_1.DownloadService },
    { type: app_loader_service_1.AppLoaderService },
    { type: common_1.DatePipe },
    { type: dialog_1.MatDialogRef },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.SaveConfigDialogComponent = SaveConfigDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-save-config-dialog',
        template: require("./save-config-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            forms_1.ReactiveFormsModule,
            forms_1.FormsModule,
            ix_checkbox_component_1.IxCheckboxComponent,
            form_actions_component_1.FormActionsComponent,
            button_1.MatButton,
            test_directive_1.TestDirective,
            dialog_1.MatDialogClose,
            requires_roles_directive_1.RequiresRolesDirective,
            core_2.TranslateModule,
        ],
        providers: [
            common_1.DatePipe,
        ],
    })
], SaveConfigDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,