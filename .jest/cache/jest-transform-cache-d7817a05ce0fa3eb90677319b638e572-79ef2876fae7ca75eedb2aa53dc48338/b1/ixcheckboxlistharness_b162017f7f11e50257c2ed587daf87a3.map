{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-checkbox-list/ix-checkbox-list.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAE8B;AAC9B,gEAAwE;AACxE,sGAAiG;AAEjG,kFAA8E;AAM9E,MAAa,qBAAsB,SAAQ,0BAAgB;IAA3D;;QAQE,kBAAa,GAAG,IAAI,CAAC,aAAa,CAAC,4BAAkB,CAAC,CAAC;QACvD,iBAAY,GAAG,4BAAY,CAAC;IA4C9B,CAAC;IAlDC,MAAM,CAAC,IAAI,CAAC,OAAqC;QAC/C,OAAO,IAAI,0BAAgB,CAAC,qBAAqB,EAAE,OAAO,CAAC;aACxD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,0BAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1H,CAAC;IAKK,YAAY;;YAChB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,iCAAc,CAAC,EAAE,CAAC;YAC9D,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,QAAQ;;YACZ,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,aAAa,GAAa,EAAE,CAAC;YACnC,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;gBAClC,IAAI,CAAC,CAAA,MAAM,QAAQ,CAAC,SAAS,EAAE,CAAA,EAAE,CAAC;oBAChC,SAAS;gBACX,CAAC;gBAED,aAAa,CAAC,IAAI,CAAC,MAAM,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;YACpD,CAAC;YAED,OAAO,aAAa,CAAC;QACvB,CAAC;KAAA;IAEK,QAAQ,CAAC,KAAe;;YAC5B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC9C,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;gBAClC,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,YAAY,EAAE,CAAC;gBACpD,IAAI,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;oBAClC,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACzB,CAAC;qBAAM,CAAC;oBACN,MAAM,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAC3B,CAAC;YACH,CAAC;QACH,CAAC;KAAA;IAEK,UAAU;;YACd,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,UAAU,GAAG,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAE3F,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC7B,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;;AApDH,sDAqDC;AApDQ,kCAAY,GAAG,kBAAkB,AAArB,CAAsB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-checkbox-list/ix-checkbox-list.harness.ts"],"sourcesContent":["import {\n  BaseHarnessFilters, ComponentHarness, HarnessPredicate, parallel,\n} from '@angular/cdk/testing';\nimport { MatCheckboxHarness } from '@angular/material/checkbox/testing';\nimport { IxLabelHarness } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\n\nexport interface IxCheckboxListHarnessFilters extends BaseHarnessFilters {\n  label?: string;\n}\n\nexport class IxCheckboxListHarness extends ComponentHarness implements IxFormControlHarness {\n  static hostSelector = 'ix-checkbox-list';\n\n  static with(options: IxCheckboxListHarnessFilters): HarnessPredicate<IxCheckboxListHarness> {\n    return new HarnessPredicate(IxCheckboxListHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getCheckboxes = this.locatorForAll(MatCheckboxHarness);\n  getErrorText = getErrorText;\n\n  async getLabelText(): Promise<string> {\n    const label = await this.locatorForOptional(IxLabelHarness)();\n    if (!label) {\n      return '';\n    }\n    return label.getLabel();\n  }\n\n  async getValue(): Promise<string[]> {\n    const checkboxes = await this.getCheckboxes();\n    const checkedValues: string[] = [];\n    for (const checkbox of checkboxes) {\n      if (!await checkbox.isChecked()) {\n        continue;\n      }\n\n      checkedValues.push(await checkbox.getLabelText());\n    }\n\n    return checkedValues;\n  }\n\n  async setValue(value: string[]): Promise<void> {\n    const checkboxes = await this.getCheckboxes();\n    for (const checkbox of checkboxes) {\n      const checkboxLabel = await checkbox.getLabelText();\n      if (value.includes(checkboxLabel)) {\n        await checkbox.check();\n      } else {\n        await checkbox.uncheck();\n      }\n    }\n  }\n\n  async isDisabled(): Promise<boolean> {\n    const checkboxes = await this.getCheckboxes();\n    const inputState = await parallel(() => checkboxes.map((control) => control.isDisabled()));\n\n    return new Promise((resolve) => {\n      resolve(inputState.every(Boolean));\n    });\n  }\n}\n"],"version":3}