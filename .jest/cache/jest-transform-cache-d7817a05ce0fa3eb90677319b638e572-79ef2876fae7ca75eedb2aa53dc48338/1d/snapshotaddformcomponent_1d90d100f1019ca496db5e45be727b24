3ad1aea7489c81dc590c01a6920f5182
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotAddFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const date_fns_tz_1 = require("date-fns-tz");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const role_enum_1 = require("app/enums/role.enum");
const options_operators_1 = require("app/helpers/operators/options.operators");
const snapshots_1 = require("app/helptext/storage/snapshots/snapshots");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ix_validators_service_1 = require("app/modules/forms/ix-forms/services/ix-validators.service");
const at_least_one_validation_1 = require("app/modules/forms/ix-forms/validators/at-least-one-validation");
const required_empty_validation_1 = require("app/modules/forms/ix-forms/validators/required-empty-validation");
const snapshot_exclude_boot_constant_1 = require("app/pages/datasets/modules/snapshots/constants/snapshot-exclude-boot.constant");
const dataset_store_service_1 = require("app/pages/datasets/store/dataset-store.service");
const auth_service_1 = require("app/services/auth/auth.service");
const ws_service_1 = require("app/services/ws.service");
let SnapshotAddFormComponent = class SnapshotAddFormComponent {
    constructor(fb, cdr, ws, translate, authService, errorHandler, validatorsService, datasetStore, slideInRef, datasetId) {
        this.fb = fb;
        this.cdr = cdr;
        this.ws = ws;
        this.translate = translate;
        this.authService = authService;
        this.errorHandler = errorHandler;
        this.validatorsService = validatorsService;
        this.datasetStore = datasetStore;
        this.slideInRef = slideInRef;
        this.datasetId = datasetId;
        this.requiredRoles = [role_enum_1.Role.SnapshotWrite];
        this.isFormLoading = true;
        this.form = this.fb.group({
            dataset: ['', forms_1.Validators.required],
            name: [this.getDefaultSnapshotName(), [this.validatorsService.withMessage((0, at_least_one_validation_1.atLeastOne)('naming_schema', [snapshots_1.helptextSnapshots.snapshot_add_name_placeholder, snapshots_1.helptextSnapshots.snapshot_add_naming_schema_placeholder]), this.translate.instant('Name or Naming Schema must be provided.')), this.validatorsService.validateOnCondition((control) => { var _a; return control.value && ((_a = control.parent) === null || _a === void 0 ? void 0 : _a.get('naming_schema').value); }, this.validatorsService.withMessage((0, required_empty_validation_1.requiredEmpty)(), this.translate.instant('Name and Naming Schema cannot be provided at the same time.')))]],
            naming_schema: [''],
            recursive: [false],
            vmware_sync: [false],
        });
        this.hasVmsInDataset = false;
        this.helptext = snapshots_1.helptextSnapshots;
    }
    ngOnInit() {
        (0, rxjs_1.combineLatest)([
            this.getDatasetOptions(),
            this.getNamingSchemaOptions(),
        ]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ([datasetOptions, namingSchemaOptions]) => {
                this.datasetOptions$ = (0, rxjs_1.of)(datasetOptions);
                this.namingSchemaOptions$ = (0, rxjs_1.of)(namingSchemaOptions);
                this.isFormLoading = false;
                this.form.controls.name.markAsTouched();
                this.checkForVmsInDataset();
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.errorHandler.handleWsFormError(error, this.form);
                this.isFormLoading = false;
                this.cdr.markForCheck();
            },
        });
        (0, rxjs_1.merge)(this.form.controls.recursive.valueChanges, this.form.controls.dataset.valueChanges).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.checkForVmsInDataset());
        if (this.datasetId) {
            this.setDataset();
        }
    }
    setDataset() {
        this.form.controls.dataset.setValue(this.datasetId);
    }
    onSubmit() {
        const values = this.form.value;
        const params = {
            dataset: values.dataset,
            recursive: values.recursive,
        };
        if (values.naming_schema) {
            params.naming_schema = values.naming_schema;
        }
        else {
            params.name = values.name;
        }
        if (this.hasVmsInDataset) {
            params.vmware_sync = values.vmware_sync;
        }
        this.isFormLoading = true;
        this.ws.call('zfs.snapshot.create', [params]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                this.isFormLoading = false;
                this.slideInRef.close(true);
                this.datasetStore.datasetUpdated();
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isFormLoading = false;
                this.errorHandler.handleWsFormError(error, this.form);
                this.cdr.markForCheck();
            },
        });
    }
    getDefaultSnapshotName() {
        const datetime = (0, date_fns_tz_1.format)(new Date(), 'yyyy-MM-dd_HH-mm');
        return `manual-${datetime}`;
    }
    getDatasetOptions() {
        return this.ws.call('pool.dataset.query', [
            snapshot_exclude_boot_constant_1.snapshotExcludeBootQueryFilter,
            { extra: { flat: true } },
        ]).pipe((0, operators_1.map)((datasets) => datasets.map((dataset) => ({ label: dataset.name, value: dataset.name }))));
    }
    getNamingSchemaOptions() {
        return this.authService.hasRole([role_enum_1.Role.ReplicationTaskWrite, role_enum_1.Role.ReplicationTaskWritePull]).pipe((0, operators_1.switchMap)((hasAccess) => {
            if (!hasAccess) {
                return (0, rxjs_1.of)([]);
            }
            return this.ws.call('replication.list_naming_schemas').pipe((0, options_operators_1.singleArrayToOptions)());
        }));
    }
    checkForVmsInDataset() {
        this.isFormLoading = true;
        this.ws.call('vmware.dataset_has_vms', [this.form.controls.dataset.value, this.form.controls.recursive.value])
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (hasVmsInDataset) => {
                this.hasVmsInDataset = hasVmsInDataset;
                this.isFormLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.errorHandler.handleWsFormError(error, this.form);
                this.isFormLoading = false;
                this.cdr.markForCheck();
            },
        });
    }
};
exports.SnapshotAddFormComponent = SnapshotAddFormComponent;
SnapshotAddFormComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: core_1.ChangeDetectorRef },
    { type: ws_service_1.WebSocketService },
    { type: core_2.TranslateService },
    { type: auth_service_1.AuthService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: ix_validators_service_1.IxValidatorsService },
    { type: dataset_store_service_1.DatasetTreeStore },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: String, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.SnapshotAddFormComponent = SnapshotAddFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-snapshot-add-form',
        template: require("./snapshot-add-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], SnapshotAddFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,