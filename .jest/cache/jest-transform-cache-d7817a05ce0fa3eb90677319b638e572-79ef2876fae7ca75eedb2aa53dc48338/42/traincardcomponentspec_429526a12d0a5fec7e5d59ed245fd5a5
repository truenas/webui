780febd20d1a853e182f789509e835e4
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const train_card_component_1 = require("app/pages/system/update/components/train-card/train-card.component");
const train_service_1 = require("app/pages/system/update/services/train.service");
const update_service_1 = require("app/pages/system/update/services/update.service");
const system_general_service_1 = require("app/services/system-general.service");
describe('TrainCardComponent', () => {
    let spectator;
    let loader;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: train_card_component_1.TrainCardComponent,
        imports: [
            forms_1.ReactiveFormsModule,
        ],
        providers: [
            (0, mock_auth_utils_1.mockAuth)(),
            (0, mock_websocket_utils_1.mockWebSocket)([]),
            (0, jest_1.mockProvider)(train_service_1.TrainService, {
                getAutoDownload: jest.fn(() => (0, rxjs_1.of)(false)),
                getTrains: jest.fn(() => (0, rxjs_1.of)({
                    trains: { 'some train': { sequence: '', description: 'Some train description' } },
                    current: 'some train',
                    selected: 'some train',
                })),
                trainValue$: new rxjs_1.BehaviorSubject('train1'),
                fullTrainList$: new rxjs_1.BehaviorSubject(undefined),
                selectedTrain$: new rxjs_1.BehaviorSubject(undefined),
                currentTrainDescription$: new rxjs_1.BehaviorSubject(''),
                trainDescriptionOnPageLoad$: new rxjs_1.BehaviorSubject(''),
            }),
            (0, jest_1.mockProvider)(update_service_1.UpdateService, {}),
            (0, jest_1.mockProvider)(system_general_service_1.SystemGeneralService, {
                updateRunning: (0, rxjs_1.of)('false'),
            }),
        ],
    });
    beforeEach(() => {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
    });
    it('shows single train name', () => {
        expect(spectator.query('.single-train-name')).toHaveText('Current Train: some train - Some train description');
    });
    it('calls "check" when Refresh button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const refreshButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ selector: '[ixTest="refresh"]' }));
        yield refreshButton.click();
        expect(spectator.inject(train_service_1.TrainService).check).toHaveBeenCalled();
    }));
    it('calls "toggleAutoCheck" when auto check is changed', () => __awaiter(void 0, void 0, void 0, function* () {
        const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
        yield form.fillForm({
            'Check for Updates Daily and Download if Available': true,
        });
        expect(spectator.inject(train_service_1.TrainService).toggleAutoCheck).toHaveBeenCalledWith(true);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL3N5c3RlbS91cGRhdGUvY29tcG9uZW50cy90cmFpbi1jYXJkL3RyYWluLWNhcmQuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQSwwREFBeUU7QUFDekUsMENBQXFEO0FBQ3JELDhEQUFvRTtBQUNwRSxpREFBeUY7QUFDekYsK0JBQTJDO0FBQzNDLDRFQUFrRTtBQUNsRSxzRkFBNEU7QUFFNUUsd0ZBQW1GO0FBQ25GLDZHQUF3RztBQUN4RyxrRkFBOEU7QUFDOUUsb0ZBQWdGO0FBQ2hGLGdGQUEyRTtBQUUzRSxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLElBQUksU0FBd0MsQ0FBQztJQUM3QyxJQUFJLE1BQXFCLENBQUM7SUFFMUIsTUFBTSxlQUFlLEdBQUcsSUFBQSw2QkFBc0IsRUFBQztRQUM3QyxTQUFTLEVBQUUseUNBQWtCO1FBQzdCLE9BQU8sRUFBRTtZQUNQLDJCQUFtQjtTQUNwQjtRQUNELFNBQVMsRUFBRTtZQUNULElBQUEsMEJBQVEsR0FBRTtZQUNWLElBQUEsb0NBQWEsRUFBQyxFQUFFLENBQUM7WUFDakIsSUFBQSxtQkFBWSxFQUFDLDRCQUFZLEVBQUU7Z0JBQ3pCLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsU0FBRSxFQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6QyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLFNBQUUsRUFBQztvQkFDMUIsTUFBTSxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUUsRUFBRTtvQkFDakYsT0FBTyxFQUFFLFlBQVk7b0JBQ3JCLFFBQVEsRUFBRSxZQUFZO2lCQUNELENBQUMsQ0FBQztnQkFDekIsV0FBVyxFQUFFLElBQUksc0JBQWUsQ0FBQyxRQUFRLENBQUM7Z0JBQzFDLGNBQWMsRUFBRSxJQUFJLHNCQUFlLENBQUMsU0FBUyxDQUFDO2dCQUM5QyxjQUFjLEVBQUUsSUFBSSxzQkFBZSxDQUFDLFNBQVMsQ0FBQztnQkFDOUMsd0JBQXdCLEVBQUUsSUFBSSxzQkFBZSxDQUFTLEVBQUUsQ0FBQztnQkFDekQsMkJBQTJCLEVBQUUsSUFBSSxzQkFBZSxDQUFTLEVBQUUsQ0FBQzthQUM3RCxDQUFDO1lBQ0YsSUFBQSxtQkFBWSxFQUFDLDhCQUFhLEVBQUUsRUFDM0IsQ0FBQztZQUNGLElBQUEsbUJBQVksRUFBQyw2Q0FBb0IsRUFBRTtnQkFDakMsYUFBYSxFQUFFLElBQUEsU0FBRSxFQUFDLE9BQU8sQ0FBQzthQUMzQixDQUFDO1NBQ0g7S0FDRixDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsU0FBUyxHQUFHLGVBQWUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxtQ0FBeUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtRQUNqQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLG9EQUFvRCxDQUFDLENBQUM7SUFDakgsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsR0FBUyxFQUFFO1FBQzVELE1BQU0sYUFBYSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQywwQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekcsTUFBTSxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsNEJBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDbEUsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxHQUFTLEVBQUU7UUFDbEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLCtCQUFhLENBQUMsQ0FBQztRQUNwRCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDbEIsbURBQW1ELEVBQUUsSUFBSTtTQUMxRCxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyw0QkFBWSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEYsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9wYWdlcy9zeXN0ZW0vdXBkYXRlL2NvbXBvbmVudHMvdHJhaW4tY2FyZC90cmFpbi1jYXJkLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhcm5lc3NMb2FkZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZyc7XG5pbXBvcnQgeyBUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcvdGVzdGJlZCc7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0QnV0dG9uSGFybmVzcyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbi90ZXN0aW5nJztcbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudEZhY3RvcnksIG1vY2tQcm92aWRlciwgU3BlY3RhdG9yIH0gZnJvbSAnQG5nbmVhdC9zcGVjdGF0b3IvamVzdCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtb2NrQXV0aCB9IGZyb20gJ2FwcC9jb3JlL3Rlc3RpbmcvdXRpbHMvbW9jay1hdXRoLnV0aWxzJztcbmltcG9ydCB7IG1vY2tXZWJTb2NrZXQgfSBmcm9tICdhcHAvY29yZS90ZXN0aW5nL3V0aWxzL21vY2std2Vic29ja2V0LnV0aWxzJztcbmltcG9ydCB7IFN5c3RlbVVwZGF0ZVRyYWlucyB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL3N5c3RlbS11cGRhdGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IEl4Rm9ybUhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy90ZXN0aW5nL2l4LWZvcm0uaGFybmVzcyc7XG5pbXBvcnQgeyBUcmFpbkNhcmRDb21wb25lbnQgfSBmcm9tICdhcHAvcGFnZXMvc3lzdGVtL3VwZGF0ZS9jb21wb25lbnRzL3RyYWluLWNhcmQvdHJhaW4tY2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVHJhaW5TZXJ2aWNlIH0gZnJvbSAnYXBwL3BhZ2VzL3N5c3RlbS91cGRhdGUvc2VydmljZXMvdHJhaW4uc2VydmljZSc7XG5pbXBvcnQgeyBVcGRhdGVTZXJ2aWNlIH0gZnJvbSAnYXBwL3BhZ2VzL3N5c3RlbS91cGRhdGUvc2VydmljZXMvdXBkYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3lzdGVtR2VuZXJhbFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvc3lzdGVtLWdlbmVyYWwuc2VydmljZSc7XG5cbmRlc2NyaWJlKCdUcmFpbkNhcmRDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBzcGVjdGF0b3I6IFNwZWN0YXRvcjxUcmFpbkNhcmRDb21wb25lbnQ+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGNvbnN0IGNyZWF0ZUNvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudEZhY3Rvcnkoe1xuICAgIGNvbXBvbmVudDogVHJhaW5DYXJkQ29tcG9uZW50LFxuICAgIGltcG9ydHM6IFtcbiAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgIG1vY2tBdXRoKCksXG4gICAgICBtb2NrV2ViU29ja2V0KFtdKSxcbiAgICAgIG1vY2tQcm92aWRlcihUcmFpblNlcnZpY2UsIHtcbiAgICAgICAgZ2V0QXV0b0Rvd25sb2FkOiBqZXN0LmZuKCgpID0+IG9mKGZhbHNlKSksXG4gICAgICAgIGdldFRyYWluczogamVzdC5mbigoKSA9PiBvZih7XG4gICAgICAgICAgdHJhaW5zOiB7ICdzb21lIHRyYWluJzogeyBzZXF1ZW5jZTogJycsIGRlc2NyaXB0aW9uOiAnU29tZSB0cmFpbiBkZXNjcmlwdGlvbicgfSB9LFxuICAgICAgICAgIGN1cnJlbnQ6ICdzb21lIHRyYWluJyxcbiAgICAgICAgICBzZWxlY3RlZDogJ3NvbWUgdHJhaW4nLFxuICAgICAgICB9IGFzIFN5c3RlbVVwZGF0ZVRyYWlucykpLFxuICAgICAgICB0cmFpblZhbHVlJDogbmV3IEJlaGF2aW9yU3ViamVjdCgndHJhaW4xJyksXG4gICAgICAgIGZ1bGxUcmFpbkxpc3QkOiBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCksXG4gICAgICAgIHNlbGVjdGVkVHJhaW4kOiBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCksXG4gICAgICAgIGN1cnJlbnRUcmFpbkRlc2NyaXB0aW9uJDogbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KCcnKSxcbiAgICAgICAgdHJhaW5EZXNjcmlwdGlvbk9uUGFnZUxvYWQkOiBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJycpLFxuICAgICAgfSksXG4gICAgICBtb2NrUHJvdmlkZXIoVXBkYXRlU2VydmljZSwge1xuICAgICAgfSksXG4gICAgICBtb2NrUHJvdmlkZXIoU3lzdGVtR2VuZXJhbFNlcnZpY2UsIHtcbiAgICAgICAgdXBkYXRlUnVubmluZzogb2YoJ2ZhbHNlJyksXG4gICAgICB9KSxcbiAgICBdLFxuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzcGVjdGF0b3IgPSBjcmVhdGVDb21wb25lbnQoKTtcbiAgICBsb2FkZXIgPSBUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50LmxvYWRlcihzcGVjdGF0b3IuZml4dHVyZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBzaW5nbGUgdHJhaW4gbmFtZScsICgpID0+IHtcbiAgICBleHBlY3Qoc3BlY3RhdG9yLnF1ZXJ5KCcuc2luZ2xlLXRyYWluLW5hbWUnKSkudG9IYXZlVGV4dCgnQ3VycmVudCBUcmFpbjogc29tZSB0cmFpbiAtIFNvbWUgdHJhaW4gZGVzY3JpcHRpb24nKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIFwiY2hlY2tcIiB3aGVuIFJlZnJlc2ggYnV0dG9uIGlzIHByZXNzZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVmcmVzaEJ1dHRvbiA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdEJ1dHRvbkhhcm5lc3Mud2l0aCh7IHNlbGVjdG9yOiAnW2l4VGVzdD1cInJlZnJlc2hcIl0nIH0pKTtcbiAgICBhd2FpdCByZWZyZXNoQnV0dG9uLmNsaWNrKCk7XG5cbiAgICBleHBlY3Qoc3BlY3RhdG9yLmluamVjdChUcmFpblNlcnZpY2UpLmNoZWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdjYWxscyBcInRvZ2dsZUF1dG9DaGVja1wiIHdoZW4gYXV0byBjaGVjayBpcyBjaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGZvcm0gPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhJeEZvcm1IYXJuZXNzKTtcbiAgICBhd2FpdCBmb3JtLmZpbGxGb3JtKHtcbiAgICAgICdDaGVjayBmb3IgVXBkYXRlcyBEYWlseSBhbmQgRG93bmxvYWQgaWYgQXZhaWxhYmxlJzogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGV4cGVjdChzcGVjdGF0b3IuaW5qZWN0KFRyYWluU2VydmljZSkudG9nZ2xlQXV0b0NoZWNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0cnVlKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==