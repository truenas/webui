14b5e9e24b8d32f26af9d7614638ab9f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockWebSocket = mockWebSocket;
exports.mockCall = mockCall;
exports.mockJob = mockJob;
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const core_2 = require("@ngx-translate/core");
const mock_websocket_service_1 = require("app/core/testing/classes/mock-websocket.service");
const mock_websocket_responses_interface_1 = require("app/core/testing/interfaces/mock-websocket-responses.interface");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const ws_service_1 = require("app/services/ws.service");
/**
 * This is a sugar syntax for creating simple websocket mocks.
 * @example
 * providers: [
 *   mockWebSocket([
 *     mockCall('filesystem.stat': { gid: 0 } as FileSystemStat),
 *     mockCall('filesystem.stat', () => ({ gid: 0 } as FileSystemStat)),
 *     mockJob('filesystem.setacl', fakeSuccessfulJob()),
 *     ...
 *   }),
 * ]
 *
 * It also makes available MockWebSocketService, which allows customizing calls on the fly.
 *
 * If you need more customization, use ordinary mockProvider().
 * @example
 * providers: [
 *   mockProvider(WebSocketService, {
 *     call: jest.fn((method) => {
 *       if (method === 'filesystem.stat') {
 *         return of({ user: 'john' } as FileSystemStat);
 *       }
 *     })
 *   }),
 * ]
 */
function mockWebSocket(mockResponses) {
    return [
        {
            provide: ws_service_1.WebSocketService,
            useFactory: (router, wsManager, translate) => {
                const mockWebSocketService = new mock_websocket_service_1.MockWebSocketService(router, wsManager, translate);
                (mockResponses || []).forEach((mockResponse) => {
                    if (mockResponse.type === mock_websocket_responses_interface_1.MockWebSocketResponseType.Call) {
                        mockWebSocketService.mockCall(mockResponse.method, mockResponse.response);
                    }
                    else if (mockResponse.type === mock_websocket_responses_interface_1.MockWebSocketResponseType.Job) {
                        mockWebSocketService.mockJob(mockResponse.method, mockResponse.response);
                    }
                });
                return mockWebSocketService;
            },
            deps: [router_1.Router, websocket_connection_service_1.WebSocketConnectionService, core_2.TranslateService],
        },
        {
            provide: mock_websocket_service_1.MockWebSocketService,
            useExisting: (0, core_1.forwardRef)(() => ws_service_1.WebSocketService),
        },
        {
            provide: websocket_connection_service_1.WebSocketConnectionService,
            useValue: { send: jest.fn() },
        },
    ];
}
function mockCall(method, response = undefined) {
    return {
        response,
        method,
        type: mock_websocket_responses_interface_1.MockWebSocketResponseType.Call,
    };
}
/**
 * Mocks immediate call() and job() responses and core.get_jobs when id is queried.
 * @see MockWebSocketService.mockJob()
 */
function mockJob(method, response = undefined) {
    return {
        response,
        method,
        type: mock_websocket_responses_interface_1.MockWebSocketResponseType.Job,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2NvcmUvdGVzdGluZy91dGlscy9tb2NrLXdlYnNvY2tldC51dGlscy50cyIsIm1hcHBpbmdzIjoiOztBQTRDQSxzQ0ErQkM7QUFFRCw0QkFTQztBQU1ELDBCQVNDO0FBckdELHdDQUV1QjtBQUN2Qiw0Q0FBeUM7QUFDekMsOENBQXVEO0FBQ3ZELDRGQUF1RjtBQUN2Rix1SEFJd0U7QUFJeEUsNEZBQXVGO0FBQ3ZGLHdEQUEyRDtBQUUzRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCRztBQUVILFNBQWdCLGFBQWEsQ0FDM0IsYUFBd0U7SUFFeEUsT0FBTztRQUNMO1lBQ0UsT0FBTyxFQUFFLDZCQUFnQjtZQUN6QixVQUFVLEVBQUUsQ0FBQyxNQUFjLEVBQUUsU0FBcUMsRUFBRSxTQUEyQixFQUFFLEVBQUU7Z0JBQ2pHLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSw2Q0FBb0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUNwRixDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtvQkFDN0MsSUFBSSxZQUFZLENBQUMsSUFBSSxLQUFLLDhEQUF5QixDQUFDLElBQUksRUFBRSxDQUFDO3dCQUN6RCxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzVFLENBQUM7eUJBQU0sSUFBSSxZQUFZLENBQUMsSUFBSSxLQUFLLDhEQUF5QixDQUFDLEdBQUcsRUFBRSxDQUFDO3dCQUMvRCxvQkFBb0IsQ0FBQyxPQUFPLENBQzFCLFlBQVksQ0FBQyxNQUFNLEVBQ25CLFlBQVksQ0FBQyxRQUEwRCxDQUN4RSxDQUFDO29CQUNKLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsT0FBTyxvQkFBb0IsQ0FBQztZQUM5QixDQUFDO1lBQ0QsSUFBSSxFQUFFLENBQUMsZUFBTSxFQUFFLHlEQUEwQixFQUFFLHVCQUFnQixDQUFDO1NBQzdEO1FBQ0Q7WUFDRSxPQUFPLEVBQUUsNkNBQW9CO1lBQzdCLFdBQVcsRUFBRSxJQUFBLGlCQUFVLEVBQUMsR0FBRyxFQUFFLENBQUMsNkJBQWdCLENBQUM7U0FDaEQ7UUFDRDtZQUNFLE9BQU8sRUFBRSx5REFBMEI7WUFDbkMsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBNEM7U0FDekU7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQWdCLFFBQVEsQ0FDdEIsTUFBUyxFQUNULFdBQXFDLFNBQVM7SUFFOUMsT0FBTztRQUNMLFFBQVE7UUFDUixNQUFNO1FBQ04sSUFBSSxFQUFFLDhEQUF5QixDQUFDLElBQUk7S0FDckMsQ0FBQztBQUNKLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixPQUFPLENBQ3JCLE1BQVMsRUFDVCxXQUFvQyxTQUFTO0lBRTdDLE9BQU87UUFDTCxRQUFRO1FBQ1IsTUFBTTtRQUNOLElBQUksRUFBRSw4REFBeUIsQ0FBQyxHQUFHO0tBQ3BDLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9jb3JlL3Rlc3RpbmcvdXRpbHMvbW9jay13ZWJzb2NrZXQudXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRXhpc3RpbmdQcm92aWRlciwgRmFjdG9yeVByb3ZpZGVyLCBmb3J3YXJkUmVmLCBWYWx1ZVByb3ZpZGVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBNb2NrV2ViU29ja2V0U2VydmljZSB9IGZyb20gJ2FwcC9jb3JlL3Rlc3RpbmcvY2xhc3Nlcy9tb2NrLXdlYnNvY2tldC5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIENhbGxSZXNwb25zZU9yRmFjdG9yeSwgSm9iUmVzcG9uc2VPckZhY3RvcnksXG4gIE1vY2tXZWJTb2NrZXRDYWxsUmVzcG9uc2UsIE1vY2tXZWJTb2NrZXRKb2JSZXNwb25zZSxcbiAgTW9ja1dlYlNvY2tldFJlc3BvbnNlVHlwZSxcbn0gZnJvbSAnYXBwL2NvcmUvdGVzdGluZy9pbnRlcmZhY2VzL21vY2std2Vic29ja2V0LXJlc3BvbnNlcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQXBpQ2FsbE1ldGhvZCB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2FwaS9hcGktY2FsbC1kaXJlY3RvcnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IEFwaUpvYkRpcmVjdG9yeSwgQXBpSm9iTWV0aG9kIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvYXBpL2FwaS1qb2ItZGlyZWN0b3J5LmludGVyZmFjZSc7XG5pbXBvcnQgeyBKb2IgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9qb2IuaW50ZXJmYWNlJztcbmltcG9ydCB7IFdlYlNvY2tldENvbm5lY3Rpb25TZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dlYnNvY2tldC1jb25uZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy93cy5zZXJ2aWNlJztcblxuLyoqXG4gKiBUaGlzIGlzIGEgc3VnYXIgc3ludGF4IGZvciBjcmVhdGluZyBzaW1wbGUgd2Vic29ja2V0IG1vY2tzLlxuICogQGV4YW1wbGVcbiAqIHByb3ZpZGVyczogW1xuICogICBtb2NrV2ViU29ja2V0KFtcbiAqICAgICBtb2NrQ2FsbCgnZmlsZXN5c3RlbS5zdGF0JzogeyBnaWQ6IDAgfSBhcyBGaWxlU3lzdGVtU3RhdCksXG4gKiAgICAgbW9ja0NhbGwoJ2ZpbGVzeXN0ZW0uc3RhdCcsICgpID0+ICh7IGdpZDogMCB9IGFzIEZpbGVTeXN0ZW1TdGF0KSksXG4gKiAgICAgbW9ja0pvYignZmlsZXN5c3RlbS5zZXRhY2wnLCBmYWtlU3VjY2Vzc2Z1bEpvYigpKSxcbiAqICAgICAuLi5cbiAqICAgfSksXG4gKiBdXG4gKlxuICogSXQgYWxzbyBtYWtlcyBhdmFpbGFibGUgTW9ja1dlYlNvY2tldFNlcnZpY2UsIHdoaWNoIGFsbG93cyBjdXN0b21pemluZyBjYWxscyBvbiB0aGUgZmx5LlxuICpcbiAqIElmIHlvdSBuZWVkIG1vcmUgY3VzdG9taXphdGlvbiwgdXNlIG9yZGluYXJ5IG1vY2tQcm92aWRlcigpLlxuICogQGV4YW1wbGVcbiAqIHByb3ZpZGVyczogW1xuICogICBtb2NrUHJvdmlkZXIoV2ViU29ja2V0U2VydmljZSwge1xuICogICAgIGNhbGw6IGplc3QuZm4oKG1ldGhvZCkgPT4ge1xuICogICAgICAgaWYgKG1ldGhvZCA9PT0gJ2ZpbGVzeXN0ZW0uc3RhdCcpIHtcbiAqICAgICAgICAgcmV0dXJuIG9mKHsgdXNlcjogJ2pvaG4nIH0gYXMgRmlsZVN5c3RlbVN0YXQpO1xuICogICAgICAgfVxuICogICAgIH0pXG4gKiAgIH0pLFxuICogXVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrV2ViU29ja2V0KFxuICBtb2NrUmVzcG9uc2VzPzogKE1vY2tXZWJTb2NrZXRDYWxsUmVzcG9uc2UgfCBNb2NrV2ViU29ja2V0Sm9iUmVzcG9uc2UpW10sXG4pOiAoRmFjdG9yeVByb3ZpZGVyIHwgRXhpc3RpbmdQcm92aWRlciB8IFZhbHVlUHJvdmlkZXIpW10ge1xuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFdlYlNvY2tldFNlcnZpY2UsXG4gICAgICB1c2VGYWN0b3J5OiAocm91dGVyOiBSb3V0ZXIsIHdzTWFuYWdlcjogV2ViU29ja2V0Q29ubmVjdGlvblNlcnZpY2UsIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrV2ViU29ja2V0U2VydmljZSA9IG5ldyBNb2NrV2ViU29ja2V0U2VydmljZShyb3V0ZXIsIHdzTWFuYWdlciwgdHJhbnNsYXRlKTtcbiAgICAgICAgKG1vY2tSZXNwb25zZXMgfHwgW10pLmZvckVhY2goKG1vY2tSZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChtb2NrUmVzcG9uc2UudHlwZSA9PT0gTW9ja1dlYlNvY2tldFJlc3BvbnNlVHlwZS5DYWxsKSB7XG4gICAgICAgICAgICBtb2NrV2ViU29ja2V0U2VydmljZS5tb2NrQ2FsbChtb2NrUmVzcG9uc2UubWV0aG9kLCBtb2NrUmVzcG9uc2UucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW9ja1Jlc3BvbnNlLnR5cGUgPT09IE1vY2tXZWJTb2NrZXRSZXNwb25zZVR5cGUuSm9iKSB7XG4gICAgICAgICAgICBtb2NrV2ViU29ja2V0U2VydmljZS5tb2NrSm9iKFxuICAgICAgICAgICAgICBtb2NrUmVzcG9uc2UubWV0aG9kLFxuICAgICAgICAgICAgICBtb2NrUmVzcG9uc2UucmVzcG9uc2UgYXMgSm9iPEFwaUpvYkRpcmVjdG9yeVtBcGlKb2JNZXRob2RdWydyZXNwb25zZSddPixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1vY2tXZWJTb2NrZXRTZXJ2aWNlO1xuICAgICAgfSxcbiAgICAgIGRlcHM6IFtSb3V0ZXIsIFdlYlNvY2tldENvbm5lY3Rpb25TZXJ2aWNlLCBUcmFuc2xhdGVTZXJ2aWNlXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IE1vY2tXZWJTb2NrZXRTZXJ2aWNlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gV2ViU29ja2V0U2VydmljZSksXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBXZWJTb2NrZXRDb25uZWN0aW9uU2VydmljZSxcbiAgICAgIHVzZVZhbHVlOiAoeyBzZW5kOiBqZXN0LmZuKCkgfSBhcyB1bmtub3duIGFzIFdlYlNvY2tldENvbm5lY3Rpb25TZXJ2aWNlKSxcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja0NhbGw8TSBleHRlbmRzIEFwaUNhbGxNZXRob2Q+KFxuICBtZXRob2Q6IE0sXG4gIHJlc3BvbnNlOiBDYWxsUmVzcG9uc2VPckZhY3Rvcnk8TT4gPSB1bmRlZmluZWQsXG4pOiBNb2NrV2ViU29ja2V0Q2FsbFJlc3BvbnNlIHtcbiAgcmV0dXJuIHtcbiAgICByZXNwb25zZSxcbiAgICBtZXRob2QsXG4gICAgdHlwZTogTW9ja1dlYlNvY2tldFJlc3BvbnNlVHlwZS5DYWxsLFxuICB9O1xufVxuXG4vKipcbiAqIE1vY2tzIGltbWVkaWF0ZSBjYWxsKCkgYW5kIGpvYigpIHJlc3BvbnNlcyBhbmQgY29yZS5nZXRfam9icyB3aGVuIGlkIGlzIHF1ZXJpZWQuXG4gKiBAc2VlIE1vY2tXZWJTb2NrZXRTZXJ2aWNlLm1vY2tKb2IoKVxuICovXG5leHBvcnQgZnVuY3Rpb24gbW9ja0pvYjxNIGV4dGVuZHMgQXBpSm9iTWV0aG9kPihcbiAgbWV0aG9kOiBNLFxuICByZXNwb25zZTogSm9iUmVzcG9uc2VPckZhY3Rvcnk8TT4gPSB1bmRlZmluZWQsXG4pOiBNb2NrV2ViU29ja2V0Sm9iUmVzcG9uc2Uge1xuICByZXR1cm4ge1xuICAgIHJlc3BvbnNlLFxuICAgIG1ldGhvZCxcbiAgICB0eXBlOiBNb2NrV2ViU29ja2V0UmVzcG9uc2VUeXBlLkpvYixcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==