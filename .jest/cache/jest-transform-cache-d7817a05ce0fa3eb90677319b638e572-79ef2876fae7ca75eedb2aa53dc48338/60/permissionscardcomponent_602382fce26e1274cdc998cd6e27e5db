4f69f39612685dddb3c2d33b9b6cc88d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsCardComponent = void 0;
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const ngx_skeleton_loader_1 = require("ngx-skeleton-loader");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const acl_type_enum_1 = require("app/enums/acl-type.enum");
const empty_type_enum_1 = require("app/enums/empty-type.enum");
const nfs_acl_enum_1 = require("app/enums/nfs-acl.enum");
const role_enum_1 = require("app/enums/role.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const empty_component_1 = require("app/modules/empty/empty.component");
const cast_pipe_1 = require("app/modules/pipes/cast/cast.pipe");
const test_directive_1 = require("app/modules/test-id/test.directive");
const view_nfs_permissions_component_1 = require("app/pages/datasets/modules/permissions/components/view-nfs-permissions/view-nfs-permissions.component");
const view_posix_permissions_component_1 = require("app/pages/datasets/modules/permissions/components/view-posix-permissions/view-posix-permissions.component");
const view_trivial_permissions_component_1 = require("app/pages/datasets/modules/permissions/components/view-trivial-permissions/view-trivial-permissions.component");
const permissions_card_store_1 = require("app/pages/datasets/modules/permissions/stores/permissions-card.store");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
const error_handler_service_1 = require("app/services/error-handler.service");
let PermissionsCardComponent = class PermissionsCardComponent {
    constructor(store, cdr, errorHandler, dialogService, router, translate) {
        this.store = store;
        this.cdr = cdr;
        this.errorHandler = errorHandler;
        this.dialogService = dialogService;
        this.router = router;
        this.translate = translate;
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.emptyConfig = {
            type: empty_type_enum_1.EmptyType.NoPageData,
            title: this.translate.instant('No Data'),
        };
        this.missionMountpointEmptyConfig = {
            type: empty_type_enum_1.EmptyType.NoPageData,
            title: this.translate.instant('Dataset has no mountpoint'),
        };
        this.AclType = acl_type_enum_1.AclType;
    }
    redirectToEditPermissions() {
        if (this.acl.trivial) {
            this.router.navigate(['/datasets', this.dataset.id, 'permissions', 'edit']);
        }
        else {
            this.router.navigate(['/datasets', 'acl', 'edit'], { queryParams: { path: '/mnt/' + this.dataset.id } });
        }
    }
    get canEditPermissions() {
        return this.acl && !(0, dataset_utils_1.isRootDataset)(this.dataset) && !this.dataset.locked;
    }
    ngOnChanges() {
        this.loadPermissions();
    }
    ngOnInit() {
        this.store.state$
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (state) => {
                var _a;
                this.isLoading = state.isLoading;
                this.acl = state.acl;
                this.stat = state.stat;
                // TODO: Move elsewhere
                if (((_a = this.acl) === null || _a === void 0 ? void 0 : _a.acl) && this.acl.acltype === acl_type_enum_1.AclType.Nfs4) {
                    for (const acl of this.acl.acl) {
                        if (acl.tag === nfs_acl_enum_1.NfsAclTag.Owner && acl.who === null) {
                            acl.who = this.acl.uid.toString();
                        }
                        if ((acl.tag === nfs_acl_enum_1.NfsAclTag.Group || acl.tag === nfs_acl_enum_1.NfsAclTag.UserGroup) && acl.who === null) {
                            acl.who = this.acl.gid.toString();
                        }
                    }
                }
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialogService.error(this.errorHandler.parseError(error));
            },
        });
    }
    loadPermissions() {
        this.isMissingMountpoint = !this.dataset.mountpoint;
        if (this.isMissingMountpoint) {
            return;
        }
        this.store.loadPermissions(this.dataset.mountpoint);
    }
};
exports.PermissionsCardComponent = PermissionsCardComponent;
PermissionsCardComponent.ctorParameters = () => [
    { type: permissions_card_store_1.PermissionsCardStore },
    { type: core_1.ChangeDetectorRef },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_service_1.DialogService },
    { type: router_1.Router },
    { type: core_2.TranslateService }
];
PermissionsCardComponent.propDecorators = {
    dataset: [{ type: core_1.Input }]
};
exports.PermissionsCardComponent = PermissionsCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-permissions-card',
        template: require("./permissions-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            card_1.MatCard,
            card_1.MatCardHeader,
            card_1.MatCardTitle,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            card_1.MatCardContent,
            ngx_skeleton_loader_1.NgxSkeletonLoaderModule,
            view_trivial_permissions_component_1.ViewTrivialPermissionsComponent,
            view_posix_permissions_component_1.ViewPosixPermissionsComponent,
            view_nfs_permissions_component_1.ViewNfsPermissionsComponent,
            empty_component_1.EmptyComponent,
            core_2.TranslateModule,
            cast_pipe_1.CastPipe,
        ],
        providers: [
            permissions_card_store_1.PermissionsCardStore,
        ],
    })
], PermissionsCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,