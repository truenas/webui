{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/core/testing.mjs"],
  "sourcesContent": ["import { ContentContainerComponentHarness, HarnessPredicate, ComponentHarness } from '@angular/cdk/testing';\n\n/** Harness for interacting with a `mat-option` in tests. */\nclass MatOptionHarness extends ContentContainerComponentHarness {\n    constructor() {\n        super(...arguments);\n        /** Element containing the option's text. */\n        this._text = this.locatorFor('.mdc-list-item__primary-text');\n    }\n    /** Selector used to locate option instances. */\n    static { this.hostSelector = '.mat-mdc-option'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for an option with specific attributes.\n     * @param options Options for filtering which option instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(this, options)\n            .addOption('text', options.text, async (harness, title) => HarnessPredicate.stringMatches(await harness.getText(), title))\n            .addOption('isSelected', options.isSelected, async (harness, isSelected) => (await harness.isSelected()) === isSelected);\n    }\n    /** Clicks the option. */\n    async click() {\n        return (await this.host()).click();\n    }\n    /** Gets the option's label text. */\n    async getText() {\n        return (await this._text()).text();\n    }\n    /** Gets whether the option is disabled. */\n    async isDisabled() {\n        return (await this.host()).hasClass('mdc-list-item--disabled');\n    }\n    /** Gets whether the option is selected. */\n    async isSelected() {\n        return (await this.host()).hasClass('mdc-list-item--selected');\n    }\n    /** Gets whether the option is active. */\n    async isActive() {\n        return (await this.host()).hasClass('mat-mdc-option-active');\n    }\n    /** Gets whether the option is in multiple selection mode. */\n    async isMultiple() {\n        return (await this.host()).hasClass('mat-mdc-option-multiple');\n    }\n}\n\n/** Harness for interacting with a `mat-optgroup` in tests. */\nclass MatOptgroupHarness extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        this._label = this.locatorFor('.mat-mdc-optgroup-label');\n    }\n    /** Selector used to locate option group instances. */\n    static { this.hostSelector = '.mat-mdc-optgroup'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a option group with specific\n     * attributes.\n     * @param options Options for filtering which option instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(this, options).addOption('labelText', options.labelText, async (harness, title) => HarnessPredicate.stringMatches(await harness.getLabelText(), title));\n    }\n    /** Gets the option group's label text. */\n    async getLabelText() {\n        return (await this._label()).text();\n    }\n    /** Gets whether the option group is disabled. */\n    async isDisabled() {\n        return (await (await this.host()).getAttribute('aria-disabled')) === 'true';\n    }\n    /**\n     * Gets the options that are inside the group.\n     * @param filter Optionally filters which options are included.\n     */\n    async getOptions(filter = {}) {\n        return this.locatorForAll(MatOptionHarness.with(filter))();\n    }\n}\n\nexport { MatOptgroupHarness, MatOptionHarness };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAqF;AAGrF,MAAM,oBAAN,MAAM,0BAAyB,gDAAiC;AAAA,EAC5D,cAAc;AACV,UAAM,GAAG,SAAS;AAElB,SAAK,QAAQ,KAAK,WAAW,8BAA8B;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,KAAK,UAAU,CAAC,GAAG;AACtB,WAAO,IAAI,gCAAiB,MAAM,OAAO,EACpC,UAAU,QAAQ,QAAQ,MAAM,CAAO,SAAS,UAAO;AAAG,6CAAiB,cAAc,MAAM,QAAQ,QAAQ,GAAG,KAAK;AAAA,MAAC,EACxH,UAAU,cAAc,QAAQ,YAAY,CAAO,SAAS,eAAY;AAAI,oBAAM,QAAQ,WAAW,OAAO;AAAA,MAAU;AAAA,EAC/H;AAAA;AAAA,EAEM,QAAQ;AAAA;AACV,cAAQ,MAAM,KAAK,KAAK,GAAG,MAAM;AAAA,IACrC;AAAA;AAAA;AAAA,EAEM,UAAU;AAAA;AACZ,cAAQ,MAAM,KAAK,MAAM,GAAG,KAAK;AAAA,IACrC;AAAA;AAAA;AAAA,EAEM,aAAa;AAAA;AACf,cAAQ,MAAM,KAAK,KAAK,GAAG,SAAS,yBAAyB;AAAA,IACjE;AAAA;AAAA;AAAA,EAEM,aAAa;AAAA;AACf,cAAQ,MAAM,KAAK,KAAK,GAAG,SAAS,yBAAyB;AAAA,IACjE;AAAA;AAAA;AAAA,EAEM,WAAW;AAAA;AACb,cAAQ,MAAM,KAAK,KAAK,GAAG,SAAS,uBAAuB;AAAA,IAC/D;AAAA;AAAA;AAAA,EAEM,aAAa;AAAA;AACf,cAAQ,MAAM,KAAK,KAAK,GAAG,SAAS,yBAAyB;AAAA,IACjE;AAAA;AACJ;AAnCa,kBAAK,eAAe;AAPjC,IAAM,mBAAN;AA6CA,MAAM,sBAAN,MAAM,4BAA2B,gCAAiB;AAAA,EAC9C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,SAAS,KAAK,WAAW,yBAAyB;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,KAAK,UAAU,CAAC,GAAG;AACtB,WAAO,IAAI,gCAAiB,MAAM,OAAO,EAAE,UAAU,aAAa,QAAQ,WAAW,CAAO,SAAS,UAAO;AAAG,6CAAiB,cAAc,MAAM,QAAQ,aAAa,GAAG,KAAK;AAAA,MAAC;AAAA,EACtL;AAAA;AAAA,EAEM,eAAe;AAAA;AACjB,cAAQ,MAAM,KAAK,OAAO,GAAG,KAAK;AAAA,IACtC;AAAA;AAAA;AAAA,EAEM,aAAa;AAAA;AACf,cAAQ,OAAO,MAAM,KAAK,KAAK,GAAG,aAAa,eAAe,OAAO;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,aAAwB;AAAA,+CAAb,SAAS,CAAC,GAAG;AAC1B,aAAO,KAAK,cAAc,iBAAiB,KAAK,MAAM,CAAC,EAAE;AAAA,IAC7D;AAAA;AACJ;AAzBa,oBAAK,eAAe;AANjC,IAAM,qBAAN;",
  "names": []
}
