a43c4b9ad4256766ca4dc5d7dfab1e29
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartServiceDialogComponent = void 0;
const scrolling_1 = require("@angular/cdk/scrolling");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const service_name_enum_1 = require("app/enums/service-name.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_slide_toggle_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component");
const fake_progress_bar_component_1 = require("app/modules/loader/components/fake-progress-bar/fake-progress-bar.component");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const services_selectors_1 = require("app/store/services/services.selectors");
let StartServiceDialogComponent = class StartServiceDialogComponent {
    get serviceHumanName() {
        return service_name_enum_1.serviceNames.get(this.serviceName);
    }
    get isDisabled() {
        return !this.service.enable;
    }
    constructor(ws, cdr, translate, snackbar, dialogRef, store$, dialogService, errorHandler, serviceName) {
        this.ws = ws;
        this.cdr = cdr;
        this.translate = translate;
        this.snackbar = snackbar;
        this.dialogRef = dialogRef;
        this.store$ = store$;
        this.dialogService = dialogService;
        this.errorHandler = errorHandler;
        this.serviceName = serviceName;
        this.startAutomaticallyControl = new forms_1.FormControl(true);
        this.isLoading = false;
    }
    ngOnInit() {
        this.getService();
    }
    onCancel() {
        this.dialogRef.close({
            start: false,
            startAutomatically: false,
        });
    }
    onSubmit() {
        this.isLoading = true;
        const requests = [];
        const result = {
            start: true,
            startAutomatically: this.startAutomaticallyControl.value,
        };
        if (result.start && result.startAutomatically && this.isDisabled) {
            requests.push(this.ws.call('service.update', [this.service.id, { enable: result.startAutomatically }]));
        }
        if (result.start) {
            requests.push(this.ws.call('service.start', [this.serviceName, { silent: false }]));
        }
        (0, rxjs_1.forkJoin)(requests)
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                if (result.startAutomatically) {
                    this.snackbar.success(this.translate.instant('The {service} service is running and will auto-start after a system restart.', { service: this.serviceHumanName }));
                }
                else {
                    this.snackbar.success(this.translate.instant('The {service} service is running.', { service: this.serviceHumanName }));
                }
                this.isLoading = false;
                this.dialogRef.close(result);
            },
            error: (error) => {
                this.isLoading = false;
                this.dialogService.error(this.errorHandler.parseError(error));
                this.dialogRef.close({
                    start: false,
                    startAutomatically: false,
                });
            },
        });
    }
    getService() {
        this.store$.select((0, services_selectors_1.selectService)(this.serviceName))
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((service) => {
            this.service = service;
            this.cdr.markForCheck();
        });
    }
};
exports.StartServiceDialogComponent = StartServiceDialogComponent;
StartServiceDialogComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: core_2.TranslateService },
    { type: snackbar_service_1.SnackbarService },
    { type: dialog_1.MatDialogRef },
    { type: store_1.Store },
    { type: dialog_service_1.DialogService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: service_name_enum_1.ServiceName, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.StartServiceDialogComponent = StartServiceDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-start-service-dialog',
        template: require("./start-service-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            scrolling_1.CdkScrollable,
            dialog_1.MatDialogContent,
            ix_slide_toggle_component_1.IxSlideToggleComponent,
            forms_1.ReactiveFormsModule,
            form_actions_component_1.FormActionsComponent,
            dialog_1.MatDialogActions,
            button_1.MatButton,
            core_2.TranslateModule,
            fake_progress_bar_component_1.FakeProgressBarComponent,
            test_directive_1.TestDirective,
        ],
    })
], StartServiceDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,