{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/components/start-service-dialog/start-service-dialog.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/components/start-service-dialog/start-service-dialog.component.ts"],"sourcesContent":["import { CdkScrollable } from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit,\n} from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport {\n  MAT_DIALOG_DATA, MatDialogRef, MatDialogTitle, MatDialogContent, MatDialogActions,\n} from '@angular/material/dialog';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Store } from '@ngrx/store';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\nimport { Observable, forkJoin } from 'rxjs';\nimport { ServiceName, serviceNames } from 'app/enums/service-name.enum';\nimport { Service } from 'app/interfaces/service.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { FormActionsComponent } from 'app/modules/forms/ix-forms/components/form-actions/form-actions.component';\nimport { IxSlideToggleComponent } from 'app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component';\nimport { FakeProgressBarComponent } from 'app/modules/loader/components/fake-progress-bar/fake-progress-bar.component';\nimport { SnackbarService } from 'app/modules/snackbar/services/snackbar.service';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { ServicesState } from 'app/store/services/services.reducer';\nimport { selectService } from 'app/store/services/services.selectors';\n\nexport interface StartServiceDialogResult {\n  start: boolean;\n  startAutomatically: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-start-service-dialog',\n  templateUrl: './start-service-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatDialogTitle,\n    CdkScrollable,\n    MatDialogContent,\n    IxSlideToggleComponent,\n    ReactiveFormsModule,\n    FormActionsComponent,\n    MatDialogActions,\n    MatButton,\n    TranslateModule,\n    FakeProgressBarComponent,\n    TestDirective,\n  ],\n})\nexport class StartServiceDialogComponent implements OnInit {\n  startAutomaticallyControl = new FormControl(true);\n  protected isLoading = false;\n  private service: Service;\n\n  get serviceHumanName(): string {\n    return serviceNames.get(this.serviceName);\n  }\n\n  get isDisabled(): boolean {\n    return !this.service.enable;\n  }\n\n  constructor(\n    private ws: WebSocketService,\n    private cdr: ChangeDetectorRef,\n    private translate: TranslateService,\n    private snackbar: SnackbarService,\n    private dialogRef: MatDialogRef<StartServiceDialogComponent, StartServiceDialogResult>,\n    private store$: Store<ServicesState>,\n    private dialogService: DialogService,\n    private errorHandler: ErrorHandlerService,\n    @Inject(MAT_DIALOG_DATA) public serviceName: ServiceName,\n  ) {}\n\n  ngOnInit(): void {\n    this.getService();\n  }\n\n  onCancel(): void {\n    this.dialogRef.close({\n      start: false,\n      startAutomatically: false,\n    });\n  }\n\n  onSubmit(): void {\n    this.isLoading = true;\n    const requests: Observable<boolean | number>[] = [];\n    const result: StartServiceDialogResult = {\n      start: true,\n      startAutomatically: this.startAutomaticallyControl.value,\n    };\n\n    if (result.start && result.startAutomatically && this.isDisabled) {\n      requests.push(this.ws.call('service.update', [this.service.id, { enable: result.startAutomatically }]));\n    }\n\n    if (result.start) {\n      requests.push(this.ws.call('service.start', [this.serviceName, { silent: false }]));\n    }\n\n    forkJoin(requests)\n      .pipe(untilDestroyed(this))\n      .subscribe({\n        next: () => {\n          if (result.startAutomatically) {\n            this.snackbar.success(\n              this.translate.instant(\n                'The {service} service is running and will auto-start after a system restart.',\n                { service: this.serviceHumanName },\n              ),\n            );\n          } else {\n            this.snackbar.success(\n              this.translate.instant('The {service} service is running.', { service: this.serviceHumanName }),\n            );\n          }\n          this.isLoading = false;\n          this.dialogRef.close(result);\n        },\n        error: (error: unknown) => {\n          this.isLoading = false;\n          this.dialogService.error(this.errorHandler.parseError(error));\n          this.dialogRef.close({\n            start: false,\n            startAutomatically: false,\n          });\n        },\n      });\n  }\n\n  private getService(): void {\n    this.store$.select(selectService(this.serviceName))\n      .pipe(untilDestroyed(this))\n      .subscribe((service) => {\n        this.service = service;\n        this.cdr.markForCheck();\n      });\n  }\n}\n"],"version":3}