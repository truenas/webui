{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/replication.service.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/replication.service.spec.ts"],"sourcesContent":["import { createServiceFactory, mockProvider, SpectatorService } from '@ngneat/spectator/jest';\nimport { firstValueFrom } from 'rxjs';\nimport { mockAuth } from 'app/core/testing/utils/mock-auth.utils';\nimport { mockCall, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { ExplorerNodeType } from 'app/enums/explorer-type.enum';\nimport { TransportMode } from 'app/enums/transport-mode.enum';\nimport { ExplorerNodeData, TreeNode } from 'app/interfaces/tree-node.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { ReplicationService } from 'app/services/replication.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\ndescribe('ReplicationService', () => {\n  let spectator: SpectatorService<ReplicationService>;\n  const createService = createServiceFactory({\n    service: ReplicationService,\n    providers: [\n      mockAuth(),\n      mockWebSocket([\n        mockCall('replication.list_datasets', [\n          'parent',\n          'parent/child1',\n          'parent/child2',\n          'parent/child2/subchild',\n          'parent2',\n          'parent2/child1',\n          'parent2/child2',\n        ]),\n      ]),\n      mockProvider(DialogService),\n    ],\n  });\n\n  beforeEach(() => spectator = createService());\n\n  describe('getTreeNodeProvider', () => {\n    it('returns a TreeNodeProvider that calls replication.list_datasets to list datasets', async () => {\n      const treeNodeProvider = spectator.service.getTreeNodeProvider({\n        transport: TransportMode.Ssh,\n        sshCredential: 2,\n      });\n\n      const childNodes = await firstValueFrom(\n        treeNodeProvider({\n          data: {\n            path: 'parent',\n          },\n        } as TreeNode<ExplorerNodeData>),\n      );\n\n      expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith(\n        'replication.list_datasets',\n        [TransportMode.Ssh, 2],\n      );\n      expect(childNodes).toEqual([\n        {\n          hasChildren: false,\n          name: 'child1',\n          path: 'parent/child1',\n          type: ExplorerNodeType.Directory,\n        },\n        {\n          hasChildren: true,\n          name: 'child2',\n          path: 'parent/child2',\n          type: ExplorerNodeType.Directory,\n        },\n      ]);\n    });\n\n    it('returns root level nodes when called with empty path', async () => {\n      const treeNodeProvider = spectator.service.getTreeNodeProvider({\n        transport: TransportMode.Ssh,\n        sshCredential: 2,\n      });\n\n      const nodes = await firstValueFrom(\n        treeNodeProvider({\n          data: {\n            path: '',\n          },\n        } as TreeNode<ExplorerNodeData>),\n      );\n\n      expect(nodes).toEqual([\n        {\n          hasChildren: true,\n          name: 'parent',\n          path: 'parent',\n          type: ExplorerNodeType.Directory,\n        },\n        {\n          hasChildren: true,\n          name: 'parent2',\n          path: 'parent2',\n          type: ExplorerNodeType.Directory,\n        },\n      ]);\n    });\n\n    it('only calls replication.list_datasets once when treeNodeProvider is called', async () => {\n      const treeNodeProvider = spectator.service.getTreeNodeProvider({\n        transport: TransportMode.Ssh,\n        sshCredential: 2,\n      });\n\n      await firstValueFrom(\n        treeNodeProvider({\n          data: {\n            path: '',\n          },\n        } as TreeNode<ExplorerNodeData>),\n      );\n      await firstValueFrom(\n        treeNodeProvider({\n          data: {\n            path: '',\n          },\n        } as TreeNode<ExplorerNodeData>),\n      );\n\n      expect(spectator.inject(WebSocketService).call).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"],"version":3}