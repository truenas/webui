f9c998b644181a3ac10540bd0c8fb9c3
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const explorer_type_enum_1 = require("app/enums/explorer-type.enum");
const transport_mode_enum_1 = require("app/enums/transport-mode.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const replication_service_1 = require("app/services/replication.service");
const ws_service_1 = require("app/services/ws.service");
describe('ReplicationService', () => {
    let spectator;
    const createService = (0, jest_1.createServiceFactory)({
        service: replication_service_1.ReplicationService,
        providers: [
            (0, mock_auth_utils_1.mockAuth)(),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('replication.list_datasets', [
                    'parent',
                    'parent/child1',
                    'parent/child2',
                    'parent/child2/subchild',
                    'parent2',
                    'parent2/child1',
                    'parent2/child2',
                ]),
            ]),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService),
        ],
    });
    beforeEach(() => spectator = createService());
    describe('getTreeNodeProvider', () => {
        it('returns a TreeNodeProvider that calls replication.list_datasets to list datasets', () => __awaiter(void 0, void 0, void 0, function* () {
            const treeNodeProvider = spectator.service.getTreeNodeProvider({
                transport: transport_mode_enum_1.TransportMode.Ssh,
                sshCredential: 2,
            });
            const childNodes = yield (0, rxjs_1.firstValueFrom)(treeNodeProvider({
                data: {
                    path: 'parent',
                },
            }));
            expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('replication.list_datasets', [transport_mode_enum_1.TransportMode.Ssh, 2]);
            expect(childNodes).toEqual([
                {
                    hasChildren: false,
                    name: 'child1',
                    path: 'parent/child1',
                    type: explorer_type_enum_1.ExplorerNodeType.Directory,
                },
                {
                    hasChildren: true,
                    name: 'child2',
                    path: 'parent/child2',
                    type: explorer_type_enum_1.ExplorerNodeType.Directory,
                },
            ]);
        }));
        it('returns root level nodes when called with empty path', () => __awaiter(void 0, void 0, void 0, function* () {
            const treeNodeProvider = spectator.service.getTreeNodeProvider({
                transport: transport_mode_enum_1.TransportMode.Ssh,
                sshCredential: 2,
            });
            const nodes = yield (0, rxjs_1.firstValueFrom)(treeNodeProvider({
                data: {
                    path: '',
                },
            }));
            expect(nodes).toEqual([
                {
                    hasChildren: true,
                    name: 'parent',
                    path: 'parent',
                    type: explorer_type_enum_1.ExplorerNodeType.Directory,
                },
                {
                    hasChildren: true,
                    name: 'parent2',
                    path: 'parent2',
                    type: explorer_type_enum_1.ExplorerNodeType.Directory,
                },
            ]);
        }));
        it('only calls replication.list_datasets once when treeNodeProvider is called', () => __awaiter(void 0, void 0, void 0, function* () {
            const treeNodeProvider = spectator.service.getTreeNodeProvider({
                transport: transport_mode_enum_1.TransportMode.Ssh,
                sshCredential: 2,
            });
            yield (0, rxjs_1.firstValueFrom)(treeNodeProvider({
                data: {
                    path: '',
                },
            }));
            yield (0, rxjs_1.firstValueFrom)(treeNodeProvider({
                data: {
                    path: '',
                },
            }));
            expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledTimes(1);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3JlcGxpY2F0aW9uLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLGlEQUE4RjtBQUM5RiwrQkFBc0M7QUFDdEMsNEVBQWtFO0FBQ2xFLHNGQUFzRjtBQUN0RixxRUFBZ0U7QUFDaEUsdUVBQThEO0FBRTlELHNFQUFrRTtBQUNsRSwwRUFBc0U7QUFDdEUsd0RBQTJEO0FBRTNELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBSSxTQUErQyxDQUFDO0lBQ3BELE1BQU0sYUFBYSxHQUFHLElBQUEsMkJBQW9CLEVBQUM7UUFDekMsT0FBTyxFQUFFLHdDQUFrQjtRQUMzQixTQUFTLEVBQUU7WUFDVCxJQUFBLDBCQUFRLEdBQUU7WUFDVixJQUFBLG9DQUFhLEVBQUM7Z0JBQ1osSUFBQSwrQkFBUSxFQUFDLDJCQUEyQixFQUFFO29CQUNwQyxRQUFRO29CQUNSLGVBQWU7b0JBQ2YsZUFBZTtvQkFDZix3QkFBd0I7b0JBQ3hCLFNBQVM7b0JBQ1QsZ0JBQWdCO29CQUNoQixnQkFBZ0I7aUJBQ2pCLENBQUM7YUFDSCxDQUFDO1lBQ0YsSUFBQSxtQkFBWSxFQUFDLDhCQUFhLENBQUM7U0FDNUI7S0FDRixDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxHQUFHLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFFOUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxFQUFFLENBQUMsa0ZBQWtGLEVBQUUsR0FBUyxFQUFFO1lBQ2hHLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztnQkFDN0QsU0FBUyxFQUFFLG1DQUFhLENBQUMsR0FBRztnQkFDNUIsYUFBYSxFQUFFLENBQUM7YUFDakIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFBLHFCQUFjLEVBQ3JDLGdCQUFnQixDQUFDO2dCQUNmLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjthQUM0QixDQUFDLENBQ2pDLENBQUM7WUFFRixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUNsRSwyQkFBMkIsRUFDM0IsQ0FBQyxtQ0FBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FDdkIsQ0FBQztZQUNGLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3pCO29CQUNFLFdBQVcsRUFBRSxLQUFLO29CQUNsQixJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsZUFBZTtvQkFDckIsSUFBSSxFQUFFLHFDQUFnQixDQUFDLFNBQVM7aUJBQ2pDO2dCQUNEO29CQUNFLFdBQVcsRUFBRSxJQUFJO29CQUNqQixJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsZUFBZTtvQkFDckIsSUFBSSxFQUFFLHFDQUFnQixDQUFDLFNBQVM7aUJBQ2pDO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzREFBc0QsRUFBRSxHQUFTLEVBQUU7WUFDcEUsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO2dCQUM3RCxTQUFTLEVBQUUsbUNBQWEsQ0FBQyxHQUFHO2dCQUM1QixhQUFhLEVBQUUsQ0FBQzthQUNqQixDQUFDLENBQUM7WUFFSCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUEscUJBQWMsRUFDaEMsZ0JBQWdCLENBQUM7Z0JBQ2YsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxFQUFFO2lCQUNUO2FBQzRCLENBQUMsQ0FDakMsQ0FBQztZQUVGLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BCO29CQUNFLFdBQVcsRUFBRSxJQUFJO29CQUNqQixJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUscUNBQWdCLENBQUMsU0FBUztpQkFDakM7Z0JBQ0Q7b0JBQ0UsV0FBVyxFQUFFLElBQUk7b0JBQ2pCLElBQUksRUFBRSxTQUFTO29CQUNmLElBQUksRUFBRSxTQUFTO29CQUNmLElBQUksRUFBRSxxQ0FBZ0IsQ0FBQyxTQUFTO2lCQUNqQzthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMkVBQTJFLEVBQUUsR0FBUyxFQUFFO1lBQ3pGLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztnQkFDN0QsU0FBUyxFQUFFLG1DQUFhLENBQUMsR0FBRztnQkFDNUIsYUFBYSxFQUFFLENBQUM7YUFDakIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxJQUFBLHFCQUFjLEVBQ2xCLGdCQUFnQixDQUFDO2dCQUNmLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsRUFBRTtpQkFDVDthQUM0QixDQUFDLENBQ2pDLENBQUM7WUFDRixNQUFNLElBQUEscUJBQWMsRUFDbEIsZ0JBQWdCLENBQUM7Z0JBQ2YsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxFQUFFO2lCQUNUO2FBQzRCLENBQUMsQ0FDakMsQ0FBQztZQUVGLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDZCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3JlcGxpY2F0aW9uLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZXJ2aWNlRmFjdG9yeSwgbW9ja1Byb3ZpZGVyLCBTcGVjdGF0b3JTZXJ2aWNlIH0gZnJvbSAnQG5nbmVhdC9zcGVjdGF0b3IvamVzdCc7XG5pbXBvcnQgeyBmaXJzdFZhbHVlRnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbW9ja0F1dGggfSBmcm9tICdhcHAvY29yZS90ZXN0aW5nL3V0aWxzL21vY2stYXV0aC51dGlscyc7XG5pbXBvcnQgeyBtb2NrQ2FsbCwgbW9ja1dlYlNvY2tldCB9IGZyb20gJ2FwcC9jb3JlL3Rlc3RpbmcvdXRpbHMvbW9jay13ZWJzb2NrZXQudXRpbHMnO1xuaW1wb3J0IHsgRXhwbG9yZXJOb2RlVHlwZSB9IGZyb20gJ2FwcC9lbnVtcy9leHBsb3Jlci10eXBlLmVudW0nO1xuaW1wb3J0IHsgVHJhbnNwb3J0TW9kZSB9IGZyb20gJ2FwcC9lbnVtcy90cmFuc3BvcnQtbW9kZS5lbnVtJztcbmltcG9ydCB7IEV4cGxvcmVyTm9kZURhdGEsIFRyZWVOb2RlIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvdHJlZS1ub2RlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IFJlcGxpY2F0aW9uU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9yZXBsaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFdlYlNvY2tldFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvd3Muc2VydmljZSc7XG5cbmRlc2NyaWJlKCdSZXBsaWNhdGlvblNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBzcGVjdGF0b3I6IFNwZWN0YXRvclNlcnZpY2U8UmVwbGljYXRpb25TZXJ2aWNlPjtcbiAgY29uc3QgY3JlYXRlU2VydmljZSA9IGNyZWF0ZVNlcnZpY2VGYWN0b3J5KHtcbiAgICBzZXJ2aWNlOiBSZXBsaWNhdGlvblNlcnZpY2UsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICBtb2NrQXV0aCgpLFxuICAgICAgbW9ja1dlYlNvY2tldChbXG4gICAgICAgIG1vY2tDYWxsKCdyZXBsaWNhdGlvbi5saXN0X2RhdGFzZXRzJywgW1xuICAgICAgICAgICdwYXJlbnQnLFxuICAgICAgICAgICdwYXJlbnQvY2hpbGQxJyxcbiAgICAgICAgICAncGFyZW50L2NoaWxkMicsXG4gICAgICAgICAgJ3BhcmVudC9jaGlsZDIvc3ViY2hpbGQnLFxuICAgICAgICAgICdwYXJlbnQyJyxcbiAgICAgICAgICAncGFyZW50Mi9jaGlsZDEnLFxuICAgICAgICAgICdwYXJlbnQyL2NoaWxkMicsXG4gICAgICAgIF0pLFxuICAgICAgXSksXG4gICAgICBtb2NrUHJvdmlkZXIoRGlhbG9nU2VydmljZSksXG4gICAgXSxcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiBzcGVjdGF0b3IgPSBjcmVhdGVTZXJ2aWNlKCkpO1xuXG4gIGRlc2NyaWJlKCdnZXRUcmVlTm9kZVByb3ZpZGVyJywgKCkgPT4ge1xuICAgIGl0KCdyZXR1cm5zIGEgVHJlZU5vZGVQcm92aWRlciB0aGF0IGNhbGxzIHJlcGxpY2F0aW9uLmxpc3RfZGF0YXNldHMgdG8gbGlzdCBkYXRhc2V0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRyZWVOb2RlUHJvdmlkZXIgPSBzcGVjdGF0b3Iuc2VydmljZS5nZXRUcmVlTm9kZVByb3ZpZGVyKHtcbiAgICAgICAgdHJhbnNwb3J0OiBUcmFuc3BvcnRNb2RlLlNzaCxcbiAgICAgICAgc3NoQ3JlZGVudGlhbDogMixcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjaGlsZE5vZGVzID0gYXdhaXQgZmlyc3RWYWx1ZUZyb20oXG4gICAgICAgIHRyZWVOb2RlUHJvdmlkZXIoe1xuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBhdGg6ICdwYXJlbnQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0gYXMgVHJlZU5vZGU8RXhwbG9yZXJOb2RlRGF0YT4pLFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNwZWN0YXRvci5pbmplY3QoV2ViU29ja2V0U2VydmljZSkuY2FsbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdyZXBsaWNhdGlvbi5saXN0X2RhdGFzZXRzJyxcbiAgICAgICAgW1RyYW5zcG9ydE1vZGUuU3NoLCAyXSxcbiAgICAgICk7XG4gICAgICBleHBlY3QoY2hpbGROb2RlcykudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICBoYXNDaGlsZHJlbjogZmFsc2UsXG4gICAgICAgICAgbmFtZTogJ2NoaWxkMScsXG4gICAgICAgICAgcGF0aDogJ3BhcmVudC9jaGlsZDEnLFxuICAgICAgICAgIHR5cGU6IEV4cGxvcmVyTm9kZVR5cGUuRGlyZWN0b3J5LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaGFzQ2hpbGRyZW46IHRydWUsXG4gICAgICAgICAgbmFtZTogJ2NoaWxkMicsXG4gICAgICAgICAgcGF0aDogJ3BhcmVudC9jaGlsZDInLFxuICAgICAgICAgIHR5cGU6IEV4cGxvcmVyTm9kZVR5cGUuRGlyZWN0b3J5LFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfSk7XG5cbiAgICBpdCgncmV0dXJucyByb290IGxldmVsIG5vZGVzIHdoZW4gY2FsbGVkIHdpdGggZW1wdHkgcGF0aCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRyZWVOb2RlUHJvdmlkZXIgPSBzcGVjdGF0b3Iuc2VydmljZS5nZXRUcmVlTm9kZVByb3ZpZGVyKHtcbiAgICAgICAgdHJhbnNwb3J0OiBUcmFuc3BvcnRNb2RlLlNzaCxcbiAgICAgICAgc3NoQ3JlZGVudGlhbDogMixcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBub2RlcyA9IGF3YWl0IGZpcnN0VmFsdWVGcm9tKFxuICAgICAgICB0cmVlTm9kZVByb3ZpZGVyKHtcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBwYXRoOiAnJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9IGFzIFRyZWVOb2RlPEV4cGxvcmVyTm9kZURhdGE+KSxcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChub2RlcykudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICBoYXNDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiAncGFyZW50JyxcbiAgICAgICAgICBwYXRoOiAncGFyZW50JyxcbiAgICAgICAgICB0eXBlOiBFeHBsb3Jlck5vZGVUeXBlLkRpcmVjdG9yeSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGhhc0NoaWxkcmVuOiB0cnVlLFxuICAgICAgICAgIG5hbWU6ICdwYXJlbnQyJyxcbiAgICAgICAgICBwYXRoOiAncGFyZW50MicsXG4gICAgICAgICAgdHlwZTogRXhwbG9yZXJOb2RlVHlwZS5EaXJlY3RvcnksXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9KTtcblxuICAgIGl0KCdvbmx5IGNhbGxzIHJlcGxpY2F0aW9uLmxpc3RfZGF0YXNldHMgb25jZSB3aGVuIHRyZWVOb2RlUHJvdmlkZXIgaXMgY2FsbGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdHJlZU5vZGVQcm92aWRlciA9IHNwZWN0YXRvci5zZXJ2aWNlLmdldFRyZWVOb2RlUHJvdmlkZXIoe1xuICAgICAgICB0cmFuc3BvcnQ6IFRyYW5zcG9ydE1vZGUuU3NoLFxuICAgICAgICBzc2hDcmVkZW50aWFsOiAyLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGZpcnN0VmFsdWVGcm9tKFxuICAgICAgICB0cmVlTm9kZVByb3ZpZGVyKHtcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBwYXRoOiAnJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9IGFzIFRyZWVOb2RlPEV4cGxvcmVyTm9kZURhdGE+KSxcbiAgICAgICk7XG4gICAgICBhd2FpdCBmaXJzdFZhbHVlRnJvbShcbiAgICAgICAgdHJlZU5vZGVQcm92aWRlcih7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcGF0aDogJycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSBhcyBUcmVlTm9kZTxFeHBsb3Jlck5vZGVEYXRhPiksXG4gICAgICApO1xuXG4gICAgICBleHBlY3Qoc3BlY3RhdG9yLmluamVjdChXZWJTb2NrZXRTZXJ2aWNlKS5jYWxsKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=