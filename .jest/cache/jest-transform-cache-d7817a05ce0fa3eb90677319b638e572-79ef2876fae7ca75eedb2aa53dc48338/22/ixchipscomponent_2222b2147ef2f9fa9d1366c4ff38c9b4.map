{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-chips/ix-chips.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-chips/ix-chips.component.ts"],"sourcesContent":["import { ENTER } from '@angular/cdk/keycodes';\nimport { AsyncPipe } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { MatAutocompleteTrigger, MatAutocomplete } from '@angular/material/autocomplete';\nimport {\n  MatChipGrid, MatChipRow, MatChipRemove, MatChipInput,\n} from '@angular/material/chips';\nimport { MatOption } from '@angular/material/core';\nimport { MatHint } from '@angular/material/form-field';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  fromEvent, merge, Observable, Subject,\n} from 'rxjs';\nimport {\n  debounceTime, distinctUntilChanged, startWith, switchMap,\n} from 'rxjs/operators';\nimport { Option } from 'app/interfaces/option.interface';\nimport { ChipsProvider } from 'app/modules/forms/ix-forms/components/ix-chips/chips-provider';\nimport { IxErrorsComponent } from 'app/modules/forms/ix-forms/components/ix-errors/ix-errors.component';\nimport { IxLabelComponent } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.component';\nimport { IxIconComponent } from 'app/modules/ix-icon/ix-icon.component';\nimport { TestOverrideDirective } from 'app/modules/test-id/test-override/test-override.directive';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-chips',\n  templateUrl: './ix-chips.component.html',\n  styleUrls: ['./ix-chips.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    IxLabelComponent,\n    MatChipGrid,\n    MatChipRow,\n    IxIconComponent,\n    MatChipRemove,\n    MatAutocompleteTrigger,\n    MatChipInput,\n    MatAutocomplete,\n    MatOption,\n    IxErrorsComponent,\n    MatHint,\n    AsyncPipe,\n    TestDirective,\n    TestOverrideDirective,\n  ],\n})\nexport class IxChipsComponent implements OnChanges, ControlValueAccessor {\n  @Input() label: string;\n  @Input() placeholder: string;\n  @Input() hint: string;\n  @Input() tooltip: string;\n  @Input() required: boolean;\n  @Input() allowNewEntries = true;\n  /**\n   * A function that provides the options for the autocomplete dropdown.\n   * This function is called when the user types into the input field,\n   * and it should return an Observable that emits an array of options.\n   * Each option is an object with a `value` and `label` property.\n   * The component uses these options to suggest possible completions to the user.\n   */\n  @Input() autocompleteProvider: ChipsProvider;\n  /**\n   * Determines whether the component should resolve labels instead of values.\n   * If set to true, the component will perform a lookup to find the corresponding label for a value.\n   * This is useful when the component is used with a set of predefined options,\n   * and you want to display the label of an option instead of its value.\n   */\n  @Input() resolveValue = false;\n  /**\n   * An Observable that emits an array of options for label resolution.\n   * Each option is an object with a `value` and `label` property.\n   * The component uses these options to map values to their corresponding labels when `resolveValue` is set to true.\n   * This is useful when the component is used with a set of predefined options,\n   * and you want to display the label of an option instead of its value.\n   */\n  @Input() resolveOptions: Observable<Option[]>;\n  private resolvedOptions: Option[] = [];\n\n  @ViewChild('chipInput', { static: true }) chipInput: ElementRef<HTMLInputElement>;\n\n  suggestions$: Observable<string[]>;\n  values: string[] = [];\n  isDisabled = false;\n\n  get labels(): string[] {\n    if (!this.resolveValue) {\n      return this.values;\n    }\n\n    return this.values?.map((value) => {\n      if (this.resolvedOptions?.length) {\n        return this.resolvedOptions.find((option) => option.value === parseInt(value))?.label;\n      }\n      return value;\n    }).filter(Boolean);\n  }\n\n  inputReset$ = new Subject<void>();\n\n  onChange: (value: string[]) => void = (): void => {};\n  onTouch: () => void = (): void => {};\n\n  readonly separatorKeysCodes = [ENTER];\n\n  constructor(\n    public controlDirective: NgControl,\n    private cdr: ChangeDetectorRef,\n  ) {\n    this.controlDirective.valueAccessor = this;\n  }\n\n  ngOnChanges(): void {\n    this.setAutocomplete();\n    this.setOptions();\n  }\n\n  writeValue(value: string[]): void {\n    this.values = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(onChange: (value: []) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: () => void): void {\n    this.onTouch = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  onRemove(itemToRemove: string): void {\n    if (this.resolveValue && this.resolvedOptions?.length) {\n      itemToRemove = this.resolvedOptions.find((option) => option.label === itemToRemove)?.value.toString();\n    }\n    const updatedValues = this.values.filter((value) => String(value) !== String(itemToRemove));\n    this.updateValues(updatedValues);\n  }\n\n  onAdd(value: string): void {\n    let newValue = (value || '')?.trim();\n    if (!newValue || this.values.includes(newValue)) {\n      return;\n    }\n\n    if (this.resolveValue && this.resolvedOptions?.length) {\n      const newOption = this.resolvedOptions.find((option) => option.label === newValue);\n      if (newOption) {\n        newValue = newOption.value as string;\n      } else {\n        // Do not allow to add string values for number arrays\n        return;\n      }\n    }\n\n    this.clearInput();\n    this.updateValues([...this.values, newValue]);\n  }\n\n  onInputBlur(): void {\n    if (!this.allowNewEntries || this.resolveValue) {\n      this.chipInput.nativeElement.value = null;\n      return;\n    }\n    this.onAdd(this.chipInput.nativeElement.value);\n  }\n\n  // TODO: Workaround for https://github.com/angular/angular/issues/56471\n  protected trackByIdentity(item: string): string {\n    return item;\n  }\n\n  private setOptions(): void {\n    if (!this.resolveValue) {\n      this.resolvedOptions = null;\n      return;\n    }\n\n    this.resolveOptions?.pipe(untilDestroyed(this)).subscribe((options) => {\n      this.resolvedOptions = options;\n    });\n  }\n\n  private setAutocomplete(): void {\n    if (!this.autocompleteProvider) {\n      this.suggestions$ = null;\n      return;\n    }\n\n    this.suggestions$ = merge(\n      fromEvent(this.chipInput.nativeElement, 'input')\n        .pipe(\n          startWith(''),\n          debounceTime(100),\n          distinctUntilChanged(),\n        ),\n      this.inputReset$,\n    ).pipe(\n      switchMap(() => {\n        return this.autocompleteProvider(this.chipInput.nativeElement.value);\n      }),\n    );\n  }\n\n  private updateValues(updatedValues: string[]): void {\n    this.values = updatedValues;\n    this.onChange(this.values);\n    this.onTouch();\n  }\n\n  private clearInput(): void {\n    this.chipInput.nativeElement.value = '';\n    this.inputReset$.next();\n  }\n}\n"],"version":3}