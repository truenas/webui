cbb46298c91a2f5fffeead469b505029
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const testing_2 = require("@ngrx/store/testing");
const rxjs_1 = require("rxjs");
const fake_job_utils_1 = require("app/core/testing/utils/fake-job.utils");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const product_type_enum_1 = require("app/enums/product-type.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const system_security_form_component_1 = require("app/pages/system/advanced/system-security/system-security-form/system-security-form.component");
const fips_service_1 = require("app/services/fips.service");
const system_general_service_1 = require("app/services/system-general.service");
const ws_service_1 = require("app/services/ws.service");
const ha_info_selectors_1 = require("app/store/ha-info/ha-info.selectors");
const system_info_selectors_1 = require("app/store/system-info/system-info.selectors");
const fakeSystemSecurityConfig = {
    enable_fips: false,
};
describe('SystemSecurityFormComponent', () => {
    let spectator;
    let loader;
    let form;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: system_security_form_component_1.SystemSecurityFormComponent,
        imports: [
            forms_1.ReactiveFormsModule,
        ],
        providers: [
            (0, testing_2.provideMockStore)({
                selectors: [
                    { selector: system_info_selectors_1.selectSystemInfo, value: { hostname: 'host.truenas.com' } },
                    { selector: ha_info_selectors_1.selectIsHaLicensed, value: false },
                ],
            }),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)()),
            }),
            (0, jest_1.mockProvider)(snackbar_service_1.SnackbarService),
            (0, jest_1.mockProvider)(system_general_service_1.SystemGeneralService, {
                getProductType: () => product_type_enum_1.ProductType.Scale,
            }),
            (0, jest_1.mockProvider)(chained_component_ref_1.ChainedRef, {
                close: jest.fn(),
                getData: jest.fn(() => fakeSystemSecurityConfig),
            }),
            (0, jest_1.mockProvider)(fips_service_1.FipsService, {
                promptForRestart: jest.fn(() => (0, rxjs_1.of)(undefined)),
            }),
            (0, mock_auth_utils_1.mockAuth)(),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                jobDialog: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)(undefined),
                })),
            }),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockJob)('system.security.update', (0, fake_job_utils_1.fakeSuccessfulJob)()),
            ]),
        ],
    });
    describe('System Security config', () => {
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            spectator = createComponent();
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
            form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
        }));
        it('saves FIPS config when form is filled and Save is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
            yield form.fillForm({
                'Enable FIPS': true,
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(spectator.inject(ws_service_1.WebSocketService).job).toHaveBeenCalledWith('system.security.update', [{
                    enable_fips: true,
                }]);
            expect(spectator.inject(snackbar_service_1.SnackbarService).success).toHaveBeenCalledWith('System Security Settings Updated.');
        }));
        it('prompts to reload when settings are saved and HA is not licensed', () => __awaiter(void 0, void 0, void 0, function* () {
            yield form.fillForm({
                'Enable FIPS': true,
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(spectator.inject(fips_service_1.FipsService).promptForRestart).toHaveBeenCalled();
        }));
        it('does not prompt to restart when settings are saved and HA is licensed, because this is handled in HaFipsEffects', () => __awaiter(void 0, void 0, void 0, function* () {
            spectator.inject(testing_2.MockStore).overrideSelector(ha_info_selectors_1.selectIsHaLicensed, true);
            yield form.fillForm({
                'Enable FIPS': true,
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(spectator.inject(fips_service_1.FipsService).promptForRestart).not.toHaveBeenCalled();
        }));
        it('loads and shows current System Security config', () => __awaiter(void 0, void 0, void 0, function* () {
            const values = yield form.getValues();
            expect(values).toEqual({
                'Enable FIPS': false,
            });
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,