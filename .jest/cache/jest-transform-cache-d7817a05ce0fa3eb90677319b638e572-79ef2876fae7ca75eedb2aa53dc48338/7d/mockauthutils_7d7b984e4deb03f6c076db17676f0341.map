{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/testing/utils/mock-auth.utils.ts","mappings":";;;AAkCA,4BA0BC;AA5DD,wCAEuB;AACvB,iDAAyD;AACzD,uCAAoC;AACpC,+BAA0B;AAE1B,kFAA6E;AAC7E,6EAAoE;AACpE,mDAA2C;AAE3C,iEAA6D;AAC7D,kFAA4E;AAC5E,4FAAuF;AACvF,wDAA2D;AAE9C,QAAA,SAAS,GAAG;IACvB,SAAS,EAAE;QACT,KAAK,EAAE;YACL,IAAI,EAAE,CAAC,gBAAI,CAAC,SAAS,CAAC;SACvB;QACD,SAAS,EAAE,IAAI;KAChB;IACD,kBAAkB,EAAE,CAAC,yCAAgB,CAAC,KAAK,EAAE,yCAAgB,CAAC,QAAQ,CAAC;IACvE,OAAO,EAAE,MAAM;IACf,UAAU,EAAE,EAAgC;IAC5C,iBAAiB,EAAE,EAAuC;IAC1D,MAAM,EAAE,CAAC;CACM,CAAC;AAElB;;;GAGG;AACH,SAAgB,QAAQ,CACtB,OAAkC,iBAAS;IAE3C,OAAO;QACL;YACE,OAAO,EAAE,0BAAW;YACpB,UAAU,EAAE,GAAG,EAAE;gBACf,MAAM,WAAW,GAAG,IAAI,mCAAe,CACrC,IAAA,sBAAe,EAAC,yDAA0B,EAAE;oBAC1C,YAAY,EAAE,IAAA,SAAE,EAAC,IAAI,CAAC;iBACvB,CAAC,EACF,IAAA,sBAAe,EAAC,aAAK,CAAC,EACtB,IAAA,sBAAe,EAAC,6BAAgB,CAAC,EACjC,IAAA,sBAAe,EAAC,8CAAoB,CAAC,EACrC,IAAA,sBAAe,EAAC,MAAM,CAAC,CACxB,CAAC;gBAEF,WAAW,CAAC,OAAO,CAAC,IAAoB,CAAC,CAAC;gBAC1C,OAAO,WAAW,CAAC;YACrB,CAAC;SACF;QACD;YACE,OAAO,EAAE,mCAAe;YACxB,WAAW,EAAE,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,0BAAW,CAAC;SAC3C;KACF,CAAC;AACJ,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/testing/utils/mock-auth.utils.ts"],"sourcesContent":["import {\n  ExistingProvider, FactoryProvider, forwardRef, ValueProvider,\n} from '@angular/core';\nimport { createSpyObject } from '@ngneat/spectator/jest';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { DeepPartial } from 'utility-types';\nimport { MockAuthService } from 'app/core/testing/classes/mock-auth.service';\nimport { AccountAttribute } from 'app/enums/account-attribute.enum';\nimport { Role } from 'app/enums/role.enum';\nimport { LoggedInUser } from 'app/interfaces/ds-cache.interface';\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { TokenLastUsedService } from 'app/services/token-last-used.service';\nimport { WebSocketConnectionService } from 'app/services/websocket-connection.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\nexport const dummyUser = {\n  privilege: {\n    roles: {\n      $set: [Role.FullAdmin],\n    },\n    web_shell: true,\n  },\n  account_attributes: [AccountAttribute.Local, AccountAttribute.SysAdmin],\n  pw_name: 'root',\n  attributes: {} as LoggedInUser['attributes'],\n  two_factor_config: {} as LoggedInUser['two_factor_config'],\n  pw_uid: 0,\n} as LoggedInUser;\n\n/**\n * Provides a dummy user with full admin privileges.\n * To set custom roles, inject `MockAuthService` and call `setRoles`.\n */\nexport function mockAuth(\n  user: DeepPartial<LoggedInUser> = dummyUser,\n): (FactoryProvider | ExistingProvider | ValueProvider)[] {\n  return [\n    {\n      provide: AuthService,\n      useFactory: () => {\n        const mockService = new MockAuthService(\n          createSpyObject(WebSocketConnectionService, {\n            isConnected$: of(true),\n          }),\n          createSpyObject(Store),\n          createSpyObject(WebSocketService),\n          createSpyObject(TokenLastUsedService),\n          createSpyObject(Window),\n        );\n\n        mockService.setUser(user as LoggedInUser);\n        return mockService;\n      },\n    },\n    {\n      provide: MockAuthService,\n      useExisting: forwardRef(() => AuthService),\n    },\n  ];\n}\n"],"version":3}