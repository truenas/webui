{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/advanced/system-security/system-security-form/system-security-form.component.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/advanced/system-security/system-security-form/system-security-form.component.spec.ts"],"sourcesContent":["import { HarnessLoader } from '@angular/cdk/testing';\nimport { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonHarness } from '@angular/material/button/testing';\nimport { createComponentFactory, mockProvider, Spectator } from '@ngneat/spectator/jest';\nimport { MockStore, provideMockStore } from '@ngrx/store/testing';\nimport { of } from 'rxjs';\nimport { fakeSuccessfulJob } from 'app/core/testing/utils/fake-job.utils';\nimport { mockAuth } from 'app/core/testing/utils/mock-auth.utils';\nimport { mockJob, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { ProductType } from 'app/enums/product-type.enum';\nimport { SystemSecurityConfig } from 'app/interfaces/system-security-config.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { ChainedRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref';\nimport { IxFormHarness } from 'app/modules/forms/ix-forms/testing/ix-form.harness';\nimport { SnackbarService } from 'app/modules/snackbar/services/snackbar.service';\nimport { SystemSecurityFormComponent } from 'app/pages/system/advanced/system-security/system-security-form/system-security-form.component';\nimport { FipsService } from 'app/services/fips.service';\nimport { SystemGeneralService } from 'app/services/system-general.service';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { selectIsHaLicensed } from 'app/store/ha-info/ha-info.selectors';\nimport { selectSystemInfo } from 'app/store/system-info/system-info.selectors';\n\nconst fakeSystemSecurityConfig: SystemSecurityConfig = {\n  enable_fips: false,\n};\n\ndescribe('SystemSecurityFormComponent', () => {\n  let spectator: Spectator<SystemSecurityFormComponent>;\n  let loader: HarnessLoader;\n  let form: IxFormHarness;\n\n  const createComponent = createComponentFactory({\n    component: SystemSecurityFormComponent,\n    imports: [\n      ReactiveFormsModule,\n    ],\n    providers: [\n      provideMockStore({\n        selectors: [\n          { selector: selectSystemInfo, value: { hostname: 'host.truenas.com' } },\n          { selector: selectIsHaLicensed, value: false },\n        ],\n      }),\n      mockProvider(DialogService, {\n        confirm: jest.fn(() => of()),\n      }),\n      mockProvider(SnackbarService),\n      mockProvider(SystemGeneralService, {\n        getProductType: () => ProductType.Scale,\n      }),\n      mockProvider(ChainedRef, {\n        close: jest.fn(),\n        getData: jest.fn(() => fakeSystemSecurityConfig),\n      }),\n      mockProvider(FipsService, {\n        promptForRestart: jest.fn(() => of(undefined)),\n      }),\n      mockAuth(),\n      mockProvider(DialogService, {\n        jobDialog: jest.fn(() => ({\n          afterClosed: () => of(undefined),\n        })),\n      }),\n      mockWebSocket([\n        mockJob('system.security.update', fakeSuccessfulJob()),\n      ]),\n    ],\n  });\n\n  describe('System Security config', () => {\n    beforeEach(async () => {\n      spectator = createComponent();\n      loader = TestbedHarnessEnvironment.loader(spectator.fixture);\n      form = await loader.getHarness(IxFormHarness);\n    });\n\n    it('saves FIPS config when form is filled and Save is pressed', async () => {\n      await form.fillForm({\n        'Enable FIPS': true,\n      });\n\n      const saveButton = await loader.getHarness(MatButtonHarness.with({ text: 'Save' }));\n      await saveButton.click();\n\n      expect(spectator.inject(WebSocketService).job).toHaveBeenCalledWith('system.security.update', [{\n        enable_fips: true,\n      }]);\n      expect(spectator.inject(SnackbarService).success).toHaveBeenCalledWith(\n        'System Security Settings Updated.',\n      );\n    });\n\n    it('prompts to reload when settings are saved and HA is not licensed', async () => {\n      await form.fillForm({\n        'Enable FIPS': true,\n      });\n\n      const saveButton = await loader.getHarness(MatButtonHarness.with({ text: 'Save' }));\n      await saveButton.click();\n\n      expect(spectator.inject(FipsService).promptForRestart).toHaveBeenCalled();\n    });\n\n    it('does not prompt to restart when settings are saved and HA is licensed, because this is handled in HaFipsEffects', async () => {\n      spectator.inject(MockStore).overrideSelector(selectIsHaLicensed, true);\n\n      await form.fillForm({\n        'Enable FIPS': true,\n      });\n\n      const saveButton = await loader.getHarness(MatButtonHarness.with({ text: 'Save' }));\n      await saveButton.click();\n\n      expect(spectator.inject(FipsService).promptForRestart).not.toHaveBeenCalled();\n    });\n\n    it('loads and shows current System Security config', async () => {\n      const values = await form.getValues();\n\n      expect(values).toEqual({\n        'Enable FIPS': false,\n      });\n    });\n  });\n});\n"],"version":3}