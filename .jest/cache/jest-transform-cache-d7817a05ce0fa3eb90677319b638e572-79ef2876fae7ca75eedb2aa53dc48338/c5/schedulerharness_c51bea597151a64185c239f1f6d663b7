b160216087466bdf594a20864e9fae0e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/select/testing");
const cronParser = __importStar(require("cron-parser"));
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
const scheduler_modal_harness_1 = require("app/modules/scheduler/components/scheduler-modal/scheduler-modal.harness");
class SchedulerHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getSelectHarness = this.locatorFor(testing_2.MatSelectHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(SchedulerHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    openCustomModal() {
        return __awaiter(this, void 0, void 0, function* () {
            const select = yield this.getSelectHarness();
            yield select.open();
            yield select.clickOptions({ text: /Create/ });
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getSelectHarness()).getValueText();
        });
    }
    setValue(crontab) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.openCustomModal();
            const locator = this.documentRootLocatorFactory();
            try {
                const modal = yield locator.locatorFor(scheduler_modal_harness_1.SchedulerModalHarness)();
                const parts = crontab.split(' ');
                const hasMinutes = parts.length === 5;
                if (hasMinutes) {
                    yield modal.setMinutes(parts[0]);
                    yield modal.setHours(parts[1]);
                    yield modal.setDays(parts[2]);
                }
                else {
                    yield modal.setHours(parts[0]);
                    yield modal.setDays(parts[1]);
                }
                const parsed = cronParser.parseExpression(hasMinutes ? crontab : `0 ${crontab}`);
                yield modal.setMonths(parsed.fields.month);
                yield modal.setDaysOfWeek(parsed.fields.dayOfWeek);
                yield modal.pressDone();
            }
            catch (error) {
                if (error.message.includes('Failed to find element')
                    && error.message.includes('ix-scheduler-modal')) {
                    throw new Error('Failed to find ix-scheduler-modal. This may happen if Store with timezone is not provided.');
                }
                throw error;
            }
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getSelectHarness()).isDisabled();
        });
    }
}
exports.SchedulerHarness = SchedulerHarness;
SchedulerHarness.hostSelector = 'ix-scheduler';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvc2NoZWR1bGVyL2NvbXBvbmVudHMvc2NoZWR1bGVyL3NjaGVkdWxlci5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0RBQTBFO0FBQzFFLDhEQUEwRjtBQUMxRix3REFBMEM7QUFDMUMsc0dBQWlHO0FBRWpHLGtGQUE4RTtBQUM5RSxzSEFBaUg7QUFNakgsTUFBYSxnQkFBaUIsU0FBUSwwQkFBZ0I7SUFBdEQ7O1FBUUUscUJBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQywwQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JELGlCQUFZLEdBQUcsNEJBQVksQ0FBQztJQXdEOUIsQ0FBQztJQTlEQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQXlCO1FBQ25DLE9BQU8sSUFBSSwwQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUM7YUFDbkQsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFILENBQUM7SUFLSyxZQUFZOztZQUNoQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQ0FBYyxDQUFDLEVBQUUsQ0FBQztZQUM5RCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUIsQ0FBQztLQUFBO0lBRUssZUFBZTs7WUFDbkIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUM3QyxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDO0tBQUE7SUFFSyxRQUFROztZQUNaLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEQsQ0FBQztLQUFBO0lBRUssUUFBUSxDQUFDLE9BQWU7O1lBQzVCLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBRTdCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO1lBQ2xELElBQUksQ0FBQztnQkFDSCxNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxVQUFVLENBQUMsK0NBQXFCLENBQUMsRUFBRSxDQUFDO2dCQUVoRSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztnQkFFdEMsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDZixNQUFNLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0IsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO3FCQUFNLENBQUM7b0JBQ04sTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvQixNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLENBQUM7Z0JBRUQsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUNqRixNQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0MsTUFBTSxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ25ELE1BQU0sS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzFCLENBQUM7WUFBQyxPQUFPLEtBQWMsRUFBRSxDQUFDO2dCQUN4QixJQUFLLEtBQWUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO3VCQUN6RCxLQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUM7b0JBQzdELE1BQU0sSUFBSSxLQUFLLENBQUMsNEZBQTRGLENBQUMsQ0FBQztnQkFDaEgsQ0FBQztnQkFFRCxNQUFNLEtBQUssQ0FBQztZQUNkLENBQUM7UUFDSCxDQUFDO0tBQUE7SUFFSyxVQUFVOztZQUNkLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEQsQ0FBQztLQUFBOztBQWhFSCw0Q0FpRUM7QUFoRWlCLDZCQUFZLEdBQUcsY0FBYyxBQUFqQixDQUFrQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9zY2hlZHVsZXIvY29tcG9uZW50cy9zY2hlZHVsZXIvc2NoZWR1bGVyLmhhcm5lc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50SGFybmVzcywgSGFybmVzc1ByZWRpY2F0ZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IE1hdFNlbGVjdEhhcm5lc3MsIFNlbGVjdEhhcm5lc3NGaWx0ZXJzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2VsZWN0L3Rlc3RpbmcnO1xuaW1wb3J0ICogYXMgY3JvblBhcnNlciBmcm9tICdjcm9uLXBhcnNlcic7XG5pbXBvcnQgeyBJeExhYmVsSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtbGFiZWwvaXgtbGFiZWwuaGFybmVzcyc7XG5pbXBvcnQgeyBJeEZvcm1Db250cm9sSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2ludGVyZmFjZXMvaXgtZm9ybS1jb250cm9sLWhhcm5lc3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldEVycm9yVGV4dCB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL3V0aWxzL2hhcm5lc3MudXRpbHMnO1xuaW1wb3J0IHsgU2NoZWR1bGVyTW9kYWxIYXJuZXNzIH0gZnJvbSAnYXBwL21vZHVsZXMvc2NoZWR1bGVyL2NvbXBvbmVudHMvc2NoZWR1bGVyLW1vZGFsL3NjaGVkdWxlci1tb2RhbC5oYXJuZXNzJztcblxuZXhwb3J0IGludGVyZmFjZSBTY2hlZHVsZXJGaWx0ZXJzIGV4dGVuZHMgU2VsZWN0SGFybmVzc0ZpbHRlcnMge1xuICBsYWJlbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFNjaGVkdWxlckhhcm5lc3MgZXh0ZW5kcyBDb21wb25lbnRIYXJuZXNzIGltcGxlbWVudHMgSXhGb3JtQ29udHJvbEhhcm5lc3Mge1xuICBzdGF0aWMgcmVhZG9ubHkgaG9zdFNlbGVjdG9yID0gJ2l4LXNjaGVkdWxlcic7XG5cbiAgc3RhdGljIHdpdGgob3B0aW9uczogU2NoZWR1bGVyRmlsdGVycyk6IEhhcm5lc3NQcmVkaWNhdGU8U2NoZWR1bGVySGFybmVzcz4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZShTY2hlZHVsZXJIYXJuZXNzLCBvcHRpb25zKVxuICAgICAgLmFkZE9wdGlvbignbGFiZWwnLCBvcHRpb25zLmxhYmVsLCAoaGFybmVzcywgbGFiZWwpID0+IEhhcm5lc3NQcmVkaWNhdGUuc3RyaW5nTWF0Y2hlcyhoYXJuZXNzLmdldExhYmVsVGV4dCgpLCBsYWJlbCkpO1xuICB9XG5cbiAgZ2V0U2VsZWN0SGFybmVzcyA9IHRoaXMubG9jYXRvckZvcihNYXRTZWxlY3RIYXJuZXNzKTtcbiAgZ2V0RXJyb3JUZXh0ID0gZ2V0RXJyb3JUZXh0O1xuXG4gIGFzeW5jIGdldExhYmVsVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGxhYmVsID0gYXdhaXQgdGhpcy5sb2NhdG9yRm9yT3B0aW9uYWwoSXhMYWJlbEhhcm5lc3MpKCk7XG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWwuZ2V0TGFiZWwoKTtcbiAgfVxuXG4gIGFzeW5jIG9wZW5DdXN0b21Nb2RhbCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzZWxlY3QgPSBhd2FpdCB0aGlzLmdldFNlbGVjdEhhcm5lc3MoKTtcbiAgICBhd2FpdCBzZWxlY3Qub3BlbigpO1xuICAgIGF3YWl0IHNlbGVjdC5jbGlja09wdGlvbnMoeyB0ZXh0OiAvQ3JlYXRlLyB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldFZhbHVlKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldFNlbGVjdEhhcm5lc3MoKSkuZ2V0VmFsdWVUZXh0KCk7XG4gIH1cblxuICBhc3luYyBzZXRWYWx1ZShjcm9udGFiOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLm9wZW5DdXN0b21Nb2RhbCgpO1xuXG4gICAgY29uc3QgbG9jYXRvciA9IHRoaXMuZG9jdW1lbnRSb290TG9jYXRvckZhY3RvcnkoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbW9kYWwgPSBhd2FpdCBsb2NhdG9yLmxvY2F0b3JGb3IoU2NoZWR1bGVyTW9kYWxIYXJuZXNzKSgpO1xuXG4gICAgICBjb25zdCBwYXJ0cyA9IGNyb250YWIuc3BsaXQoJyAnKTtcbiAgICAgIGNvbnN0IGhhc01pbnV0ZXMgPSBwYXJ0cy5sZW5ndGggPT09IDU7XG5cbiAgICAgIGlmIChoYXNNaW51dGVzKSB7XG4gICAgICAgIGF3YWl0IG1vZGFsLnNldE1pbnV0ZXMocGFydHNbMF0pO1xuICAgICAgICBhd2FpdCBtb2RhbC5zZXRIb3VycyhwYXJ0c1sxXSk7XG4gICAgICAgIGF3YWl0IG1vZGFsLnNldERheXMocGFydHNbMl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgbW9kYWwuc2V0SG91cnMocGFydHNbMF0pO1xuICAgICAgICBhd2FpdCBtb2RhbC5zZXREYXlzKHBhcnRzWzFdKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFyc2VkID0gY3JvblBhcnNlci5wYXJzZUV4cHJlc3Npb24oaGFzTWludXRlcyA/IGNyb250YWIgOiBgMCAke2Nyb250YWJ9YCk7XG4gICAgICBhd2FpdCBtb2RhbC5zZXRNb250aHMocGFyc2VkLmZpZWxkcy5tb250aCk7XG4gICAgICBhd2FpdCBtb2RhbC5zZXREYXlzT2ZXZWVrKHBhcnNlZC5maWVsZHMuZGF5T2ZXZWVrKTtcbiAgICAgIGF3YWl0IG1vZGFsLnByZXNzRG9uZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICBpZiAoKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlLmluY2x1ZGVzKCdGYWlsZWQgdG8gZmluZCBlbGVtZW50JylcbiAgICAgICAgJiYgKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlLmluY2x1ZGVzKCdpeC1zY2hlZHVsZXItbW9kYWwnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmaW5kIGl4LXNjaGVkdWxlci1tb2RhbC4gVGhpcyBtYXkgaGFwcGVuIGlmIFN0b3JlIHdpdGggdGltZXpvbmUgaXMgbm90IHByb3ZpZGVkLicpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpc0Rpc2FibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRTZWxlY3RIYXJuZXNzKCkpLmlzRGlzYWJsZWQoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9