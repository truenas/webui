ba4cc4ac88f764e9443657edbb094585
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobProgressDialogComponent = void 0;
const scrolling_1 = require("@angular/cdk/scrolling");
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const progress_bar_1 = require("@angular/material/progress-bar");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const job_state_enum_1 = require("app/enums/job-state.enum");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const i0 = __importStar(require("@angular/core"));
let JobProgressDialogComponent = class JobProgressDialogComponent {
    get isJobRunning() {
        var _a;
        return ((_a = this.job) === null || _a === void 0 ? void 0 : _a.state) === job_state_enum_1.JobState.Running;
    }
    get hasAbortButton() {
        var _a;
        return this.job.abortable && [job_state_enum_1.JobState.Running, job_state_enum_1.JobState.Waiting].includes((_a = this.job) === null || _a === void 0 ? void 0 : _a.state);
    }
    get isJobStateDeterminate() {
        var _a;
        return [
            job_state_enum_1.JobState.Aborted,
            job_state_enum_1.JobState.Error,
            job_state_enum_1.JobState.Failed,
            job_state_enum_1.JobState.Finished,
            job_state_enum_1.JobState.Success,
        ].includes((_a = this.job) === null || _a === void 0 ? void 0 : _a.state) || this.isJobRunning;
    }
    constructor(dialogRef, data, ws, cdr, errorHandler) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.ws = ws;
        this.cdr = cdr;
        this.errorHandler = errorHandler;
        this.jobSuccess = (0, core_1.output)();
        this.jobFailure = (0, core_1.output)();
        this.jobAborted = (0, core_1.output)();
        this.jobProgress = (0, core_1.output)();
        this.job = {};
        this.JobState = job_state_enum_1.JobState;
        this.realtimeLogsSubscribed = false;
        this.realtimeLogs = '';
        this.showMinimizeButton = true;
        this.progressTotalPercent = 0;
        this.hideProgressValue = false;
        this.showRealtimeLogs = false;
        this.isAbortingJob = false;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.title = (_a = this.data) === null || _a === void 0 ? void 0 : _a.title;
        this.description = (_b = this.data) === null || _b === void 0 ? void 0 : _b.description;
        this.showRealtimeLogs = ((_c = this.data) === null || _c === void 0 ? void 0 : _c.showRealtimeLogs) || false;
        this.showMinimizeButton = ((_d = this.data) === null || _d === void 0 ? void 0 : _d.canMinimize) || false;
        this.dialogRef.disableClose = !this.showMinimizeButton;
        let logsSubscription = null;
        this.cdr.markForCheck();
        this.data.job$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (job) => {
                this.job = job;
                if (!this.title) {
                    this.title = this.job.method;
                }
                if (!this.description) {
                    this.description = this.job.description;
                }
                if (this.data.showRealtimeLogs
                    && this.job.logs_path
                    && !this.realtimeLogsSubscribed) {
                    logsSubscription = this.getRealtimeLogs();
                }
                if (job.progress && !this.data.showRealtimeLogs) {
                    this.jobProgress.emit(job.progress);
                    if (job.progress.description) {
                        this.description = job.progress.description;
                    }
                    if (job.progress.percent) {
                        this.progressTotalPercent = job.progress.percent;
                    }
                    this.hideProgressValue = job.progress.percent === null;
                }
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.jobFailure.emit(error);
                this.dialogRef.close();
            },
            complete: () => {
                switch (this.job.state) {
                    case job_state_enum_1.JobState.Failed:
                        this.jobFailure.emit(this.job);
                        this.dialogRef.close();
                        break;
                    case job_state_enum_1.JobState.Aborted:
                        this.jobAborted.emit(this.job);
                        this.dialogRef.close();
                        break;
                    case job_state_enum_1.JobState.Success:
                        this.jobSuccess.emit(this.job);
                        this.dialogRef.close();
                        break;
                }
                if (this.realtimeLogsSubscribed) {
                    logsSubscription.unsubscribe();
                }
                this.cdr.markForCheck();
            },
        });
    }
    ngAfterViewChecked() {
        this.scrollBottom();
    }
    scrollBottom() {
        const cardContainer = document.getElementsByClassName('job-dialog')[0];
        const logsContainer = cardContainer.getElementsByClassName('logs-container')[0];
        if (!logsContainer) {
            return;
        }
        logsContainer.scrollTop = logsContainer.scrollHeight;
        this.cdr.markForCheck();
    }
    abortJob() {
        this.ws.call('core.job_abort', [this.job.id]).pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.isAbortingJob = true;
            this.cdr.markForCheck();
        });
    }
    /**
     * This method returns the subscription id that is used when subscribing to real time
     * websocket updates. The subscription id is used to unsubscribe form those real time
     * websocket updates at a later time. Unsubscription is not possible without this id
     */
    getRealtimeLogs() {
        this.realtimeLogsSubscribed = true;
        const subName = 'filesystem.file_tail_follow:' + this.job.logs_path;
        this.cdr.markForCheck();
        return this.ws.subscribeToLogs(subName)
            .pipe((0, rxjs_1.map)((apiEvent) => apiEvent.fields), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((logs) => {
            if ((logs === null || logs === void 0 ? void 0 : logs.data) && typeof logs.data === 'string') {
                this.realtimeLogs += logs.data;
            }
            this.cdr.markForCheck();
        });
    }
};
exports.JobProgressDialogComponent = JobProgressDialogComponent;
JobProgressDialogComponent.ctorParameters = () => [
    { type: dialog_1.MatDialogRef },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] },
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: error_handler_service_1.ErrorHandlerService }
];
JobProgressDialogComponent.propDecorators = {
    jobSuccess: [{ type: i0.Output, args: ["jobSuccess",] }],
    jobFailure: [{ type: i0.Output, args: ["jobFailure",] }],
    jobAborted: [{ type: i0.Output, args: ["jobAborted",] }],
    jobProgress: [{ type: i0.Output, args: ["jobProgress",] }]
};
exports.JobProgressDialogComponent = JobProgressDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-job-progress-dialog',
        template: require("./job-progress-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            scrolling_1.CdkScrollable,
            dialog_1.MatDialogContent,
            progress_bar_1.MatProgressBar,
            dialog_1.MatDialogActions,
            button_1.MatButton,
            button_1.MatIconButton,
            dialog_1.MatDialogClose,
            ix_icon_component_1.IxIconComponent,
            core_2.TranslateModule,
            common_1.DecimalPipe,
            test_directive_1.TestDirective,
            test_directive_1.TestDirective,
        ],
    })
], JobProgressDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,