3c77fc1050158a5d5a13c6dc0c8523ed
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxFormService = void 0;
const core_1 = require("@angular/core");
let IxFormService = class IxFormService {
    constructor() {
        this.controls = new Map();
    }
    getControls() {
        return [...this.controls.keys()];
    }
    getControlsNames() {
        return this.getControls().map((ctrl) => ctrl.name);
    }
    getControlByName(controlName) {
        return this.getControls().find((control) => control.name === controlName);
    }
    getElementByControlName(controlName) {
        const control = this.getControlByName(controlName);
        return control ? this.controls.get(control) : undefined;
    }
    registerControl(control, elementRef) {
        this.controls.set(control, elementRef.nativeElement);
    }
    unregisterControl(control) {
        this.controls.delete(control);
    }
};
exports.IxFormService = IxFormService;
exports.IxFormService = IxFormService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], IxFormService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvc2VydmljZXMvaXgtZm9ybS5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUF1RDtBQUloRCxJQUFNLGFBQWEsR0FBbkIsTUFBTSxhQUFhO0lBQW5CO1FBQ0csYUFBUSxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO0lBMEJ2RCxDQUFDO0lBeEJDLFdBQVc7UUFDVCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxXQUFtQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELHVCQUF1QixDQUFDLFdBQW1CO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRCxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQWtCLEVBQUUsVUFBbUM7UUFDckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsT0FBa0I7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNGLENBQUE7QUEzQlksc0NBQWE7d0JBQWIsYUFBYTtJQUR6QixJQUFBLGlCQUFVLEVBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7R0FDdEIsYUFBYSxDQTJCekIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvc2VydmljZXMvaXgtZm9ybS5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBJeEZvcm1TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjb250cm9scyA9IG5ldyBNYXA8TmdDb250cm9sLCBIVE1MRWxlbWVudD4oKTtcblxuICBnZXRDb250cm9scygpOiBOZ0NvbnRyb2xbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLmNvbnRyb2xzLmtleXMoKV07XG4gIH1cblxuICBnZXRDb250cm9sc05hbWVzKCk6IChzdHJpbmcgfCBudW1iZXIgfCBudWxsKVtdIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb250cm9scygpLm1hcCgoY3RybCkgPT4gY3RybC5uYW1lKTtcbiAgfVxuXG4gIGdldENvbnRyb2xCeU5hbWUoY29udHJvbE5hbWU6IHN0cmluZyk6IE5nQ29udHJvbCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q29udHJvbHMoKS5maW5kKChjb250cm9sKSA9PiBjb250cm9sLm5hbWUgPT09IGNvbnRyb2xOYW1lKTtcbiAgfVxuXG4gIGdldEVsZW1lbnRCeUNvbnRyb2xOYW1lKGNvbnRyb2xOYW1lOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbEJ5TmFtZShjb250cm9sTmFtZSk7XG4gICAgcmV0dXJuIGNvbnRyb2wgPyB0aGlzLmNvbnRyb2xzLmdldChjb250cm9sKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJlZ2lzdGVyQ29udHJvbChjb250cm9sOiBOZ0NvbnRyb2wsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KTogdm9pZCB7XG4gICAgdGhpcy5jb250cm9scy5zZXQoY29udHJvbCwgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIHVucmVnaXN0ZXJDb250cm9sKGNvbnRyb2w6IE5nQ29udHJvbCk6IHZvaWQge1xuICAgIHRoaXMuY29udHJvbHMuZGVsZXRlKGNvbnRyb2wpO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=