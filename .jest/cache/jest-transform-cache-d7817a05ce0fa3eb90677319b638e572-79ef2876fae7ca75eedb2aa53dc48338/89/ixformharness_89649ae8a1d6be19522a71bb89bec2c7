2586ad68ffa6915971ac9893e6c2146c
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxFormHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const control_harnesses_helpers_1 = require("app/modules/forms/ix-forms/testing/control-harnesses.helpers");
/**
 * This class provides sugar syntax to make it easier to work with forms.
 * When possibilities of this class are not enough, use individual harnesses such as IxInputHarness, etc.
 */
class IxFormHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getControlHarnesses = this.locatorForAll(...control_harnesses_helpers_1.supportedFormControlSelectors);
    }
    /**
     * Returns a dictionary of form control harnesses indexed by their labels.
     */
    getControlHarnessesDict() {
        return __awaiter(this, void 0, void 0, function* () {
            const controls = yield this.getControlHarnesses();
            return (0, control_harnesses_helpers_1.indexControlsByLabel)(controls);
        });
    }
    getControl(label) {
        return __awaiter(this, void 0, void 0, function* () {
            const controlsDict = yield this.getControlHarnessesDict();
            return controlsDict[label];
        });
    }
    getValues() {
        return __awaiter(this, void 0, void 0, function* () {
            const controlsDict = yield this.getControlHarnessesDict();
            return (0, control_harnesses_helpers_1.getControlValues)(controlsDict);
        });
    }
    getLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            const controls = yield this.getControlHarnesses();
            return (0, testing_1.parallel)(() => controls.map((control) => control.getLabelText()));
        });
    }
    /**
     * Sequentially fill in the form.
     * Argument is a dictionary, where key is label:
     * ```
     * {
     *   'First Name': 'John',
     *   'Last Name': 'Smith',
     *   'Receive email updates': true,
     * }
     * ```
     */
    fillForm(values) {
        return __awaiter(this, void 0, void 0, function* () {
            const labels = Object.keys(values);
            for (const label of labels) {
                const controlsDict = yield this.getControlHarnessesDict();
                const control = controlsDict[label];
                if (!control) {
                    throw new Error(`Could not find control with label ${label}.`);
                }
                yield control.setValue(values[label]);
            }
        });
    }
    getDisabledState() {
        return __awaiter(this, void 0, void 0, function* () {
            const controls = yield this.getControlHarnessesDict();
            return (0, control_harnesses_helpers_1.getDisabledStates)(controls);
        });
    }
}
exports.IxFormHarness = IxFormHarness;
IxFormHarness.hostSelector = 'form';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdGVzdGluZy9peC1mb3JtLmhhcm5lc3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsa0RBRzhCO0FBRTlCLDRHQUlzRTtBQUV0RTs7O0dBR0c7QUFDSCxNQUFhLGFBQWMsU0FBUSwwQkFBZ0I7SUFBbkQ7O1FBR0Usd0JBQW1CLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLHlEQUE2QixDQUFDLENBQUM7SUFxRDdFLENBQUM7SUFuREM7O09BRUc7SUFDRyx1QkFBdUI7O1lBQzNCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDbEQsT0FBTyxJQUFBLGdEQUFvQixFQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7S0FBQTtJQUVLLFVBQVUsQ0FBQyxLQUFhOztZQUM1QixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQzFELE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUM7S0FBQTtJQUVLLFNBQVM7O1lBQ2IsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztZQUMxRCxPQUFPLElBQUEsNENBQWdCLEVBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEMsQ0FBQztLQUFBO0lBRUssU0FBUzs7WUFDYixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBRWxELE9BQU8sSUFBQSxrQkFBUSxFQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0UsQ0FBQztLQUFBO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNHLFFBQVEsQ0FBQyxNQUErQjs7WUFDNUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQyxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO2dCQUMzQixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO2dCQUMxRCxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUF5QixDQUFDO2dCQUM1RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDakUsQ0FBQztnQkFDRCxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDeEMsQ0FBQztRQUNILENBQUM7S0FBQTtJQUVLLGdCQUFnQjs7WUFDcEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztZQUN0RCxPQUFPLElBQUEsNkNBQWlCLEVBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsQ0FBQztLQUFBOztBQXZESCxzQ0F3REM7QUF2RFEsMEJBQVksR0FBRyxNQUFNLEFBQVQsQ0FBVSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy90ZXN0aW5nL2l4LWZvcm0uaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRIYXJuZXNzLFxuICBwYXJhbGxlbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSXhGb3JtQ29udHJvbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9pbnRlcmZhY2VzL2l4LWZvcm0tY29udHJvbC1oYXJuZXNzLmludGVyZmFjZSc7XG5pbXBvcnQge1xuICBzdXBwb3J0ZWRGb3JtQ29udHJvbFNlbGVjdG9ycyxcbiAgU3VwcG9ydGVkRm9ybUNvbnRyb2xIYXJuZXNzLFxuICBpbmRleENvbnRyb2xzQnlMYWJlbCwgZ2V0Q29udHJvbFZhbHVlcywgSXhGb3JtQmFzaWNWYWx1ZVR5cGUsIGdldERpc2FibGVkU3RhdGVzLFxufSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy90ZXN0aW5nL2NvbnRyb2wtaGFybmVzc2VzLmhlbHBlcnMnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgc3VnYXIgc3ludGF4IHRvIG1ha2UgaXQgZWFzaWVyIHRvIHdvcmsgd2l0aCBmb3Jtcy5cbiAqIFdoZW4gcG9zc2liaWxpdGllcyBvZiB0aGlzIGNsYXNzIGFyZSBub3QgZW5vdWdoLCB1c2UgaW5kaXZpZHVhbCBoYXJuZXNzZXMgc3VjaCBhcyBJeElucHV0SGFybmVzcywgZXRjLlxuICovXG5leHBvcnQgY2xhc3MgSXhGb3JtSGFybmVzcyBleHRlbmRzIENvbXBvbmVudEhhcm5lc3Mge1xuICBzdGF0aWMgaG9zdFNlbGVjdG9yID0gJ2Zvcm0nO1xuXG4gIGdldENvbnRyb2xIYXJuZXNzZXMgPSB0aGlzLmxvY2F0b3JGb3JBbGwoLi4uc3VwcG9ydGVkRm9ybUNvbnRyb2xTZWxlY3RvcnMpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZGljdGlvbmFyeSBvZiBmb3JtIGNvbnRyb2wgaGFybmVzc2VzIGluZGV4ZWQgYnkgdGhlaXIgbGFiZWxzLlxuICAgKi9cbiAgYXN5bmMgZ2V0Q29udHJvbEhhcm5lc3Nlc0RpY3QoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBTdXBwb3J0ZWRGb3JtQ29udHJvbEhhcm5lc3M+PiB7XG4gICAgY29uc3QgY29udHJvbHMgPSBhd2FpdCB0aGlzLmdldENvbnRyb2xIYXJuZXNzZXMoKTtcbiAgICByZXR1cm4gaW5kZXhDb250cm9sc0J5TGFiZWwoY29udHJvbHMpO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q29udHJvbChsYWJlbDogc3RyaW5nKTogUHJvbWlzZTxTdXBwb3J0ZWRGb3JtQ29udHJvbEhhcm5lc3M+IHtcbiAgICBjb25zdCBjb250cm9sc0RpY3QgPSBhd2FpdCB0aGlzLmdldENvbnRyb2xIYXJuZXNzZXNEaWN0KCk7XG4gICAgcmV0dXJuIGNvbnRyb2xzRGljdFtsYWJlbF07XG4gIH1cblxuICBhc3luYyBnZXRWYWx1ZXMoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBJeEZvcm1CYXNpY1ZhbHVlVHlwZT4+IHtcbiAgICBjb25zdCBjb250cm9sc0RpY3QgPSBhd2FpdCB0aGlzLmdldENvbnRyb2xIYXJuZXNzZXNEaWN0KCk7XG4gICAgcmV0dXJuIGdldENvbnRyb2xWYWx1ZXMoY29udHJvbHNEaWN0KTtcbiAgfVxuXG4gIGFzeW5jIGdldExhYmVscygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3QgY29udHJvbHMgPSBhd2FpdCB0aGlzLmdldENvbnRyb2xIYXJuZXNzZXMoKTtcblxuICAgIHJldHVybiBwYXJhbGxlbCgoKSA9PiBjb250cm9scy5tYXAoKGNvbnRyb2wpID0+IGNvbnRyb2wuZ2V0TGFiZWxUZXh0KCkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXF1ZW50aWFsbHkgZmlsbCBpbiB0aGUgZm9ybS5cbiAgICogQXJndW1lbnQgaXMgYSBkaWN0aW9uYXJ5LCB3aGVyZSBrZXkgaXMgbGFiZWw6XG4gICAqIGBgYFxuICAgKiB7XG4gICAqICAgJ0ZpcnN0IE5hbWUnOiAnSm9obicsXG4gICAqICAgJ0xhc3QgTmFtZSc6ICdTbWl0aCcsXG4gICAqICAgJ1JlY2VpdmUgZW1haWwgdXBkYXRlcyc6IHRydWUsXG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBhc3luYyBmaWxsRm9ybSh2YWx1ZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbGFiZWxzID0gT2JqZWN0LmtleXModmFsdWVzKTtcbiAgICBmb3IgKGNvbnN0IGxhYmVsIG9mIGxhYmVscykge1xuICAgICAgY29uc3QgY29udHJvbHNEaWN0ID0gYXdhaXQgdGhpcy5nZXRDb250cm9sSGFybmVzc2VzRGljdCgpO1xuICAgICAgY29uc3QgY29udHJvbCA9IGNvbnRyb2xzRGljdFtsYWJlbF0gYXMgSXhGb3JtQ29udHJvbEhhcm5lc3M7XG4gICAgICBpZiAoIWNvbnRyb2wpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBjb250cm9sIHdpdGggbGFiZWwgJHtsYWJlbH0uYCk7XG4gICAgICB9XG4gICAgICBhd2FpdCBjb250cm9sLnNldFZhbHVlKHZhbHVlc1tsYWJlbF0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldERpc2FibGVkU3RhdGUoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4ge1xuICAgIGNvbnN0IGNvbnRyb2xzID0gYXdhaXQgdGhpcy5nZXRDb250cm9sSGFybmVzc2VzRGljdCgpO1xuICAgIHJldHVybiBnZXREaXNhYmxlZFN0YXRlcyhjb250cm9scyk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==