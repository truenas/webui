{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/testing/ix-form.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAG8B;AAE9B,4GAIsE;AAEtE;;;GAGG;AACH,MAAa,aAAc,SAAQ,0BAAgB;IAAnD;;QAGE,wBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,yDAA6B,CAAC,CAAC;IAqD7E,CAAC;IAnDC;;OAEG;IACG,uBAAuB;;YAC3B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAClD,OAAO,IAAA,gDAAoB,EAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;KAAA;IAEK,UAAU,CAAC,KAAa;;YAC5B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC1D,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;KAAA;IAEK,SAAS;;YACb,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC1D,OAAO,IAAA,4CAAgB,EAAC,YAAY,CAAC,CAAC;QACxC,CAAC;KAAA;IAEK,SAAS;;YACb,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAElD,OAAO,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3E,CAAC;KAAA;IAED;;;;;;;;;;OAUG;IACG,QAAQ,CAAC,MAA+B;;YAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;gBAC3B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAC1D,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAyB,CAAC;gBAC5D,IAAI,CAAC,OAAO,EAAE,CAAC;oBACb,MAAM,IAAI,KAAK,CAAC,qCAAqC,KAAK,GAAG,CAAC,CAAC;gBACjE,CAAC;gBACD,MAAM,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;KAAA;IAEK,gBAAgB;;YACpB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACtD,OAAO,IAAA,6CAAiB,EAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;KAAA;;AAvDH,sCAwDC;AAvDQ,0BAAY,GAAG,MAAM,AAAT,CAAU","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/testing/ix-form.harness.ts"],"sourcesContent":["import {\n  ComponentHarness,\n  parallel,\n} from '@angular/cdk/testing';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport {\n  supportedFormControlSelectors,\n  SupportedFormControlHarness,\n  indexControlsByLabel, getControlValues, IxFormBasicValueType, getDisabledStates,\n} from 'app/modules/forms/ix-forms/testing/control-harnesses.helpers';\n\n/**\n * This class provides sugar syntax to make it easier to work with forms.\n * When possibilities of this class are not enough, use individual harnesses such as IxInputHarness, etc.\n */\nexport class IxFormHarness extends ComponentHarness {\n  static hostSelector = 'form';\n\n  getControlHarnesses = this.locatorForAll(...supportedFormControlSelectors);\n\n  /**\n   * Returns a dictionary of form control harnesses indexed by their labels.\n   */\n  async getControlHarnessesDict(): Promise<Record<string, SupportedFormControlHarness>> {\n    const controls = await this.getControlHarnesses();\n    return indexControlsByLabel(controls);\n  }\n\n  async getControl(label: string): Promise<SupportedFormControlHarness> {\n    const controlsDict = await this.getControlHarnessesDict();\n    return controlsDict[label];\n  }\n\n  async getValues(): Promise<Record<string, IxFormBasicValueType>> {\n    const controlsDict = await this.getControlHarnessesDict();\n    return getControlValues(controlsDict);\n  }\n\n  async getLabels(): Promise<string[]> {\n    const controls = await this.getControlHarnesses();\n\n    return parallel(() => controls.map((control) => control.getLabelText()));\n  }\n\n  /**\n   * Sequentially fill in the form.\n   * Argument is a dictionary, where key is label:\n   * ```\n   * {\n   *   'First Name': 'John',\n   *   'Last Name': 'Smith',\n   *   'Receive email updates': true,\n   * }\n   * ```\n   */\n  async fillForm(values: Record<string, unknown>): Promise<void> {\n    const labels = Object.keys(values);\n    for (const label of labels) {\n      const controlsDict = await this.getControlHarnessesDict();\n      const control = controlsDict[label] as IxFormControlHarness;\n      if (!control) {\n        throw new Error(`Could not find control with label ${label}.`);\n      }\n      await control.setValue(values[label]);\n    }\n  }\n\n  async getDisabledState(): Promise<Record<string, boolean>> {\n    const controls = await this.getControlHarnessesDict();\n    return getDisabledStates(controls);\n  }\n}\n"],"version":3}