{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_baseSortedIndex.js","mappings":";;;;;AAAA,oFAAwD;AACxD,gEAAqC;AACrC,gEAAqC;AAErC,uEAAuE;AACvE,IAAI,gBAAgB,GAAG,UAAU,EAC7B,qBAAqB,GAAG,gBAAgB,KAAK,CAAC,CAAC;AAEnD;;;;;;;;;;;GAWG;AACH,SAAS,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU;IAC/C,IAAI,GAAG,GAAG,CAAC,EACP,IAAI,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;IAE9C,IAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,KAAK,KAAK,KAAK,IAAI,IAAI,IAAI,qBAAqB,EAAE,CAAC;QACjF,OAAO,GAAG,GAAG,IAAI,EAAE,CAAC;YAClB,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EACxB,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YAE1B,IAAI,QAAQ,KAAK,IAAI,IAAI,CAAC,IAAA,qBAAQ,EAAC,QAAQ,CAAC;gBACxC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC;gBAC5D,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAChB,CAAC;iBAAM,CAAC;gBACN,IAAI,GAAG,GAAG,CAAC;YACb,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,IAAA,+BAAiB,EAAC,KAAK,EAAE,KAAK,EAAE,qBAAQ,EAAE,UAAU,CAAC,CAAC;AAC/D,CAAC;AAED,kBAAe,eAAe,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_baseSortedIndex.js"],"sourcesContent":["import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;\n"],"version":3}