42e0d525f7da5853448a47fb7ff1bbad
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmDialogComponent = void 0;
const scrolling_1 = require("@angular/cdk/scrolling");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const checkbox_1 = require("@angular/material/checkbox");
const dialog_1 = require("@angular/material/dialog");
const core_2 = require("@ngx-translate/core");
const dialog_interface_1 = require("app/interfaces/dialog.interface");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
let ConfirmDialogComponent = class ConfirmDialogComponent {
    constructor(dialogRef, translate, options) {
        this.dialogRef = dialogRef;
        this.translate = translate;
        this.isSubmitEnabled = false;
        this.isSecondaryCheckboxChecked = false;
        this.defaultOptions = {
            buttonText: this.translate.instant('Continue'),
            cancelText: this.translate.instant('Cancel'),
            hideCheckbox: false,
            confirmationCheckboxText: this.translate.instant('Confirm'),
        };
        this.options = Object.assign(Object.assign({}, this.defaultOptions), options);
        if (options.hideCancel) {
            this.dialogRef.disableClose = options.hideCancel;
        }
        if (options.secondaryCheckbox) {
            // Don't allow user to close via backdrop to ensure that object is returned.
            this.dialogRef.disableClose = true;
        }
    }
    toggleSubmit(data) {
        this.isSubmitEnabled = data.checked;
    }
    isDisabled() {
        if (!this.options.hideCheckbox) {
            return !this.isSubmitEnabled && !this.options.hideCheckbox;
        }
        return false;
    }
    onCancel() {
        const result = this.options.secondaryCheckbox
            ? {
                confirmed: false,
                secondaryCheckbox: this.isSecondaryCheckboxChecked,
            }
            : false;
        this.dialogRef.close(result);
    }
    onSubmit() {
        const result = this.options.secondaryCheckbox
            ? {
                confirmed: true,
                secondaryCheckbox: this.isSecondaryCheckboxChecked,
            }
            : true;
        this.dialogRef.close(result);
    }
};
exports.ConfirmDialogComponent = ConfirmDialogComponent;
ConfirmDialogComponent.ctorParameters = () => [
    { type: dialog_1.MatDialogRef },
    { type: core_2.TranslateService },
    { type: dialog_interface_1.ConfirmOptionsWithSecondaryCheckbox, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.ConfirmDialogComponent = ConfirmDialogComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-confirm-dialog',
        template: require("./confirm-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            scrolling_1.CdkScrollable,
            dialog_1.MatDialogContent,
            checkbox_1.MatCheckbox,
            forms_1.ReactiveFormsModule,
            forms_1.FormsModule,
            form_actions_component_1.FormActionsComponent,
            dialog_1.MatDialogActions,
            button_1.MatButton,
            core_2.TranslateModule,
            test_directive_1.TestDirective,
        ],
    })
], ConfirmDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZGlhbG9nL2NvbXBvbmVudHMvY29uZmlybS1kaWFsb2cvY29uZmlybS1kaWFsb2cuY29tcG9uZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNEQUF1RDtBQUN2RCx3Q0FHdUI7QUFDdkIsMENBQWtFO0FBQ2xFLHFEQUFxRDtBQUNyRCx5REFBNEU7QUFDNUUscURBRWtDO0FBQ2xDLDhDQUF3RTtBQUN4RSxzRUFBeUk7QUFDekksc0hBQWlIO0FBQ2pILHVFQUFtRTtBQXNCNUQsSUFBTSxzQkFBc0IsR0FBNUIsTUFBTSxzQkFBc0I7SUFhakMsWUFDVSxTQUErQyxFQUMvQyxTQUEyQixFQUNWLE9BQTRDO1FBRjdELGNBQVMsR0FBVCxTQUFTLENBQXNDO1FBQy9DLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBWnJDLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLCtCQUEwQixHQUFHLEtBQUssQ0FBQztRQUVsQixtQkFBYyxHQUFHO1lBQ2hDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDOUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUM1QyxZQUFZLEVBQUUsS0FBSztZQUNuQix3QkFBd0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7U0FDMUMsQ0FBQztRQU9sQixJQUFJLENBQUMsT0FBTyxtQ0FBUSxJQUFJLENBQUMsY0FBYyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1FBQ3RELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDbkQsQ0FBQztRQUVELElBQUksT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDOUIsNEVBQTRFO1lBQzVFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNyQyxDQUFDO0lBQ0gsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUF1QjtRQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEMsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQzdELENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUI7WUFDM0MsQ0FBQyxDQUFDO2dCQUNBLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsMEJBQTBCO2FBQ2Q7WUFDdEMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVWLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUI7WUFDM0MsQ0FBQyxDQUFDO2dCQUNBLFNBQVMsRUFBRSxJQUFJO2dCQUNmLGlCQUFpQixFQUFFLElBQUksQ0FBQywwQkFBMEI7YUFDZDtZQUN0QyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRVQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7QUE1RFUsd0RBQXNCOzs7O3lGQWdCOUIsYUFBTSxTQUFDLHdCQUFlOztpQ0FoQmQsc0JBQXNCO0lBcEJsQyxJQUFBLGdCQUFTLEVBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLG9EQUE4QztRQUU5QyxlQUFlLEVBQUUsOEJBQXVCLENBQUMsTUFBTTtRQUMvQyxVQUFVLEVBQUUsSUFBSTtRQUNoQixPQUFPLEVBQUU7WUFDUCx1QkFBYztZQUNkLHlCQUFhO1lBQ2IseUJBQWdCO1lBQ2hCLHNCQUFXO1lBQ1gsMkJBQW1CO1lBQ25CLG1CQUFXO1lBQ1gsNkNBQW9CO1lBQ3BCLHlCQUFnQjtZQUNoQixrQkFBUztZQUNULHNCQUFlO1lBQ2YsOEJBQWE7U0FDZDtLQUNGLENBQUM7R0FDVyxzQkFBc0IsQ0E2RGxDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2RpYWxvZy9jb21wb25lbnRzL2NvbmZpcm0tZGlhbG9nL2NvbmZpcm0tZGlhbG9nLmNvbXBvbmVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtTY3JvbGxhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LCBJbmplY3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSwgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXRCdXR0b24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9idXR0b24nO1xuaW1wb3J0IHsgTWF0Q2hlY2tib3hDaGFuZ2UsIE1hdENoZWNrYm94IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY2hlY2tib3gnO1xuaW1wb3J0IHtcbiAgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYsIE1hdERpYWxvZ1RpdGxlLCBNYXREaWFsb2dDb250ZW50LCBNYXREaWFsb2dBY3Rpb25zLFxufSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSwgVHJhbnNsYXRlTW9kdWxlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBDb25maXJtT3B0aW9ucywgQ29uZmlybU9wdGlvbnNXaXRoU2Vjb25kYXJ5Q2hlY2tib3gsIERpYWxvZ1dpdGhTZWNvbmRhcnlDaGVja2JveFJlc3VsdCB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2RpYWxvZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRm9ybUFjdGlvbnNDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2Zvcm0tYWN0aW9ucy9mb3JtLWFjdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IFRlc3REaXJlY3RpdmUgfSBmcm9tICdhcHAvbW9kdWxlcy90ZXN0LWlkL3Rlc3QuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXgtY29uZmlybS1kaWFsb2cnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29uZmlybS1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jb25maXJtLWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW1xuICAgIE1hdERpYWxvZ1RpdGxlLFxuICAgIENka1Njcm9sbGFibGUsXG4gICAgTWF0RGlhbG9nQ29udGVudCxcbiAgICBNYXRDaGVja2JveCxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIEZvcm1BY3Rpb25zQ29tcG9uZW50LFxuICAgIE1hdERpYWxvZ0FjdGlvbnMsXG4gICAgTWF0QnV0dG9uLFxuICAgIFRyYW5zbGF0ZU1vZHVsZSxcbiAgICBUZXN0RGlyZWN0aXZlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBDb25maXJtRGlhbG9nQ29tcG9uZW50IHtcbiAgb3B0aW9uczogQ29uZmlybU9wdGlvbnNXaXRoU2Vjb25kYXJ5Q2hlY2tib3g7XG5cbiAgaXNTdWJtaXRFbmFibGVkID0gZmFsc2U7XG4gIGlzU2Vjb25kYXJ5Q2hlY2tib3hDaGVja2VkID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBidXR0b25UZXh0OiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdDb250aW51ZScpLFxuICAgIGNhbmNlbFRleHQ6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0NhbmNlbCcpLFxuICAgIGhpZGVDaGVja2JveDogZmFsc2UsXG4gICAgY29uZmlybWF0aW9uQ2hlY2tib3hUZXh0OiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdDb25maXJtJyksXG4gIH0gYXMgQ29uZmlybU9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxDb25maXJtRGlhbG9nQ29tcG9uZW50PixcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgb3B0aW9uczogQ29uZmlybU9wdGlvbnNXaXRoU2Vjb25kYXJ5Q2hlY2tib3gsXG4gICkge1xuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4udGhpcy5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIGlmIChvcHRpb25zLmhpZGVDYW5jZWwpIHtcbiAgICAgIHRoaXMuZGlhbG9nUmVmLmRpc2FibGVDbG9zZSA9IG9wdGlvbnMuaGlkZUNhbmNlbDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zZWNvbmRhcnlDaGVja2JveCkge1xuICAgICAgLy8gRG9uJ3QgYWxsb3cgdXNlciB0byBjbG9zZSB2aWEgYmFja2Ryb3AgdG8gZW5zdXJlIHRoYXQgb2JqZWN0IGlzIHJldHVybmVkLlxuICAgICAgdGhpcy5kaWFsb2dSZWYuZGlzYWJsZUNsb3NlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVTdWJtaXQoZGF0YTogTWF0Q2hlY2tib3hDaGFuZ2UpOiB2b2lkIHtcbiAgICB0aGlzLmlzU3VibWl0RW5hYmxlZCA9IGRhdGEuY2hlY2tlZDtcbiAgfVxuXG4gIGlzRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuaGlkZUNoZWNrYm94KSB7XG4gICAgICByZXR1cm4gIXRoaXMuaXNTdWJtaXRFbmFibGVkICYmICF0aGlzLm9wdGlvbnMuaGlkZUNoZWNrYm94O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBvbkNhbmNlbCgpOiB2b2lkIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLm9wdGlvbnMuc2Vjb25kYXJ5Q2hlY2tib3hcbiAgICAgID8ge1xuICAgICAgICBjb25maXJtZWQ6IGZhbHNlLFxuICAgICAgICBzZWNvbmRhcnlDaGVja2JveDogdGhpcy5pc1NlY29uZGFyeUNoZWNrYm94Q2hlY2tlZCxcbiAgICAgIH0gYXMgRGlhbG9nV2l0aFNlY29uZGFyeUNoZWNrYm94UmVzdWx0XG4gICAgICA6IGZhbHNlO1xuXG4gICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UocmVzdWx0KTtcbiAgfVxuXG4gIG9uU3VibWl0KCk6IHZvaWQge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMub3B0aW9ucy5zZWNvbmRhcnlDaGVja2JveFxuICAgICAgPyB7XG4gICAgICAgIGNvbmZpcm1lZDogdHJ1ZSxcbiAgICAgICAgc2Vjb25kYXJ5Q2hlY2tib3g6IHRoaXMuaXNTZWNvbmRhcnlDaGVja2JveENoZWNrZWQsXG4gICAgICB9IGFzIERpYWxvZ1dpdGhTZWNvbmRhcnlDaGVja2JveFJlc3VsdFxuICAgICAgOiB0cnVlO1xuXG4gICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UocmVzdWx0KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9