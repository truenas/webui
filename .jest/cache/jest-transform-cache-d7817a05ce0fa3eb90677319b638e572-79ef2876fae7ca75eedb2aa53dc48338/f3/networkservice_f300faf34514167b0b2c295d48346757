3e1a1afc0f671a28a91b00687dfc0f98
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkService = void 0;
const core_1 = require("@angular/core");
const operators_1 = require("rxjs/operators");
const ws_service_1 = require("app/services/ws.service");
let NetworkService = class NetworkService {
    constructor(ws) {
        this.ws = ws;
        this.macRegex = /\b([0-9A-F]{2}[:-]){5}([0-9A-F]){2}\b/i;
        this.ipv4Regex = /^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})$/;
        this.ipv4CidrRegex = /^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\/(3[0-2]|[1-2][0-9]|[0-9]))$/;
        this.ipv4CidrOptionalRegex = /^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\/(3[0-2]|[1-2][0-9]|[0-9]))?$/;
        this.ipv6Regex = /^([0-9a-f]|:){1,4}(:([0-9a-f]{0,4})*){1,7}(:((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2}))?$/i;
        this.ipv6CidrRegex = /^([0-9a-f]|:){1,4}(:([0-9a-f]{0,4})*){1,7}(:((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2}))?(\/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9]))$/i;
        this.ipv6CidrOptionalRegex = /^([0-9a-f]|:){1,4}(:([0-9a-f]{0,4})*){1,7}(:((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2}))?(\/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9]))?$/i;
        this.ipv4OrIpv6 = new RegExp('(' + this.ipv6Regex.source + ')|(' + this.ipv4Regex.source + ')');
        this.ipv4OrIpv6Cidr = new RegExp('(' + this.ipv6CidrRegex.source + ')|(' + this.ipv4CidrRegex.source + ')');
        this.ipv4OrIpv6CidrOptional = new RegExp('(' + this.ipv6CidrOptionalRegex.source + ')|(' + this.ipv4CidrOptionalRegex.source + ')');
        this.hostnameRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/;
    }
    getVlanParentInterfaceChoices() {
        return this.ws.call('interface.vlan_parent_interface_choices');
    }
    getLaggPortsChoices(id = null) {
        return this.ws.call('interface.lag_ports_choices', [id]);
    }
    getLaggProtocolChoices() {
        return this.ws.call('interface.lag_supported_protocols');
    }
    getBridgeMembersChoices(id = null) {
        return this.ws.call('interface.bridge_members_choices', [id]);
    }
    getV4Netmasks() {
        return Array(34).fill(0).map((_, i) => {
            if (i === 0) {
                return { label: '---------', value: '' };
            }
            return { label: String(33 - i), value: String(33 - i) };
        });
    }
    getV6PrefixLength() {
        return Array(34).fill(0).map((_, i) => {
            if (i === 0) {
                return { label: '---------', value: '' };
            }
            return { label: String((33 - i) * 4), value: String((33 - i) * 4) };
        });
    }
    subscribeToInOutUpdates() {
        return this.ws.subscribe('reporting.realtime').pipe((0, operators_1.map)((event) => { var _a; return (_a = event.fields) === null || _a === void 0 ? void 0 : _a.interfaces; }), (0, operators_1.filter)(Boolean));
    }
};
exports.NetworkService = NetworkService;
NetworkService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.NetworkService = NetworkService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], NetworkService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL25ldHdvcmsuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBMkM7QUFFM0MsOENBQTZDO0FBSTdDLHdEQUEyRDtBQUdwRCxJQUFNLGNBQWMsR0FBcEIsTUFBTSxjQUFjO0lBaUJ6QixZQUFzQixFQUFvQjtRQUFwQixPQUFFLEdBQUYsRUFBRSxDQUFrQjtRQWhCMUMsYUFBUSxHQUFHLHdDQUF3QyxDQUFDO1FBRXBELGNBQVMsR0FBRywrRUFBK0UsQ0FBQztRQUM1RixrQkFBYSxHQUFHLDRHQUE0RyxDQUFDO1FBQzdILDBCQUFxQixHQUFHLDZHQUE2RyxDQUFDO1FBRXRJLGNBQVMsR0FBRyw2SEFBNkgsQ0FBQztRQUMxSSxrQkFBYSxHQUFHLHVLQUF1SyxDQUFDO1FBQ3hMLDBCQUFxQixHQUFHLHdLQUF3SyxDQUFDO1FBRWpNLGVBQVUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNGLG1CQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2RywyQkFBc0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUUvSCxrQkFBYSxHQUFHLDJHQUEyRyxDQUFDO0lBRS9FLENBQUM7SUFFOUMsNkJBQTZCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMseUNBQXlDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsbUJBQW1CLENBQUMsS0FBYSxJQUFJO1FBQ25DLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxzQkFBc0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxLQUFhLElBQUk7UUFDdkMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUMxQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUNaLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUMzQyxDQUFDO1lBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDMUQsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FDMUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDWixPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDM0MsQ0FBQztZQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0RSxDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FDakQsSUFBQSxlQUFHLEVBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxXQUFDLE9BQUEsTUFBQSxLQUFLLENBQUMsTUFBTSwwQ0FBRSxVQUFVLENBQUEsRUFBQSxDQUFDLEVBQ3hDLElBQUEsa0JBQU0sRUFBQyxPQUFPLENBQUMsQ0FDaEIsQ0FBQztJQUNKLENBQUM7O0FBOURVLHdDQUFjOzs7O3lCQUFkLGNBQWM7SUFEMUIsSUFBQSxpQkFBVSxFQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDO0dBQ3RCLGNBQWMsQ0ErRDFCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9uZXR3b3JrLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDaG9pY2VzIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvY2hvaWNlcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBBbGxOZXR3b3JrSW50ZXJmYWNlc1VwZGF0ZSB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL3JlcG9ydGluZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy93cy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBOZXR3b3JrU2VydmljZSB7XG4gIG1hY1JlZ2V4ID0gL1xcYihbMC05QS1GXXsyfVs6LV0pezV9KFswLTlBLUZdKXsyfVxcYi9pO1xuXG4gIGlwdjRSZWdleCA9IC9eKCgyNVswLTVdfDJbMC00XVswLTldfDE/WzAtOV17MSwyfSlcXC4pezN9KDI1WzAtNV18MlswLTRdWzAtOV18MT9bMC05XXsxLDJ9KSQvO1xuICBpcHY0Q2lkclJlZ2V4ID0gL14oKDI1WzAtNV18MlswLTRdWzAtOV18MT9bMC05XXsxLDJ9KVxcLil7M30oMjVbMC01XXwyWzAtNF1bMC05XXwxP1swLTldezEsMn0pKFxcLygzWzAtMl18WzEtMl1bMC05XXxbMC05XSkpJC87XG4gIGlwdjRDaWRyT3B0aW9uYWxSZWdleCA9IC9eKCgyNVswLTVdfDJbMC00XVswLTldfDE/WzAtOV17MSwyfSlcXC4pezN9KDI1WzAtNV18MlswLTRdWzAtOV18MT9bMC05XXsxLDJ9KShcXC8oM1swLTJdfFsxLTJdWzAtOV18WzAtOV0pKT8kLztcblxuICBpcHY2UmVnZXggPSAvXihbMC05YS1mXXw6KXsxLDR9KDooWzAtOWEtZl17MCw0fSkqKXsxLDd9KDooKDI1WzAtNV18MlswLTRdWzAtOV18MT9bMC05XXsxLDJ9KVxcLil7M30oMjVbMC01XXwyWzAtNF1bMC05XXwxP1swLTldezEsMn0pKT8kL2k7XG4gIGlwdjZDaWRyUmVnZXggPSAvXihbMC05YS1mXXw6KXsxLDR9KDooWzAtOWEtZl17MCw0fSkqKXsxLDd9KDooKDI1WzAtNV18MlswLTRdWzAtOV18MT9bMC05XXsxLDJ9KVxcLil7M30oMjVbMC01XXwyWzAtNF1bMC05XXwxP1swLTldezEsMn0pKT8oXFwvKDEyWzAtOF18MVswLTFdWzAtOV18WzEtOV1bMC05XXxbMC05XSkpJC9pO1xuICBpcHY2Q2lkck9wdGlvbmFsUmVnZXggPSAvXihbMC05YS1mXXw6KXsxLDR9KDooWzAtOWEtZl17MCw0fSkqKXsxLDd9KDooKDI1WzAtNV18MlswLTRdWzAtOV18MT9bMC05XXsxLDJ9KVxcLil7M30oMjVbMC01XXwyWzAtNF1bMC05XXwxP1swLTldezEsMn0pKT8oXFwvKDEyWzAtOF18MVswLTFdWzAtOV18WzEtOV1bMC05XXxbMC05XSkpPyQvaTtcblxuICBpcHY0T3JJcHY2ID0gbmV3IFJlZ0V4cCgnKCcgKyB0aGlzLmlwdjZSZWdleC5zb3VyY2UgKyAnKXwoJyArIHRoaXMuaXB2NFJlZ2V4LnNvdXJjZSArICcpJyk7XG4gIGlwdjRPcklwdjZDaWRyID0gbmV3IFJlZ0V4cCgnKCcgKyB0aGlzLmlwdjZDaWRyUmVnZXguc291cmNlICsgJyl8KCcgKyB0aGlzLmlwdjRDaWRyUmVnZXguc291cmNlICsgJyknKTtcbiAgaXB2NE9ySXB2NkNpZHJPcHRpb25hbCA9IG5ldyBSZWdFeHAoJygnICsgdGhpcy5pcHY2Q2lkck9wdGlvbmFsUmVnZXguc291cmNlICsgJyl8KCcgKyB0aGlzLmlwdjRDaWRyT3B0aW9uYWxSZWdleC5zb3VyY2UgKyAnKScpO1xuXG4gIGhvc3RuYW1lUmVnZXggPSAvXigoW2EtekEtWjAtOV18W2EtekEtWjAtOV1bYS16QS1aMC05LV0qW2EtekEtWjAtOV0pXFwuKSooW0EtWmEtejAtOV18W0EtWmEtejAtOV1bQS1aYS16MC05LV0qW0EtWmEtejAtOV0pJC87XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHdzOiBXZWJTb2NrZXRTZXJ2aWNlKSB7fVxuXG4gIGdldFZsYW5QYXJlbnRJbnRlcmZhY2VDaG9pY2VzKCk6IE9ic2VydmFibGU8Q2hvaWNlcz4ge1xuICAgIHJldHVybiB0aGlzLndzLmNhbGwoJ2ludGVyZmFjZS52bGFuX3BhcmVudF9pbnRlcmZhY2VfY2hvaWNlcycpO1xuICB9XG5cbiAgZ2V0TGFnZ1BvcnRzQ2hvaWNlcyhpZDogc3RyaW5nID0gbnVsbCk6IE9ic2VydmFibGU8Q2hvaWNlcz4ge1xuICAgIHJldHVybiB0aGlzLndzLmNhbGwoJ2ludGVyZmFjZS5sYWdfcG9ydHNfY2hvaWNlcycsIFtpZF0pO1xuICB9XG5cbiAgZ2V0TGFnZ1Byb3RvY29sQ2hvaWNlcygpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIHRoaXMud3MuY2FsbCgnaW50ZXJmYWNlLmxhZ19zdXBwb3J0ZWRfcHJvdG9jb2xzJyk7XG4gIH1cblxuICBnZXRCcmlkZ2VNZW1iZXJzQ2hvaWNlcyhpZDogc3RyaW5nID0gbnVsbCk6IE9ic2VydmFibGU8Q2hvaWNlcz4ge1xuICAgIHJldHVybiB0aGlzLndzLmNhbGwoJ2ludGVyZmFjZS5icmlkZ2VfbWVtYmVyc19jaG9pY2VzJywgW2lkXSk7XG4gIH1cblxuICBnZXRWNE5ldG1hc2tzKCk6IE9wdGlvbltdIHtcbiAgICByZXR1cm4gQXJyYXkoMzQpLmZpbGwoMCkubWFwKFxuICAgICAgKF8sIGkpID0+IHtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4geyBsYWJlbDogJy0tLS0tLS0tLScsIHZhbHVlOiAnJyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGxhYmVsOiBTdHJpbmcoMzMgLSBpKSwgdmFsdWU6IFN0cmluZygzMyAtIGkpIH07XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBnZXRWNlByZWZpeExlbmd0aCgpOiBPcHRpb25bXSB7XG4gICAgcmV0dXJuIEFycmF5KDM0KS5maWxsKDApLm1hcChcbiAgICAgIChfLCBpKSA9PiB7XG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHsgbGFiZWw6ICctLS0tLS0tLS0nLCB2YWx1ZTogJycgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBsYWJlbDogU3RyaW5nKCgzMyAtIGkpICogNCksIHZhbHVlOiBTdHJpbmcoKDMzIC0gaSkgKiA0KSB9O1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgc3Vic2NyaWJlVG9Jbk91dFVwZGF0ZXMoKTogT2JzZXJ2YWJsZTxBbGxOZXR3b3JrSW50ZXJmYWNlc1VwZGF0ZT4ge1xuICAgIHJldHVybiB0aGlzLndzLnN1YnNjcmliZSgncmVwb3J0aW5nLnJlYWx0aW1lJykucGlwZShcbiAgICAgIG1hcCgoZXZlbnQpID0+IGV2ZW50LmZpZWxkcz8uaW50ZXJmYWNlcyksXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9