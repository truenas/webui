386591f2222a6e22bf2f9ce82a61fc96
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jest_1 = require("@ngneat/spectator/jest");
const store_1 = require("@ngrx/store");
const rxjs_1 = require("rxjs");
const locale_service_1 = require("app/services/locale.service");
const preferences_selectors_1 = require("app/store/preferences/preferences.selectors");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
describe('LocaleService', () => {
    let spectator;
    let service;
    const createService = (0, jest_1.createServiceFactory)({
        service: locale_service_1.LocaleService,
        mocks: [store_1.Store],
    });
    beforeEach(() => {
        spectator = createService();
        service = spectator.service;
        const store$ = spectator.inject(store_1.Store);
        store$.select.mockImplementation((selector) => {
            if (selector === system_config_selectors_1.selectTimezone) {
                return (0, rxjs_1.of)('UTC');
            }
            if (selector === preferences_selectors_1.waitForPreferences) {
                return (0, rxjs_1.of)({ dateFormat: 'yyyy-MM-dd', timeFormat: 'HH:mm:ss' });
            }
            return (0, rxjs_1.of)(null);
        });
        jest.useFakeTimers().setSystemTime(new Date('2024-08-14T14:14:27Z'));
    });
    afterEach(() => {
        jest.useRealTimers();
    });
    describe('getDateFormatOptions', () => {
        it('should return correct date format options for default timezone', () => {
            const options = service.getDateFormatOptions();
            expect(options).toEqual([
                { label: '2024-08-14', value: 'yyyy-MM-dd' },
                { label: 'August 14, 2024', value: 'MMMM d, yyyy' },
                { label: '14 August, 2024', value: 'd MMMM, yyyy' },
                { label: 'Aug 14, 2024', value: 'MMM d, yyyy' },
                { label: '14 Aug 2024', value: 'd MMM yyyy' },
                { label: '08/14/2024', value: 'MM/dd/yyyy' },
                { label: '14/08/2024', value: 'dd/MM/yyyy' },
                { label: '14.08.2024', value: 'dd.MM.yyyy' },
            ]);
        });
    });
    describe('getTimeFormatOptions', () => {
        it('should return correct time format options for default timezone', () => {
            const options = service.getTimeFormatOptions();
            expect(options).toEqual([
                { label: '17:14:27 (24 Hours)', value: 'HH:mm:ss' },
                { label: '05:14:27 pm', value: "hh:mm:ss aaaaa'm'" },
                { label: '05:14:27 PM', value: 'hh:mm:ss aa' },
            ]);
        });
    });
    describe('getDateFromString', () => {
        it('should correctly parse a valid date string with default timezone', () => {
            const date = service.getDateFromString('14/08/2024 02:00:00');
            expect(date.toISOString()).toBe('2024-08-13T23:00:00.000Z');
        });
        it('should correctly parse a valid date string with another format with default timezone', () => {
            const date = service.getDateFromString('14.08.2024 02:00:00');
            expect(date.toISOString()).toBe('2024-08-13T23:00:00.000Z');
        });
        it('should throw an error for an invalid date string', () => {
            expect(() => service.getDateFromString('invalid date')).toThrow('Invalid date format: invalid date');
        });
    });
    describe('getPreferredDateFormat', () => {
        it('should return the preferred date format', () => {
            expect(service.getPreferredDateFormat()).toBe('yyyy-MM-dd');
        });
    });
    describe('getPreferredTimeFormat', () => {
        it('should return the preferred time format', () => {
            expect(service.getPreferredTimeFormat()).toBe('HH:mm:ss');
        });
    });
    describe('getDateAndTime', () => {
        it('should return the correct date and time for default timezone', () => {
            const [date, time] = service.getDateAndTime();
            expect(date).toBe('2024-08-14');
            expect(time).toBe('17:14:27');
        });
        it('should return the correct date and time for a specified timezone', () => {
            const [date, time] = service.getDateAndTime('Europe/Kiev');
            expect(date).toBe('2024-08-14');
            expect(time).toBe('17:14:27');
        });
    });
    describe('formatDateTimeToDateFns', () => {
        it('should correctly format date-time string to date-fns format', () => {
            const formatted = service.formatDateTimeToDateFns('YYYY-MM-DD A');
            expect(formatted).toBe('yyyy-MM-dd aa');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,