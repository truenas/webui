{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/dialog.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/dialog.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport { JobProgressDialogRef } from 'app/classes/job-progress-dialog-ref.class';\nimport {\n  ConfirmOptions,\n  ConfirmOptionsWithSecondaryCheckbox,\n  DialogWithSecondaryCheckboxResult,\n} from 'app/interfaces/dialog.interface';\nimport { ErrorReport } from 'app/interfaces/error-report.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { ConfirmDialogComponent } from 'app/modules/dialog/components/confirm-dialog/confirm-dialog.component';\nimport { ErrorDialogComponent } from 'app/modules/dialog/components/error-dialog/error-dialog.component';\nimport { FullScreenDialogComponent } from 'app/modules/dialog/components/full-screen-dialog/full-screen-dialog.component';\nimport { GeneralDialogComponent, GeneralDialogConfig } from 'app/modules/dialog/components/general-dialog/general-dialog.component';\nimport { InfoDialogComponent } from 'app/modules/dialog/components/info-dialog/info-dialog.component';\nimport { JobProgressDialogComponent } from 'app/modules/dialog/components/job-progress/job-progress-dialog.component';\nimport { MultiErrorDialogComponent } from 'app/modules/dialog/components/multi-error-dialog/multi-error-dialog.component';\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogService {\n  constructor(\n    private matDialog: MatDialog,\n    private translate: TranslateService,\n  ) { }\n\n  confirm(confirmOptions: ConfirmOptions): Observable<boolean>;\n  confirm(confirmOptions: ConfirmOptionsWithSecondaryCheckbox): Observable<DialogWithSecondaryCheckboxResult>;\n  confirm(\n    options: ConfirmOptions | ConfirmOptionsWithSecondaryCheckbox,\n  ): Observable<boolean> | Observable<DialogWithSecondaryCheckboxResult> {\n    return this.matDialog.open(ConfirmDialogComponent, {\n      disableClose: options.disableClose || false,\n      data: options,\n      autoFocus: false,\n    })\n      .afterClosed();\n  }\n\n  error(error: ErrorReport | ErrorReport[]): Observable<boolean> {\n    if (Array.isArray(error)) {\n      error = this.cleanErrors(error);\n      if (error.length > 1) {\n        const dialogRef = this.matDialog.open(MultiErrorDialogComponent, {\n          data: error,\n        });\n        return dialogRef.afterClosed();\n      }\n      error = error[0];\n    }\n    if (!error?.message) {\n      return of(false);\n    }\n    const dialogRef = this.matDialog.open(ErrorDialogComponent, {\n      data: error,\n    });\n    dialogRef.componentInstance.title = error.title;\n    dialogRef.componentInstance.message = error.message;\n    dialogRef.componentInstance.backtrace = error.backtrace;\n    if (error.logs) {\n      dialogRef.componentInstance.logs = error.logs;\n    }\n    return dialogRef.afterClosed();\n  }\n\n  private cleanErrors(errorReports: ErrorReport[]): ErrorReport[] {\n    const newErrorReports = [];\n    for (const errorReport of errorReports) {\n      if (errorReport.message) {\n        newErrorReports.push({ ...errorReport });\n      }\n    }\n    return newErrorReports;\n  }\n\n  info(title: string, info: string, isHtml = false): Observable<boolean> {\n    const dialogRef = this.matDialog.open(InfoDialogComponent);\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.info = info;\n    dialogRef.componentInstance.icon = 'info';\n    dialogRef.componentInstance.isHtml = isHtml;\n\n    return dialogRef.afterClosed();\n  }\n\n  warn(title: string, info: string, isHtml = false): Observable<boolean> {\n    const dialogRef = this.matDialog.open(InfoDialogComponent);\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.info = info;\n    dialogRef.componentInstance.icon = 'warning';\n    dialogRef.componentInstance.isHtml = isHtml;\n\n    return dialogRef.afterClosed();\n  }\n\n  generalDialog(conf: GeneralDialogConfig, matConfig?: MatDialogConfig): Observable<boolean> {\n    const dialogRef = this.matDialog.open(GeneralDialogComponent, matConfig);\n    dialogRef.componentInstance.conf = conf;\n\n    return dialogRef.afterClosed();\n  }\n\n  fullScreenDialog(title: string, message: string, showClose = false, pre = false): Observable<boolean> {\n    const dialogRef = this.matDialog.open(FullScreenDialogComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      panelClass: 'full-screen-modal',\n      disableClose: true,\n      data: { showClose, pre },\n    });\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.message = message;\n\n    return dialogRef.afterClosed();\n  }\n\n  closeAllDialogs(): void {\n    for (const openDialog of (this.matDialog.openDialogs || [])) {\n      openDialog.close();\n    }\n  }\n\n  /**\n   * Usage:\n   * ```\n   * this.dialogService.jobDialog(\n   *   this.ws.call('pool.create', [pool]),\n   * )\n   *  .afterClosed()\n   *  .pipe(\n   *    this.errorHandler.catchError(),\n   *    untilDestroyed(this),\n   *  )\n   *  .subscribe(() => {\n   *    // Job completed.\n   *  });\n   * ```\n   *\n   * If you need more control over JobProgressDialogComponent, use it directly.\n   */\n  jobDialog<R>(\n    job$: Observable<Job<R>>,\n    { title, description, canMinimize }: {\n      title?: string;\n      description?: string;\n\n      // Use for long jobs where it's not required for user to wait for the result.\n      // Note that `complete` handler will be called immediately and `next` will never be called.\n      canMinimize?: boolean;\n    } = {},\n  ): JobProgressDialogRef<R> {\n    const matDialogRef = this.matDialog.open(JobProgressDialogComponent<R>, {\n      data: {\n        job$,\n        title,\n        description,\n        canMinimize,\n      },\n    });\n    return new JobProgressDialogRef<R>(matDialogRef, this.translate);\n  }\n}\n"],"version":3}