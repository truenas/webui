{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/locale.service.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/locale.service.spec.ts"],"sourcesContent":["import { SpectatorService, createServiceFactory } from '@ngneat/spectator/jest';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { LocaleService } from 'app/services/locale.service';\nimport { waitForPreferences } from 'app/store/preferences/preferences.selectors';\nimport { selectTimezone } from 'app/store/system-config/system-config.selectors';\n\ndescribe('LocaleService', () => {\n  let spectator: SpectatorService<LocaleService>;\n  let service: LocaleService;\n\n  const createService = createServiceFactory({\n    service: LocaleService,\n    mocks: [Store],\n  });\n\n  beforeEach(() => {\n    spectator = createService();\n    service = spectator.service;\n\n    const store$ = spectator.inject(Store);\n    store$.select.mockImplementation((selector: unknown) => {\n      if (selector === selectTimezone) {\n        return of('UTC');\n      }\n\n      if (selector === waitForPreferences) {\n        return of({ dateFormat: 'yyyy-MM-dd', timeFormat: 'HH:mm:ss' });\n      }\n\n      return of(null);\n    });\n\n    jest.useFakeTimers().setSystemTime(new Date('2024-08-14T14:14:27Z'));\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  describe('getDateFormatOptions', () => {\n    it('should return correct date format options for default timezone', () => {\n      const options = service.getDateFormatOptions();\n      expect(options).toEqual([\n        { label: '2024-08-14', value: 'yyyy-MM-dd' },\n        { label: 'August 14, 2024', value: 'MMMM d, yyyy' },\n        { label: '14 August, 2024', value: 'd MMMM, yyyy' },\n        { label: 'Aug 14, 2024', value: 'MMM d, yyyy' },\n        { label: '14 Aug 2024', value: 'd MMM yyyy' },\n        { label: '08/14/2024', value: 'MM/dd/yyyy' },\n        { label: '14/08/2024', value: 'dd/MM/yyyy' },\n        { label: '14.08.2024', value: 'dd.MM.yyyy' },\n      ]);\n    });\n  });\n\n  describe('getTimeFormatOptions', () => {\n    it('should return correct time format options for default timezone', () => {\n      const options = service.getTimeFormatOptions();\n      expect(options).toEqual([\n        { label: '17:14:27 (24 Hours)', value: 'HH:mm:ss' },\n        { label: '05:14:27 pm', value: \"hh:mm:ss aaaaa'm'\" },\n        { label: '05:14:27 PM', value: 'hh:mm:ss aa' },\n      ]);\n    });\n  });\n\n  describe('getDateFromString', () => {\n    it('should correctly parse a valid date string with default timezone', () => {\n      const date = service.getDateFromString('14/08/2024 02:00:00');\n      expect(date.toISOString()).toBe('2024-08-13T23:00:00.000Z');\n    });\n\n    it('should correctly parse a valid date string with another format with default timezone', () => {\n      const date = service.getDateFromString('14.08.2024 02:00:00');\n      expect(date.toISOString()).toBe('2024-08-13T23:00:00.000Z');\n    });\n\n    it('should throw an error for an invalid date string', () => {\n      expect(() => service.getDateFromString('invalid date')).toThrow('Invalid date format: invalid date');\n    });\n  });\n\n  describe('getPreferredDateFormat', () => {\n    it('should return the preferred date format', () => {\n      expect(service.getPreferredDateFormat()).toBe('yyyy-MM-dd');\n    });\n  });\n\n  describe('getPreferredTimeFormat', () => {\n    it('should return the preferred time format', () => {\n      expect(service.getPreferredTimeFormat()).toBe('HH:mm:ss');\n    });\n  });\n\n  describe('getDateAndTime', () => {\n    it('should return the correct date and time for default timezone', () => {\n      const [date, time] = service.getDateAndTime();\n      expect(date).toBe('2024-08-14');\n      expect(time).toBe('17:14:27');\n    });\n\n    it('should return the correct date and time for a specified timezone', () => {\n      const [date, time] = service.getDateAndTime('Europe/Kiev');\n      expect(date).toBe('2024-08-14');\n      expect(time).toBe('17:14:27');\n    });\n  });\n\n  describe('formatDateTimeToDateFns', () => {\n    it('should correctly format date-time string to date-fns format', () => {\n      const formatted = service.formatDateTimeToDateFns('YYYY-MM-DD A');\n      expect(formatted).toBe('yyyy-MM-dd aa');\n    });\n  });\n});\n"],"version":3}