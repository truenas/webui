{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/intersectionBy.js","mappings":";;;;;AAAA,kEAAsC;AACtC,kFAAsD;AACtD,0EAA8C;AAC9C,kEAAsC;AACtC,wFAA4D;AAC5D,wDAA6B;AAE7B;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,IAAI,cAAc,GAAG,IAAA,sBAAQ,EAAC,UAAS,MAAM;IAC3C,IAAI,QAAQ,GAAG,IAAA,iBAAI,EAAC,MAAM,CAAC,EACvB,MAAM,GAAG,IAAA,sBAAQ,EAAC,MAAM,EAAE,iCAAmB,CAAC,CAAC;IAEnD,IAAI,QAAQ,KAAK,IAAA,iBAAI,EAAC,MAAM,CAAC,EAAE,CAAC;QAC9B,QAAQ,GAAG,SAAS,CAAC;IACvB,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,GAAG,EAAE,CAAC;IACf,CAAC;IACD,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,IAAA,8BAAgB,EAAC,MAAM,EAAE,IAAA,0BAAY,EAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,kBAAe,cAAc,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/intersectionBy.js"],"sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseIntersection from './_baseIntersection.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport castArrayLikeObject from './_castArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.intersection` except that it accepts `iteratee`\n * which is invoked for each element of each `arrays` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [2.1]\n *\n * // The `_.property` iteratee shorthand.\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }]\n */\nvar intersectionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, baseIteratee(iteratee, 2))\n    : [];\n});\n\nexport default intersectionBy;\n"],"version":3}