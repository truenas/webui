805341dde3f73b464599782f9711e0a1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialogService = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const job_progress_dialog_ref_class_1 = require("app/classes/job-progress-dialog-ref.class");
const confirm_dialog_component_1 = require("app/modules/dialog/components/confirm-dialog/confirm-dialog.component");
const error_dialog_component_1 = require("app/modules/dialog/components/error-dialog/error-dialog.component");
const full_screen_dialog_component_1 = require("app/modules/dialog/components/full-screen-dialog/full-screen-dialog.component");
const general_dialog_component_1 = require("app/modules/dialog/components/general-dialog/general-dialog.component");
const info_dialog_component_1 = require("app/modules/dialog/components/info-dialog/info-dialog.component");
const job_progress_dialog_component_1 = require("app/modules/dialog/components/job-progress/job-progress-dialog.component");
const multi_error_dialog_component_1 = require("app/modules/dialog/components/multi-error-dialog/multi-error-dialog.component");
let DialogService = class DialogService {
    constructor(matDialog, translate) {
        this.matDialog = matDialog;
        this.translate = translate;
    }
    confirm(options) {
        return this.matDialog.open(confirm_dialog_component_1.ConfirmDialogComponent, {
            disableClose: options.disableClose || false,
            data: options,
            autoFocus: false,
        })
            .afterClosed();
    }
    error(error) {
        if (Array.isArray(error)) {
            error = this.cleanErrors(error);
            if (error.length > 1) {
                const dialogRef = this.matDialog.open(multi_error_dialog_component_1.MultiErrorDialogComponent, {
                    data: error,
                });
                return dialogRef.afterClosed();
            }
            error = error[0];
        }
        if (!(error === null || error === void 0 ? void 0 : error.message)) {
            return (0, rxjs_1.of)(false);
        }
        const dialogRef = this.matDialog.open(error_dialog_component_1.ErrorDialogComponent, {
            data: error,
        });
        dialogRef.componentInstance.title = error.title;
        dialogRef.componentInstance.message = error.message;
        dialogRef.componentInstance.backtrace = error.backtrace;
        if (error.logs) {
            dialogRef.componentInstance.logs = error.logs;
        }
        return dialogRef.afterClosed();
    }
    cleanErrors(errorReports) {
        const newErrorReports = [];
        for (const errorReport of errorReports) {
            if (errorReport.message) {
                newErrorReports.push(Object.assign({}, errorReport));
            }
        }
        return newErrorReports;
    }
    info(title, info, isHtml = false) {
        const dialogRef = this.matDialog.open(info_dialog_component_1.InfoDialogComponent);
        dialogRef.componentInstance.title = title;
        dialogRef.componentInstance.info = info;
        dialogRef.componentInstance.icon = 'info';
        dialogRef.componentInstance.isHtml = isHtml;
        return dialogRef.afterClosed();
    }
    warn(title, info, isHtml = false) {
        const dialogRef = this.matDialog.open(info_dialog_component_1.InfoDialogComponent);
        dialogRef.componentInstance.title = title;
        dialogRef.componentInstance.info = info;
        dialogRef.componentInstance.icon = 'warning';
        dialogRef.componentInstance.isHtml = isHtml;
        return dialogRef.afterClosed();
    }
    generalDialog(conf, matConfig) {
        const dialogRef = this.matDialog.open(general_dialog_component_1.GeneralDialogComponent, matConfig);
        dialogRef.componentInstance.conf = conf;
        return dialogRef.afterClosed();
    }
    fullScreenDialog(title, message, showClose = false, pre = false) {
        const dialogRef = this.matDialog.open(full_screen_dialog_component_1.FullScreenDialogComponent, {
            maxWidth: '100vw',
            maxHeight: '100vh',
            height: '100%',
            width: '100%',
            panelClass: 'full-screen-modal',
            disableClose: true,
            data: { showClose, pre },
        });
        dialogRef.componentInstance.title = title;
        dialogRef.componentInstance.message = message;
        return dialogRef.afterClosed();
    }
    closeAllDialogs() {
        for (const openDialog of (this.matDialog.openDialogs || [])) {
            openDialog.close();
        }
    }
    /**
     * Usage:
     * ```
     * this.dialogService.jobDialog(
     *   this.ws.call('pool.create', [pool]),
     * )
     *  .afterClosed()
     *  .pipe(
     *    this.errorHandler.catchError(),
     *    untilDestroyed(this),
     *  )
     *  .subscribe(() => {
     *    // Job completed.
     *  });
     * ```
     *
     * If you need more control over JobProgressDialogComponent, use it directly.
     */
    jobDialog(job$, { title, description, canMinimize } = {}) {
        const matDialogRef = this.matDialog.open((job_progress_dialog_component_1.JobProgressDialogComponent), {
            data: {
                job$,
                title,
                description,
                canMinimize,
            },
        });
        return new job_progress_dialog_ref_class_1.JobProgressDialogRef(matDialogRef, this.translate);
    }
};
exports.DialogService = DialogService;
DialogService.ctorParameters = () => [
    { type: dialog_1.MatDialog },
    { type: core_2.TranslateService }
];
exports.DialogService = DialogService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], DialogService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,