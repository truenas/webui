a306d20211e986d5fec408d8738c7e60
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeFileSize = normalizeFileSize;
exports.buildNormalizedFileSize = buildNormalizedFileSize;
const bits_constant_1 = require("app/constants/bits.constant");
const bytes_constant_1 = require("app/constants/bytes.constant");
function normalizeFileSize(value, baseUnit = 'B', base = 2) {
    return base === 10 ? normalizeFileSizeBase10(value, baseUnit) : normalizeFileSizeBase2(value, baseUnit);
}
function buildNormalizedFileSize(value, baseUnit = 'B', base = 2) {
    const [formatted, unit] = normalizeFileSize(value, baseUnit, base);
    return `${formatted} ${unit}`;
}
function normalizeFileSizeBase2(value, baseUnit) {
    let formatted = value;
    let increment = 1;
    while (formatted >= bytes_constant_1.KiB && increment < bytes_constant_1.YiB) {
        increment *= bytes_constant_1.KiB;
        formatted = value / increment;
    }
    formatted = Math.round((formatted + Number.EPSILON) * 100) / 100;
    switch (increment) {
        case bytes_constant_1.KiB:
            return [formatted, 'Ki' + baseUnit];
        case bytes_constant_1.MiB:
            return [formatted, 'Mi' + baseUnit];
        case bytes_constant_1.GiB:
            return [formatted, 'Gi' + baseUnit];
        case bytes_constant_1.TiB:
            return [formatted, 'Ti' + baseUnit];
        case bytes_constant_1.PiB:
            return [formatted, 'Pi' + baseUnit];
        case bytes_constant_1.EiB:
            return [formatted, 'Ei' + baseUnit];
        case bytes_constant_1.ZiB:
            return [formatted, 'Zi' + baseUnit];
        case bytes_constant_1.YiB:
            return [formatted, 'Yi' + baseUnit];
        default:
            return [formatted, baseUnit];
    }
}
function normalizeFileSizeBase10(value, baseUnit) {
    let formatted = value;
    let increment = 1;
    while (formatted >= bits_constant_1.kb && increment < bits_constant_1.Yb) {
        increment *= bits_constant_1.kb;
        formatted = value / increment;
    }
    formatted = Math.round((formatted + Number.EPSILON) * 100) / 100;
    switch (increment) {
        case bits_constant_1.kb:
            return [formatted, 'k' + baseUnit];
        case bits_constant_1.Mb:
            return [formatted, 'M' + baseUnit];
        case bits_constant_1.Gb:
            return [formatted, 'G' + baseUnit];
        case bits_constant_1.Tb:
            return [formatted, 'T' + baseUnit];
        case bits_constant_1.Pb:
            return [formatted, 'P' + baseUnit];
        case bits_constant_1.Eb:
            return [formatted, 'E' + baseUnit];
        case bits_constant_1.Zb:
            return [formatted, 'Z' + baseUnit];
        case bits_constant_1.Yb:
            return [formatted, 'Y' + baseUnit];
        default:
            return [formatted, baseUnit];
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHBlcnMvZmlsZS1zaXplLnV0aWxzLnRzIiwibWFwcGluZ3MiOiI7O0FBT0EsOENBTUM7QUFFRCwwREFPQztBQXRCRCwrREFFcUM7QUFDckMsaUVBRXNDO0FBRXRDLFNBQWdCLGlCQUFpQixDQUMvQixLQUFhLEVBQ2IsV0FBc0IsR0FBRyxFQUN6QixPQUFlLENBQUM7SUFFaEIsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRyxDQUFDO0FBRUQsU0FBZ0IsdUJBQXVCLENBQ3JDLEtBQWEsRUFDYixXQUFzQixHQUFHLEVBQ3pCLE9BQWUsQ0FBQztJQUVoQixNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkUsT0FBTyxHQUFHLFNBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNoQyxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxLQUFhLEVBQUUsUUFBbUI7SUFDaEUsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixPQUFPLFNBQVMsSUFBSSxvQkFBRyxJQUFJLFNBQVMsR0FBRyxvQkFBRyxFQUFFLENBQUM7UUFDM0MsU0FBUyxJQUFJLG9CQUFHLENBQUM7UUFDakIsU0FBUyxHQUFHLEtBQUssR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUNELFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDakUsUUFBUSxTQUFTLEVBQUUsQ0FBQztRQUNsQixLQUFLLG9CQUFHO1lBQ04sT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDdEMsS0FBSyxvQkFBRztZQUNOLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLEtBQUssb0JBQUc7WUFDTixPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQztRQUN0QyxLQUFLLG9CQUFHO1lBQ04sT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDdEMsS0FBSyxvQkFBRztZQUNOLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLEtBQUssb0JBQUc7WUFDTixPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQztRQUN0QyxLQUFLLG9CQUFHO1lBQ04sT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDdEMsS0FBSyxvQkFBRztZQUNOLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDO1lBQ0UsT0FBTyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsS0FBYSxFQUFFLFFBQW1CO0lBQ2pFLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN0QixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDbEIsT0FBTyxTQUFTLElBQUksa0JBQUUsSUFBSSxTQUFTLEdBQUcsa0JBQUUsRUFBRSxDQUFDO1FBQ3pDLFNBQVMsSUFBSSxrQkFBRSxDQUFDO1FBQ2hCLFNBQVMsR0FBRyxLQUFLLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLENBQUM7SUFDRCxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2pFLFFBQVEsU0FBUyxFQUFFLENBQUM7UUFDbEIsS0FBSyxrQkFBRTtZQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLEtBQUssa0JBQUU7WUFDTCxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNyQyxLQUFLLGtCQUFFO1lBQ0wsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDckMsS0FBSyxrQkFBRTtZQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLEtBQUssa0JBQUU7WUFDTCxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNyQyxLQUFLLGtCQUFFO1lBQ0wsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDckMsS0FBSyxrQkFBRTtZQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLEtBQUssa0JBQUU7WUFDTCxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNyQztZQUNFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDakMsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHBlcnMvZmlsZS1zaXplLnV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdiLCBrYiwgTWIsIFRiLCBQYiwgRWIsIFpiLCBZYixcbn0gZnJvbSAnYXBwL2NvbnN0YW50cy9iaXRzLmNvbnN0YW50JztcbmltcG9ydCB7XG4gIEdpQiwgS2lCLCBNaUIsIFBpQiwgVGlCLCBFaUIsIFppQiwgWWlCLFxufSBmcm9tICdhcHAvY29uc3RhbnRzL2J5dGVzLmNvbnN0YW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUZpbGVTaXplKFxuICB2YWx1ZTogbnVtYmVyLFxuICBiYXNlVW5pdDogJ2InIHwgJ0InID0gJ0InLFxuICBiYXNlOiAxMCB8IDIgPSAyLFxuKTogW2Zvcm1hdHRlZDogbnVtYmVyLCB1bml0OiBzdHJpbmddIHtcbiAgcmV0dXJuIGJhc2UgPT09IDEwID8gbm9ybWFsaXplRmlsZVNpemVCYXNlMTAodmFsdWUsIGJhc2VVbml0KSA6IG5vcm1hbGl6ZUZpbGVTaXplQmFzZTIodmFsdWUsIGJhc2VVbml0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTm9ybWFsaXplZEZpbGVTaXplKFxuICB2YWx1ZTogbnVtYmVyLFxuICBiYXNlVW5pdDogJ2InIHwgJ0InID0gJ0InLFxuICBiYXNlOiAxMCB8IDIgPSAyLFxuKTogc3RyaW5nIHtcbiAgY29uc3QgW2Zvcm1hdHRlZCwgdW5pdF0gPSBub3JtYWxpemVGaWxlU2l6ZSh2YWx1ZSwgYmFzZVVuaXQsIGJhc2UpO1xuICByZXR1cm4gYCR7Zm9ybWF0dGVkfSAke3VuaXR9YDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRmlsZVNpemVCYXNlMih2YWx1ZTogbnVtYmVyLCBiYXNlVW5pdDogJ2InIHwgJ0InKTogW2Zvcm1hdHRlZDogbnVtYmVyLCB1bml0OiBzdHJpbmddIHtcbiAgbGV0IGZvcm1hdHRlZCA9IHZhbHVlO1xuICBsZXQgaW5jcmVtZW50ID0gMTtcbiAgd2hpbGUgKGZvcm1hdHRlZCA+PSBLaUIgJiYgaW5jcmVtZW50IDwgWWlCKSB7XG4gICAgaW5jcmVtZW50ICo9IEtpQjtcbiAgICBmb3JtYXR0ZWQgPSB2YWx1ZSAvIGluY3JlbWVudDtcbiAgfVxuICBmb3JtYXR0ZWQgPSBNYXRoLnJvdW5kKChmb3JtYXR0ZWQgKyBOdW1iZXIuRVBTSUxPTikgKiAxMDApIC8gMTAwO1xuICBzd2l0Y2ggKGluY3JlbWVudCkge1xuICAgIGNhc2UgS2lCOlxuICAgICAgcmV0dXJuIFtmb3JtYXR0ZWQsICdLaScgKyBiYXNlVW5pdF07XG4gICAgY2FzZSBNaUI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ01pJyArIGJhc2VVbml0XTtcbiAgICBjYXNlIEdpQjpcbiAgICAgIHJldHVybiBbZm9ybWF0dGVkLCAnR2knICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgVGlCOlxuICAgICAgcmV0dXJuIFtmb3JtYXR0ZWQsICdUaScgKyBiYXNlVW5pdF07XG4gICAgY2FzZSBQaUI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ1BpJyArIGJhc2VVbml0XTtcbiAgICBjYXNlIEVpQjpcbiAgICAgIHJldHVybiBbZm9ybWF0dGVkLCAnRWknICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgWmlCOlxuICAgICAgcmV0dXJuIFtmb3JtYXR0ZWQsICdaaScgKyBiYXNlVW5pdF07XG4gICAgY2FzZSBZaUI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ1lpJyArIGJhc2VVbml0XTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFtmb3JtYXR0ZWQsIGJhc2VVbml0XTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVGaWxlU2l6ZUJhc2UxMCh2YWx1ZTogbnVtYmVyLCBiYXNlVW5pdDogJ2InIHwgJ0InKTogW2Zvcm1hdHRlZDogbnVtYmVyLCB1bml0OiBzdHJpbmddIHtcbiAgbGV0IGZvcm1hdHRlZCA9IHZhbHVlO1xuICBsZXQgaW5jcmVtZW50ID0gMTtcbiAgd2hpbGUgKGZvcm1hdHRlZCA+PSBrYiAmJiBpbmNyZW1lbnQgPCBZYikge1xuICAgIGluY3JlbWVudCAqPSBrYjtcbiAgICBmb3JtYXR0ZWQgPSB2YWx1ZSAvIGluY3JlbWVudDtcbiAgfVxuICBmb3JtYXR0ZWQgPSBNYXRoLnJvdW5kKChmb3JtYXR0ZWQgKyBOdW1iZXIuRVBTSUxPTikgKiAxMDApIC8gMTAwO1xuICBzd2l0Y2ggKGluY3JlbWVudCkge1xuICAgIGNhc2Uga2I6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ2snICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgTWI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ00nICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgR2I6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ0cnICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgVGI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ1QnICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgUGI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ1AnICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgRWI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ0UnICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgWmI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ1onICsgYmFzZVVuaXRdO1xuICAgIGNhc2UgWWI6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgJ1knICsgYmFzZVVuaXRdO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW2Zvcm1hdHRlZCwgYmFzZVVuaXRdO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=