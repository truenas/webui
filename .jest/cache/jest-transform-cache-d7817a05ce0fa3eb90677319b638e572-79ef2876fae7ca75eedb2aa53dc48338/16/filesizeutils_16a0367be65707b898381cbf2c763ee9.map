{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/file-size.utils.ts","mappings":";;AAOA,8CAMC;AAED,0DAOC;AAtBD,+DAEqC;AACrC,iEAEsC;AAEtC,SAAgB,iBAAiB,CAC/B,KAAa,EACb,WAAsB,GAAG,EACzB,OAAe,CAAC;IAEhB,OAAO,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC1G,CAAC;AAED,SAAgB,uBAAuB,CACrC,KAAa,EACb,WAAsB,GAAG,EACzB,OAAe,CAAC;IAEhB,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnE,OAAO,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;AAChC,CAAC;AAED,SAAS,sBAAsB,CAAC,KAAa,EAAE,QAAmB;IAChE,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,OAAO,SAAS,IAAI,oBAAG,IAAI,SAAS,GAAG,oBAAG,EAAE,CAAC;QAC3C,SAAS,IAAI,oBAAG,CAAC;QACjB,SAAS,GAAG,KAAK,GAAG,SAAS,CAAC;IAChC,CAAC;IACD,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACjE,QAAQ,SAAS,EAAE,CAAC;QAClB,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC,KAAK,oBAAG;YACN,OAAO,CAAC,SAAS,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QACtC;YACE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACjC,CAAC;AACH,CAAC;AAED,SAAS,uBAAuB,CAAC,KAAa,EAAE,QAAmB;IACjE,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,OAAO,SAAS,IAAI,kBAAE,IAAI,SAAS,GAAG,kBAAE,EAAE,CAAC;QACzC,SAAS,IAAI,kBAAE,CAAC;QAChB,SAAS,GAAG,KAAK,GAAG,SAAS,CAAC;IAChC,CAAC;IACD,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACjE,QAAQ,SAAS,EAAE,CAAC;QAClB,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC,KAAK,kBAAE;YACL,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;QACrC;YACE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACjC,CAAC;AACH,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/file-size.utils.ts"],"sourcesContent":["import {\n  Gb, kb, Mb, Tb, Pb, Eb, Zb, Yb,\n} from 'app/constants/bits.constant';\nimport {\n  GiB, KiB, MiB, PiB, TiB, EiB, ZiB, YiB,\n} from 'app/constants/bytes.constant';\n\nexport function normalizeFileSize(\n  value: number,\n  baseUnit: 'b' | 'B' = 'B',\n  base: 10 | 2 = 2,\n): [formatted: number, unit: string] {\n  return base === 10 ? normalizeFileSizeBase10(value, baseUnit) : normalizeFileSizeBase2(value, baseUnit);\n}\n\nexport function buildNormalizedFileSize(\n  value: number,\n  baseUnit: 'b' | 'B' = 'B',\n  base: 10 | 2 = 2,\n): string {\n  const [formatted, unit] = normalizeFileSize(value, baseUnit, base);\n  return `${formatted} ${unit}`;\n}\n\nfunction normalizeFileSizeBase2(value: number, baseUnit: 'b' | 'B'): [formatted: number, unit: string] {\n  let formatted = value;\n  let increment = 1;\n  while (formatted >= KiB && increment < YiB) {\n    increment *= KiB;\n    formatted = value / increment;\n  }\n  formatted = Math.round((formatted + Number.EPSILON) * 100) / 100;\n  switch (increment) {\n    case KiB:\n      return [formatted, 'Ki' + baseUnit];\n    case MiB:\n      return [formatted, 'Mi' + baseUnit];\n    case GiB:\n      return [formatted, 'Gi' + baseUnit];\n    case TiB:\n      return [formatted, 'Ti' + baseUnit];\n    case PiB:\n      return [formatted, 'Pi' + baseUnit];\n    case EiB:\n      return [formatted, 'Ei' + baseUnit];\n    case ZiB:\n      return [formatted, 'Zi' + baseUnit];\n    case YiB:\n      return [formatted, 'Yi' + baseUnit];\n    default:\n      return [formatted, baseUnit];\n  }\n}\n\nfunction normalizeFileSizeBase10(value: number, baseUnit: 'b' | 'B'): [formatted: number, unit: string] {\n  let formatted = value;\n  let increment = 1;\n  while (formatted >= kb && increment < Yb) {\n    increment *= kb;\n    formatted = value / increment;\n  }\n  formatted = Math.round((formatted + Number.EPSILON) * 100) / 100;\n  switch (increment) {\n    case kb:\n      return [formatted, 'k' + baseUnit];\n    case Mb:\n      return [formatted, 'M' + baseUnit];\n    case Gb:\n      return [formatted, 'G' + baseUnit];\n    case Tb:\n      return [formatted, 'T' + baseUnit];\n    case Pb:\n      return [formatted, 'P' + baseUnit];\n    case Eb:\n      return [formatted, 'E' + baseUnit];\n    case Zb:\n      return [formatted, 'Z' + baseUnit];\n    case Yb:\n      return [formatted, 'Y' + baseUnit];\n    default:\n      return [formatted, baseUnit];\n  }\n}\n"],"version":3}