{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/update.service.spec.ts","mappings":";;AAAA,iDAAgF;AAChF,4FAAuF;AACvF,sFAAsF;AACtF,6DAAmD;AACnD,gEAA4D;AAE5D,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,SAA0C,CAAC;IAC/C,MAAM,aAAa,GAAG,IAAA,2BAAoB,EAAC;QACzC,OAAO,EAAE,8BAAa;QACtB,SAAS,EAAE;YACT,IAAA,oCAAa,EAAC;gBACZ,IAAA,+BAAQ,EAAC,gBAAgB,EAAE,WAAW,CAAC;aACxC,CAAC;YACF;gBACE,OAAO,EAAE,sBAAM;gBACf,QAAQ,EAAE;oBACR,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;qBAClB;iBACF;aACF;SACF;KACF,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,aAAa,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qFAAqF,EAAE,GAAG,EAAE;QAC7F,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAS,sBAAM,CAAC,CAAC;QAEhD,YAAY;QACZ,SAAS,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,SAAS,EAAE,CAAC;QAEpD,yBAAyB;QACzB,SAAS,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,SAAS,EAAE,CAAC;QAEpD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAEtD,kBAAkB;QAClB,SAAS,CAAC,MAAM,CAAC,6CAAoB,CAAC,CAAC,QAAQ,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;QAE/E,SAAS,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,SAAS,EAAE,CAAC;QAEpD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/update.service.spec.ts"],"sourcesContent":["import { createServiceFactory, SpectatorService } from '@ngneat/spectator/jest';\nimport { MockWebSocketService } from 'app/core/testing/classes/mock-websocket.service';\nimport { mockCall, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { UpdateService } from 'app/services/update.service';\n\ndescribe('UpdateService', () => {\n  let spectator: SpectatorService<UpdateService>;\n  const createService = createServiceFactory({\n    service: UpdateService,\n    providers: [\n      mockWebSocket([\n        mockCall('system.boot_id', 'boot-id-1'),\n      ]),\n      {\n        provide: WINDOW,\n        useValue: {\n          location: {\n            reload: jest.fn(),\n          },\n        },\n      },\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createService();\n  });\n\n  it('compares boot id with last seen boot id and hard refreshes if there is a difference', () => {\n    const window = spectator.inject<Window>(WINDOW);\n\n    // Store id.\n    spectator.service.hardRefreshIfNeeded().subscribe();\n\n    // Receive same id again.\n    spectator.service.hardRefreshIfNeeded().subscribe();\n\n    expect(window.location.reload).not.toHaveBeenCalled();\n\n    // Receive new id.\n    spectator.inject(MockWebSocketService).mockCall('system.boot_id', 'boot-id-2');\n\n    spectator.service.hardRefreshIfNeeded().subscribe();\n\n    expect(window.location.reload).toHaveBeenCalled();\n  });\n});\n"],"version":3}