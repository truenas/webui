b26806e99c0273b774807755ed6ec483
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetDetailsCardComponent = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const dataset_enum_1 = require("app/enums/dataset.enum");
const on_off_enum_1 = require("app/enums/on-off.enum");
const role_enum_1 = require("app/enums/role.enum");
const zfs_property_source_enum_1 = require("app/enums/zfs-property-source.enum");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const dataset_form_component_1 = require("app/pages/datasets/components/dataset-form/dataset-form.component");
const delete_dataset_dialog_component_1 = require("app/pages/datasets/components/delete-dataset-dialog/delete-dataset-dialog.component");
const zvol_form_component_1 = require("app/pages/datasets/components/zvol-form/zvol-form.component");
const dataset_store_service_1 = require("app/pages/datasets/store/dataset-store.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const ws_service_1 = require("app/services/ws.service");
const i0 = __importStar(require("@angular/core"));
let DatasetDetailsCardComponent = class DatasetDetailsCardComponent {
    constructor(translate, matDialog, datasetStore, slideInService, errorHandler, router, ws, snackbar) {
        this.translate = translate;
        this.matDialog = matDialog;
        this.datasetStore = datasetStore;
        this.slideInService = slideInService;
        this.errorHandler = errorHandler;
        this.router = router;
        this.ws = ws;
        this.snackbar = snackbar;
        this.dataset = core_1.input.required();
        this.Role = role_enum_1.Role;
        this.OnOff = on_off_enum_1.OnOff;
        this.datasetCompression = (0, core_1.computed)(() => {
            var _a, _b, _c, _d;
            return ((_b = (_a = this.dataset()) === null || _a === void 0 ? void 0 : _a.compression) === null || _b === void 0 ? void 0 : _b.source) === zfs_property_source_enum_1.ZfsPropertySource.Inherited
                ? this.translate.instant('Inherit ({value})', { value: (_c = this.dataset().compression) === null || _c === void 0 ? void 0 : _c.value })
                : (_d = this.dataset().compression) === null || _d === void 0 ? void 0 : _d.value;
        });
        this.isFilesystem = (0, core_1.computed)(() => this.dataset().type === dataset_enum_1.DatasetType.Filesystem);
        this.isZvol = (0, core_1.computed)(() => this.dataset().type === dataset_enum_1.DatasetType.Volume);
        this.hasComments = (0, core_1.computed)(() => {
            var _a, _b, _c;
            return ((_a = this.dataset().comments) === null || _a === void 0 ? void 0 : _a.source) === zfs_property_source_enum_1.ZfsPropertySource.Local && !!((_c = (_b = this.dataset().comments) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.length);
        });
        this.canBePromoted = (0, core_1.computed)(() => { var _a; return Boolean((_a = this.dataset().origin) === null || _a === void 0 ? void 0 : _a.parsed); });
    }
    deleteDataset() {
        this.matDialog.open(delete_dataset_dialog_component_1.DeleteDatasetDialogComponent, { data: this.dataset() })
            .afterClosed()
            .pipe((0, operators_1.filter)(Boolean), (0, operators_1.switchMap)(() => {
            this.datasetStore.datasetUpdated();
            return this.datasetStore.selectedParentDataset$.pipe((0, operators_1.first)());
        }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((parent) => {
            this.router.navigate(['/datasets', parent === null || parent === void 0 ? void 0 : parent.id], { state: { hideMobileDetails: true } });
        });
    }
    promoteDataset() {
        this.ws.call('pool.dataset.promote', [this.dataset().id])
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.snackbar.success(this.translate.instant('Dataset promoted successfully.'));
            this.datasetStore.datasetUpdated();
        });
    }
    editDataset() {
        const slideInRef = this.slideInService.open(dataset_form_component_1.DatasetFormComponent, {
            wide: true, data: { datasetId: this.dataset().id, isNew: false },
        });
        slideInRef.slideInClosed$.pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.datasetStore.datasetUpdated());
    }
    editZvol() {
        const slideInRef = this.slideInService.open(zvol_form_component_1.ZvolFormComponent, {
            data: { isNew: false, parentId: this.dataset().id },
        });
        slideInRef.slideInClosed$.pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => this.datasetStore.datasetUpdated());
    }
};
exports.DatasetDetailsCardComponent = DatasetDetailsCardComponent;
DatasetDetailsCardComponent.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: dialog_1.MatDialog },
    { type: dataset_store_service_1.DatasetTreeStore },
    { type: ix_slide_in_service_1.IxSlideInService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: router_1.Router },
    { type: ws_service_1.WebSocketService },
    { type: snackbar_service_1.SnackbarService }
];
DatasetDetailsCardComponent.propDecorators = {
    dataset: [{ type: i0.Input, args: [{ isSignal: true, alias: "dataset", required: true, transform: undefined },] }]
};
exports.DatasetDetailsCardComponent = DatasetDetailsCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-dataset-details-card',
        template: require("./dataset-details-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], DatasetDetailsCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,