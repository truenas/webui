c36b0f63b2daf4c931c840247392ccfa
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusService = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
let FocusService = class FocusService {
    constructor(document) {
        this.document = document;
        this.lastFocusedElement = null;
        this.focusableSelectors = [
            'a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"])',
            'select:not([disabled])', 'textarea:not([disabled])',
            'button:not([disabled])', 'iframe', 'object', 'embed',
            '[contenteditable]', '[tabindex]:not([tabindex="-1"])',
        ];
    }
    captureCurrentFocus() {
        this.lastFocusedElement = this.document.activeElement;
    }
    restoreFocus() {
        if (this.lastFocusedElement) {
            setTimeout(() => {
                var _a, _b;
                const dataTestValue = (_a = this.lastFocusedElement) === null || _a === void 0 ? void 0 : _a.getAttribute('data-test');
                const overlayBackdrop = this.document.querySelector('.cdk-overlay-backdrop');
                if (dataTestValue && !overlayBackdrop) {
                    const dataTestElement = this.document.querySelector(`[data-test="${dataTestValue}"]`);
                    dataTestElement === null || dataTestElement === void 0 ? void 0 : dataTestElement.focus();
                }
                else {
                    (_b = this.lastFocusedElement) === null || _b === void 0 ? void 0 : _b.focus();
                }
                this.lastFocusedElement = null;
            }, 200);
        }
    }
    focusElementById(id) {
        var _a;
        (_a = this.document.getElementById(id)) === null || _a === void 0 ? void 0 : _a.focus();
    }
    focusFirstFocusableElement(element) {
        if (!element)
            return;
        const focusableElements = this.getFocusableElements(element);
        if (this.getFocusableElements(element).length > 0) {
            const firstFocusable = focusableElements[0];
            firstFocusable.focus();
        }
    }
    getFocusableElements(wrapper) {
        const elements = wrapper.querySelectorAll(this.focusableSelectors.join(', '));
        return Array.from(elements);
    }
};
exports.FocusService = FocusService;
FocusService.ctorParameters = () => [
    { type: Document, decorators: [{ type: core_1.Inject, args: [common_1.DOCUMENT,] }] }
];
exports.FocusService = FocusService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], FocusService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2ZvY3VzLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNENBQTJDO0FBQzNDLHdDQUFtRDtBQUs1QyxJQUFNLFlBQVksR0FBbEIsTUFBTSxZQUFZO0lBQ3ZCLFlBQzRCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFHcEMsdUJBQWtCLEdBQXVCLElBQUksQ0FBQztRQUU5Qyx1QkFBa0IsR0FBRztZQUMzQixTQUFTLEVBQUUsWUFBWSxFQUFFLDRDQUE0QztZQUNyRSx3QkFBd0IsRUFBRSwwQkFBMEI7WUFDcEQsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPO1lBQ3JELG1CQUFtQixFQUFFLGlDQUFpQztTQUN2RCxDQUFDO0lBVEQsQ0FBQztJQVdGLG1CQUFtQjtRQUNqQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUE0QixDQUFDO0lBQ3ZFLENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUM1QixVQUFVLENBQUMsR0FBRyxFQUFFOztnQkFDZCxNQUFNLGFBQWEsR0FBRyxNQUFBLElBQUksQ0FBQyxrQkFBa0IsMENBQUUsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN6RSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUU3RSxJQUFJLGFBQWEsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO29CQUN0QyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxlQUFlLGFBQWEsSUFBSSxDQUFDLENBQUM7b0JBQ3JGLGVBQStCLGFBQS9CLGVBQWUsdUJBQWYsZUFBZSxDQUFrQixLQUFLLEVBQUUsQ0FBQztnQkFDNUMsQ0FBQztxQkFBTSxDQUFDO29CQUNOLE1BQUEsSUFBSSxDQUFDLGtCQUFrQiwwQ0FBRSxLQUFLLEVBQUUsQ0FBQztnQkFDbkMsQ0FBQztnQkFFRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1lBQ2pDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNWLENBQUM7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBVTs7UUFDekIsTUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsMENBQUUsS0FBSyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELDBCQUEwQixDQUFDLE9BQW9CO1FBQzdDLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTztRQUVyQixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3RCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbEQsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLENBQUM7SUFDSCxDQUFDO0lBRUQsb0JBQW9CLENBQUMsT0FBb0I7UUFDdkMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5RSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFrQixDQUFDO0lBQy9DLENBQUM7O0FBckRRLG9DQUFZOzsyQ0FFcEIsYUFBTSxTQUFDLGlCQUFROzt1QkFGUCxZQUFZO0lBSHhCLElBQUEsaUJBQVUsRUFBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyxZQUFZLENBc0R4QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvc2VydmljZXMvZm9jdXMuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEZvY3VzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50LFxuICApIHt9XG5cbiAgICBwcml2YXRlIGxhc3RGb2N1c2VkRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIHByaXZhdGUgZm9jdXNhYmxlU2VsZWN0b3JzID0gW1xuICAgICAgJ2FbaHJlZl0nLCAnYXJlYVtocmVmXScsICdpbnB1dDpub3QoW2Rpc2FibGVkXSk6bm90KFt0eXBlPVwiaGlkZGVuXCJdKScsXG4gICAgICAnc2VsZWN0Om5vdChbZGlzYWJsZWRdKScsICd0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSknLFxuICAgICAgJ2J1dHRvbjpub3QoW2Rpc2FibGVkXSknLCAnaWZyYW1lJywgJ29iamVjdCcsICdlbWJlZCcsXG4gICAgICAnW2NvbnRlbnRlZGl0YWJsZV0nLCAnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVwiLTFcIl0pJyxcbiAgICBdO1xuXG4gICAgY2FwdHVyZUN1cnJlbnRGb2N1cygpOiB2b2lkIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzZWRFbGVtZW50ID0gdGhpcy5kb2N1bWVudC5hY3RpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgIH1cblxuICAgIHJlc3RvcmVGb2N1cygpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLmxhc3RGb2N1c2VkRWxlbWVudCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBjb25zdCBkYXRhVGVzdFZhbHVlID0gdGhpcy5sYXN0Rm9jdXNlZEVsZW1lbnQ/LmdldEF0dHJpYnV0ZSgnZGF0YS10ZXN0Jyk7XG4gICAgICAgICAgY29uc3Qgb3ZlcmxheUJhY2tkcm9wID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2RrLW92ZXJsYXktYmFja2Ryb3AnKTtcblxuICAgICAgICAgIGlmIChkYXRhVGVzdFZhbHVlICYmICFvdmVybGF5QmFja2Ryb3ApIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFUZXN0RWxlbWVudCA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdGVzdD1cIiR7ZGF0YVRlc3RWYWx1ZX1cIl1gKTtcbiAgICAgICAgICAgIChkYXRhVGVzdEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpPy5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RGb2N1c2VkRWxlbWVudD8uZm9jdXMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmxhc3RGb2N1c2VkRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0sIDIwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9jdXNFbGVtZW50QnlJZChpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKT8uZm9jdXMoKTtcbiAgICB9XG5cbiAgICBmb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm47XG5cbiAgICAgIGNvbnN0IGZvY3VzYWJsZUVsZW1lbnRzID0gdGhpcy5nZXRGb2N1c2FibGVFbGVtZW50cyhlbGVtZW50KTtcbiAgICAgIGlmICh0aGlzLmdldEZvY3VzYWJsZUVsZW1lbnRzKGVsZW1lbnQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZmlyc3RGb2N1c2FibGUgPSBmb2N1c2FibGVFbGVtZW50c1swXTtcbiAgICAgICAgZmlyc3RGb2N1c2FibGUuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRGb2N1c2FibGVFbGVtZW50cyh3cmFwcGVyOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50W10ge1xuICAgICAgY29uc3QgZWxlbWVudHMgPSB3cmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5mb2N1c2FibGVTZWxlY3RvcnMuam9pbignLCAnKSk7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50cykgYXMgSFRNTEVsZW1lbnRbXTtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=