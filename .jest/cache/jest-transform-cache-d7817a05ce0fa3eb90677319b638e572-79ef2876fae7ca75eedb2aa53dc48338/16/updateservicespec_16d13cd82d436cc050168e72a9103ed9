d227e50d3f018b0207477793c6a87a02
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jest_1 = require("@ngneat/spectator/jest");
const mock_websocket_service_1 = require("app/core/testing/classes/mock-websocket.service");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const window_helper_1 = require("app/helpers/window.helper");
const update_service_1 = require("app/services/update.service");
describe('UpdateService', () => {
    let spectator;
    const createService = (0, jest_1.createServiceFactory)({
        service: update_service_1.UpdateService,
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('system.boot_id', 'boot-id-1'),
            ]),
            {
                provide: window_helper_1.WINDOW,
                useValue: {
                    location: {
                        reload: jest.fn(),
                    },
                },
            },
        ],
    });
    beforeEach(() => {
        spectator = createService();
    });
    it('compares boot id with last seen boot id and hard refreshes if there is a difference', () => {
        const window = spectator.inject(window_helper_1.WINDOW);
        // Store id.
        spectator.service.hardRefreshIfNeeded().subscribe();
        // Receive same id again.
        spectator.service.hardRefreshIfNeeded().subscribe();
        expect(window.location.reload).not.toHaveBeenCalled();
        // Receive new id.
        spectator.inject(mock_websocket_service_1.MockWebSocketService).mockCall('system.boot_id', 'boot-id-2');
        spectator.service.hardRefreshIfNeeded().subscribe();
        expect(window.location.reload).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3VwZGF0ZS5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBZ0Y7QUFDaEYsNEZBQXVGO0FBQ3ZGLHNGQUFzRjtBQUN0Riw2REFBbUQ7QUFDbkQsZ0VBQTREO0FBRTVELFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLElBQUksU0FBMEMsQ0FBQztJQUMvQyxNQUFNLGFBQWEsR0FBRyxJQUFBLDJCQUFvQixFQUFDO1FBQ3pDLE9BQU8sRUFBRSw4QkFBYTtRQUN0QixTQUFTLEVBQUU7WUFDVCxJQUFBLG9DQUFhLEVBQUM7Z0JBQ1osSUFBQSwrQkFBUSxFQUFDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQzthQUN4QyxDQUFDO1lBQ0Y7Z0JBQ0UsT0FBTyxFQUFFLHNCQUFNO2dCQUNmLFFBQVEsRUFBRTtvQkFDUixRQUFRLEVBQUU7d0JBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7cUJBQ2xCO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxTQUFTLEdBQUcsYUFBYSxFQUFFLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUZBQXFGLEVBQUUsR0FBRyxFQUFFO1FBQzdGLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQVMsc0JBQU0sQ0FBQyxDQUFDO1FBRWhELFlBQVk7UUFDWixTQUFTLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFcEQseUJBQXlCO1FBQ3pCLFNBQVMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVwRCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV0RCxrQkFBa0I7UUFDbEIsU0FBUyxDQUFDLE1BQU0sQ0FBQyw2Q0FBb0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUUvRSxTQUFTLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy91cGRhdGUuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlcnZpY2VGYWN0b3J5LCBTcGVjdGF0b3JTZXJ2aWNlIH0gZnJvbSAnQG5nbmVhdC9zcGVjdGF0b3IvamVzdCc7XG5pbXBvcnQgeyBNb2NrV2ViU29ja2V0U2VydmljZSB9IGZyb20gJ2FwcC9jb3JlL3Rlc3RpbmcvY2xhc3Nlcy9tb2NrLXdlYnNvY2tldC5zZXJ2aWNlJztcbmltcG9ydCB7IG1vY2tDYWxsLCBtb2NrV2ViU29ja2V0IH0gZnJvbSAnYXBwL2NvcmUvdGVzdGluZy91dGlscy9tb2NrLXdlYnNvY2tldC51dGlscyc7XG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICdhcHAvaGVscGVycy93aW5kb3cuaGVscGVyJztcbmltcG9ydCB7IFVwZGF0ZVNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvdXBkYXRlLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnVXBkYXRlU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNwZWN0YXRvcjogU3BlY3RhdG9yU2VydmljZTxVcGRhdGVTZXJ2aWNlPjtcbiAgY29uc3QgY3JlYXRlU2VydmljZSA9IGNyZWF0ZVNlcnZpY2VGYWN0b3J5KHtcbiAgICBzZXJ2aWNlOiBVcGRhdGVTZXJ2aWNlLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgbW9ja1dlYlNvY2tldChbXG4gICAgICAgIG1vY2tDYWxsKCdzeXN0ZW0uYm9vdF9pZCcsICdib290LWlkLTEnKSxcbiAgICAgIF0pLFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBXSU5ET1csXG4gICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIHJlbG9hZDogamVzdC5mbigpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHNwZWN0YXRvciA9IGNyZWF0ZVNlcnZpY2UoKTtcbiAgfSk7XG5cbiAgaXQoJ2NvbXBhcmVzIGJvb3QgaWQgd2l0aCBsYXN0IHNlZW4gYm9vdCBpZCBhbmQgaGFyZCByZWZyZXNoZXMgaWYgdGhlcmUgaXMgYSBkaWZmZXJlbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdpbmRvdyA9IHNwZWN0YXRvci5pbmplY3Q8V2luZG93PihXSU5ET1cpO1xuXG4gICAgLy8gU3RvcmUgaWQuXG4gICAgc3BlY3RhdG9yLnNlcnZpY2UuaGFyZFJlZnJlc2hJZk5lZWRlZCgpLnN1YnNjcmliZSgpO1xuXG4gICAgLy8gUmVjZWl2ZSBzYW1lIGlkIGFnYWluLlxuICAgIHNwZWN0YXRvci5zZXJ2aWNlLmhhcmRSZWZyZXNoSWZOZWVkZWQoKS5zdWJzY3JpYmUoKTtcblxuICAgIGV4cGVjdCh3aW5kb3cubG9jYXRpb24ucmVsb2FkKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuXG4gICAgLy8gUmVjZWl2ZSBuZXcgaWQuXG4gICAgc3BlY3RhdG9yLmluamVjdChNb2NrV2ViU29ja2V0U2VydmljZSkubW9ja0NhbGwoJ3N5c3RlbS5ib290X2lkJywgJ2Jvb3QtaWQtMicpO1xuXG4gICAgc3BlY3RhdG9yLnNlcnZpY2UuaGFyZFJlZnJlc2hJZk5lZWRlZCgpLnN1YnNjcmliZSgpO1xuXG4gICAgZXhwZWN0KHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==