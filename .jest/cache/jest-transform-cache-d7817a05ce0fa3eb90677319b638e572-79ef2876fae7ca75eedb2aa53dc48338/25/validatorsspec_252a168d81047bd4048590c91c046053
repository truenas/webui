ee2d1ba13a2c683f64d13641a508f52d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const forms_1 = require("@angular/forms");
const validators_1 = require("app/services/validators");
describe('ValidationService', () => {
    const value1 = 'value1';
    const value2 = 'value2';
    let formGroup;
    beforeEach(() => {
        formGroup = new forms_1.FormGroup({
            value1: new forms_1.FormControl(0),
            value2: new forms_1.FormControl(0),
        }, {
            validators: [
                (0, validators_1.greaterThanFg)(value1, [value2], 'Greater than error'),
            ],
        });
    });
    it('should have greatherThan error when value1 is smaller', () => {
        formGroup.get(value1).setValue(0);
        formGroup.get(value2).setValue(1);
        formGroup.updateValueAndValidity();
        expect(formGroup.valid).toBeFalsy();
        expect(formGroup.get(value1).errors).toEqual({
            greaterThan: { message: 'Greater than error' },
        });
    });
    it('should have greatherThan error when value1 is equal', () => {
        formGroup.get(value1).setValue(0);
        formGroup.get(value2).setValue(0);
        formGroup.updateValueAndValidity();
        // expect(formGroup.valid).toBeFalsy();
        expect(formGroup.get(value1).errors).toEqual({
            greaterThan: { message: 'Greater than error' },
        });
    });
    it('should not have greatherThan error when value1 is greater', () => {
        formGroup.get(value1).setValue(1);
        formGroup.get(value2).setValue(0);
        formGroup.updateValueAndValidity();
        expect(formGroup.valid).toBeTruthy();
        expect(formGroup.get(value1).errors).toBeFalsy();
    });
    it('should throw error if value2 doesnt exist in formGroup', () => {
        expect(() => {
            formGroup = new forms_1.FormGroup({
                value1: new forms_1.FormControl(0),
            }, {
                validators: [
                    (0, validators_1.greaterThanFg)(value1, [value2], 'Greater than error'),
                ],
            });
            formGroup.get(value1).updateValueAndValidity();
        }).toThrow('greaterThanValidator(): other control is not found in the group');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3ZhbGlkYXRvcnMuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDBDQUF3RDtBQUN4RCx3REFBd0Q7QUFFeEQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDeEIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBQ3hCLElBQUksU0FBb0IsQ0FBQztJQUN6QixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsU0FBUyxHQUFHLElBQUksaUJBQVMsQ0FBQztZQUN4QixNQUFNLEVBQUUsSUFBSSxtQkFBVyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSSxtQkFBVyxDQUFDLENBQUMsQ0FBQztTQUMzQixFQUFFO1lBQ0QsVUFBVSxFQUFFO2dCQUNWLElBQUEsMEJBQWEsRUFBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxvQkFBb0IsQ0FBQzthQUN0RDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVEQUF1RCxFQUFFLEdBQUcsRUFBRTtRQUMvRCxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxTQUFTLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMzQyxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUU7U0FDL0MsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO1FBQzdELFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ25DLHVDQUF1QztRQUN2QyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDM0MsV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFO1NBQy9DLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDJEQUEyRCxFQUFFLEdBQUcsRUFBRTtRQUNuRSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxTQUFTLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtRQUNoRSxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsU0FBUyxHQUFHLElBQUksaUJBQVMsQ0FBQztnQkFDeEIsTUFBTSxFQUFFLElBQUksbUJBQVcsQ0FBQyxDQUFDLENBQUM7YUFDM0IsRUFBRTtnQkFDRCxVQUFVLEVBQUU7b0JBQ1YsSUFBQSwwQkFBYSxFQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLG9CQUFvQixDQUFDO2lCQUN0RDthQUNGLENBQUMsQ0FBQztZQUNILFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUVBQWlFLENBQUMsQ0FBQztJQUNoRixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy92YWxpZGF0b3JzLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGdyZWF0ZXJUaGFuRmcgfSBmcm9tICdhcHAvc2VydmljZXMvdmFsaWRhdG9ycyc7XG5cbmRlc2NyaWJlKCdWYWxpZGF0aW9uU2VydmljZScsICgpID0+IHtcbiAgY29uc3QgdmFsdWUxID0gJ3ZhbHVlMSc7XG4gIGNvbnN0IHZhbHVlMiA9ICd2YWx1ZTInO1xuICBsZXQgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGZvcm1Hcm91cCA9IG5ldyBGb3JtR3JvdXAoe1xuICAgICAgdmFsdWUxOiBuZXcgRm9ybUNvbnRyb2woMCksXG4gICAgICB2YWx1ZTI6IG5ldyBGb3JtQ29udHJvbCgwKSxcbiAgICB9LCB7XG4gICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgIGdyZWF0ZXJUaGFuRmcodmFsdWUxLCBbdmFsdWUyXSwgJ0dyZWF0ZXIgdGhhbiBlcnJvcicpLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGdyZWF0aGVyVGhhbiBlcnJvciB3aGVuIHZhbHVlMSBpcyBzbWFsbGVyJywgKCkgPT4ge1xuICAgIGZvcm1Hcm91cC5nZXQodmFsdWUxKS5zZXRWYWx1ZSgwKTtcbiAgICBmb3JtR3JvdXAuZ2V0KHZhbHVlMikuc2V0VmFsdWUoMSk7XG4gICAgZm9ybUdyb3VwLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICBleHBlY3QoZm9ybUdyb3VwLnZhbGlkKS50b0JlRmFsc3koKTtcbiAgICBleHBlY3QoZm9ybUdyb3VwLmdldCh2YWx1ZTEpLmVycm9ycykudG9FcXVhbCh7XG4gICAgICBncmVhdGVyVGhhbjogeyBtZXNzYWdlOiAnR3JlYXRlciB0aGFuIGVycm9yJyB9LFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhdmUgZ3JlYXRoZXJUaGFuIGVycm9yIHdoZW4gdmFsdWUxIGlzIGVxdWFsJywgKCkgPT4ge1xuICAgIGZvcm1Hcm91cC5nZXQodmFsdWUxKS5zZXRWYWx1ZSgwKTtcbiAgICBmb3JtR3JvdXAuZ2V0KHZhbHVlMikuc2V0VmFsdWUoMCk7XG4gICAgZm9ybUdyb3VwLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICAvLyBleHBlY3QoZm9ybUdyb3VwLnZhbGlkKS50b0JlRmFsc3koKTtcbiAgICBleHBlY3QoZm9ybUdyb3VwLmdldCh2YWx1ZTEpLmVycm9ycykudG9FcXVhbCh7XG4gICAgICBncmVhdGVyVGhhbjogeyBtZXNzYWdlOiAnR3JlYXRlciB0aGFuIGVycm9yJyB9LFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBoYXZlIGdyZWF0aGVyVGhhbiBlcnJvciB3aGVuIHZhbHVlMSBpcyBncmVhdGVyJywgKCkgPT4ge1xuICAgIGZvcm1Hcm91cC5nZXQodmFsdWUxKS5zZXRWYWx1ZSgxKTtcbiAgICBmb3JtR3JvdXAuZ2V0KHZhbHVlMikuc2V0VmFsdWUoMCk7XG4gICAgZm9ybUdyb3VwLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICBleHBlY3QoZm9ybUdyb3VwLnZhbGlkKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGZvcm1Hcm91cC5nZXQodmFsdWUxKS5lcnJvcnMpLnRvQmVGYWxzeSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGlmIHZhbHVlMiBkb2VzbnQgZXhpc3QgaW4gZm9ybUdyb3VwJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBmb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcbiAgICAgICAgdmFsdWUxOiBuZXcgRm9ybUNvbnRyb2woMCksXG4gICAgICB9LCB7XG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICBncmVhdGVyVGhhbkZnKHZhbHVlMSwgW3ZhbHVlMl0sICdHcmVhdGVyIHRoYW4gZXJyb3InKSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgICAgZm9ybUdyb3VwLmdldCh2YWx1ZTEpLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICB9KS50b1Rocm93KCdncmVhdGVyVGhhblZhbGlkYXRvcigpOiBvdGhlciBjb250cm9sIGlzIG5vdCBmb3VuZCBpbiB0aGUgZ3JvdXAnKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==