{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/badge.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n//# sourceMappingURL=badge.mjs.map\n"],
  "mappings": "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",
  "names": ["import_core"]
}
