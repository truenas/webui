d50c550d365c87ed33a72fd048c9ddb7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fakeFile = fakeFile;
const mimeTypes = __importStar(require("mime-types"));
function fakeFile(name = 'test.txt', size = 1024) {
    const bits = [new Array(size).fill(0).join('')];
    const mimeType = mimeTypes.lookup(name) || 'text/plain';
    const file = new File(bits, name, { type: mimeType });
    file.text = (() => Promise.resolve('test_text'));
    return file;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2NvcmUvdGVzdGluZy91dGlscy9mYWtlLWZpbGUudWl0bHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLDRCQU1DO0FBUkQsc0RBQXdDO0FBRXhDLFNBQWdCLFFBQVEsQ0FBQyxJQUFJLEdBQUcsVUFBVSxFQUFFLElBQUksR0FBRyxJQUFJO0lBQ3JELE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDO0lBQ3hELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvY29yZS90ZXN0aW5nL3V0aWxzL2Zha2UtZmlsZS51aXRscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtaW1lVHlwZXMgZnJvbSAnbWltZS10eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBmYWtlRmlsZShuYW1lID0gJ3Rlc3QudHh0Jywgc2l6ZSA9IDEwMjQpOiBGaWxlIHtcbiAgY29uc3QgYml0cyA9IFtuZXcgQXJyYXkoc2l6ZSkuZmlsbCgwKS5qb2luKCcnKV07XG4gIGNvbnN0IG1pbWVUeXBlID0gbWltZVR5cGVzLmxvb2t1cChuYW1lKSB8fCAndGV4dC9wbGFpbic7XG4gIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShiaXRzLCBuYW1lLCB7IHR5cGU6IG1pbWVUeXBlIH0pO1xuICBmaWxlLnRleHQgPSAoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCd0ZXN0X3RleHQnKSk7XG4gIHJldHVybiBmaWxlO1xufVxuIl0sInZlcnNpb24iOjN9