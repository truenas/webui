9574a3df98031d4ed9f07de33ab216fd
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxComboboxComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const autocomplete_1 = require("@angular/material/autocomplete");
const core_2 = require("@angular/material/core");
const form_field_1 = require("@angular/material/form-field");
const input_1 = require("@angular/material/input");
const progress_spinner_1 = require("@angular/material/progress-spinner");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_3 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const ix_combobox_provider_1 = require("app/modules/forms/ix-forms/components/ix-combobox/ix-combobox-provider");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
const ix_label_component_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.component");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_override_directive_1 = require("app/modules/test-id/test-override/test-override.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
let IxComboboxComponent = class IxComboboxComponent {
    set provider(comboboxProvider) {
        this.comboboxProviderHandler = new ix_combobox_provider_1.IxComboboxProviderManager(comboboxProvider);
        this.cdr.markForCheck();
    }
    constructor(controlDirective, cdr) {
        this.controlDirective = controlDirective;
        this.cdr = cdr;
        this.allowCustomValue = false;
        this.options = [];
        this.getDisplayWith = this.displayWith.bind(this);
        this.hasErrorInOptions = false;
        this.loading = false;
        this.filterChanged$ = new rxjs_1.Subject();
        this.value = '';
        this.isDisabled = false;
        this.selectedOption = null;
        this.textContent = '';
        this.onChange = () => { };
        this.onTouch = () => { };
        this.controlDirective.valueAccessor = this;
    }
    writeValue(value) {
        var _a;
        this.value = value;
        if (this.value && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length)) {
            this.selectedOption = Object.assign({}, (this.options.find((option) => option.value === this.value)));
        }
        if (this.selectedOption) {
            this.filterChanged$.next('');
        }
        this.cdr.markForCheck();
    }
    ngOnInit() {
        if (this.controlDirective.value) {
            this.textContent = this.controlDirective.value;
        }
        this.filterChanged$.pipe((0, operators_1.debounceTime)(300), (0, operators_1.distinctUntilChanged)(), (0, until_destroy_1.untilDestroyed)(this)).subscribe((changedValue) => {
            if (this.filterValue === changedValue) {
                return;
            }
            this.filterValue = changedValue;
            this.filterOptions(changedValue);
        });
        this.filterChanged$.next('');
    }
    filterOptions(filterValue) {
        var _a;
        this.loading = true;
        this.cdr.markForCheck();
        (_a = this.comboboxProviderHandler) === null || _a === void 0 ? void 0 : _a.fetch(filterValue).pipe((0, operators_1.catchError)(() => {
            this.hasErrorInOptions = true;
            return rxjs_1.EMPTY;
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe((options) => {
            this.options = options;
            const selectedOptionFromLabel = this.options.find((option) => option.label === filterValue);
            if (selectedOptionFromLabel) {
                this.selectedOption = selectedOptionFromLabel;
                this.value = selectedOptionFromLabel.value;
                this.onChange(this.value);
            }
            else if (this.value !== null) {
                const selectedOptionFromValue = this.options.find((option) => option.value === this.value);
                this.selectedOption = selectedOptionFromValue
                    ? Object.assign({}, selectedOptionFromValue) : { label: this.value, value: this.value };
                if (this.selectedOption.value) {
                    this.filterChanged$.next('');
                }
            }
            this.loading = false;
            this.cdr.markForCheck();
        });
    }
    onOpenDropdown() {
        setTimeout(() => {
            if (!this.autoCompleteRef
                || !this.autocompleteTrigger
                || !this.autoCompleteRef.panel) {
                return;
            }
            (0, rxjs_1.fromEvent)(this.autoCompleteRef.panel.nativeElement, 'scroll')
                .pipe((0, operators_1.debounceTime)(300), (0, operators_1.map)(() => this.autoCompleteRef.panel.nativeElement.scrollTop), (0, operators_1.takeUntil)(this.autocompleteTrigger.panelClosingActions), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                var _a;
                const { scrollTop, scrollHeight, clientHeight: elementHeight, } = this.autoCompleteRef.panel.nativeElement;
                const atBottom = scrollHeight === scrollTop + elementHeight;
                if (!atBottom) {
                    return;
                }
                this.loading = true;
                this.cdr.markForCheck();
                (_a = this.comboboxProviderHandler) === null || _a === void 0 ? void 0 : _a.nextPage(this.filterValue !== null || this.filterValue !== undefined ? this.filterValue : '').pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((options) => {
                    this.loading = false;
                    this.cdr.markForCheck();
                    /**
                     * The following logic checks if we used a fake option to show value for an option that exists
                     * on one of the following pages of the list of options for this combobox. If we have done so
                     * previously, we want to remove that option if we managed to find the correct option on the
                     * page we just fetched
                     */
                    const valueIndex = this.options.findIndex((option) => option.label === this.value && option.value === this.value);
                    if (options.some((option) => option.value === this.value)
                        && valueIndex >= 0) {
                        this.options.splice(valueIndex, 1);
                    }
                    this.options.push(...options);
                    this.cdr.markForCheck();
                });
            });
        });
    }
    onChanged(changedValue) {
        if (this.selectedOption || this.value) {
            this.resetInput();
        }
        this.textContent = changedValue;
        this.filterChanged$.next(changedValue);
        if (this.allowCustomValue && !this.options.some((option) => option.value === changedValue)) {
            this.onChange(changedValue);
        }
    }
    resetInput() {
        var _a;
        this.filterChanged$.next('');
        if ((_a = this.inputElementRef) === null || _a === void 0 ? void 0 : _a.nativeElement) {
            this.inputElementRef.nativeElement.value = '';
        }
        this.selectedOption = null;
        this.value = null;
        this.textContent = '';
        this.onChange(null);
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    optionSelected(option) {
        this.selectedOption = Object.assign({}, option);
        this.filterChanged$.next('');
        this.value = this.selectedOption.value;
        this.onChange(this.selectedOption.value);
    }
    displayWith() {
        return this.selectedOption ? this.selectedOption.label : '';
    }
    shouldShowResetInput() {
        return this.hasValue() && !this.isDisabled;
    }
    hasValue() {
        var _a, _b;
        return ((_b = (_a = this.inputElementRef) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.value) && this.inputElementRef.nativeElement.value.length > 0;
    }
    isValueFromOptions(value) {
        return this.options.some((option) => option.label === value);
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.cdr.markForCheck();
    }
};
exports.IxComboboxComponent = IxComboboxComponent;
IxComboboxComponent.ctorParameters = () => [
    { type: forms_1.NgControl },
    { type: core_1.ChangeDetectorRef }
];
IxComboboxComponent.propDecorators = {
    label: [{ type: core_1.Input }],
    hint: [{ type: core_1.Input }],
    required: [{ type: core_1.Input }],
    tooltip: [{ type: core_1.Input }],
    allowCustomValue: [{ type: core_1.Input }],
    provider: [{ type: core_1.Input }],
    inputElementRef: [{ type: core_1.ViewChild, args: ['ixInput',] }],
    autoCompleteRef: [{ type: core_1.ViewChild, args: ['auto',] }],
    autocompleteTrigger: [{ type: core_1.ViewChild, args: [autocomplete_1.MatAutocompleteTrigger,] }]
};
exports.IxComboboxComponent = IxComboboxComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-combobox',
        template: require("./ix-combobox.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_label_component_1.IxLabelComponent,
            input_1.MatInput,
            autocomplete_1.MatAutocompleteTrigger,
            progress_spinner_1.MatProgressSpinner,
            ix_icon_component_1.IxIconComponent,
            autocomplete_1.MatAutocomplete,
            core_2.MatOption,
            ix_errors_component_1.IxErrorsComponent,
            form_field_1.MatHint,
            core_3.TranslateModule,
            test_override_directive_1.TestOverrideDirective,
            test_directive_1.TestDirective,
        ],
    })
], IxComboboxComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,