7e5904e9b7bfd9501633c7dca062ee1e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerModalHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/button/testing");
const testing_3 = require("@angular/material/checkbox/testing");
const ix_input_harness_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.harness");
class SchedulerModalHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getMinutesInput = this.locatorFor(ix_input_harness_1.IxInputHarness.with({ label: 'Minutes' }));
        this.getHoursInput = this.locatorFor(ix_input_harness_1.IxInputHarness.with({ label: 'Hours' }));
        this.getDaysInput = this.locatorFor(ix_input_harness_1.IxInputHarness.with({ label: 'Days of Month' }));
        this.getMonthCheckboxes = this.locatorForAll(testing_3.MatCheckboxHarness.with({ ancestor: '.months' }));
        this.getDaysOfWeekCheckboxes = this.locatorForAll(testing_3.MatCheckboxHarness.with({ ancestor: '.weekdays' }));
    }
    setMinutes(minutes) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield this.getMinutesInput();
            yield input.setValue(minutes);
        });
    }
    setHours(hours) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield this.getHoursInput();
            yield input.setValue(hours);
        });
    }
    setDays(days) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield this.getDaysInput();
            yield input.setValue(days);
        });
    }
    setMonths(months) {
        return __awaiter(this, void 0, void 0, function* () {
            const checkboxes = yield this.getMonthCheckboxes();
            yield (0, testing_1.parallel)(() => checkboxes.map((checkbox, i) => {
                return months.includes((i + 1))
                    ? checkbox.check()
                    : checkbox.uncheck();
            }));
        });
    }
    setDaysOfWeek(daysOfWeek) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Will break if Sunday is not the first day of the week.
            const checkboxes = yield this.getDaysOfWeekCheckboxes();
            yield (0, testing_1.parallel)(() => checkboxes.map((checkbox, i) => {
                return daysOfWeek.includes(i)
                    ? checkbox.check()
                    : checkbox.uncheck();
            }));
        });
    }
    pressDone() {
        return __awaiter(this, void 0, void 0, function* () {
            const doneButton = yield this.locatorFor(testing_2.MatButtonHarness.with({ text: 'Done' }))();
            yield doneButton.click();
        });
    }
}
exports.SchedulerModalHarness = SchedulerModalHarness;
SchedulerModalHarness.hostSelector = 'ix-scheduler-modal';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvc2NoZWR1bGVyL2NvbXBvbmVudHMvc2NoZWR1bGVyLW1vZGFsL3NjaGVkdWxlci1tb2RhbC5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUFrRTtBQUNsRSw4REFBb0U7QUFDcEUsZ0VBQXdFO0FBRXhFLHNHQUFpRztBQUVqRyxNQUFhLHFCQUFzQixTQUFRLDBCQUFnQjtJQUEzRDs7UUFHRSxvQkFBZSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdFLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQ0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekUsaUJBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGlDQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRix1QkFBa0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLDRCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUYsNEJBQXVCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyw0QkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBd0NuRyxDQUFDO0lBdENPLFVBQVUsQ0FBQyxPQUFlOztZQUM5QixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMzQyxNQUFNLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEMsQ0FBQztLQUFBO0lBRUssUUFBUSxDQUFDLEtBQWE7O1lBQzFCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixDQUFDO0tBQUE7SUFFSyxPQUFPLENBQUMsSUFBWTs7WUFDeEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDeEMsTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUM7S0FBQTtJQUVLLFNBQVMsQ0FBQyxNQUE2Qjs7WUFDM0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUNuRCxNQUFNLElBQUEsa0JBQVEsRUFBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNsRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFlLENBQUM7b0JBQzNDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO29CQUNsQixDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDO0tBQUE7SUFFSyxhQUFhLENBQUMsVUFBd0M7O1lBQzFELCtEQUErRDtZQUMvRCxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQ3hELE1BQU0sSUFBQSxrQkFBUSxFQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xELE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFzQixDQUFDO29CQUNoRCxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtvQkFDbEIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQztLQUFBO0lBRUssU0FBUzs7WUFDYixNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsMEJBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3BGLE1BQU0sVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLENBQUM7S0FBQTs7QUE5Q0gsc0RBK0NDO0FBOUNRLGtDQUFZLEdBQUcsb0JBQW9CLEFBQXZCLENBQXdCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL3NjaGVkdWxlci9jb21wb25lbnRzL3NjaGVkdWxlci1tb2RhbC9zY2hlZHVsZXItbW9kYWwuaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRIYXJuZXNzLCBwYXJhbGxlbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IE1hdEJ1dHRvbkhhcm5lc3MgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9idXR0b24vdGVzdGluZyc7XG5pbXBvcnQgeyBNYXRDaGVja2JveEhhcm5lc3MgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGVja2JveC90ZXN0aW5nJztcbmltcG9ydCB7IERheU9mVGhlV2Vla1JhbmdlLCBNb250aFJhbmdlIH0gZnJvbSAnY3Jvbi1wYXJzZXIvdHlwZXMnO1xuaW1wb3J0IHsgSXhJbnB1dEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWlucHV0L2l4LWlucHV0Lmhhcm5lc3MnO1xuXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVyTW9kYWxIYXJuZXNzIGV4dGVuZHMgQ29tcG9uZW50SGFybmVzcyB7XG4gIHN0YXRpYyBob3N0U2VsZWN0b3IgPSAnaXgtc2NoZWR1bGVyLW1vZGFsJztcblxuICBnZXRNaW51dGVzSW5wdXQgPSB0aGlzLmxvY2F0b3JGb3IoSXhJbnB1dEhhcm5lc3Mud2l0aCh7IGxhYmVsOiAnTWludXRlcycgfSkpO1xuICBnZXRIb3Vyc0lucHV0ID0gdGhpcy5sb2NhdG9yRm9yKEl4SW5wdXRIYXJuZXNzLndpdGgoeyBsYWJlbDogJ0hvdXJzJyB9KSk7XG4gIGdldERheXNJbnB1dCA9IHRoaXMubG9jYXRvckZvcihJeElucHV0SGFybmVzcy53aXRoKHsgbGFiZWw6ICdEYXlzIG9mIE1vbnRoJyB9KSk7XG4gIGdldE1vbnRoQ2hlY2tib3hlcyA9IHRoaXMubG9jYXRvckZvckFsbChNYXRDaGVja2JveEhhcm5lc3Mud2l0aCh7IGFuY2VzdG9yOiAnLm1vbnRocycgfSkpO1xuICBnZXREYXlzT2ZXZWVrQ2hlY2tib3hlcyA9IHRoaXMubG9jYXRvckZvckFsbChNYXRDaGVja2JveEhhcm5lc3Mud2l0aCh7IGFuY2VzdG9yOiAnLndlZWtkYXlzJyB9KSk7XG5cbiAgYXN5bmMgc2V0TWludXRlcyhtaW51dGVzOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpbnB1dCA9IGF3YWl0IHRoaXMuZ2V0TWludXRlc0lucHV0KCk7XG4gICAgYXdhaXQgaW5wdXQuc2V0VmFsdWUobWludXRlcyk7XG4gIH1cblxuICBhc3luYyBzZXRIb3Vycyhob3Vyczogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgaW5wdXQgPSBhd2FpdCB0aGlzLmdldEhvdXJzSW5wdXQoKTtcbiAgICBhd2FpdCBpbnB1dC5zZXRWYWx1ZShob3Vycyk7XG4gIH1cblxuICBhc3luYyBzZXREYXlzKGRheXM6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGlucHV0ID0gYXdhaXQgdGhpcy5nZXREYXlzSW5wdXQoKTtcbiAgICBhd2FpdCBpbnB1dC5zZXRWYWx1ZShkYXlzKTtcbiAgfVxuXG4gIGFzeW5jIHNldE1vbnRocyhtb250aHM6IHJlYWRvbmx5IE1vbnRoUmFuZ2VbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBhd2FpdCB0aGlzLmdldE1vbnRoQ2hlY2tib3hlcygpO1xuICAgIGF3YWl0IHBhcmFsbGVsKCgpID0+IGNoZWNrYm94ZXMubWFwKChjaGVja2JveCwgaSkgPT4ge1xuICAgICAgcmV0dXJuIG1vbnRocy5pbmNsdWRlcygoaSArIDEpIGFzIE1vbnRoUmFuZ2UpXG4gICAgICAgID8gY2hlY2tib3guY2hlY2soKVxuICAgICAgICA6IGNoZWNrYm94LnVuY2hlY2soKTtcbiAgICB9KSk7XG4gIH1cblxuICBhc3luYyBzZXREYXlzT2ZXZWVrKGRheXNPZldlZWs6IHJlYWRvbmx5IERheU9mVGhlV2Vla1JhbmdlW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBUT0RPOiBXaWxsIGJyZWFrIGlmIFN1bmRheSBpcyBub3QgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICBjb25zdCBjaGVja2JveGVzID0gYXdhaXQgdGhpcy5nZXREYXlzT2ZXZWVrQ2hlY2tib3hlcygpO1xuICAgIGF3YWl0IHBhcmFsbGVsKCgpID0+IGNoZWNrYm94ZXMubWFwKChjaGVja2JveCwgaSkgPT4ge1xuICAgICAgcmV0dXJuIGRheXNPZldlZWsuaW5jbHVkZXMoaSBhcyBEYXlPZlRoZVdlZWtSYW5nZSlcbiAgICAgICAgPyBjaGVja2JveC5jaGVjaygpXG4gICAgICAgIDogY2hlY2tib3gudW5jaGVjaygpO1xuICAgIH0pKTtcbiAgfVxuXG4gIGFzeW5jIHByZXNzRG9uZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBkb25lQnV0dG9uID0gYXdhaXQgdGhpcy5sb2NhdG9yRm9yKE1hdEJ1dHRvbkhhcm5lc3Mud2l0aCh7IHRleHQ6ICdEb25lJyB9KSkoKTtcbiAgICBhd2FpdCBkb25lQnV0dG9uLmNsaWNrKCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==