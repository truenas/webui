{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/split.js","mappings":";;;;;AAAA,0EAA8C;AAC9C,oEAAwC;AACxC,sEAA0C;AAC1C,8EAAkD;AAClD,gEAAqC;AACrC,4EAAgD;AAChD,gEAAqC;AAErC,uEAAuE;AACvE,IAAI,gBAAgB,GAAG,UAAU,CAAC;AAElC;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAS,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK;IACrC,IAAI,KAAK,IAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,IAAA,4BAAc,EAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC;QAClF,SAAS,GAAG,KAAK,GAAG,SAAS,CAAC;IAChC,CAAC;IACD,KAAK,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;IAC7D,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,MAAM,GAAG,IAAA,qBAAQ,EAAC,MAAM,CAAC,CAAC;IAC1B,IAAI,MAAM,IAAI,CACR,OAAO,SAAS,IAAI,QAAQ;QAC5B,CAAC,SAAS,IAAI,IAAI,IAAI,CAAC,IAAA,qBAAQ,EAAC,SAAS,CAAC,CAAC,CAC5C,EAAE,CAAC;QACN,SAAS,GAAG,IAAA,0BAAY,EAAC,SAAS,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,IAAI,IAAA,wBAAU,EAAC,MAAM,CAAC,EAAE,CAAC;YACrC,OAAO,IAAA,uBAAS,EAAC,IAAA,2BAAa,EAAC,MAAM,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACxC,CAAC;AAED,kBAAe,KAAK,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/split.js"],"sourcesContent":["import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport isRegExp from './isRegExp.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nexport default split;\n"],"version":3}