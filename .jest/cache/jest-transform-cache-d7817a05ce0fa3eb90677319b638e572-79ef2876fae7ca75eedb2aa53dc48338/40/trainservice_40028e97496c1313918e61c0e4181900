eadf21ea64444069bb70c3031907a264
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrainService = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const system_update_enum_1 = require("app/enums/system-update.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const update_service_1 = require("app/pages/system/update/services/update.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let TrainService = class TrainService {
    constructor(updateService, ws, translate, dialogService, errorHandler) {
        this.updateService = updateService;
        this.ws = ws;
        this.translate = translate;
        this.dialogService = dialogService;
        this.errorHandler = errorHandler;
        this.selectedTrain$ = new rxjs_1.BehaviorSubject(undefined);
        this.releaseTrain$ = new rxjs_1.BehaviorSubject(undefined);
        this.preReleaseTrain$ = new rxjs_1.BehaviorSubject(undefined);
        this.nightlyTrain$ = new rxjs_1.BehaviorSubject(undefined);
        this.currentTrainDescription$ = new rxjs_1.BehaviorSubject('');
        this.trainDescriptionOnPageLoad$ = new rxjs_1.BehaviorSubject('');
        this.fullTrainList$ = new rxjs_1.BehaviorSubject(undefined);
        this.trainVersion$ = new rxjs_1.BehaviorSubject(null);
        this.trainValue$ = new rxjs_1.BehaviorSubject('');
    }
    getAutoDownload() {
        return this.ws.call('update.get_auto_download');
    }
    getTrains() {
        return this.ws.call('update.get_trains');
    }
    onTrainChanged(newTrain, prevTrain) {
        (0, rxjs_1.combineLatest)([this.fullTrainList$, this.selectedTrain$, this.trainDescriptionOnPageLoad$])
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(([fullTrainList, selectedTrain, trainDescriptionOnPageLoad]) => {
            var _a;
            // For the case when the user switches away, then BACK to the train of the current OS
            if (newTrain === selectedTrain) {
                this.currentTrainDescription$.next(trainDescriptionOnPageLoad);
                this.setTrainAndCheck(newTrain, prevTrain);
                return;
            }
            let warning = '';
            if ((_a = fullTrainList[newTrain]) === null || _a === void 0 ? void 0 : _a.description.includes('[nightly]')) {
                warning = this.translate.instant('Changing to a nightly train is one-way. Changing back to a stable train is not supported! ');
            }
            this.dialogService.confirm({
                title: this.translate.instant('Switch Train'),
                message: warning + this.translate.instant('Switch update trains?'),
            }).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((confirmSwitch) => {
                if (confirmSwitch) {
                    this.setTrainDescription();
                    this.setTrainAndCheck(newTrain, prevTrain);
                }
                else {
                    this.trainValue$.next(prevTrain);
                    this.setTrainDescription();
                }
            });
        });
    }
    setTrainDescription() {
        (0, rxjs_1.combineLatest)([this.fullTrainList$, this.trainValue$])
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(([fullTrainList, trainValue]) => {
            if (fullTrainList[trainValue]) {
                this.currentTrainDescription$.next(fullTrainList[trainValue].description.toLowerCase());
            }
            else {
                this.currentTrainDescription$.next('');
            }
        });
    }
    toggleAutoCheck(autoCheck) {
        this.ws.call('update.set_auto_download', [autoCheck]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.check();
        });
    }
    setTrainAndCheck(newTrain, prevTrain) {
        this.updateService.isLoading$.next(true);
        this.ws.call('update.set_train', [newTrain]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                this.check();
            },
            error: (error) => {
                this.dialogService.error(this.errorHandler.parseError(error));
                this.trainValue$.next(prevTrain);
                this.updateService.isLoading$.next(false);
            },
            complete: () => {
                this.updateService.isLoading$.next(false);
            },
        });
    }
    check() {
        // Reset the template
        this.updateService.updatesAvailable$.next(false);
        this.updateService.releaseNotesUrl$.next('');
        this.updateService.isLoading$.next(true);
        this.updateService.pendingUpdates();
        this.updateService.error$.next(null);
        sessionStorage.updateLastChecked = Date.now();
        (0, rxjs_1.combineLatest)([
            this.ws.call('update.check_available'),
            this.currentTrainDescription$,
        ]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ([update, currentTrainDescription]) => {
                if (update.version) {
                    this.trainVersion$.next(update.version);
                }
                this.updateService.status$.next(update.status);
                if (update.status === system_update_enum_1.SystemUpdateStatus.Available) {
                    sessionStorage.updateAvailable = 'true';
                    this.updateService.updatesAvailable$.next(true);
                    const packages = [];
                    update.changes.forEach((change) => {
                        if (change.operation === system_update_enum_1.SystemUpdateOperationType.Upgrade) {
                            packages.push({
                                operation: 'Upgrade',
                                name: change.old.name + '-' + change.old.version
                                    + ' -> ' + change.new.name + '-'
                                    + change.new.version,
                            });
                        }
                        else if (change.operation === system_update_enum_1.SystemUpdateOperationType.Install) {
                            packages.push({
                                operation: 'Install',
                                name: change.new.name + '-' + change.new.version,
                            });
                        }
                        else if (change.operation === system_update_enum_1.SystemUpdateOperationType.Delete) {
                            if (change.old) {
                                packages.push({
                                    operation: 'Delete',
                                    name: change.old.name + '-' + change.old.version,
                                });
                            }
                            else if (change.new) {
                                packages.push({
                                    operation: 'Delete',
                                    name: change.new.name + '-' + change.new.version,
                                });
                            }
                        }
                        else {
                            console.error('Unknown operation:', change.operation);
                        }
                    });
                    this.updateService.packages$.next(packages);
                    if (update.changelog) {
                        this.updateService.changeLog$.next(update.changelog.replace(/\n/g, '<br>'));
                    }
                    if (update.release_notes_url) {
                        this.updateService.releaseNotesUrl$.next(update.release_notes_url);
                    }
                }
                if (currentTrainDescription && currentTrainDescription.includes('[release]')) {
                    this.releaseTrain$.next(true);
                    this.preReleaseTrain$.next(false);
                    this.nightlyTrain$.next(false);
                }
                else if (currentTrainDescription.includes('[prerelease]')) {
                    this.releaseTrain$.next(false);
                    this.preReleaseTrain$.next(true);
                    this.nightlyTrain$.next(false);
                }
                else {
                    this.releaseTrain$.next(false);
                    this.preReleaseTrain$.next(false);
                    this.nightlyTrain$.next(true);
                }
                this.updateService.isLoading$.next(false);
            },
            error: (err) => {
                this.updateService.generalUpdateError$.next(`${err.reason.replace('>', '').replace('<', '')}: ${this.translate.instant('Automatic update check failed. Please check system network settings.')}`);
                this.updateService.isLoading$.next(false);
            },
            complete: () => {
                this.updateService.isLoading$.next(false);
            },
        });
    }
};
exports.TrainService = TrainService;
TrainService.ctorParameters = () => [
    { type: update_service_1.UpdateService },
    { type: ws_service_1.WebSocketService },
    { type: core_2.TranslateService },
    { type: dialog_service_1.DialogService },
    { type: error_handler_service_1.ErrorHandlerService }
];
exports.TrainService = TrainService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], TrainService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,