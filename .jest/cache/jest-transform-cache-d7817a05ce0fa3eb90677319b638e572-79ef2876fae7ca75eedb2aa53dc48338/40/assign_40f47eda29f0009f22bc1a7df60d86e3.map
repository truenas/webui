{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/assign.js","mappings":";;;;;AAAA,wEAA4C;AAC5C,sEAA0C;AAC1C,8EAAkD;AAClD,sEAA2C;AAC3C,wEAA4C;AAC5C,wDAA6B;AAE7B,2CAA2C;AAC3C,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;AAEnC,gDAAgD;AAChD,IAAI,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,IAAI,MAAM,GAAG,IAAA,4BAAc,EAAC,UAAS,MAAM,EAAE,MAAM;IACjD,IAAI,IAAA,yBAAW,EAAC,MAAM,CAAC,IAAI,IAAA,wBAAW,EAAC,MAAM,CAAC,EAAE,CAAC;QAC/C,IAAA,wBAAU,EAAC,MAAM,EAAE,IAAA,iBAAI,EAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;QACzC,OAAO;IACT,CAAC;IACD,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE,CAAC;QACvB,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC;YACrC,IAAA,yBAAW,EAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/assign.js"],"sourcesContent":["import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n"],"version":3}