15bacc944f04c7221806995615e22029
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxCellSizeComponent = void 0;
exports.sizeColumn = sizeColumn;
const core_1 = require("@angular/core");
const column_component_class_1 = require("app/modules/ix-table/interfaces/column-component.class");
const file_size_pipe_1 = require("app/modules/pipes/file-size/file-size.pipe");
const test_directive_1 = require("app/modules/test-id/test.directive");
let IxCellSizeComponent = class IxCellSizeComponent extends column_component_class_1.ColumnComponent {
    get size() {
        return this.value;
    }
};
exports.IxCellSizeComponent = IxCellSizeComponent;
exports.IxCellSizeComponent = IxCellSizeComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-cell-size',
        template: require("./ix-cell-size.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [file_size_pipe_1.FileSizePipe, test_directive_1.TestDirective],
    })
], IxCellSizeComponent);
function sizeColumn(options) {
    return Object.assign({ type: IxCellSizeComponent }, options);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvaXgtdGFibGUvY29tcG9uZW50cy9peC10YWJsZS1ib2R5L2NlbGxzL2l4LWNlbGwtc2l6ZS9peC1jZWxsLXNpemUuY29tcG9uZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWtCQSxnQ0FFQztBQXBCRCx3Q0FBbUU7QUFDbkUsbUdBQWlHO0FBQ2pHLCtFQUEwRTtBQUMxRSx1RUFBbUU7QUFTNUQsSUFBTSxtQkFBbUIsR0FBekIsTUFBTSxtQkFBdUIsU0FBUSx3Q0FBa0I7SUFDNUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBZSxDQUFDO0lBQzlCLENBQUM7Q0FDRixDQUFBO0FBSlksa0RBQW1COzhCQUFuQixtQkFBbUI7SUFQL0IsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLGNBQWM7UUFDeEIsa0RBQTRDO1FBQzVDLGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLE9BQU8sRUFBRSxDQUFDLDZCQUFZLEVBQUUsOEJBQWEsQ0FBQztLQUN2QyxDQUFDO0dBQ1csbUJBQW1CLENBSS9CO0FBRUQsU0FBZ0IsVUFBVSxDQUFJLE9BQXdDO0lBQ3BFLHVCQUFTLElBQUksRUFBRSxtQkFBbUIsSUFBSyxPQUFPLEVBQUc7QUFDbkQsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9peC10YWJsZS9jb21wb25lbnRzL2l4LXRhYmxlLWJvZHkvY2VsbHMvaXgtY2VsbC1zaXplL2l4LWNlbGwtc2l6ZS5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uQ29tcG9uZW50LCBDb2x1bW4gfSBmcm9tICdhcHAvbW9kdWxlcy9peC10YWJsZS9pbnRlcmZhY2VzL2NvbHVtbi1jb21wb25lbnQuY2xhc3MnO1xuaW1wb3J0IHsgRmlsZVNpemVQaXBlIH0gZnJvbSAnYXBwL21vZHVsZXMvcGlwZXMvZmlsZS1zaXplL2ZpbGUtc2l6ZS5waXBlJztcbmltcG9ydCB7IFRlc3REaXJlY3RpdmUgfSBmcm9tICdhcHAvbW9kdWxlcy90ZXN0LWlkL3Rlc3QuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXgtY2VsbC1zaXplJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2l4LWNlbGwtc2l6ZS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbRmlsZVNpemVQaXBlLCBUZXN0RGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgSXhDZWxsU2l6ZUNvbXBvbmVudDxUPiBleHRlbmRzIENvbHVtbkNvbXBvbmVudDxUPiB7XG4gIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUgYXMgbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaXplQ29sdW1uPFQ+KG9wdGlvbnM6IFBhcnRpYWw8SXhDZWxsU2l6ZUNvbXBvbmVudDxUPj4pOiBDb2x1bW48VCwgSXhDZWxsU2l6ZUNvbXBvbmVudDxUPj4ge1xuICByZXR1cm4geyB0eXBlOiBJeENlbGxTaXplQ29tcG9uZW50LCAuLi5vcHRpb25zIH07XG59XG4iXSwidmVyc2lvbiI6M30=