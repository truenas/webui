{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/cdk/fesm2022/observers/private.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { inject, NgZone, Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, shareReplay, takeUntil } from 'rxjs/operators';\n\n/**\n * Handler that logs \"ResizeObserver loop limit exceeded\" errors.\n * These errors are not shown in the Chrome console, so we log them to ensure developers are aware.\n * @param e The error\n */\nconst loopLimitExceededErrorHandler = (e) => {\n    if (e instanceof ErrorEvent && e.message === 'ResizeObserver loop limit exceeded') {\n        console.error(`${e.message}. This could indicate a performance issue with your app. See https://github.com/WICG/resize-observer/blob/master/explainer.md#error-handling`);\n    }\n};\n/**\n * A shared ResizeObserver to be used for a particular box type (content-box, border-box, or\n * device-pixel-content-box)\n */\nclass SingleBoxSharedResizeObserver {\n    constructor(\n    /** The box type to observe for resizes. */\n    _box) {\n        this._box = _box;\n        /** Stream that emits when the shared observer is destroyed. */\n        this._destroyed = new Subject();\n        /** Stream of all events from the ResizeObserver. */\n        this._resizeSubject = new Subject();\n        /** A map of elements to streams of their resize events. */\n        this._elementObservables = new Map();\n        if (typeof ResizeObserver !== 'undefined') {\n            this._resizeObserver = new ResizeObserver(entries => this._resizeSubject.next(entries));\n        }\n    }\n    /**\n     * Gets a stream of resize events for the given element.\n     * @param target The element to observe.\n     * @return The stream of resize events for the element.\n     */\n    observe(target) {\n        if (!this._elementObservables.has(target)) {\n            this._elementObservables.set(target, new Observable(observer => {\n                const subscription = this._resizeSubject.subscribe(observer);\n                this._resizeObserver?.observe(target, { box: this._box });\n                return () => {\n                    this._resizeObserver?.unobserve(target);\n                    subscription.unsubscribe();\n                    this._elementObservables.delete(target);\n                };\n            }).pipe(filter(entries => entries.some(entry => entry.target === target)), \n            // Share a replay of the last event so that subsequent calls to observe the same element\n            // receive initial sizing info like the first one. Also enable ref counting so the\n            // element will be automatically unobserved when there are no more subscriptions.\n            shareReplay({ bufferSize: 1, refCount: true }), takeUntil(this._destroyed)));\n        }\n        return this._elementObservables.get(target);\n    }\n    /** Destroys this instance. */\n    destroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._resizeSubject.complete();\n        this._elementObservables.clear();\n    }\n}\n/**\n * Allows observing resize events on multiple elements using a shared set of ResizeObserver.\n * Sharing a ResizeObserver instance is recommended for better performance (see\n * https://github.com/WICG/resize-observer/issues/59).\n *\n * Rather than share a single `ResizeObserver`, this class creates one `ResizeObserver` per type\n * of observed box ('content-box', 'border-box', and 'device-pixel-content-box'). This avoids\n * later calls to `observe` with a different box type from influencing the events dispatched to\n * earlier calls.\n */\nclass SharedResizeObserver {\n    constructor() {\n        /** Map of box type to shared resize observer. */\n        this._observers = new Map();\n        /** The Angular zone. */\n        this._ngZone = inject(NgZone);\n        if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            this._ngZone.runOutsideAngular(() => {\n                window.addEventListener('error', loopLimitExceededErrorHandler);\n            });\n        }\n    }\n    ngOnDestroy() {\n        for (const [, observer] of this._observers) {\n            observer.destroy();\n        }\n        this._observers.clear();\n        if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            window.removeEventListener('error', loopLimitExceededErrorHandler);\n        }\n    }\n    /**\n     * Gets a stream of resize events for the given target element and box type.\n     * @param target The element to observe for resizes.\n     * @param options Options to pass to the `ResizeObserver`\n     * @return The stream of resize events for the element.\n     */\n    observe(target, options) {\n        const box = options?.box || 'content-box';\n        if (!this._observers.has(box)) {\n            this._observers.set(box, new SingleBoxSharedResizeObserver(box));\n        }\n        return this._observers.get(box).observe(target);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: SharedResizeObserver, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: SharedResizeObserver, providedIn: 'root' }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: SharedResizeObserver, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SharedResizeObserver };\n//# sourceMappingURL=private.mjs.map\n"],
  "mappings": "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",
  "names": ["_a"]
}
