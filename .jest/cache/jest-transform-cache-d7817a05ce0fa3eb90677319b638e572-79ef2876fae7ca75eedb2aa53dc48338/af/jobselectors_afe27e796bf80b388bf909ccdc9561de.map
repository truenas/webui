{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/jobs/store/job.selectors.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/jobs/store/job.selectors.ts"],"sourcesContent":["import { createFeatureSelector, createSelector, MemoizedSelector } from '@ngrx/store';\nimport { JobState } from 'app/enums/job-state.enum';\nimport { Job } from 'app/interfaces/job.interface';\nimport { adapter, JobsState } from 'app/modules/jobs/store/job.reducer';\n\nexport const jobStateKey = 'jobs';\nexport const selectJobState = createFeatureSelector<JobsState>(jobStateKey);\n\nexport interface JobSlice {\n  [jobStateKey]: JobsState;\n}\n\nconst { selectAll } = adapter.getSelectors();\n\nexport const selectJobs = createSelector(\n  selectJobState,\n  selectAll,\n);\n\nexport const selectAllNonTransientJobs = createSelector(\n  selectJobs,\n  (jobs) => jobs.filter((job) => !job.transient),\n);\n\n/**\n * Simply selects a job.\n * By default, observable will not complete when job completes, nor will it throw on job failure.\n *\n * If you need this behaviour, add extra `observeJob()` operator after `select()`.\n */\nexport const selectJob = (id: number): MemoizedSelector<object, Job> => createSelector(\n  selectJobs,\n  (jobs) => jobs.find((job) => job.id === id),\n);\n\nexport const selectIsJobPanelOpen = createSelector(\n  selectJobState,\n  (state) => state.isPanelOpen,\n);\n\nexport const selectRunningJobs = createSelector(\n  selectAllNonTransientJobs,\n  (jobs) => jobs.filter((job) => job.state === JobState.Running),\n);\n\nexport const selectFailedJobs = createSelector(\n  selectAllNonTransientJobs,\n  (jobs) => jobs.filter((job) => job.state === JobState.Failed),\n);\n\nexport const selectWaitingJobs = createSelector(\n  selectAllNonTransientJobs,\n  (jobs) => jobs.filter((job) => job.state === JobState.Waiting),\n);\n\nexport const selectRunningJobsCount = createSelector(\n  selectRunningJobs,\n  (jobs) => jobs.length,\n);\n\nexport const selectFailedJobsCount = createSelector(\n  selectFailedJobs,\n  (jobs) => jobs.length,\n);\n\nexport const selectWaitingJobsCount = createSelector(\n  selectWaitingJobs,\n  (jobs) => jobs.length,\n);\n\nexport const selectJobsPanelSlice = createSelector(\n  selectRunningJobs,\n  selectWaitingJobs,\n  selectFailedJobs,\n  (runningJobs, waitingJobs, failedJobs) => [...runningJobs, ...waitingJobs, ...failedJobs],\n);\n\nexport const selectUpdateJob = createSelector(\n  selectRunningJobs,\n  (jobs: Job[]) => jobs.filter((job) => job.method === 'update.update' || job.method === 'failover.upgrade'),\n);\n\nexport const selectUpdateJobForActiveNode = createSelector(\n  selectRunningJobs,\n  (jobs: Job[]) => jobs.find((job) => job.method === 'update.update'),\n);\n\nexport const selectUpdateJobForPassiveNode = createSelector(\n  selectRunningJobs,\n  (jobs: Job[]) => jobs.find((job) => job.method === 'failover.upgrade'),\n);\n"],"version":3}