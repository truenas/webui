7fbb58fa459b6b6319d3bd7fb47c263e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const mock_websocket_service_1 = require("app/core/testing/classes/mock-websocket.service");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const enclosure_slot_status_enum_1 = require("app/enums/enclosure-slot-status.enum");
const disk_temperature_service_1 = require("app/services/disk-temperature.service");
describe('DiskTemperatureService', () => {
    let spectator;
    let websocket;
    const createService = (0, jest_1.createServiceFactory)({
        service: disk_temperature_service_1.DiskTemperatureService,
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('disk.temperatures'),
                (0, mock_websocket_utils_1.mockCall)('webui.enclosure.dashboard', [
                    {
                        elements: {
                            [enclosure_slot_status_enum_1.EnclosureElementType.ArrayDeviceSlot]: {
                                0: {
                                    dev: 'ada1',
                                },
                            },
                        },
                    },
                ]),
            ]),
        ],
    });
    beforeEach(() => {
        spectator = createService();
        websocket = spectator.inject(mock_websocket_service_1.MockWebSocketService);
    });
    it('checks if getTemperature made websocket calls"', () => __awaiter(void 0, void 0, void 0, function* () {
        yield (0, rxjs_1.firstValueFrom)(spectator.service.getTemperature());
        expect(websocket.call).toHaveBeenCalledWith('webui.enclosure.dashboard');
        expect(websocket.call).toHaveBeenCalledWith('disk.temperatures', [['ada1']]);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2Rpc2stdGVtcGVyYXR1cmUuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsaURBQWdGO0FBQ2hGLCtCQUFzQztBQUN0Qyw0RkFBdUY7QUFDdkYsc0ZBQXNGO0FBQ3RGLHFGQUE0RTtBQUU1RSxvRkFBK0U7QUFFL0UsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFJLFNBQW1ELENBQUM7SUFDeEQsSUFBSSxTQUErQixDQUFDO0lBRXBDLE1BQU0sYUFBYSxHQUFHLElBQUEsMkJBQW9CLEVBQUM7UUFDekMsT0FBTyxFQUFFLGlEQUFzQjtRQUMvQixTQUFTLEVBQUU7WUFDVCxJQUFBLG9DQUFhLEVBQUM7Z0JBQ1osSUFBQSwrQkFBUSxFQUFDLG1CQUFtQixDQUFDO2dCQUM3QixJQUFBLCtCQUFRLEVBQUMsMkJBQTJCLEVBQUU7b0JBQ3BDO3dCQUNFLFFBQVEsRUFBRTs0QkFDUixDQUFDLGlEQUFvQixDQUFDLGVBQWUsQ0FBQyxFQUFFO2dDQUN0QyxDQUFDLEVBQUU7b0NBQ0QsR0FBRyxFQUFFLE1BQU07aUNBQ2M7NkJBQzVCO3lCQUM0QjtxQkFDaEM7aUJBQ3NCLENBQUM7YUFDM0IsQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFNBQVMsR0FBRyxhQUFhLEVBQUUsQ0FBQztRQUM1QixTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyw2Q0FBb0IsQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLEdBQVMsRUFBRTtRQUM5RCxNQUFNLElBQUEscUJBQWMsRUFBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2Rpc2stdGVtcGVyYXR1cmUuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlcnZpY2VGYWN0b3J5LCBTcGVjdGF0b3JTZXJ2aWNlIH0gZnJvbSAnQG5nbmVhdC9zcGVjdGF0b3IvamVzdCc7XG5pbXBvcnQgeyBmaXJzdFZhbHVlRnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTW9ja1dlYlNvY2tldFNlcnZpY2UgfSBmcm9tICdhcHAvY29yZS90ZXN0aW5nL2NsYXNzZXMvbW9jay13ZWJzb2NrZXQuc2VydmljZSc7XG5pbXBvcnQgeyBtb2NrQ2FsbCwgbW9ja1dlYlNvY2tldCB9IGZyb20gJ2FwcC9jb3JlL3Rlc3RpbmcvdXRpbHMvbW9jay13ZWJzb2NrZXQudXRpbHMnO1xuaW1wb3J0IHsgRW5jbG9zdXJlRWxlbWVudFR5cGUgfSBmcm9tICdhcHAvZW51bXMvZW5jbG9zdXJlLXNsb3Qtc3RhdHVzLmVudW0nO1xuaW1wb3J0IHsgRGFzaGJvYXJkRW5jbG9zdXJlLCBEYXNoYm9hcmRFbmNsb3N1cmVFbGVtZW50cywgRGFzaGJvYXJkRW5jbG9zdXJlU2xvdCB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2VuY2xvc3VyZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGlza1RlbXBlcmF0dXJlU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9kaXNrLXRlbXBlcmF0dXJlLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnRGlza1RlbXBlcmF0dXJlU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNwZWN0YXRvcjogU3BlY3RhdG9yU2VydmljZTxEaXNrVGVtcGVyYXR1cmVTZXJ2aWNlPjtcbiAgbGV0IHdlYnNvY2tldDogTW9ja1dlYlNvY2tldFNlcnZpY2U7XG5cbiAgY29uc3QgY3JlYXRlU2VydmljZSA9IGNyZWF0ZVNlcnZpY2VGYWN0b3J5KHtcbiAgICBzZXJ2aWNlOiBEaXNrVGVtcGVyYXR1cmVTZXJ2aWNlLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgbW9ja1dlYlNvY2tldChbXG4gICAgICAgIG1vY2tDYWxsKCdkaXNrLnRlbXBlcmF0dXJlcycpLFxuICAgICAgICBtb2NrQ2FsbCgnd2VidWkuZW5jbG9zdXJlLmRhc2hib2FyZCcsIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgICBbRW5jbG9zdXJlRWxlbWVudFR5cGUuQXJyYXlEZXZpY2VTbG90XToge1xuICAgICAgICAgICAgICAgIDA6IHtcbiAgICAgICAgICAgICAgICAgIGRldjogJ2FkYTEnLFxuICAgICAgICAgICAgICAgIH0gYXMgRGFzaGJvYXJkRW5jbG9zdXJlU2xvdCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gYXMgRGFzaGJvYXJkRW5jbG9zdXJlRWxlbWVudHMsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSBhcyBEYXNoYm9hcmRFbmNsb3N1cmVbXSksXG4gICAgICBdKSxcbiAgICBdLFxuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzcGVjdGF0b3IgPSBjcmVhdGVTZXJ2aWNlKCk7XG4gICAgd2Vic29ja2V0ID0gc3BlY3RhdG9yLmluamVjdChNb2NrV2ViU29ja2V0U2VydmljZSk7XG4gIH0pO1xuXG4gIGl0KCdjaGVja3MgaWYgZ2V0VGVtcGVyYXR1cmUgbWFkZSB3ZWJzb2NrZXQgY2FsbHNcIicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBmaXJzdFZhbHVlRnJvbShzcGVjdGF0b3Iuc2VydmljZS5nZXRUZW1wZXJhdHVyZSgpKTtcbiAgICBleHBlY3Qod2Vic29ja2V0LmNhbGwpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd3ZWJ1aS5lbmNsb3N1cmUuZGFzaGJvYXJkJyk7XG4gICAgZXhwZWN0KHdlYnNvY2tldC5jYWxsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZGlzay50ZW1wZXJhdHVyZXMnLCBbWydhZGExJ11dKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==