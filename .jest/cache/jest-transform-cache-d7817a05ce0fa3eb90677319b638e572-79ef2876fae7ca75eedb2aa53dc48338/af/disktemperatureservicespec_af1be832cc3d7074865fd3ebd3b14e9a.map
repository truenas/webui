{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/disk-temperature.service.spec.ts","mappings":";;;;;;;;;;;AAAA,iDAAgF;AAChF,+BAAsC;AACtC,4FAAuF;AACvF,sFAAsF;AACtF,qFAA4E;AAE5E,oFAA+E;AAE/E,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,SAAmD,CAAC;IACxD,IAAI,SAA+B,CAAC;IAEpC,MAAM,aAAa,GAAG,IAAA,2BAAoB,EAAC;QACzC,OAAO,EAAE,iDAAsB;QAC/B,SAAS,EAAE;YACT,IAAA,oCAAa,EAAC;gBACZ,IAAA,+BAAQ,EAAC,mBAAmB,CAAC;gBAC7B,IAAA,+BAAQ,EAAC,2BAA2B,EAAE;oBACpC;wBACE,QAAQ,EAAE;4BACR,CAAC,iDAAoB,CAAC,eAAe,CAAC,EAAE;gCACtC,CAAC,EAAE;oCACD,GAAG,EAAE,MAAM;iCACc;6BAC5B;yBAC4B;qBAChC;iBACsB,CAAC;aAC3B,CAAC;SACH;KACF,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,aAAa,EAAE,CAAC;QAC5B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,6CAAoB,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAS,EAAE;QAC9D,MAAM,IAAA,qBAAc,EAAC,SAAS,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,2BAA2B,CAAC,CAAC;QACzE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/E,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/disk-temperature.service.spec.ts"],"sourcesContent":["import { createServiceFactory, SpectatorService } from '@ngneat/spectator/jest';\nimport { firstValueFrom } from 'rxjs';\nimport { MockWebSocketService } from 'app/core/testing/classes/mock-websocket.service';\nimport { mockCall, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { EnclosureElementType } from 'app/enums/enclosure-slot-status.enum';\nimport { DashboardEnclosure, DashboardEnclosureElements, DashboardEnclosureSlot } from 'app/interfaces/enclosure.interface';\nimport { DiskTemperatureService } from 'app/services/disk-temperature.service';\n\ndescribe('DiskTemperatureService', () => {\n  let spectator: SpectatorService<DiskTemperatureService>;\n  let websocket: MockWebSocketService;\n\n  const createService = createServiceFactory({\n    service: DiskTemperatureService,\n    providers: [\n      mockWebSocket([\n        mockCall('disk.temperatures'),\n        mockCall('webui.enclosure.dashboard', [\n          {\n            elements: {\n              [EnclosureElementType.ArrayDeviceSlot]: {\n                0: {\n                  dev: 'ada1',\n                } as DashboardEnclosureSlot,\n              },\n            } as DashboardEnclosureElements,\n          },\n        ] as DashboardEnclosure[]),\n      ]),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createService();\n    websocket = spectator.inject(MockWebSocketService);\n  });\n\n  it('checks if getTemperature made websocket calls\"', async () => {\n    await firstValueFrom(spectator.service.getTemperature());\n    expect(websocket.call).toHaveBeenCalledWith('webui.enclosure.dashboard');\n    expect(websocket.call).toHaveBeenCalledWith('disk.temperatures', [['ada1']]);\n  });\n});\n"],"version":3}