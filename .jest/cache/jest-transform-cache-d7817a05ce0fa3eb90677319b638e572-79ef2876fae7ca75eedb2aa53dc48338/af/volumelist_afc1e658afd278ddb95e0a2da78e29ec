0d74e91e1d14f3d06b7cb78b2d7818c1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helptextVolumes = void 0;
const ngx_translate_extract_marker_1 = require("@biesbjerg/ngx-translate-extract-marker");
exports.helptextVolumes = {
    exportMessages: {
        onfail: {
            stopServices: (0, ngx_translate_extract_marker_1.marker)('These services must be stopped to export the pool:'),
            restartServices: (0, ngx_translate_extract_marker_1.marker)('These services must be restarted to export the pool:'),
            continueMessage: (0, ngx_translate_extract_marker_1.marker)('Exporting/disconnecting will continue after services have been managed.'),
            continueAction: (0, ngx_translate_extract_marker_1.marker)('Manage Services and Continue'),
            unableToTerminate: (0, ngx_translate_extract_marker_1.marker)('Unable to terminate processes which are using this pool: '),
        },
    },
    exportError: (0, ngx_translate_extract_marker_1.marker)('Error exporting/disconnecting pool.'),
    exportDialog: {
        warningSysDataset: (0, ngx_translate_extract_marker_1.marker)('This pool contains the system dataset that stores critical data like debugging \
core files, encryption keys for pools, and Samba 4 metadata such as the user/group cache and share level \
permissions. Exporting this pool will transfer the system dataset to another available pool. If the only \
available pool is encrypted, that pool will no longer be able to be locked. When no other pools exist, \
the system dataset transfers back to the TrueNAS operating system device.'),
        warning: (0, ngx_translate_extract_marker_1.marker)('WARNING: Exporting/disconnecting pool <i>{pool}</i>.\
 Data on the pool will not be available after export.\
 Data on the pool disks can be destroyed by setting the <b>Destroy data</b> option.\
 Back up critical data <b>before</b> exporting/disconnecting the pool.'),
        unknownState: (0, ngx_translate_extract_marker_1.marker)('The pool <i>{pool}</i>is in the database but not connected to the machine. If it was exported by \
    mistake, reconnect the hardware and use <b>Import Pool</b>.<br /><br />'),
        destroy: {
            label: (0, ngx_translate_extract_marker_1.marker)('Destroy data on this pool?'),
            tooltip: (0, ngx_translate_extract_marker_1.marker)('Destroy the ZFS filesystem for pool data. This is a permanent operation. You will be \
      unable to re-mount data from the exported pool.'),
        },
        cascade: {
            label: (0, ngx_translate_extract_marker_1.marker)('Delete saved configurations from TrueNAS?'),
            tooltip: (0, ngx_translate_extract_marker_1.marker)('Delete all TrueNAS configurations that depend on the exported pool. Impacted configurations\
       may include services (listed above if applicable), applications, shares, and scheduled data protection tasks.'),
        },
        enterName: (0, ngx_translate_extract_marker_1.marker)('Enter <strong>{pool}</strong> below to confirm'),
        confirm: (0, ngx_translate_extract_marker_1.marker)('Confirm Export/Disconnect'),
        unknown_status_alt_text: (0, ngx_translate_extract_marker_1.marker)('(Remove pool from database)'),
        saveButton: (0, ngx_translate_extract_marker_1.marker)('Export/Disconnect'),
    },
    exporting: (0, ngx_translate_extract_marker_1.marker)('Exporting Pool'),
    exportDisconnect: (0, ngx_translate_extract_marker_1.marker)('Export/Disconnect Pool'),
    upgradePoolDialog_warning: (0, ngx_translate_extract_marker_1.marker)('Proceed with upgrading the pool? WARNING: Upgrading a pool is a\
 one-way operation that might make some features of\
 the pool incompatible with older versions of TrueNAS: '),
    acl_edit_msg: (0, ngx_translate_extract_marker_1.marker)('Root dataset ACL cannot be edited.'),
    expand_pool_dialog: {
        title: (0, ngx_translate_extract_marker_1.marker)('Expand pool '),
        message: (0, ngx_translate_extract_marker_1.marker)('Expand pool to fit all available disk space.'),
    },
    pool_options_dialog: {
        autotrim_tooltip: (0, ngx_translate_extract_marker_1.marker)('Enable for TrueNAS to periodically review data blocks and identify\
 empty blocks, or obsolete blocks that can be deleted. Unset to use dirty block\
 overwrites (default).'),
    },
    lock_dataset_dialog: {
        button: (0, ngx_translate_extract_marker_1.marker)('Lock'),
        locking_dataset: (0, ngx_translate_extract_marker_1.marker)('Locking Dataset'),
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHB0ZXh0L3N0b3JhZ2Uvdm9sdW1lcy92b2x1bWUtbGlzdC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwwRkFBc0U7QUFFekQsUUFBQSxlQUFlLEdBQUc7SUFDN0IsY0FBYyxFQUFFO1FBQ2QsTUFBTSxFQUFFO1lBQ04sWUFBWSxFQUFFLElBQUEscUNBQUMsRUFBQyxvREFBb0QsQ0FBQztZQUNyRSxlQUFlLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLHNEQUFzRCxDQUFDO1lBQzFFLGVBQWUsRUFBRSxJQUFBLHFDQUFDLEVBQUMseUVBQXlFLENBQUM7WUFDN0YsY0FBYyxFQUFFLElBQUEscUNBQUMsRUFBQyw4QkFBOEIsQ0FBQztZQUNqRCxpQkFBaUIsRUFBRSxJQUFBLHFDQUFDLEVBQUMsMkRBQTJELENBQUM7U0FDbEY7S0FDRjtJQUVELFdBQVcsRUFBRSxJQUFBLHFDQUFDLEVBQUMscUNBQXFDLENBQUM7SUFFckQsWUFBWSxFQUFFO1FBQ1osaUJBQWlCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOzs7OzBFQUlpRCxDQUFDO1FBQ3ZFLE9BQU8sRUFBRSxJQUFBLHFDQUFDLEVBQUM7Ozt1RUFHd0QsQ0FBQztRQUNwRSxZQUFZLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOzRFQUN3RCxDQUFDO1FBQ3pFLE9BQU8sRUFBRTtZQUNQLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsNEJBQTRCLENBQUM7WUFDdEMsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQztzREFDcUMsQ0FBQztTQUNsRDtRQUNELE9BQU8sRUFBRTtZQUNQLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsMkNBQTJDLENBQUM7WUFDckQsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQztxSEFDb0csQ0FBQztTQUNqSDtRQUNELFNBQVMsRUFBRSxJQUFBLHFDQUFDLEVBQUMsZ0RBQWdELENBQUM7UUFDOUQsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQywyQkFBMkIsQ0FBQztRQUN2Qyx1QkFBdUIsRUFBRSxJQUFBLHFDQUFDLEVBQUMsNkJBQTZCLENBQUM7UUFDekQsVUFBVSxFQUFFLElBQUEscUNBQUMsRUFBQyxtQkFBbUIsQ0FBQztLQUNuQztJQUVELFNBQVMsRUFBRSxJQUFBLHFDQUFDLEVBQUMsZ0JBQWdCLENBQUM7SUFDOUIsZ0JBQWdCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLHdCQUF3QixDQUFDO0lBRTdDLHlCQUF5QixFQUFFLElBQUEscUNBQUMsRUFBQzs7d0RBRXlCLENBQUM7SUFFdkQsWUFBWSxFQUFFLElBQUEscUNBQUMsRUFBQyxvQ0FBb0MsQ0FBQztJQUVyRCxrQkFBa0IsRUFBRTtRQUNsQixLQUFLLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLGNBQWMsQ0FBQztRQUN4QixPQUFPLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLDhDQUE4QyxDQUFDO0tBQzNEO0lBRUQsbUJBQW1CLEVBQUU7UUFDbkIsZ0JBQWdCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOzt1QkFFRCxDQUFDO0tBQ3JCO0lBQ0QsbUJBQW1CLEVBQUU7UUFDbkIsTUFBTSxFQUFFLElBQUEscUNBQUMsRUFBQyxNQUFNLENBQUM7UUFDakIsZUFBZSxFQUFFLElBQUEscUNBQUMsRUFBQyxpQkFBaUIsQ0FBQztLQUN0QztDQUNGLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHB0ZXh0L3N0b3JhZ2Uvdm9sdW1lcy92b2x1bWUtbGlzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXJrZXIgYXMgVCB9IGZyb20gJ0BiaWVzYmplcmcvbmd4LXRyYW5zbGF0ZS1leHRyYWN0LW1hcmtlcic7XG5cbmV4cG9ydCBjb25zdCBoZWxwdGV4dFZvbHVtZXMgPSB7XG4gIGV4cG9ydE1lc3NhZ2VzOiB7XG4gICAgb25mYWlsOiB7XG4gICAgICBzdG9wU2VydmljZXM6IFQoJ1RoZXNlIHNlcnZpY2VzIG11c3QgYmUgc3RvcHBlZCB0byBleHBvcnQgdGhlIHBvb2w6JyksXG4gICAgICByZXN0YXJ0U2VydmljZXM6IFQoJ1RoZXNlIHNlcnZpY2VzIG11c3QgYmUgcmVzdGFydGVkIHRvIGV4cG9ydCB0aGUgcG9vbDonKSxcbiAgICAgIGNvbnRpbnVlTWVzc2FnZTogVCgnRXhwb3J0aW5nL2Rpc2Nvbm5lY3Rpbmcgd2lsbCBjb250aW51ZSBhZnRlciBzZXJ2aWNlcyBoYXZlIGJlZW4gbWFuYWdlZC4nKSxcbiAgICAgIGNvbnRpbnVlQWN0aW9uOiBUKCdNYW5hZ2UgU2VydmljZXMgYW5kIENvbnRpbnVlJyksXG4gICAgICB1bmFibGVUb1Rlcm1pbmF0ZTogVCgnVW5hYmxlIHRvIHRlcm1pbmF0ZSBwcm9jZXNzZXMgd2hpY2ggYXJlIHVzaW5nIHRoaXMgcG9vbDogJyksXG4gICAgfSxcbiAgfSxcblxuICBleHBvcnRFcnJvcjogVCgnRXJyb3IgZXhwb3J0aW5nL2Rpc2Nvbm5lY3RpbmcgcG9vbC4nKSxcblxuICBleHBvcnREaWFsb2c6IHtcbiAgICB3YXJuaW5nU3lzRGF0YXNldDogVCgnVGhpcyBwb29sIGNvbnRhaW5zIHRoZSBzeXN0ZW0gZGF0YXNldCB0aGF0IHN0b3JlcyBjcml0aWNhbCBkYXRhIGxpa2UgZGVidWdnaW5nIFxcXG5jb3JlIGZpbGVzLCBlbmNyeXB0aW9uIGtleXMgZm9yIHBvb2xzLCBhbmQgU2FtYmEgNCBtZXRhZGF0YSBzdWNoIGFzIHRoZSB1c2VyL2dyb3VwIGNhY2hlIGFuZCBzaGFyZSBsZXZlbCBcXFxucGVybWlzc2lvbnMuIEV4cG9ydGluZyB0aGlzIHBvb2wgd2lsbCB0cmFuc2ZlciB0aGUgc3lzdGVtIGRhdGFzZXQgdG8gYW5vdGhlciBhdmFpbGFibGUgcG9vbC4gSWYgdGhlIG9ubHkgXFxcbmF2YWlsYWJsZSBwb29sIGlzIGVuY3J5cHRlZCwgdGhhdCBwb29sIHdpbGwgbm8gbG9uZ2VyIGJlIGFibGUgdG8gYmUgbG9ja2VkLiBXaGVuIG5vIG90aGVyIHBvb2xzIGV4aXN0LCBcXFxudGhlIHN5c3RlbSBkYXRhc2V0IHRyYW5zZmVycyBiYWNrIHRvIHRoZSBUcnVlTkFTIG9wZXJhdGluZyBzeXN0ZW0gZGV2aWNlLicpLFxuICAgIHdhcm5pbmc6IFQoJ1dBUk5JTkc6IEV4cG9ydGluZy9kaXNjb25uZWN0aW5nIHBvb2wgPGk+e3Bvb2x9PC9pPi5cXFxuIERhdGEgb24gdGhlIHBvb2wgd2lsbCBub3QgYmUgYXZhaWxhYmxlIGFmdGVyIGV4cG9ydC5cXFxuIERhdGEgb24gdGhlIHBvb2wgZGlza3MgY2FuIGJlIGRlc3Ryb3llZCBieSBzZXR0aW5nIHRoZSA8Yj5EZXN0cm95IGRhdGE8L2I+IG9wdGlvbi5cXFxuIEJhY2sgdXAgY3JpdGljYWwgZGF0YSA8Yj5iZWZvcmU8L2I+IGV4cG9ydGluZy9kaXNjb25uZWN0aW5nIHRoZSBwb29sLicpLFxuICAgIHVua25vd25TdGF0ZTogVCgnVGhlIHBvb2wgPGk+e3Bvb2x9PC9pPmlzIGluIHRoZSBkYXRhYmFzZSBidXQgbm90IGNvbm5lY3RlZCB0byB0aGUgbWFjaGluZS4gSWYgaXQgd2FzIGV4cG9ydGVkIGJ5IFxcXG4gICAgbWlzdGFrZSwgcmVjb25uZWN0IHRoZSBoYXJkd2FyZSBhbmQgdXNlIDxiPkltcG9ydCBQb29sPC9iPi48YnIgLz48YnIgLz4nKSxcbiAgICBkZXN0cm95OiB7XG4gICAgICBsYWJlbDogVCgnRGVzdHJveSBkYXRhIG9uIHRoaXMgcG9vbD8nKSxcbiAgICAgIHRvb2x0aXA6IFQoJ0Rlc3Ryb3kgdGhlIFpGUyBmaWxlc3lzdGVtIGZvciBwb29sIGRhdGEuIFRoaXMgaXMgYSBwZXJtYW5lbnQgb3BlcmF0aW9uLiBZb3Ugd2lsbCBiZSBcXFxuICAgICAgdW5hYmxlIHRvIHJlLW1vdW50IGRhdGEgZnJvbSB0aGUgZXhwb3J0ZWQgcG9vbC4nKSxcbiAgICB9LFxuICAgIGNhc2NhZGU6IHtcbiAgICAgIGxhYmVsOiBUKCdEZWxldGUgc2F2ZWQgY29uZmlndXJhdGlvbnMgZnJvbSBUcnVlTkFTPycpLFxuICAgICAgdG9vbHRpcDogVCgnRGVsZXRlIGFsbCBUcnVlTkFTIGNvbmZpZ3VyYXRpb25zIHRoYXQgZGVwZW5kIG9uIHRoZSBleHBvcnRlZCBwb29sLiBJbXBhY3RlZCBjb25maWd1cmF0aW9uc1xcXG4gICAgICAgbWF5IGluY2x1ZGUgc2VydmljZXMgKGxpc3RlZCBhYm92ZSBpZiBhcHBsaWNhYmxlKSwgYXBwbGljYXRpb25zLCBzaGFyZXMsIGFuZCBzY2hlZHVsZWQgZGF0YSBwcm90ZWN0aW9uIHRhc2tzLicpLFxuICAgIH0sXG4gICAgZW50ZXJOYW1lOiBUKCdFbnRlciA8c3Ryb25nPntwb29sfTwvc3Ryb25nPiBiZWxvdyB0byBjb25maXJtJyksXG4gICAgY29uZmlybTogVCgnQ29uZmlybSBFeHBvcnQvRGlzY29ubmVjdCcpLFxuICAgIHVua25vd25fc3RhdHVzX2FsdF90ZXh0OiBUKCcoUmVtb3ZlIHBvb2wgZnJvbSBkYXRhYmFzZSknKSxcbiAgICBzYXZlQnV0dG9uOiBUKCdFeHBvcnQvRGlzY29ubmVjdCcpLFxuICB9LFxuXG4gIGV4cG9ydGluZzogVCgnRXhwb3J0aW5nIFBvb2wnKSxcbiAgZXhwb3J0RGlzY29ubmVjdDogVCgnRXhwb3J0L0Rpc2Nvbm5lY3QgUG9vbCcpLFxuXG4gIHVwZ3JhZGVQb29sRGlhbG9nX3dhcm5pbmc6IFQoJ1Byb2NlZWQgd2l0aCB1cGdyYWRpbmcgdGhlIHBvb2w/IFdBUk5JTkc6IFVwZ3JhZGluZyBhIHBvb2wgaXMgYVxcXG4gb25lLXdheSBvcGVyYXRpb24gdGhhdCBtaWdodCBtYWtlIHNvbWUgZmVhdHVyZXMgb2ZcXFxuIHRoZSBwb29sIGluY29tcGF0aWJsZSB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIFRydWVOQVM6ICcpLFxuXG4gIGFjbF9lZGl0X21zZzogVCgnUm9vdCBkYXRhc2V0IEFDTCBjYW5ub3QgYmUgZWRpdGVkLicpLFxuXG4gIGV4cGFuZF9wb29sX2RpYWxvZzoge1xuICAgIHRpdGxlOiBUKCdFeHBhbmQgcG9vbCAnKSxcbiAgICBtZXNzYWdlOiBUKCdFeHBhbmQgcG9vbCB0byBmaXQgYWxsIGF2YWlsYWJsZSBkaXNrIHNwYWNlLicpLFxuICB9LFxuXG4gIHBvb2xfb3B0aW9uc19kaWFsb2c6IHtcbiAgICBhdXRvdHJpbV90b29sdGlwOiBUKCdFbmFibGUgZm9yIFRydWVOQVMgdG8gcGVyaW9kaWNhbGx5IHJldmlldyBkYXRhIGJsb2NrcyBhbmQgaWRlbnRpZnlcXFxuIGVtcHR5IGJsb2Nrcywgb3Igb2Jzb2xldGUgYmxvY2tzIHRoYXQgY2FuIGJlIGRlbGV0ZWQuIFVuc2V0IHRvIHVzZSBkaXJ0eSBibG9ja1xcXG4gb3ZlcndyaXRlcyAoZGVmYXVsdCkuJyksXG4gIH0sXG4gIGxvY2tfZGF0YXNldF9kaWFsb2c6IHtcbiAgICBidXR0b246IFQoJ0xvY2snKSxcbiAgICBsb2NraW5nX2RhdGFzZXQ6IFQoJ0xvY2tpbmcgRGF0YXNldCcpLFxuICB9LFxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==