{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/transform.js","mappings":";;;;;AAAA,oEAAwC;AACxC,sEAA0C;AAC1C,sEAA0C;AAC1C,0EAA8C;AAC9C,0EAA8C;AAC9C,8DAAmC;AACnC,gEAAqC;AACrC,oEAAyC;AACzC,gEAAqC;AACrC,wEAA6C;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,SAAS,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW;IAC9C,IAAI,KAAK,GAAG,IAAA,oBAAO,EAAC,MAAM,CAAC,EACvB,SAAS,GAAG,KAAK,IAAI,IAAA,qBAAQ,EAAC,MAAM,CAAC,IAAI,IAAA,yBAAY,EAAC,MAAM,CAAC,CAAC;IAElE,QAAQ,GAAG,IAAA,0BAAY,EAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACrC,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,IAAI,GAAG,MAAM,IAAI,MAAM,CAAC,WAAW,CAAC;QACxC,IAAI,SAAS,EAAE,CAAC;YACd,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACtC,CAAC;aACI,IAAI,IAAA,qBAAQ,EAAC,MAAM,CAAC,EAAE,CAAC;YAC1B,WAAW,GAAG,IAAA,uBAAU,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAA,wBAAU,EAAC,IAAA,0BAAY,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACzE,CAAC;aACI,CAAC;YACJ,WAAW,GAAG,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IACD,CAAC,SAAS,CAAC,CAAC,CAAC,uBAAS,CAAC,CAAC,CAAC,wBAAU,CAAC,CAAC,MAAM,EAAE,UAAS,KAAK,EAAE,KAAK,EAAE,MAAM;QACxE,OAAO,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,kBAAe,SAAS,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/transform.js"],"sourcesContent":["import arrayEach from './_arrayEach.js';\nimport baseCreate from './_baseCreate.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\nimport getPrototype from './_getPrototype.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isTypedArray from './isTypedArray.js';\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nexport default transform;\n"],"version":3}