{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/slide-toggle/testing.mjs"],
  "sourcesContent": ["import { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Harness for interacting with a mat-slide-toggle in tests. */\nclass MatSlideToggleHarness extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        this._label = this.locatorFor('label');\n        this._nativeElement = this.locatorFor('button');\n    }\n    static { this.hostSelector = '.mat-mdc-slide-toggle'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a slide-toggle w/ specific attributes.\n     * @param options Options for narrowing the search:\n     *   - `selector` finds a slide-toggle whose host element matches the given selector.\n     *   - `label` finds a slide-toggle with specific label text.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return (new HarnessPredicate(this, options)\n            .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n            // We want to provide a filter option for \"name\" because the name of the slide-toggle is\n            // only set on the underlying input. This means that it's not possible for developers\n            // to retrieve the harness of a specific checkbox with name through a CSS selector.\n            .addOption('name', options.name, async (harness, name) => (await harness.getName()) === name)\n            .addOption('checked', options.checked, async (harness, checked) => (await harness.isChecked()) == checked)\n            .addOption('disabled', options.disabled, async (harness, disabled) => (await harness.isDisabled()) == disabled));\n    }\n    /** Toggle the checked state of the slide-toggle. */\n    async toggle() {\n        return (await this._nativeElement()).click();\n    }\n    /** Whether the slide-toggle is checked. */\n    async isChecked() {\n        const checked = (await this._nativeElement()).getAttribute('aria-checked');\n        return coerceBooleanProperty(await checked);\n    }\n    /** Whether the slide-toggle is disabled. */\n    async isDisabled() {\n        const nativeElement = await this._nativeElement();\n        const disabled = await nativeElement.getAttribute('disabled');\n        if (disabled !== null) {\n            return coerceBooleanProperty(disabled);\n        }\n        return (await nativeElement.getAttribute('aria-disabled')) === 'true';\n    }\n    /** Whether the slide-toggle is required. */\n    async isRequired() {\n        const ariaRequired = await (await this._nativeElement()).getAttribute('aria-required');\n        return ariaRequired === 'true';\n    }\n    /** Whether the slide-toggle is valid. */\n    async isValid() {\n        const invalid = (await this.host()).hasClass('ng-invalid');\n        return !(await invalid);\n    }\n    /** Gets the slide-toggle's name. */\n    async getName() {\n        return (await this._nativeElement()).getAttribute('name');\n    }\n    /** Gets the slide-toggle's aria-label. */\n    async getAriaLabel() {\n        return (await this._nativeElement()).getAttribute('aria-label');\n    }\n    /** Gets the slide-toggle's aria-labelledby. */\n    async getAriaLabelledby() {\n        return (await this._nativeElement()).getAttribute('aria-labelledby');\n    }\n    /** Gets the slide-toggle's label text. */\n    async getLabelText() {\n        return (await this._label()).text();\n    }\n    /** Focuses the slide-toggle. */\n    async focus() {\n        return (await this._nativeElement()).focus();\n    }\n    /** Blurs the slide-toggle. */\n    async blur() {\n        return (await this._nativeElement()).blur();\n    }\n    /** Whether the slide-toggle is focused. */\n    async isFocused() {\n        return (await this._nativeElement()).isFocused();\n    }\n    /**\n     * Puts the slide-toggle in a checked state by toggling it if it is currently unchecked, or doing\n     * nothing if it is already checked.\n     */\n    async check() {\n        if (!(await this.isChecked())) {\n            await this.toggle();\n        }\n    }\n    /**\n     * Puts the slide-toggle in an unchecked state by toggling it if it is currently checked, or doing\n     * nothing if it is already unchecked.\n     */\n    async uncheck() {\n        if (await this.isChecked()) {\n            await this.toggle();\n        }\n    }\n}\n\nexport { MatSlideToggleHarness };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": "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",
  "names": []
}
