37065eb66ad405e152cca8bcfb14449c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwoFactorComponent = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const window_helper_1 = require("app/helpers/window.helper");
const _2fa_1 = require("app/helptext/system/2fa");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const two_factor_elements_1 = require("app/pages/two-factor-auth/components/two-factor/two-factor.elements");
const auth_service_1 = require("app/services/auth/auth.service");
const ws_service_1 = require("app/services/ws.service");
let TwoFactorComponent = class TwoFactorComponent {
    get global2FaMsg() {
        if (!this.globalTwoFactorEnabled) {
            return this.translate.instant(_2fa_1.helptext2fa.two_factor.global_disabled);
        }
        if (this.userTwoFactorAuthConfigured) {
            return this.translate.instant(_2fa_1.helptext2fa.two_factor.global_enabled_user_enabled);
        }
        return this.translate.instant(_2fa_1.helptext2fa.two_factor.global_enabled_user_disabled);
    }
    constructor(authService, cdr, dialogService, translate, matDialog, ws, window) {
        this.authService = authService;
        this.cdr = cdr;
        this.dialogService = dialogService;
        this.translate = translate;
        this.matDialog = matDialog;
        this.ws = ws;
        this.window = window;
        this.searchableElements = two_factor_elements_1.twoFactorElements;
        this.userTwoFactorAuthConfigured = false;
        this.isDataLoading = false;
        this.isFormLoading = false;
        this.showQrCodeWarning = false;
        this.helptext = _2fa_1.helptext2fa;
        this.labels = {
            secret: _2fa_1.helptext2fa.two_factor.secret.placeholder,
            uri: _2fa_1.helptext2fa.two_factor.uri.placeholder,
        };
        this.tooltips = {
            secret: _2fa_1.helptext2fa.two_factor.secret.tooltip,
            uri: _2fa_1.helptext2fa.two_factor.uri.tooltip,
        };
    }
    ngOnInit() {
        this.loadTwoFactorConfigs();
        this.showQrCodeWarning = this.window.localStorage.getItem('showQr2FaWarning') === 'true';
    }
    ngOnDestroy() {
        this.window.localStorage.setItem('showQr2FaWarning', 'false');
    }
    loadTwoFactorConfigs() {
        this.isDataLoading = true;
        this.cdr.markForCheck();
        (0, rxjs_1.forkJoin)([
            this.authService.userTwoFactorConfig$.pipe((0, operators_1.take)(1)),
            this.authService.getGlobalTwoFactorConfig(),
        ])
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: ([userConfig, globalConfig]) => {
                this.isDataLoading = false;
                this.userTwoFactorAuthConfigured = userConfig.secret_configured;
                this.globalTwoFactorEnabled = globalConfig.enabled;
                this.cdr.markForCheck();
            },
        });
    }
    renewSecretOrEnable2Fa() {
        this.getConfirmation().pipe((0, operators_1.filter)(Boolean), (0, operators_1.switchMap)(() => this.renewSecretForUser()), (0, operators_1.tap)(() => this.toggleLoading(false)), (0, operators_1.catchError)((error) => this.handleError(error)), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
    }
    getProvisioningUriSecret(uri) {
        const url = new URL(uri);
        const params = new URLSearchParams(url.search);
        return params.get('secret');
    }
    handleError(error) {
        var _a;
        this.toggleLoading(false);
        return this.dialogService.error({
            title: _2fa_1.helptext2fa.two_factor.error,
            message: error.reason,
            backtrace: (_a = error.trace) === null || _a === void 0 ? void 0 : _a.formatted,
        });
    }
    renewSecretForUser() {
        this.toggleLoading(true);
        this.window.localStorage.setItem('showQr2FaWarning', 'true');
        return this.authService.user$.pipe((0, operators_1.take)(1), (0, operators_1.switchMap)((user) => this.ws.call('user.renew_2fa_secret', [user.pw_name, { interval: 30, otp_digits: 6 }])), (0, operators_1.switchMap)(() => this.authService.refreshUser()), (0, operators_1.tap)(() => {
            this.userTwoFactorAuthConfigured = true;
            this.showQrCodeWarning = true;
        }), (0, until_destroy_1.untilDestroyed)(this));
    }
    getConfirmation() {
        if (this.userTwoFactorAuthConfigured) {
            return this.dialogService.confirm({
                title: _2fa_1.helptext2fa.two_factor.renewSecret.title,
                message: _2fa_1.helptext2fa.two_factor.renewSecret.message,
                hideCheckbox: true,
                buttonText: _2fa_1.helptext2fa.two_factor.renewSecret.btn,
            });
        }
        return (0, rxjs_1.of)(true);
    }
    toggleLoading(isLoading) {
        this.isFormLoading = isLoading;
        this.cdr.markForCheck();
    }
};
exports.TwoFactorComponent = TwoFactorComponent;
TwoFactorComponent.ctorParameters = () => [
    { type: auth_service_1.AuthService },
    { type: core_1.ChangeDetectorRef },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: dialog_1.MatDialog },
    { type: ws_service_1.WebSocketService },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.TwoFactorComponent = TwoFactorComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-two-factor',
        template: require("./two-factor.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], TwoFactorComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,