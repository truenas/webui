1da8af463050cd84a415947aae5af9fd
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const explorer_type_enum_1 = require("app/enums/explorer-type.enum");
const file_attribute_enum_1 = require("app/enums/file-attribute.enum");
const file_type_enum_1 = require("app/enums/file-type.enum");
const filesystem_service_1 = require("app/services/filesystem.service");
const ws_service_1 = require("app/services/ws.service");
describe('FilesystemService', () => {
    let spectator;
    const createService = (0, jest_1.createServiceFactory)({
        service: filesystem_service_1.FilesystemService,
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('filesystem.listdir', [
                    {
                        path: '/mnt/parent/directory',
                        name: 'directory',
                        type: file_type_enum_1.FileType.Directory,
                        attributes: [file_attribute_enum_1.FileAttribute.MountRoot],
                    },
                    {
                        path: '/mnt/parent/file.txt',
                        name: 'file.txt',
                        type: file_type_enum_1.FileType.File,
                        attributes: [file_attribute_enum_1.FileAttribute.Immutable],
                    },
                ]),
            ]),
        ],
    });
    beforeEach(() => spectator = createService());
    describe('getFilesystemNodeProvider', () => {
        it('returns a TreeNodeProvider that calls filesystem.listdir to list files and directories', () => __awaiter(void 0, void 0, void 0, function* () {
            const treeNodeProvider = spectator.service.getFilesystemNodeProvider();
            const childNodes = yield (0, rxjs_1.lastValueFrom)(treeNodeProvider({
                data: {
                    path: '/mnt/parent',
                },
            }));
            expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('filesystem.listdir', ['/mnt/parent', [], {
                    select: ['attributes', 'is_ctldir', 'name', 'path', 'type'],
                    order_by: ['name'],
                    limit: 1000,
                }]);
            expect(childNodes).toEqual([
                {
                    hasChildren: true,
                    name: 'directory',
                    path: '/mnt/parent/directory',
                    type: explorer_type_enum_1.ExplorerNodeType.Directory,
                    isMountpoint: true,
                    isLock: false,
                },
                {
                    hasChildren: false,
                    name: 'file.txt',
                    path: '/mnt/parent/file.txt',
                    type: explorer_type_enum_1.ExplorerNodeType.File,
                    isMountpoint: false,
                    isLock: true,
                },
            ]);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2ZpbGVzeXN0ZW0uc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsaURBQWdGO0FBQ2hGLCtCQUFxQztBQUNyQyxzRkFBc0Y7QUFDdEYscUVBQWdFO0FBQ2hFLHVFQUE4RDtBQUM5RCw2REFBb0Q7QUFHcEQsd0VBQW9FO0FBQ3BFLHdEQUEyRDtBQUUzRCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksU0FBOEMsQ0FBQztJQUNuRCxNQUFNLGFBQWEsR0FBRyxJQUFBLDJCQUFvQixFQUFDO1FBQ3pDLE9BQU8sRUFBRSxzQ0FBaUI7UUFDMUIsU0FBUyxFQUFFO1lBQ1QsSUFBQSxvQ0FBYSxFQUFDO2dCQUNaLElBQUEsK0JBQVEsRUFBQyxvQkFBb0IsRUFBRTtvQkFDN0I7d0JBQ0UsSUFBSSxFQUFFLHVCQUF1Qjt3QkFDN0IsSUFBSSxFQUFFLFdBQVc7d0JBQ2pCLElBQUksRUFBRSx5QkFBUSxDQUFDLFNBQVM7d0JBQ3hCLFVBQVUsRUFBRSxDQUFDLG1DQUFhLENBQUMsU0FBUyxDQUFDO3FCQUN0QztvQkFDRDt3QkFDRSxJQUFJLEVBQUUsc0JBQXNCO3dCQUM1QixJQUFJLEVBQUUsVUFBVTt3QkFDaEIsSUFBSSxFQUFFLHlCQUFRLENBQUMsSUFBSTt3QkFDbkIsVUFBVSxFQUFFLENBQUMsbUNBQWEsQ0FBQyxTQUFTLENBQUM7cUJBQ3RDO2lCQUNjLENBQUM7YUFDbkIsQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsR0FBRyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBRTlDLFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDekMsRUFBRSxDQUFDLHdGQUF3RixFQUFFLEdBQVMsRUFBRTtZQUN0RyxNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUV2RSxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUEsb0JBQWEsRUFDcEMsZ0JBQWdCLENBQUM7Z0JBQ2YsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxhQUFhO2lCQUNwQjthQUM0QixDQUFDLENBQ2pDLENBQUM7WUFFRixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUNsRSxvQkFBb0IsRUFDcEIsQ0FBQyxhQUFhLEVBQUUsRUFBRSxFQUFFO29CQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO29CQUMzRCxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ2xCLEtBQUssRUFBRSxJQUFJO2lCQUNaLENBQUMsQ0FDSCxDQUFDO1lBQ0YsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDekI7b0JBQ0UsV0FBVyxFQUFFLElBQUk7b0JBQ2pCLElBQUksRUFBRSxXQUFXO29CQUNqQixJQUFJLEVBQUUsdUJBQXVCO29CQUM3QixJQUFJLEVBQUUscUNBQWdCLENBQUMsU0FBUztvQkFDaEMsWUFBWSxFQUFFLElBQUk7b0JBQ2xCLE1BQU0sRUFBRSxLQUFLO2lCQUNkO2dCQUNEO29CQUNFLFdBQVcsRUFBRSxLQUFLO29CQUNsQixJQUFJLEVBQUUsVUFBVTtvQkFDaEIsSUFBSSxFQUFFLHNCQUFzQjtvQkFDNUIsSUFBSSxFQUFFLHFDQUFnQixDQUFDLElBQUk7b0JBQzNCLFlBQVksRUFBRSxLQUFLO29CQUNuQixNQUFNLEVBQUUsSUFBSTtpQkFDYjthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9maWxlc3lzdGVtLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZXJ2aWNlRmFjdG9yeSwgU3BlY3RhdG9yU2VydmljZSB9IGZyb20gJ0BuZ25lYXQvc3BlY3RhdG9yL2plc3QnO1xuaW1wb3J0IHsgbGFzdFZhbHVlRnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbW9ja0NhbGwsIG1vY2tXZWJTb2NrZXQgfSBmcm9tICdhcHAvY29yZS90ZXN0aW5nL3V0aWxzL21vY2std2Vic29ja2V0LnV0aWxzJztcbmltcG9ydCB7IEV4cGxvcmVyTm9kZVR5cGUgfSBmcm9tICdhcHAvZW51bXMvZXhwbG9yZXItdHlwZS5lbnVtJztcbmltcG9ydCB7IEZpbGVBdHRyaWJ1dGUgfSBmcm9tICdhcHAvZW51bXMvZmlsZS1hdHRyaWJ1dGUuZW51bSc7XG5pbXBvcnQgeyBGaWxlVHlwZSB9IGZyb20gJ2FwcC9lbnVtcy9maWxlLXR5cGUuZW51bSc7XG5pbXBvcnQgeyBGaWxlUmVjb3JkIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvZmlsZS1yZWNvcmQuaW50ZXJmYWNlJztcbmltcG9ydCB7IEV4cGxvcmVyTm9kZURhdGEsIFRyZWVOb2RlIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvdHJlZS1ub2RlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWxlc3lzdGVtU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9maWxlc3lzdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy93cy5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0ZpbGVzeXN0ZW1TZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgc3BlY3RhdG9yOiBTcGVjdGF0b3JTZXJ2aWNlPEZpbGVzeXN0ZW1TZXJ2aWNlPjtcbiAgY29uc3QgY3JlYXRlU2VydmljZSA9IGNyZWF0ZVNlcnZpY2VGYWN0b3J5KHtcbiAgICBzZXJ2aWNlOiBGaWxlc3lzdGVtU2VydmljZSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgIG1vY2tXZWJTb2NrZXQoW1xuICAgICAgICBtb2NrQ2FsbCgnZmlsZXN5c3RlbS5saXN0ZGlyJywgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBhdGg6ICcvbW50L3BhcmVudC9kaXJlY3RvcnknLFxuICAgICAgICAgICAgbmFtZTogJ2RpcmVjdG9yeScsXG4gICAgICAgICAgICB0eXBlOiBGaWxlVHlwZS5EaXJlY3RvcnksXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBbRmlsZUF0dHJpYnV0ZS5Nb3VudFJvb3RdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGF0aDogJy9tbnQvcGFyZW50L2ZpbGUudHh0JyxcbiAgICAgICAgICAgIG5hbWU6ICdmaWxlLnR4dCcsXG4gICAgICAgICAgICB0eXBlOiBGaWxlVHlwZS5GaWxlLFxuICAgICAgICAgICAgYXR0cmlidXRlczogW0ZpbGVBdHRyaWJ1dGUuSW1tdXRhYmxlXSxcbiAgICAgICAgICB9LFxuICAgICAgICBdIGFzIEZpbGVSZWNvcmRbXSksXG4gICAgICBdKSxcbiAgICBdLFxuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHNwZWN0YXRvciA9IGNyZWF0ZVNlcnZpY2UoKSk7XG5cbiAgZGVzY3JpYmUoJ2dldEZpbGVzeXN0ZW1Ob2RlUHJvdmlkZXInLCAoKSA9PiB7XG4gICAgaXQoJ3JldHVybnMgYSBUcmVlTm9kZVByb3ZpZGVyIHRoYXQgY2FsbHMgZmlsZXN5c3RlbS5saXN0ZGlyIHRvIGxpc3QgZmlsZXMgYW5kIGRpcmVjdG9yaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdHJlZU5vZGVQcm92aWRlciA9IHNwZWN0YXRvci5zZXJ2aWNlLmdldEZpbGVzeXN0ZW1Ob2RlUHJvdmlkZXIoKTtcblxuICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGF3YWl0IGxhc3RWYWx1ZUZyb20oXG4gICAgICAgIHRyZWVOb2RlUHJvdmlkZXIoe1xuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBhdGg6ICcvbW50L3BhcmVudCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSBhcyBUcmVlTm9kZTxFeHBsb3Jlck5vZGVEYXRhPiksXG4gICAgICApO1xuXG4gICAgICBleHBlY3Qoc3BlY3RhdG9yLmluamVjdChXZWJTb2NrZXRTZXJ2aWNlKS5jYWxsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ2ZpbGVzeXN0ZW0ubGlzdGRpcicsXG4gICAgICAgIFsnL21udC9wYXJlbnQnLCBbXSwge1xuICAgICAgICAgIHNlbGVjdDogWydhdHRyaWJ1dGVzJywgJ2lzX2N0bGRpcicsICduYW1lJywgJ3BhdGgnLCAndHlwZSddLFxuICAgICAgICAgIG9yZGVyX2J5OiBbJ25hbWUnXSxcbiAgICAgICAgICBsaW1pdDogMTAwMCxcbiAgICAgICAgfV0sXG4gICAgICApO1xuICAgICAgZXhwZWN0KGNoaWxkTm9kZXMpLnRvRXF1YWwoW1xuICAgICAgICB7XG4gICAgICAgICAgaGFzQ2hpbGRyZW46IHRydWUsXG4gICAgICAgICAgbmFtZTogJ2RpcmVjdG9yeScsXG4gICAgICAgICAgcGF0aDogJy9tbnQvcGFyZW50L2RpcmVjdG9yeScsXG4gICAgICAgICAgdHlwZTogRXhwbG9yZXJOb2RlVHlwZS5EaXJlY3RvcnksXG4gICAgICAgICAgaXNNb3VudHBvaW50OiB0cnVlLFxuICAgICAgICAgIGlzTG9jazogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBoYXNDaGlsZHJlbjogZmFsc2UsXG4gICAgICAgICAgbmFtZTogJ2ZpbGUudHh0JyxcbiAgICAgICAgICBwYXRoOiAnL21udC9wYXJlbnQvZmlsZS50eHQnLFxuICAgICAgICAgIHR5cGU6IEV4cGxvcmVyTm9kZVR5cGUuRmlsZSxcbiAgICAgICAgICBpc01vdW50cG9pbnQ6IGZhbHNlLFxuICAgICAgICAgIGlzTG9jazogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9