{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/filesystem.service.spec.ts","mappings":";;;;;;;;;;;AAAA,iDAAgF;AAChF,+BAAqC;AACrC,sFAAsF;AACtF,qEAAgE;AAChE,uEAA8D;AAC9D,6DAAoD;AAGpD,wEAAoE;AACpE,wDAA2D;AAE3D,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,SAA8C,CAAC;IACnD,MAAM,aAAa,GAAG,IAAA,2BAAoB,EAAC;QACzC,OAAO,EAAE,sCAAiB;QAC1B,SAAS,EAAE;YACT,IAAA,oCAAa,EAAC;gBACZ,IAAA,+BAAQ,EAAC,oBAAoB,EAAE;oBAC7B;wBACE,IAAI,EAAE,uBAAuB;wBAC7B,IAAI,EAAE,WAAW;wBACjB,IAAI,EAAE,yBAAQ,CAAC,SAAS;wBACxB,UAAU,EAAE,CAAC,mCAAa,CAAC,SAAS,CAAC;qBACtC;oBACD;wBACE,IAAI,EAAE,sBAAsB;wBAC5B,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,yBAAQ,CAAC,IAAI;wBACnB,UAAU,EAAE,CAAC,mCAAa,CAAC,SAAS,CAAC;qBACtC;iBACc,CAAC;aACnB,CAAC;SACH;KACF,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE,CAAC,SAAS,GAAG,aAAa,EAAE,CAAC,CAAC;IAE9C,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,EAAE,CAAC,wFAAwF,EAAE,GAAS,EAAE;YACtG,MAAM,gBAAgB,GAAG,SAAS,CAAC,OAAO,CAAC,yBAAyB,EAAE,CAAC;YAEvE,MAAM,UAAU,GAAG,MAAM,IAAA,oBAAa,EACpC,gBAAgB,CAAC;gBACf,IAAI,EAAE;oBACJ,IAAI,EAAE,aAAa;iBACpB;aAC4B,CAAC,CACjC,CAAC;YAEF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,6BAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAClE,oBAAoB,EACpB,CAAC,aAAa,EAAE,EAAE,EAAE;oBAClB,MAAM,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;oBAC3D,QAAQ,EAAE,CAAC,MAAM,CAAC;oBAClB,KAAK,EAAE,IAAI;iBACZ,CAAC,CACH,CAAC;YACF,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;gBACzB;oBACE,WAAW,EAAE,IAAI;oBACjB,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,uBAAuB;oBAC7B,IAAI,EAAE,qCAAgB,CAAC,SAAS;oBAChC,YAAY,EAAE,IAAI;oBAClB,MAAM,EAAE,KAAK;iBACd;gBACD;oBACE,WAAW,EAAE,KAAK;oBAClB,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,sBAAsB;oBAC5B,IAAI,EAAE,qCAAgB,CAAC,IAAI;oBAC3B,YAAY,EAAE,KAAK;oBACnB,MAAM,EAAE,IAAI;iBACb;aACF,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/filesystem.service.spec.ts"],"sourcesContent":["import { createServiceFactory, SpectatorService } from '@ngneat/spectator/jest';\nimport { lastValueFrom } from 'rxjs';\nimport { mockCall, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { ExplorerNodeType } from 'app/enums/explorer-type.enum';\nimport { FileAttribute } from 'app/enums/file-attribute.enum';\nimport { FileType } from 'app/enums/file-type.enum';\nimport { FileRecord } from 'app/interfaces/file-record.interface';\nimport { ExplorerNodeData, TreeNode } from 'app/interfaces/tree-node.interface';\nimport { FilesystemService } from 'app/services/filesystem.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\ndescribe('FilesystemService', () => {\n  let spectator: SpectatorService<FilesystemService>;\n  const createService = createServiceFactory({\n    service: FilesystemService,\n    providers: [\n      mockWebSocket([\n        mockCall('filesystem.listdir', [\n          {\n            path: '/mnt/parent/directory',\n            name: 'directory',\n            type: FileType.Directory,\n            attributes: [FileAttribute.MountRoot],\n          },\n          {\n            path: '/mnt/parent/file.txt',\n            name: 'file.txt',\n            type: FileType.File,\n            attributes: [FileAttribute.Immutable],\n          },\n        ] as FileRecord[]),\n      ]),\n    ],\n  });\n\n  beforeEach(() => spectator = createService());\n\n  describe('getFilesystemNodeProvider', () => {\n    it('returns a TreeNodeProvider that calls filesystem.listdir to list files and directories', async () => {\n      const treeNodeProvider = spectator.service.getFilesystemNodeProvider();\n\n      const childNodes = await lastValueFrom(\n        treeNodeProvider({\n          data: {\n            path: '/mnt/parent',\n          },\n        } as TreeNode<ExplorerNodeData>),\n      );\n\n      expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith(\n        'filesystem.listdir',\n        ['/mnt/parent', [], {\n          select: ['attributes', 'is_ctldir', 'name', 'path', 'type'],\n          order_by: ['name'],\n          limit: 1000,\n        }],\n      );\n      expect(childNodes).toEqual([\n        {\n          hasChildren: true,\n          name: 'directory',\n          path: '/mnt/parent/directory',\n          type: ExplorerNodeType.Directory,\n          isMountpoint: true,\n          isLock: false,\n        },\n        {\n          hasChildren: false,\n          name: 'file.txt',\n          path: '/mnt/parent/file.txt',\n          type: ExplorerNodeType.File,\n          isMountpoint: false,\n          isLock: true,\n        },\n      ]);\n    });\n  });\n});\n"],"version":3}