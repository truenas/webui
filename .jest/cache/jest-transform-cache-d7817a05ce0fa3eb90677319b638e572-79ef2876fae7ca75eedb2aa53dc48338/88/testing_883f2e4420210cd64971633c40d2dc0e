c7df3135dc7d8ce6fbebedea37389a7d
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  MatMenuHarness: () => MatMenuHarness,
  MatMenuItemHarness: () => MatMenuItemHarness
});
module.exports = __toCommonJS(testing_exports);
var import_testing = require("@angular/cdk/testing");
var import_coercion = require("@angular/cdk/coercion");
const _MatMenuHarness = class _MatMenuHarness extends import_testing.ContentContainerComponentHarness {
  constructor() {
    super(...arguments);
    this._documentRootLocator = this.documentRootLocatorFactory();
  }
  /**
   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.
   * @param options Options for filtering which menu instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(this, options).addOption("triggerText", options.triggerText, (harness, text) => import_testing.HarnessPredicate.stringMatches(harness.getTriggerText(), text));
  }
  /** Whether the menu is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      const disabled = (yield this.host()).getAttribute("disabled");
      return (0, import_coercion.coerceBooleanProperty)(yield disabled);
    });
  }
  /** Whether the menu is open. */
  isOpen() {
    return __async(this, null, function* () {
      return !!(yield this._getMenuPanel());
    });
  }
  /** Gets the text of the menu's trigger element. */
  getTriggerText() {
    return __async(this, null, function* () {
      return (yield this.host()).text();
    });
  }
  /** Focuses the menu. */
  focus() {
    return __async(this, null, function* () {
      return (yield this.host()).focus();
    });
  }
  /** Blurs the menu. */
  blur() {
    return __async(this, null, function* () {
      return (yield this.host()).blur();
    });
  }
  /** Whether the menu is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this.host()).isFocused();
    });
  }
  /** Opens the menu. */
  open() {
    return __async(this, null, function* () {
      if (!(yield this.isOpen())) {
        return (yield this.host()).click();
      }
    });
  }
  /** Closes the menu. */
  close() {
    return __async(this, null, function* () {
      const panel = yield this._getMenuPanel();
      if (panel) {
        return panel.sendKeys(import_testing.TestKey.ESCAPE);
      }
    });
  }
  /**
   * Gets a list of `MatMenuItemHarness` representing the items in the menu.
   * @param filters Optionally filters which menu items are included.
   */
  getItems(filters) {
    return __async(this, null, function* () {
      const panelId = yield this._getPanelId();
      if (panelId) {
        return this._documentRootLocator.locatorForAll(MatMenuItemHarness.with(__spreadProps(__spreadValues({}, filters || {}), {
          ancestor: `#${panelId}`
        })))();
      }
      return [];
    });
  }
  /**
   * Clicks an item in the menu, and optionally continues clicking items in subsequent sub-menus.
   * @param itemFilter A filter used to represent which item in the menu should be clicked. The
   *     first matching menu item will be clicked.
   * @param subItemFilters A list of filters representing the items to click in any subsequent
   *     sub-menus. The first item in the sub-menu matching the corresponding filter in
   *     `subItemFilters` will be clicked.
   */
  clickItem(itemFilter, ...subItemFilters) {
    return __async(this, null, function* () {
      yield this.open();
      const items = yield this.getItems(itemFilter);
      if (!items.length) {
        throw Error(`Could not find item matching ${JSON.stringify(itemFilter)}`);
      }
      if (!subItemFilters.length) {
        return yield items[0].click();
      }
      const menu = yield items[0].getSubmenu();
      if (!menu) {
        throw Error(`Item matching ${JSON.stringify(itemFilter)} does not have a submenu`);
      }
      return menu.clickItem(...subItemFilters);
    });
  }
  getRootHarnessLoader() {
    return __async(this, null, function* () {
      const panelId = yield this._getPanelId();
      return this.documentRootLocatorFactory().harnessLoaderFor(`#${panelId}`);
    });
  }
  /** Gets the menu panel associated with this menu. */
  _getMenuPanel() {
    return __async(this, null, function* () {
      const panelId = yield this._getPanelId();
      return panelId ? this._documentRootLocator.locatorForOptional(`#${panelId}`)() : null;
    });
  }
  /** Gets the id of the menu panel associated with this menu. */
  _getPanelId() {
    return __async(this, null, function* () {
      const panelId = yield (yield this.host()).getAttribute("aria-controls");
      return panelId || null;
    });
  }
};
_MatMenuHarness.hostSelector = ".mat-mdc-menu-trigger";
let MatMenuHarness = _MatMenuHarness;
const _MatMenuItemHarness = class _MatMenuItemHarness extends import_testing.ContentContainerComponentHarness {
  /**
   * Gets a `HarnessPredicate` that can be used to search for a menu item with specific attributes.
   * @param options Options for filtering which menu item instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(this, options).addOption("text", options.text, (harness, text) => import_testing.HarnessPredicate.stringMatches(harness.getText(), text)).addOption("hasSubmenu", options.hasSubmenu, (harness, hasSubmenu) => __async(this, null, function* () {
      return (yield harness.hasSubmenu()) === hasSubmenu;
    }));
  }
  /** Whether the menu is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      const disabled = (yield this.host()).getAttribute("disabled");
      return (0, import_coercion.coerceBooleanProperty)(yield disabled);
    });
  }
  /** Gets the text of the menu item. */
  getText() {
    return __async(this, null, function* () {
      return (yield this.host()).text();
    });
  }
  /** Focuses the menu item. */
  focus() {
    return __async(this, null, function* () {
      return (yield this.host()).focus();
    });
  }
  /** Blurs the menu item. */
  blur() {
    return __async(this, null, function* () {
      return (yield this.host()).blur();
    });
  }
  /** Whether the menu item is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this.host()).isFocused();
    });
  }
  /** Clicks the menu item. */
  click() {
    return __async(this, null, function* () {
      return (yield this.host()).click();
    });
  }
  /** Whether this item has a submenu. */
  hasSubmenu() {
    return __async(this, null, function* () {
      return (yield this.host()).matchesSelector(MatMenuHarness.hostSelector);
    });
  }
  /** Gets the submenu associated with this menu item, or null if none. */
  getSubmenu() {
    return __async(this, null, function* () {
      if (yield this.hasSubmenu()) {
        return new MatMenuHarness(this.locatorFactory);
      }
      return null;
    });
  }
};
_MatMenuItemHarness.hostSelector = ".mat-mdc-menu-item";
let MatMenuItemHarness = _MatMenuItemHarness;
