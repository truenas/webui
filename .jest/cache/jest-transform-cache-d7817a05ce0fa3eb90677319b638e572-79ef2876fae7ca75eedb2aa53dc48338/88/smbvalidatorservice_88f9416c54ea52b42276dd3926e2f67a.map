{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/sharing/smb/smb-form/smb-validator.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/sharing/smb/smb-form/smb-validator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  AbstractControl, ValidationErrors,\n} from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Observable, catchError, debounceTime, distinctUntilChanged, of, switchMap, take,\n} from 'rxjs';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmbValidationService {\n  private noSmbUsersError = this.translate.instant('TrueNAS server must be joined to Active Directory or have at least one local SMB user before creating an SMB share');\n  private nameExistsError = this.translate.instant('Share with this name already exists');\n  private wasNoSmbUsersWarningShown = false;\n\n  constructor(\n    private ws: WebSocketService,\n    private dialogService: DialogService,\n    private translate: TranslateService,\n  ) { }\n\n  validate = (originalName?: string): (control: AbstractControl<string>) => Observable<ValidationErrors | null> => {\n    this.wasNoSmbUsersWarningShown = false;\n    return (control: AbstractControl<string>): Observable<ValidationErrors | null> => {\n      return control.valueChanges.pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        take(1),\n        switchMap((value: string) => {\n          if (originalName === value) {\n            return of(null);\n          }\n\n          return this.ws.call('sharing.smb.share_precheck', [{ name: value }]).pipe(\n            switchMap((response) => this.handleError(response)),\n            catchError((error: { reason: string }) => this.handleError(error)),\n          );\n        }),\n      );\n    };\n  };\n\n  private handleError(error: { reason: string }): Observable<ValidationErrors | null> {\n    if (error === null) {\n      return of(null);\n    }\n\n    const errorText = this.extractError(error.reason);\n\n    if (errorText === this.noSmbUsersError) {\n      this.showNoSmbUsersWarning();\n      return of(null);\n    }\n\n    return of({\n      customValidator: {\n        message: errorText,\n      },\n      preCheckFailed: true,\n    });\n  }\n\n  private showNoSmbUsersWarning(): void {\n    if (this.wasNoSmbUsersWarningShown) {\n      return;\n    }\n    this.wasNoSmbUsersWarningShown = true;\n    this.dialogService\n      .confirm({\n        title: this.translate.instant('Warning'),\n        message: this.noSmbUsersError,\n        hideCheckbox: true,\n        buttonText: this.translate.instant('Close'),\n        hideCancel: true,\n      })\n      .pipe(untilDestroyed(this))\n      .subscribe();\n  }\n\n  private extractError(error: string): string {\n    if (error.includes(this.noSmbUsersError)) {\n      return this.translate.instant(this.noSmbUsersError);\n    }\n    if (error.includes(this.nameExistsError)) {\n      return this.translate.instant(this.nameExistsError);\n    }\n    return error;\n  }\n}\n"],"version":3}