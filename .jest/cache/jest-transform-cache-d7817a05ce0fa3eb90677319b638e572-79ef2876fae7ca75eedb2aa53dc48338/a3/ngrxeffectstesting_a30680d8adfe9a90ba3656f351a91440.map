{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@ngrx/effects/fesm2022/ngrx-effects-testing.mjs"],
  "sourcesContent": ["import { Actions } from '@ngrx/effects';\nimport { defer } from 'rxjs';\n\n/**\n * @description\n * Creates mock actions provider.\n *\n * @param factoryOrSource Actions' source or source creation function\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```ts\n * describe('Books Effects', () => {\n *   let actions$ = new Observable<Action>();\n *   let effects: BooksEffects;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockActions(() => actions$),\n *         BooksEffects,\n *       ],\n *     });\n *\n *     actions$ = TestBed.inject(Actions);\n *     effects = TestBed.inject(BooksEffects);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```ts\n * describe('Counter Effects', () => {\n *   let injector: Injector;\n *   let actions$ = new Observable<Action>();\n *   let effects: CounterEffects;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockActions(() => actions$),\n *         CounterEffects,\n *       ],\n *     });\n *\n *     actions$ = injector.get(Actions);\n *     effects = injector.get(CounterEffects);\n *   });\n * });\n * ```\n */\nfunction provideMockActions(factoryOrSource) {\n    return {\n        provide: Actions,\n        useFactory: () => {\n            if (typeof factoryOrSource === 'function') {\n                return new Actions(defer(factoryOrSource));\n            }\n            return new Actions(factoryOrSource);\n        },\n        deps: [],\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { provideMockActions };\n//# sourceMappingURL=ngrx-effects-testing.mjs.map\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAwB;AACxB,kBAAsB;AAqDtB,SAAS,mBAAmB,iBAAiB;AACzC,SAAO;AAAA,IACH,SAAS;AAAA,IACT,YAAY,MAAM;AACd,UAAI,OAAO,oBAAoB,YAAY;AACvC,eAAO,IAAI,2BAAQ,mBAAM,eAAe,CAAC;AAAA,MAC7C;AACA,aAAO,IAAI,uBAAQ,eAAe;AAAA,IACtC;AAAA,IACA,MAAM,CAAC;AAAA,EACX;AACJ;",
  "names": []
}
