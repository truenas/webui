1f65dde2e55675f65c904b7f508d5932
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const time_constant_1 = require("app/constants/time.constant");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const window_helper_1 = require("app/helpers/window.helper");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const auth_service_1 = require("app/services/auth/auth.service");
const token_last_used_service_1 = require("app/services/token-last-used.service");
const ws_service_1 = require("app/services/ws.service");
describe('TokenLastUsedService', () => {
    let spectator;
    const mockLocalStorage = {
        getItem: jest.fn(),
        setItem: jest.fn(),
    };
    const createService = (0, jest_1.createServiceFactory)({
        service: token_last_used_service_1.TokenLastUsedService,
        providers: [
            (0, jest_1.mockProvider)(dialog_service_1.DialogService),
            (0, jest_1.mockProvider)(auth_service_1.AuthService, {
                clearAuthToken: jest.fn(),
                logout: jest.fn().mockReturnValue(new rxjs_1.Subject()),
                user$: new rxjs_1.Subject(),
            }),
            (0, mock_websocket_utils_1.mockWebSocket)(),
            {
                provide: window_helper_1.WINDOW,
                useValue: {
                    localStorage: mockLocalStorage,
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                },
            },
        ],
    });
    beforeEach(() => {
        spectator = createService();
    });
    describe('isTokenWithinTimeline', () => {
        it('should return false if tokenLastUsed is not set', () => {
            mockLocalStorage.getItem.mockReturnValue(JSON.stringify(null));
            spectator.service.isTokenWithinTimeline$.subscribe((value) => {
                expect(value).toBe(false);
            });
        });
        it('should return true if tokenLastUsed is within 5 minutes', () => {
            const now = new Date();
            const tokenLastUsed = new Date(now.getTime() - 4 * time_constant_1.oneMinuteMillis).toISOString();
            mockLocalStorage.getItem.mockReturnValue(tokenLastUsed);
            spectator.service.isTokenWithinTimeline$.subscribe((value) => {
                expect(value).toBe(true);
            });
        });
        it('should return false if tokenLastUsed is older than 5 minutes', () => {
            const now = new Date();
            const tokenLastUsed = new Date(now.getTime() - 20 * time_constant_1.oneMinuteMillis).toISOString();
            mockLocalStorage.getItem.mockReturnValue(tokenLastUsed);
            spectator.service.isTokenWithinTimeline$.subscribe((value) => {
                expect(value).toBe(false);
            });
        });
    });
    describe('setupTokenLastUsedValue', () => {
        it('should update tokenLastUsed in localStorage on user and WebSocket activity', () => {
            const user$ = spectator.inject(auth_service_1.AuthService).user$;
            const updateTokenLastUsedSpy = jest.spyOn(spectator.service, 'updateTokenLastUsed');
            const ws$ = new rxjs_1.Subject();
            jest.spyOn(spectator.inject(ws_service_1.WebSocketService), 'getWebSocketStream$').mockReturnValue(ws$);
            spectator.service.setupTokenLastUsedValue((0, rxjs_1.of)({}));
            user$.next({});
            expect(updateTokenLastUsedSpy).toHaveBeenCalled();
            ws$.next({});
            expect(updateTokenLastUsedSpy).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,