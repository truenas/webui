a3d7c86f5973a5bd08388e3c99422619
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("@angular/material/dialog");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const fake_job_utils_1 = require("app/core/testing/utils/fake-job.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const stop_vm_dialog_component_1 = require("app/pages/vm/vm-list/stop-vm-dialog/stop-vm-dialog.component");
const ws_service_1 = require("app/services/ws.service");
const vm_service_1 = require("./vm.service");
describe('VmService', () => {
    let spectator;
    const createService = (0, jest_1.createServiceFactory)({
        service: vm_service_1.VmService,
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('core.download'),
                (0, mock_websocket_utils_1.mockCall)('vm.virtualization_details', { supported: true, error: null }),
                (0, mock_websocket_utils_1.mockCall)('vm.start'),
                (0, mock_websocket_utils_1.mockCall)('vm.poweroff'),
                (0, mock_websocket_utils_1.mockCall)('vm.get_available_memory', 4096),
                (0, mock_websocket_utils_1.mockJob)('vm.stop', (0, fake_job_utils_1.fakeSuccessfulJob)()),
                (0, mock_websocket_utils_1.mockJob)('vm.restart', (0, fake_job_utils_1.fakeSuccessfulJob)()),
            ]),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService),
            (0, jest_1.mockProvider)(dialog_1.MatDialog, {
                open: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)(true),
                })),
            }),
        ],
    });
    beforeEach(() => {
        spectator = createService();
    });
    it('should get virtualization details', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(yield (0, rxjs_1.firstValueFrom)(spectator.service.hasVirtualizationSupport$)).toBe(true);
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('vm.virtualization_details');
    }));
    it('should get available memory', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(yield (0, rxjs_1.firstValueFrom)(spectator.service.getAvailableMemory())).toBe(4096);
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('vm.get_available_memory');
    }));
    it('should call websocket to start vm', () => {
        spectator.service.doStart({ id: 1 });
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('vm.start', [1]);
    });
    it('should open dialog to stop vm', () => {
        spectator.service.doStop({ id: 1 });
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(stop_vm_dialog_component_1.StopVmDialogComponent, { data: { id: 1 } });
    });
    it('should call websocket to restart vm', () => {
        spectator.service.doRestart({ id: 1 });
        expect(spectator.inject(ws_service_1.WebSocketService).startJob).toHaveBeenCalledWith('vm.restart', [1]);
    });
    it('should call websocket to poweroff vm', () => {
        spectator.service.doPowerOff({ id: 1 });
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('vm.poweroff', [1]);
    });
    it('should call websocket to download vm logs', () => {
        spectator.service.downloadLogs({ id: 1, name: 'test' });
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('core.download', ['vm.log_file_download', [1], '1_test.log']);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,