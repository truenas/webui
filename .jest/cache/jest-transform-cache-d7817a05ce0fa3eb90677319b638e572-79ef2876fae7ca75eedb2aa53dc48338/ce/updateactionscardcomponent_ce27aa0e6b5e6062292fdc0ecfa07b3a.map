{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/update/components/update-actions-card/update-actions-card.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/update/components/update-actions-card/update-actions-card.component.ts"],"sourcesContent":["import { AsyncPipe } from '@angular/common';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit,\n} from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport { MatCard } from '@angular/material/card';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { select, Store } from '@ngrx/store';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\nimport {\n  Observable, of, filter, tap, combineLatest, map, switchMap,\n  take,\n} from 'rxjs';\nimport { RequiresRolesDirective } from 'app/directives/requires-roles/requires-roles.directive';\nimport { JobState } from 'app/enums/job-state.enum';\nimport { Role } from 'app/enums/role.enum';\nimport { SystemUpdateOperationType, SystemUpdateStatus } from 'app/enums/system-update.enum';\nimport { observeJob } from 'app/helpers/operators/observe-job.operator';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { helptextGlobal } from 'app/helptext/global-helptext';\nimport { helptextSystemUpdate as helptext } from 'app/helptext/system/update';\nimport { ApiJobMethod } from 'app/interfaces/api/api-job-directory.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { WebSocketError } from 'app/interfaces/websocket-error.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxIconComponent } from 'app/modules/ix-icon/ix-icon.component';\nimport { selectJob } from 'app/modules/jobs/store/job.selectors';\nimport { AppLoaderService } from 'app/modules/loader/app-loader.service';\nimport { SnackbarService } from 'app/modules/snackbar/services/snackbar.service';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport {\n  SaveConfigDialogComponent, SaveConfigDialogMessages,\n} from 'app/pages/system/general-settings/save-config-dialog/save-config-dialog.component';\nimport { UpdateType } from 'app/pages/system/update/enums/update-type.enum';\nimport { Package } from 'app/pages/system/update/interfaces/package.interface';\nimport { TrainService } from 'app/pages/system/update/services/train.service';\nimport { UpdateService } from 'app/pages/system/update/services/update.service';\nimport { updateAgainCode } from 'app/pages/system/update/utils/update-again-code.constant';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { SystemGeneralService } from 'app/services/system-general.service';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { AppState } from 'app/store';\nimport { selectIsHaLicensed } from 'app/store/ha-info/ha-info.selectors';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-update-actions-card',\n  styleUrls: ['update-actions-card.component.scss'],\n  templateUrl: './update-actions-card.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatCard,\n    IxIconComponent,\n    RequiresRolesDirective,\n    MatButton,\n    TestDirective,\n    TranslateModule,\n    AsyncPipe,\n  ],\n})\nexport class UpdateActionsCardComponent implements OnInit {\n  isUpdateRunning = false;\n  updateMethod: ApiJobMethod = 'update.update';\n  isHaLicensed = false;\n  updateType: UpdateType;\n  sysUpdateMessage = helptextGlobal.sysUpdateMessage;\n  sysUpdateMsgPt2 = helptextGlobal.sysUpdateMessagePt2;\n  updateTitle = this.translate.instant('Update');\n\n  showApplyPendingButton$ = combineLatest([\n    this.updateService.updateDownloaded$,\n    this.updateService.status$,\n  ]).pipe(map(([updateDownloaded, status]) => updateDownloaded && status !== SystemUpdateStatus.Unavailable));\n\n  showDownloadUpdateButton$ = this.updateService.updatesAvailable$;\n\n  isDownloadUpdatesButtonDisabled$ = this.updateService.status$.pipe(\n    map((status) => status === SystemUpdateStatus.RebootRequired),\n  );\n\n  protected readonly requiredRoles = [Role.FullAdmin];\n\n  private wasConfigurationSaved = false;\n\n  constructor(\n    private router: Router,\n    private ws: WebSocketService,\n    private matDialog: MatDialog,\n    private sysGenService: SystemGeneralService,\n    private errorHandler: ErrorHandlerService,\n    private loader: AppLoaderService,\n    private dialogService: DialogService,\n    private translate: TranslateService,\n    private store$: Store<AppState>,\n    private snackbar: SnackbarService,\n    protected trainService: TrainService,\n    protected updateService: UpdateService,\n    private cdr: ChangeDetectorRef,\n    @Inject(WINDOW) private window: Window,\n  ) {\n    this.sysGenService.updateRunning.pipe(untilDestroyed(this)).subscribe((isUpdating: string) => {\n      this.isUpdateRunning = isUpdating === 'true';\n      this.cdr.markForCheck();\n    });\n  }\n\n  ngOnInit(): void {\n    this.store$.select(selectIsHaLicensed).pipe(untilDestroyed(this)).subscribe((isLicensed) => {\n      this.isHaLicensed = isLicensed;\n      if (isLicensed) {\n        this.updateMethod = 'failover.upgrade';\n      }\n      this.cdr.markForCheck();\n      this.checkForUpdateRunning();\n    });\n  }\n\n  checkForUpdateRunning(): void {\n    this.ws.call('core.get_jobs', [[['method', '=', this.updateMethod], ['state', '=', JobState.Running]]])\n      .pipe(untilDestroyed(this)).subscribe({\n        next: (jobs) => {\n          if (jobs && jobs.length > 0) {\n            this.isUpdateRunning = true;\n            this.showRunningUpdate(jobs[0].id);\n          }\n          this.cdr.markForCheck();\n        },\n        error: (err) => {\n          console.error(err);\n        },\n      });\n  }\n\n  // Shows an update in progress as a job dialog on the update page\n  showRunningUpdate(jobId: number): void {\n    const job$ = this.store$.pipe(\n      select(selectJob(jobId)),\n      observeJob(),\n    ) as Observable<Job<ApiJobMethod>>;\n\n    this.dialogService.jobDialog(\n      job$,\n      {\n        title: this.updateTitle,\n        canMinimize: true,\n      },\n    )\n      .afterClosed()\n      .pipe(\n        this.errorHandler.catchError(),\n        untilDestroyed(this),\n      )\n      .subscribe(() => {\n        this.router.navigate(['/system-tasks/restart'], { skipLocationChange: true });\n      });\n  }\n\n  downloadUpdate(): void {\n    this.ws.call('core.get_jobs', [[['method', '=', this.updateMethod], ['state', '=', JobState.Running]]])\n      .pipe(this.errorHandler.catchError(), untilDestroyed(this))\n      .subscribe((jobs) => {\n        if (jobs[0]) {\n          this.showRunningUpdate(jobs[0].id);\n        } else {\n          this.startUpdate();\n        }\n        this.cdr.markForCheck();\n      });\n  }\n\n  applyPendingUpdate(): void {\n    this.updateType = UpdateType.ApplyPending;\n    this.saveConfigurationIfNecessary()\n      .pipe(untilDestroyed(this))\n      .subscribe(() => this.continueUpdate());\n  }\n\n  manualUpdate(): void {\n    this.updateType = UpdateType.Manual;\n    this.saveConfigurationIfNecessary()\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.router.navigate(['/system/update/manualupdate']);\n      });\n  }\n\n  startUpdate(): void {\n    this.updateService.error$.next(null);\n    this.ws.call('update.check_available').pipe(this.loader.withLoader(), untilDestroyed(this)).subscribe({\n      next: (update) => {\n        this.updateService.status$.next(update.status);\n        if (update.status === SystemUpdateStatus.Available) {\n          const packages: Package[] = [];\n          update.changes.forEach((change) => {\n            if (change.operation === SystemUpdateOperationType.Upgrade) {\n              packages.push({\n                operation: 'Upgrade',\n                name: change.old.name + '-' + change.old.version\n                + ' -> ' + change.new.name + '-'\n                + change.new.version,\n              });\n            } else if (change.operation === SystemUpdateOperationType.Install) {\n              packages.push({\n                operation: 'Install',\n                name: change.new.name + '-' + change.new.version,\n              });\n            } else if (change.operation === SystemUpdateOperationType.Delete) {\n              if (change.old) {\n                packages.push({\n                  operation: 'Delete',\n                  name: change.old.name + '-' + change.old.version,\n                });\n              } else if (change.new) {\n                packages.push({\n                  operation: 'Delete',\n                  name: change.new.name + '-' + change.new.version,\n                });\n              }\n            } else {\n              console.error('Unknown operation:', change.operation);\n            }\n          });\n          this.updateService.packages$.next(packages);\n\n          if (update.changelog) {\n            this.updateService.changeLog$.next(update.changelog.replace(/\\n/g, '<br>'));\n          }\n          if (update.release_notes_url) {\n            this.updateService.releaseNotesUrl$.next(update.release_notes_url);\n          }\n          this.updateType = UpdateType.Standard;\n          this.saveConfigurationIfNecessary()\n            .pipe(untilDestroyed(this))\n            .subscribe(() => this.confirmAndUpdate());\n        } else if (update.status === SystemUpdateStatus.Unavailable) {\n          this.snackbar.success(this.translate.instant('No updates available.'));\n        }\n      },\n      error: (error: WebSocketError) => {\n        this.dialogService.error({\n          title: this.translate.instant('Error checking for updates.'),\n          message: error.reason,\n          backtrace: error.trace?.formatted,\n        });\n      },\n      complete: () => {\n        this.loader.close();\n        this.cdr.markForCheck();\n      },\n    });\n  }\n\n  // Continues the update process began in startUpdate(), after passing through the Save Config dialog\n  confirmAndUpdate(): void {\n    let downloadMsg;\n    let confirmMsg;\n\n    if (!this.isHaLicensed) {\n      downloadMsg = helptext.non_ha_download_msg;\n      confirmMsg = helptext.non_ha_confirm_msg;\n    } else {\n      downloadMsg = helptext.ha_download_msg;\n      confirmMsg = helptext.ha_confirm_msg;\n    }\n\n    this.dialogService.confirm({\n      title: this.translate.instant('Download Update'),\n      message: this.translate.instant(downloadMsg),\n      hideCheckbox: true,\n      buttonText: this.translate.instant('Download'),\n      secondaryCheckbox: true,\n      secondaryCheckboxText: this.translate.instant(confirmMsg),\n    })\n      .pipe(untilDestroyed(this))\n      .subscribe((result) => {\n        if (!result.confirmed) {\n          return;\n        }\n\n        if (!result.secondaryCheckbox) {\n          this.downloadUpdates();\n        } else {\n          this.update();\n        }\n      });\n  }\n\n  private update(resume = false): void {\n    this.window.sessionStorage.removeItem('updateLastChecked');\n    this.window.sessionStorage.removeItem('updateAvailable');\n    this.sysGenService.updateRunningNoticeSent.emit();\n\n    let job$: Observable<Job>;\n    if (this.isHaLicensed) {\n      job$ = this.trainService.trainValue$.pipe(\n        take(1),\n        switchMap((trainValue) => this.ws.call('update.set_train', [trainValue])),\n        switchMap(() => this.ws.job('failover.upgrade', [{ resume }])),\n      );\n    } else {\n      job$ = this.ws.job('update.update', [{ resume, reboot: true }]);\n    }\n\n    this.dialogService\n      .jobDialog(job$, { title: this.translate.instant(this.updateTitle) })\n      .afterClosed()\n      .pipe(\n        switchMap(() => {\n          this.dialogService.closeAllDialogs();\n          this.isUpdateRunning = false;\n          this.sysGenService.updateDone(); // Send 'finished' signal to topbar\n          this.cdr.markForCheck();\n          return this.dialogService.confirm({\n            title: helptext.ha_update.complete_title,\n            message: helptext.ha_update.complete_msg,\n            hideCheckbox: true,\n            buttonText: helptext.ha_update.complete_action,\n            hideCancel: true,\n          });\n        }),\n        this.errorHandler.catchError(),\n        untilDestroyed(this),\n      )\n      .subscribe();\n  }\n\n  // Continues the update (based on its type) after the Save Config dialog is closed\n  continueUpdate(): void {\n    switch (this.updateType) {\n      case UpdateType.ApplyPending: {\n        const message = this.isHaLicensed\n          ? this.translate.instant('The standby controller will be automatically restarted to finalize the update. Apply updates and restart the standby controller?')\n          : this.translate.instant('The system will restart and be briefly unavailable while applying updates. Apply updates and restart?');\n        this.dialogService.confirm({\n          title: this.translate.instant('Apply Pending Updates'),\n          message: this.translate.instant(message),\n        }).pipe(filter(Boolean), untilDestroyed(this)).subscribe(() => {\n          this.update();\n        });\n        break;\n      }\n      case UpdateType.Standard:\n        this.confirmAndUpdate();\n    }\n  }\n\n  private saveConfigurationIfNecessary(): Observable<void> {\n    if (this.wasConfigurationSaved) {\n      return of(null);\n    }\n\n    return this.matDialog.open(SaveConfigDialogComponent, {\n      data: {\n        title: this.translate.instant('Save configuration settings from this machine before updating?'),\n        saveButton: this.translate.instant('Save Configuration'),\n        cancelButton: this.translate.instant('Do not save'),\n      } as Partial<SaveConfigDialogMessages>,\n    })\n      .afterClosed()\n      .pipe(\n        tap((wasSaved) => {\n          if (wasSaved) {\n            this.wasConfigurationSaved = true;\n          }\n        }),\n      );\n  }\n\n  private handleUpdateError(error: Job): void {\n    if (error.error.includes(updateAgainCode)) {\n      this.dialogService.confirm({\n        title: helptext.continueDialogTitle,\n        message: error.error.replace(updateAgainCode, ''),\n        buttonText: helptext.continueDialogAction,\n      }).pipe(\n        filter(Boolean),\n        untilDestroyed(this),\n      ).subscribe(() => {\n        this.update(true);\n      });\n      return;\n    }\n    this.dialogService.error(this.errorHandler.parseError(error));\n  }\n\n  private downloadUpdates(): void {\n    this.dialogService.jobDialog(\n      this.ws.job('update.download'),\n      { title: this.updateTitle },\n    )\n      .afterClosed()\n      .pipe(\n        this.errorHandler.catchError(),\n        untilDestroyed(this),\n      )\n      .subscribe(() => {\n        this.snackbar.success(this.translate.instant('Updates successfully downloaded'));\n        this.updateService.pendingUpdates();\n      });\n  }\n}\n"],"version":3}