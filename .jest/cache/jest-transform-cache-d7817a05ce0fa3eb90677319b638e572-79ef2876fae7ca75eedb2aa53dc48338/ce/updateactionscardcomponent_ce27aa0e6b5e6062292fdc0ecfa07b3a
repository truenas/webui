66bd5dc0d2d1b9c0f0a2a383d251ad97
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateActionsCardComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const dialog_1 = require("@angular/material/dialog");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const job_state_enum_1 = require("app/enums/job-state.enum");
const role_enum_1 = require("app/enums/role.enum");
const system_update_enum_1 = require("app/enums/system-update.enum");
const observe_job_operator_1 = require("app/helpers/operators/observe-job.operator");
const window_helper_1 = require("app/helpers/window.helper");
const global_helptext_1 = require("app/helptext/global-helptext");
const update_1 = require("app/helptext/system/update");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const job_selectors_1 = require("app/modules/jobs/store/job.selectors");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const save_config_dialog_component_1 = require("app/pages/system/general-settings/save-config-dialog/save-config-dialog.component");
const update_type_enum_1 = require("app/pages/system/update/enums/update-type.enum");
const train_service_1 = require("app/pages/system/update/services/train.service");
const update_service_1 = require("app/pages/system/update/services/update.service");
const update_again_code_constant_1 = require("app/pages/system/update/utils/update-again-code.constant");
const error_handler_service_1 = require("app/services/error-handler.service");
const system_general_service_1 = require("app/services/system-general.service");
const ws_service_1 = require("app/services/ws.service");
const ha_info_selectors_1 = require("app/store/ha-info/ha-info.selectors");
let UpdateActionsCardComponent = class UpdateActionsCardComponent {
    constructor(router, ws, matDialog, sysGenService, errorHandler, loader, dialogService, translate, store$, snackbar, trainService, updateService, cdr, window) {
        this.router = router;
        this.ws = ws;
        this.matDialog = matDialog;
        this.sysGenService = sysGenService;
        this.errorHandler = errorHandler;
        this.loader = loader;
        this.dialogService = dialogService;
        this.translate = translate;
        this.store$ = store$;
        this.snackbar = snackbar;
        this.trainService = trainService;
        this.updateService = updateService;
        this.cdr = cdr;
        this.window = window;
        this.isUpdateRunning = false;
        this.updateMethod = 'update.update';
        this.isHaLicensed = false;
        this.sysUpdateMessage = global_helptext_1.helptextGlobal.sysUpdateMessage;
        this.sysUpdateMsgPt2 = global_helptext_1.helptextGlobal.sysUpdateMessagePt2;
        this.updateTitle = this.translate.instant('Update');
        this.showApplyPendingButton$ = (0, rxjs_1.combineLatest)([
            this.updateService.updateDownloaded$,
            this.updateService.status$,
        ]).pipe((0, rxjs_1.map)(([updateDownloaded, status]) => updateDownloaded && status !== system_update_enum_1.SystemUpdateStatus.Unavailable));
        this.showDownloadUpdateButton$ = this.updateService.updatesAvailable$;
        this.isDownloadUpdatesButtonDisabled$ = this.updateService.status$.pipe((0, rxjs_1.map)((status) => status === system_update_enum_1.SystemUpdateStatus.RebootRequired));
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.wasConfigurationSaved = false;
        this.sysGenService.updateRunning.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isUpdating) => {
            this.isUpdateRunning = isUpdating === 'true';
            this.cdr.markForCheck();
        });
    }
    ngOnInit() {
        this.store$.select(ha_info_selectors_1.selectIsHaLicensed).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isLicensed) => {
            this.isHaLicensed = isLicensed;
            if (isLicensed) {
                this.updateMethod = 'failover.upgrade';
            }
            this.cdr.markForCheck();
            this.checkForUpdateRunning();
        });
    }
    checkForUpdateRunning() {
        this.ws.call('core.get_jobs', [[['method', '=', this.updateMethod], ['state', '=', job_state_enum_1.JobState.Running]]])
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (jobs) => {
                if (jobs && jobs.length > 0) {
                    this.isUpdateRunning = true;
                    this.showRunningUpdate(jobs[0].id);
                }
                this.cdr.markForCheck();
            },
            error: (err) => {
                console.error(err);
            },
        });
    }
    // Shows an update in progress as a job dialog on the update page
    showRunningUpdate(jobId) {
        const job$ = this.store$.pipe((0, store_1.select)((0, job_selectors_1.selectJob)(jobId)), (0, observe_job_operator_1.observeJob)());
        this.dialogService.jobDialog(job$, {
            title: this.updateTitle,
            canMinimize: true,
        })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.router.navigate(['/system-tasks/restart'], { skipLocationChange: true });
        });
    }
    downloadUpdate() {
        this.ws.call('core.get_jobs', [[['method', '=', this.updateMethod], ['state', '=', job_state_enum_1.JobState.Running]]])
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((jobs) => {
            if (jobs[0]) {
                this.showRunningUpdate(jobs[0].id);
            }
            else {
                this.startUpdate();
            }
            this.cdr.markForCheck();
        });
    }
    applyPendingUpdate() {
        this.updateType = update_type_enum_1.UpdateType.ApplyPending;
        this.saveConfigurationIfNecessary()
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => this.continueUpdate());
    }
    manualUpdate() {
        this.updateType = update_type_enum_1.UpdateType.Manual;
        this.saveConfigurationIfNecessary()
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.router.navigate(['/system/update/manualupdate']);
        });
    }
    startUpdate() {
        this.updateService.error$.next(null);
        this.ws.call('update.check_available').pipe(this.loader.withLoader(), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (update) => {
                this.updateService.status$.next(update.status);
                if (update.status === system_update_enum_1.SystemUpdateStatus.Available) {
                    const packages = [];
                    update.changes.forEach((change) => {
                        if (change.operation === system_update_enum_1.SystemUpdateOperationType.Upgrade) {
                            packages.push({
                                operation: 'Upgrade',
                                name: change.old.name + '-' + change.old.version
                                    + ' -> ' + change.new.name + '-'
                                    + change.new.version,
                            });
                        }
                        else if (change.operation === system_update_enum_1.SystemUpdateOperationType.Install) {
                            packages.push({
                                operation: 'Install',
                                name: change.new.name + '-' + change.new.version,
                            });
                        }
                        else if (change.operation === system_update_enum_1.SystemUpdateOperationType.Delete) {
                            if (change.old) {
                                packages.push({
                                    operation: 'Delete',
                                    name: change.old.name + '-' + change.old.version,
                                });
                            }
                            else if (change.new) {
                                packages.push({
                                    operation: 'Delete',
                                    name: change.new.name + '-' + change.new.version,
                                });
                            }
                        }
                        else {
                            console.error('Unknown operation:', change.operation);
                        }
                    });
                    this.updateService.packages$.next(packages);
                    if (update.changelog) {
                        this.updateService.changeLog$.next(update.changelog.replace(/\n/g, '<br>'));
                    }
                    if (update.release_notes_url) {
                        this.updateService.releaseNotesUrl$.next(update.release_notes_url);
                    }
                    this.updateType = update_type_enum_1.UpdateType.Standard;
                    this.saveConfigurationIfNecessary()
                        .pipe((0, until_destroy_1.untilDestroyed)(this))
                        .subscribe(() => this.confirmAndUpdate());
                }
                else if (update.status === system_update_enum_1.SystemUpdateStatus.Unavailable) {
                    this.snackbar.success(this.translate.instant('No updates available.'));
                }
            },
            error: (error) => {
                var _a;
                this.dialogService.error({
                    title: this.translate.instant('Error checking for updates.'),
                    message: error.reason,
                    backtrace: (_a = error.trace) === null || _a === void 0 ? void 0 : _a.formatted,
                });
            },
            complete: () => {
                this.loader.close();
                this.cdr.markForCheck();
            },
        });
    }
    // Continues the update process began in startUpdate(), after passing through the Save Config dialog
    confirmAndUpdate() {
        let downloadMsg;
        let confirmMsg;
        if (!this.isHaLicensed) {
            downloadMsg = update_1.helptextSystemUpdate.non_ha_download_msg;
            confirmMsg = update_1.helptextSystemUpdate.non_ha_confirm_msg;
        }
        else {
            downloadMsg = update_1.helptextSystemUpdate.ha_download_msg;
            confirmMsg = update_1.helptextSystemUpdate.ha_confirm_msg;
        }
        this.dialogService.confirm({
            title: this.translate.instant('Download Update'),
            message: this.translate.instant(downloadMsg),
            hideCheckbox: true,
            buttonText: this.translate.instant('Download'),
            secondaryCheckbox: true,
            secondaryCheckboxText: this.translate.instant(confirmMsg),
        })
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((result) => {
            if (!result.confirmed) {
                return;
            }
            if (!result.secondaryCheckbox) {
                this.downloadUpdates();
            }
            else {
                this.update();
            }
        });
    }
    update(resume = false) {
        this.window.sessionStorage.removeItem('updateLastChecked');
        this.window.sessionStorage.removeItem('updateAvailable');
        this.sysGenService.updateRunningNoticeSent.emit();
        let job$;
        if (this.isHaLicensed) {
            job$ = this.trainService.trainValue$.pipe((0, rxjs_1.take)(1), (0, rxjs_1.switchMap)((trainValue) => this.ws.call('update.set_train', [trainValue])), (0, rxjs_1.switchMap)(() => this.ws.job('failover.upgrade', [{ resume }])));
        }
        else {
            job$ = this.ws.job('update.update', [{ resume, reboot: true }]);
        }
        this.dialogService
            .jobDialog(job$, { title: this.translate.instant(this.updateTitle) })
            .afterClosed()
            .pipe((0, rxjs_1.switchMap)(() => {
            this.dialogService.closeAllDialogs();
            this.isUpdateRunning = false;
            this.sysGenService.updateDone(); // Send 'finished' signal to topbar
            this.cdr.markForCheck();
            return this.dialogService.confirm({
                title: update_1.helptextSystemUpdate.ha_update.complete_title,
                message: update_1.helptextSystemUpdate.ha_update.complete_msg,
                hideCheckbox: true,
                buttonText: update_1.helptextSystemUpdate.ha_update.complete_action,
                hideCancel: true,
            });
        }), this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe();
    }
    // Continues the update (based on its type) after the Save Config dialog is closed
    continueUpdate() {
        switch (this.updateType) {
            case update_type_enum_1.UpdateType.ApplyPending: {
                const message = this.isHaLicensed
                    ? this.translate.instant('The standby controller will be automatically restarted to finalize the update. Apply updates and restart the standby controller?')
                    : this.translate.instant('The system will restart and be briefly unavailable while applying updates. Apply updates and restart?');
                this.dialogService.confirm({
                    title: this.translate.instant('Apply Pending Updates'),
                    message: this.translate.instant(message),
                }).pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                    this.update();
                });
                break;
            }
            case update_type_enum_1.UpdateType.Standard:
                this.confirmAndUpdate();
        }
    }
    saveConfigurationIfNecessary() {
        if (this.wasConfigurationSaved) {
            return (0, rxjs_1.of)(null);
        }
        return this.matDialog.open(save_config_dialog_component_1.SaveConfigDialogComponent, {
            data: {
                title: this.translate.instant('Save configuration settings from this machine before updating?'),
                saveButton: this.translate.instant('Save Configuration'),
                cancelButton: this.translate.instant('Do not save'),
            },
        })
            .afterClosed()
            .pipe((0, rxjs_1.tap)((wasSaved) => {
            if (wasSaved) {
                this.wasConfigurationSaved = true;
            }
        }));
    }
    handleUpdateError(error) {
        if (error.error.includes(update_again_code_constant_1.updateAgainCode)) {
            this.dialogService.confirm({
                title: update_1.helptextSystemUpdate.continueDialogTitle,
                message: error.error.replace(update_again_code_constant_1.updateAgainCode, ''),
                buttonText: update_1.helptextSystemUpdate.continueDialogAction,
            }).pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                this.update(true);
            });
            return;
        }
        this.dialogService.error(this.errorHandler.parseError(error));
    }
    downloadUpdates() {
        this.dialogService.jobDialog(this.ws.job('update.download'), { title: this.updateTitle })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.snackbar.success(this.translate.instant('Updates successfully downloaded'));
            this.updateService.pendingUpdates();
        });
    }
};
exports.UpdateActionsCardComponent = UpdateActionsCardComponent;
UpdateActionsCardComponent.ctorParameters = () => [
    { type: router_1.Router },
    { type: ws_service_1.WebSocketService },
    { type: dialog_1.MatDialog },
    { type: system_general_service_1.SystemGeneralService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: app_loader_service_1.AppLoaderService },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: store_1.Store },
    { type: snackbar_service_1.SnackbarService },
    { type: train_service_1.TrainService },
    { type: update_service_1.UpdateService },
    { type: core_1.ChangeDetectorRef },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.UpdateActionsCardComponent = UpdateActionsCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-update-actions-card',
        template: require("./update-actions-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            card_1.MatCard,
            ix_icon_component_1.IxIconComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], UpdateActionsCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,