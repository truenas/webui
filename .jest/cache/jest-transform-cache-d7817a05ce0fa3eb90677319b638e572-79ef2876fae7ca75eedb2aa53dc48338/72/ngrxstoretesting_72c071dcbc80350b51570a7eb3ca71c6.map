{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@ngrx/store/fesm2022/ngrx-store-testing.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, Injector } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i2 from '@ngrx/store';\nimport { Store, createSelector, INITIAL_STATE, setNgrxMockEnvironment, ActionsSubject, StateObservable, ReducerManager } from '@ngrx/store';\n\nclass MockState extends BehaviorSubject {\n    constructor() {\n        super({});\n        this.state = toSignal(this, { manualCleanup: true, requireSync: true });\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockState, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockState }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockState, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n\nconst MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n\nclass MockStore extends Store {\n    constructor(state$, actionsObserver, reducerManager, initialState, mockSelectors = []) {\n        super(state$, actionsObserver, reducerManager);\n        this.state$ = state$;\n        this.initialState = initialState;\n        this.selectors = new Map();\n        this.resetSelectors();\n        this.setState(this.initialState);\n        this.scannedActions$ = actionsObserver.asObservable();\n        for (const mockSelector of mockSelectors) {\n            this.overrideSelector(mockSelector.selector, mockSelector.value);\n        }\n    }\n    setState(nextState) {\n        this.state$.next(nextState);\n        this.lastState = nextState;\n    }\n    overrideSelector(selector, value) {\n        this.selectors.set(selector, value);\n        const resultSelector = typeof selector === 'string'\n            ? createSelector(() => { }, () => value)\n            : selector;\n        resultSelector.setResult(value);\n        return resultSelector;\n    }\n    resetSelectors() {\n        for (const selector of this.selectors.keys()) {\n            if (typeof selector !== 'string') {\n                selector.release();\n                selector.clearResult();\n            }\n        }\n        this.selectors.clear();\n    }\n    select(selector, prop) {\n        if (typeof selector === 'string' && this.selectors.has(selector)) {\n            return new BehaviorSubject(this.selectors.get(selector)).asObservable();\n        }\n        return super.select(selector, prop);\n    }\n    addReducer() {\n        /* noop */\n    }\n    removeReducer() {\n        /* noop */\n    }\n    /**\n     * Refreshes the existing state.\n     */\n    refreshState() {\n        if (this.lastState)\n            this.setState({ ...this.lastState });\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockStore, deps: [{ token: MockState }, { token: i2.ActionsSubject }, { token: i2.ReducerManager }, { token: INITIAL_STATE }, { token: MOCK_SELECTORS }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockStore }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockStore, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: MockState }, { type: i2.ActionsSubject }, { type: i2.ReducerManager }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [INITIAL_STATE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MOCK_SELECTORS]\n                }] }] });\n\nclass MockReducerManager extends BehaviorSubject {\n    constructor() {\n        super(() => undefined);\n    }\n    addFeature(feature) {\n        /* noop */\n    }\n    addFeatures(feature) {\n        /* noop */\n    }\n    removeFeature(feature) {\n        /* noop */\n    }\n    removeFeatures(features) {\n        /* noop */\n    }\n    addReducer(key, reducer) {\n        /* noop */\n    }\n    addReducers(reducers) {\n        /* noop */\n    }\n    removeReducer(featureKey) {\n        /* noop */\n    }\n    removeReducers(featureKeys) {\n        /* noop */\n    }\n    /** @nocollapse */ static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockReducerManager, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockReducerManager }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MockReducerManager, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n\n/**\n * @description\n * Creates mock store providers.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n */\nfunction provideMockStore(config = {}) {\n    setNgrxMockEnvironment(true);\n    return [\n        {\n            provide: ActionsSubject,\n            useFactory: () => new ActionsSubject(),\n            deps: [],\n        },\n        { provide: MockState, useFactory: () => new MockState(), deps: [] },\n        {\n            provide: MockReducerManager,\n            useFactory: () => new MockReducerManager(),\n            deps: [],\n        },\n        { provide: INITIAL_STATE, useValue: config.initialState || {} },\n        { provide: MOCK_SELECTORS, useValue: config.selectors },\n        { provide: StateObservable, useExisting: MockState },\n        { provide: ReducerManager, useExisting: MockReducerManager },\n        {\n            provide: MockStore,\n            useFactory: mockStoreFactory,\n            deps: [\n                MockState,\n                ActionsSubject,\n                ReducerManager,\n                INITIAL_STATE,\n                MOCK_SELECTORS,\n            ],\n        },\n        { provide: Store, useExisting: MockStore },\n    ];\n}\nfunction mockStoreFactory(mockState, actionsSubject, reducerManager, initialState, mockSelectors) {\n    return new MockStore(mockState, actionsSubject, reducerManager, initialState, mockSelectors);\n}\n/**\n * @description\n * Creates mock store with all necessary dependencies outside of the `TestBed`.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns `MockStore<T>`\n *\n * @usageNotes\n *\n * ```typescript\n * describe('Books Effects', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     store = createMockStore({\n *       initialState: { books: { entities: ['Book 1', 'Book 2', 'Book 3'] } },\n *       selectors: [\n *         { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *         { selector: selectVisibleBooks, value: ['Book 1'] },\n *       ],\n *     });\n *   });\n * });\n * ```\n */\nfunction createMockStore(config = {}) {\n    const injector = Injector.create({ providers: provideMockStore(config) });\n    return injector.get(MockStore);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockReducerManager, MockState, MockStore, createMockStore, provideMockStore };\n//# sourceMappingURL=ngrx-store-testing.mjs.map\n"],
  "mappings": "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",
  "names": []
}
