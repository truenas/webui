3517f8672780c7509b7db236859374fd
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ngrx_store_testing_exports = {};
__export(ngrx_store_testing_exports, {
  MockReducerManager: () => MockReducerManager,
  MockState: () => MockState,
  MockStore: () => MockStore,
  createMockStore: () => createMockStore,
  provideMockStore: () => provideMockStore
});
module.exports = __toCommonJS(ngrx_store_testing_exports);
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_rxjs_interop = require("@angular/core/rxjs-interop");
var import_rxjs = require("rxjs");
var i2 = __toESM(require("@ngrx/store"), 1);
var import_store = require("@ngrx/store");
const _MockState = class _MockState extends import_rxjs.BehaviorSubject {
  constructor() {
    super({});
    this.state = (0, import_rxjs_interop.toSignal)(this, { manualCleanup: true, requireSync: true });
  }
};
_MockState.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: _MockState, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable });
_MockState.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: _MockState });
let MockState = _MockState;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: MockState, decorators: [{
  type: import_core.Injectable
}], ctorParameters: () => [] });
const MOCK_SELECTORS = new import_core.InjectionToken("@ngrx/store Mock Selectors");
const _MockStore = class _MockStore extends import_store.Store {
  constructor(state$, actionsObserver, reducerManager, initialState, mockSelectors = []) {
    super(state$, actionsObserver, reducerManager);
    this.state$ = state$;
    this.initialState = initialState;
    this.selectors = /* @__PURE__ */ new Map();
    this.resetSelectors();
    this.setState(this.initialState);
    this.scannedActions$ = actionsObserver.asObservable();
    for (const mockSelector of mockSelectors) {
      this.overrideSelector(mockSelector.selector, mockSelector.value);
    }
  }
  setState(nextState) {
    this.state$.next(nextState);
    this.lastState = nextState;
  }
  overrideSelector(selector, value) {
    this.selectors.set(selector, value);
    const resultSelector = typeof selector === "string" ? (0, import_store.createSelector)(() => {
    }, () => value) : selector;
    resultSelector.setResult(value);
    return resultSelector;
  }
  resetSelectors() {
    for (const selector of this.selectors.keys()) {
      if (typeof selector !== "string") {
        selector.release();
        selector.clearResult();
      }
    }
    this.selectors.clear();
  }
  select(selector, prop) {
    if (typeof selector === "string" && this.selectors.has(selector)) {
      return new import_rxjs.BehaviorSubject(this.selectors.get(selector)).asObservable();
    }
    return super.select(selector, prop);
  }
  addReducer() {
  }
  removeReducer() {
  }
  /**
   * Refreshes the existing state.
   */
  refreshState() {
    if (this.lastState)
      this.setState(__spreadValues({}, this.lastState));
  }
};
_MockStore.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: _MockStore, deps: [{ token: MockState }, { token: i2.ActionsSubject }, { token: i2.ReducerManager }, { token: import_store.INITIAL_STATE }, { token: MOCK_SELECTORS }], target: i0.\u0275\u0275FactoryTarget.Injectable });
_MockStore.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: _MockStore });
let MockStore = _MockStore;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: MockStore, decorators: [{
  type: import_core.Injectable
}], ctorParameters: () => [{ type: MockState }, { type: i2.ActionsSubject }, { type: i2.ReducerManager }, { type: void 0, decorators: [{
  type: import_core.Inject,
  args: [import_store.INITIAL_STATE]
}] }, { type: void 0, decorators: [{
  type: import_core.Inject,
  args: [MOCK_SELECTORS]
}] }] });
const _MockReducerManager = class _MockReducerManager extends import_rxjs.BehaviorSubject {
  constructor() {
    super(() => void 0);
  }
  addFeature(feature) {
  }
  addFeatures(feature) {
  }
  removeFeature(feature) {
  }
  removeFeatures(features) {
  }
  addReducer(key, reducer) {
  }
  addReducers(reducers) {
  }
  removeReducer(featureKey) {
  }
  removeReducers(featureKeys) {
  }
};
_MockReducerManager.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: _MockReducerManager, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable });
_MockReducerManager.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: _MockReducerManager });
let MockReducerManager = _MockReducerManager;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: MockReducerManager, decorators: [{
  type: import_core.Injectable
}], ctorParameters: () => [] });
function provideMockStore(config = {}) {
  (0, import_store.setNgrxMockEnvironment)(true);
  return [
    {
      provide: import_store.ActionsSubject,
      useFactory: () => new import_store.ActionsSubject(),
      deps: []
    },
    { provide: MockState, useFactory: () => new MockState(), deps: [] },
    {
      provide: MockReducerManager,
      useFactory: () => new MockReducerManager(),
      deps: []
    },
    { provide: import_store.INITIAL_STATE, useValue: config.initialState || {} },
    { provide: MOCK_SELECTORS, useValue: config.selectors },
    { provide: import_store.StateObservable, useExisting: MockState },
    { provide: import_store.ReducerManager, useExisting: MockReducerManager },
    {
      provide: MockStore,
      useFactory: mockStoreFactory,
      deps: [
        MockState,
        import_store.ActionsSubject,
        import_store.ReducerManager,
        import_store.INITIAL_STATE,
        MOCK_SELECTORS
      ]
    },
    { provide: import_store.Store, useExisting: MockStore }
  ];
}
function mockStoreFactory(mockState, actionsSubject, reducerManager, initialState, mockSelectors) {
  return new MockStore(mockState, actionsSubject, reducerManager, initialState, mockSelectors);
}
function createMockStore(config = {}) {
  const injector = import_core.Injector.create({ providers: provideMockStore(config) });
  return injector.get(MockStore);
}
