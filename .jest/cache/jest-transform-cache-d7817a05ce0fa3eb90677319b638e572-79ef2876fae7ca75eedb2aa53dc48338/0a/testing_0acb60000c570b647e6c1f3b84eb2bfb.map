{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/select/testing.mjs"],
  "sourcesContent": ["import { HarnessPredicate, parallel } from '@angular/cdk/testing';\nimport { MatOptionHarness, MatOptgroupHarness } from '@angular/material/core/testing';\nimport { MatFormFieldControlHarness } from '@angular/material/form-field/testing/control';\n\n/** Harness for interacting with a mat-select in tests. */\nclass MatSelectHarness extends MatFormFieldControlHarness {\n    constructor() {\n        super(...arguments);\n        this._prefix = 'mat-mdc';\n        this._optionClass = MatOptionHarness;\n        this._optionGroupClass = MatOptgroupHarness;\n        this._documentRootLocator = this.documentRootLocatorFactory();\n        this._backdrop = this._documentRootLocator.locatorFor('.cdk-overlay-backdrop');\n    }\n    static { this.hostSelector = '.mat-mdc-select'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a select with specific attributes.\n     * @param options Options for filtering which select instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(this, options).addOption('disabled', options.disabled, async (harness, disabled) => {\n            return (await harness.isDisabled()) === disabled;\n        });\n    }\n    /** Gets a boolean promise indicating if the select is disabled. */\n    async isDisabled() {\n        return (await this.host()).hasClass(`${this._prefix}-select-disabled`);\n    }\n    /** Gets a boolean promise indicating if the select is valid. */\n    async isValid() {\n        return !(await (await this.host()).hasClass('ng-invalid'));\n    }\n    /** Gets a boolean promise indicating if the select is required. */\n    async isRequired() {\n        return (await this.host()).hasClass(`${this._prefix}-select-required`);\n    }\n    /** Gets a boolean promise indicating if the select is empty (no value is selected). */\n    async isEmpty() {\n        return (await this.host()).hasClass(`${this._prefix}-select-empty`);\n    }\n    /** Gets a boolean promise indicating if the select is in multi-selection mode. */\n    async isMultiple() {\n        return (await this.host()).hasClass(`${this._prefix}-select-multiple`);\n    }\n    /** Gets a promise for the select's value text. */\n    async getValueText() {\n        const value = await this.locatorFor(`.${this._prefix}-select-value`)();\n        return value.text();\n    }\n    /** Focuses the select and returns a void promise that indicates when the action is complete. */\n    async focus() {\n        return (await this.host()).focus();\n    }\n    /** Blurs the select and returns a void promise that indicates when the action is complete. */\n    async blur() {\n        return (await this.host()).blur();\n    }\n    /** Whether the select is focused. */\n    async isFocused() {\n        return (await this.host()).isFocused();\n    }\n    /** Gets the options inside the select panel. */\n    async getOptions(filter) {\n        return this._documentRootLocator.locatorForAll(this._optionClass.with({\n            ...(filter || {}),\n            ancestor: await this._getPanelSelector(),\n        }))();\n    }\n    /** Gets the groups of options inside the panel. */\n    async getOptionGroups(filter) {\n        return this._documentRootLocator.locatorForAll(this._optionGroupClass.with({\n            ...(filter || {}),\n            ancestor: await this._getPanelSelector(),\n        }))();\n    }\n    /** Gets whether the select is open. */\n    async isOpen() {\n        return !!(await this._documentRootLocator.locatorForOptional(await this._getPanelSelector())());\n    }\n    /** Opens the select's panel. */\n    async open() {\n        if (!(await this.isOpen())) {\n            const trigger = await this.locatorFor(`.${this._prefix}-select-trigger`)();\n            return trigger.click();\n        }\n    }\n    /**\n     * Clicks the options that match the passed-in filter. If the select is in multi-selection\n     * mode all options will be clicked, otherwise the harness will pick the first matching option.\n     */\n    async clickOptions(filter) {\n        await this.open();\n        const [isMultiple, options] = await parallel(() => [\n            this.isMultiple(),\n            this.getOptions(filter),\n        ]);\n        if (options.length === 0) {\n            throw Error('Select does not have options matching the specified filter');\n        }\n        if (isMultiple) {\n            await parallel(() => options.map(option => option.click()));\n        }\n        else {\n            await options[0].click();\n        }\n    }\n    /** Closes the select's panel. */\n    async close() {\n        if (await this.isOpen()) {\n            // This is the most consistent way that works both in both single and multi-select modes,\n            // but it assumes that only one overlay is open at a time. We should be able to make it\n            // a bit more precise after #16645 where we can dispatch an ESCAPE press to the host instead.\n            return (await this._backdrop()).click();\n        }\n    }\n    /** Gets the selector that should be used to find this select's panel. */\n    async _getPanelSelector() {\n        const id = await (await this.host()).getAttribute('id');\n        return `#${id}-panel`;\n    }\n}\n\nexport { MatSelectHarness };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": "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",
  "names": ["import_testing"]
}
