ae4f5283cc6afeadd36ffb34480256d6
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  MatSelectHarness: () => MatSelectHarness
});
module.exports = __toCommonJS(testing_exports);
var import_testing = require("@angular/cdk/testing");
var import_testing2 = require("@angular/material/core/testing");
var import_control = require("@angular/material/form-field/testing/control");
const _MatSelectHarness = class _MatSelectHarness extends import_control.MatFormFieldControlHarness {
  constructor() {
    super(...arguments);
    this._prefix = "mat-mdc";
    this._optionClass = import_testing2.MatOptionHarness;
    this._optionGroupClass = import_testing2.MatOptgroupHarness;
    this._documentRootLocator = this.documentRootLocatorFactory();
    this._backdrop = this._documentRootLocator.locatorFor(".cdk-overlay-backdrop");
  }
  /**
   * Gets a `HarnessPredicate` that can be used to search for a select with specific attributes.
   * @param options Options for filtering which select instances are considered a match.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(this, options).addOption("disabled", options.disabled, (harness, disabled) => __async(this, null, function* () {
      return (yield harness.isDisabled()) === disabled;
    }));
  }
  /** Gets a boolean promise indicating if the select is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      return (yield this.host()).hasClass(`${this._prefix}-select-disabled`);
    });
  }
  /** Gets a boolean promise indicating if the select is valid. */
  isValid() {
    return __async(this, null, function* () {
      return !(yield (yield this.host()).hasClass("ng-invalid"));
    });
  }
  /** Gets a boolean promise indicating if the select is required. */
  isRequired() {
    return __async(this, null, function* () {
      return (yield this.host()).hasClass(`${this._prefix}-select-required`);
    });
  }
  /** Gets a boolean promise indicating if the select is empty (no value is selected). */
  isEmpty() {
    return __async(this, null, function* () {
      return (yield this.host()).hasClass(`${this._prefix}-select-empty`);
    });
  }
  /** Gets a boolean promise indicating if the select is in multi-selection mode. */
  isMultiple() {
    return __async(this, null, function* () {
      return (yield this.host()).hasClass(`${this._prefix}-select-multiple`);
    });
  }
  /** Gets a promise for the select's value text. */
  getValueText() {
    return __async(this, null, function* () {
      const value = yield this.locatorFor(`.${this._prefix}-select-value`)();
      return value.text();
    });
  }
  /** Focuses the select and returns a void promise that indicates when the action is complete. */
  focus() {
    return __async(this, null, function* () {
      return (yield this.host()).focus();
    });
  }
  /** Blurs the select and returns a void promise that indicates when the action is complete. */
  blur() {
    return __async(this, null, function* () {
      return (yield this.host()).blur();
    });
  }
  /** Whether the select is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this.host()).isFocused();
    });
  }
  /** Gets the options inside the select panel. */
  getOptions(filter) {
    return __async(this, null, function* () {
      return this._documentRootLocator.locatorForAll(this._optionClass.with(__spreadProps(__spreadValues({}, filter || {}), {
        ancestor: yield this._getPanelSelector()
      })))();
    });
  }
  /** Gets the groups of options inside the panel. */
  getOptionGroups(filter) {
    return __async(this, null, function* () {
      return this._documentRootLocator.locatorForAll(this._optionGroupClass.with(__spreadProps(__spreadValues({}, filter || {}), {
        ancestor: yield this._getPanelSelector()
      })))();
    });
  }
  /** Gets whether the select is open. */
  isOpen() {
    return __async(this, null, function* () {
      return !!(yield this._documentRootLocator.locatorForOptional(yield this._getPanelSelector())());
    });
  }
  /** Opens the select's panel. */
  open() {
    return __async(this, null, function* () {
      if (!(yield this.isOpen())) {
        const trigger = yield this.locatorFor(`.${this._prefix}-select-trigger`)();
        return trigger.click();
      }
    });
  }
  /**
   * Clicks the options that match the passed-in filter. If the select is in multi-selection
   * mode all options will be clicked, otherwise the harness will pick the first matching option.
   */
  clickOptions(filter) {
    return __async(this, null, function* () {
      yield this.open();
      const [isMultiple, options] = yield (0, import_testing.parallel)(() => [
        this.isMultiple(),
        this.getOptions(filter)
      ]);
      if (options.length === 0) {
        throw Error("Select does not have options matching the specified filter");
      }
      if (isMultiple) {
        yield (0, import_testing.parallel)(() => options.map((option) => option.click()));
      } else {
        yield options[0].click();
      }
    });
  }
  /** Closes the select's panel. */
  close() {
    return __async(this, null, function* () {
      if (yield this.isOpen()) {
        return (yield this._backdrop()).click();
      }
    });
  }
  /** Gets the selector that should be used to find this select's panel. */
  _getPanelSelector() {
    return __async(this, null, function* () {
      const id = yield (yield this.host()).getAttribute("id");
      return `#${id}-panel`;
    });
  }
};
_MatSelectHarness.hostSelector = ".mat-mdc-select";
let MatSelectHarness = _MatSelectHarness;
