{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/services/form-error-handler.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/services/form-error-handler.service.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { AbstractControl, UntypedFormArray, UntypedFormGroup } from '@angular/forms';\nimport { ResponseErrorType } from 'app/enums/response-error-type.enum';\nimport { Job } from 'app/interfaces/job.interface';\nimport { WebSocketError } from 'app/interfaces/websocket-error.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxFormService } from 'app/modules/forms/ix-forms/services/ix-form.service';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\n\n@Injectable({ providedIn: 'root' })\nexport class FormErrorHandlerService {\n  private isOnErrorFocused = false;\n  private needToShowError = false;\n\n  constructor(\n    private dialog: DialogService,\n    private errorHandler: ErrorHandlerService,\n    private formService: IxFormService,\n    @Inject(DOCUMENT) private document: Document,\n  ) {}\n\n  /**\n   * @param error\n   * @param formGroup\n   * @param fieldsMap Overrides backend field names with frontend field names.\n   * TODO: See if second `string` in fieldsMap can be typed to key of formGroup.\n   */\n  handleWsFormError(\n    error: unknown,\n    formGroup: UntypedFormGroup,\n    fieldsMap: Record<string, string> = {},\n    triggerAnchor: string = undefined,\n  ): void {\n    if (this.errorHandler.isWebSocketError(error) && error.type === ResponseErrorType.Validation && error.extra) {\n      this.handleValidationError(error, formGroup, fieldsMap, triggerAnchor);\n      return;\n    }\n\n    if (\n      this.errorHandler.isJobError(error)\n      && error.exc_info.type === ResponseErrorType.Validation\n      && error.exc_info.extra\n    ) {\n      this.handleValidationError(\n        { ...error, extra: error.exc_info.extra as Job['extra'] },\n        formGroup,\n        fieldsMap,\n        triggerAnchor,\n      );\n      return;\n    }\n\n    // Fallback to old error handling\n    this.dialog.error(this.errorHandler.parseError(error));\n  }\n\n  private handleValidationError(\n    error: WebSocketError | Job,\n    formGroup: UntypedFormGroup,\n    fieldsMap: Record<string, string>,\n    triggerAnchor: string,\n  ): void {\n    this.isOnErrorFocused = false;\n    this.needToShowError = false;\n    const extra = (error as WebSocketError).extra as string[][];\n    for (const extraItem of extra) {\n      const field = extraItem[0].split('.').pop();\n      const errorMessage = extraItem[1];\n\n      const control = this.getFormField(formGroup, field, fieldsMap);\n      const controlsNames = this.formService.getControlsNames();\n\n      if (triggerAnchor && control && !controlsNames.includes(field)) {\n        const triggerAnchorRef: HTMLElement = this.document.getElementById(triggerAnchor);\n        if (triggerAnchorRef) {\n          triggerAnchorRef.click();\n          setTimeout(() => {\n            this.showValidationError({\n              control: this.getFormField(formGroup, field, fieldsMap),\n              field,\n              errorMessage,\n              error,\n            });\n          });\n          return;\n        }\n      }\n\n      this.showValidationError({\n        control, field, errorMessage, error,\n      });\n    }\n\n    if (this.needToShowError) {\n      // Fallback to default modal error message.\n      this.dialog.error(this.errorHandler.parseError(error));\n    }\n  }\n\n  private showValidationError({\n    control, field, error, errorMessage,\n  }: {\n    control: AbstractControl;\n    field: string;\n    errorMessage: string;\n    error: WebSocketError | Job;\n  }): void {\n    const controlsNames = this.formService.getControlsNames();\n\n    if (!control || !controlsNames.includes(field)) {\n      console.error(`Could not find control ${field}.`);\n      this.needToShowError = true;\n      return;\n    }\n\n    if ((control as UntypedFormArray).controls?.length) {\n      const isExactMatch = (text: string, match: string): boolean => new RegExp(`\\\\b${match}\\\\b`).test(text);\n\n      control = (control as UntypedFormArray).controls\n        .find((controlOfArray) => isExactMatch(errorMessage, controlOfArray.value as string));\n    }\n\n    if (!control) {\n      this.dialog.error(this.errorHandler.parseError(error));\n    } else {\n      control.setErrors({\n        manualValidateError: true,\n        manualValidateErrorMsg: errorMessage,\n        ixManualValidateError: { message: errorMessage },\n      });\n      control.markAsTouched();\n\n      const element = this.formService.getElementByControlName(field);\n      if (element && !this.isOnErrorFocused) {\n        element.scrollIntoView({ behavior: 'smooth' });\n        element.focus();\n        this.isOnErrorFocused = true;\n      }\n    }\n  }\n\n  private getFormField(formGroup: UntypedFormGroup, field: string, fieldsMap: Record<string, string>): AbstractControl {\n    const fieldName = fieldsMap[field] ?? field;\n    return formGroup.get(fieldName);\n  }\n}\n"],"version":3}