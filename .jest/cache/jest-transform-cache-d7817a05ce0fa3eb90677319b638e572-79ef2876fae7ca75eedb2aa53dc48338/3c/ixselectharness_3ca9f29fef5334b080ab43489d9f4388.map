{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-select/ix-select.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAAoF;AAEpF,sGAAiG;AACjG,mGAA+F;AAE/F,kFAA8E;AAM9E,MAAa,eAAgB,SAAQ,0BAAgB;IAArD;;QAQE,qBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,8BAAa,CAAC,CAAC;QAClD,iBAAY,GAAG,4BAAY,CAAC;IA8E9B,CAAC;IApFC,MAAM,CAAC,IAAI,CAAC,OAA+B;QACzC,OAAO,IAAI,0BAAgB,CAAC,eAAe,EAAE,OAAO,CAAC;aAClD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,0BAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1H,CAAC;IAKK,YAAY;;YAChB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,iCAAc,CAAC,EAAE,CAAC;YAC9D,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,QAAQ;;YACZ,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC7C,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;YAEpB,IAAI,MAAM,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC;gBAC9B,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC9D,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;gBAE9D,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAClC,CAAC;YAED,OAAO,MAAM,CAAC,YAAY,EAAE,CAAC;QAC/B,CAAC;KAAA;IAED;;OAEG;IACG,QAAQ,CAAC,SAA4B;;YACzC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC7C,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;YAEpB,IAAI,CAAC,CAAA,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA,EAAE,CAAC;gBACtC,MAAM,IAAI,KAAK,CAAC,sBAAsB,MAAM,CAAC,SAAS,CAAC,yBAAyB,MAAM,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YAC/G,CAAC;YAED,IAAI,MAAM,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC;gBAC9B,gCAAgC;gBAChC,IAAI,CAAC,CAAC,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;oBAC9B,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;oBACtE,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACxE,CAAC;gBAED,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBACzE,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE;oBAClB,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC9E,CAAC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,SAAmB,EAAE,CAAC,CAAC;QAC3D,CAAC;KAAA;IAEK,UAAU;;YACd,OAAO,CAAC,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;QACtD,CAAC;KAAA;IAEK,eAAe;;YACnB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAChD,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC;YACvB,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YAE7C,OAAO,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACnE,CAAC;KAAA;IAEK,UAAU,CAAC,MAAyB;;YACxC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAClD,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAChE,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,CAAC;KAAA;IAEK,SAAS;;YACb,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC5C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;KAAA;IAEK,WAAW;;YACf,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC;KAAA;;AAtFH,0CAuFC;AAtFiB,4BAAY,GAAG,WAAW,AAAd,CAAe","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-select/ix-select.harness.ts"],"sourcesContent":["import { ComponentHarness, HarnessPredicate, parallel } from '@angular/cdk/testing';\nimport { SelectHarnessFilters } from '@angular/material/select/testing';\nimport { IxLabelHarness } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.harness';\nimport { SelectHarness } from 'app/modules/forms/ix-forms/components/ix-select/select.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\n\nexport interface IxSelectHarnessFilters extends SelectHarnessFilters {\n  label?: string;\n}\n\nexport class IxSelectHarness extends ComponentHarness implements IxFormControlHarness {\n  static readonly hostSelector = 'ix-select';\n\n  static with(options: IxSelectHarnessFilters): HarnessPredicate<IxSelectHarness> {\n    return new HarnessPredicate(IxSelectHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getSelectHarness = this.locatorFor(SelectHarness);\n  getErrorText = getErrorText;\n\n  async getLabelText(): Promise<string> {\n    const label = await this.locatorForOptional(IxLabelHarness)();\n    if (!label) {\n      return '';\n    }\n    return label.getLabel();\n  }\n\n  async getValue(): Promise<string | string[]> {\n    const select = await this.getSelectHarness();\n    await select.open();\n\n    if (await select.isMultiple()) {\n      const options = await select.getOptions({ isSelected: true });\n      const optionTexts = options.map((option) => option.getText());\n\n      return Promise.all(optionTexts);\n    }\n\n    return select.getValueText();\n  }\n\n  /**\n   * @param newLabels option label or labels to be selected\n   */\n  async setValue(newLabels: string | string[]): Promise<void> {\n    const select = await this.getSelectHarness();\n    await select.open();\n\n    if (!await this.hasOptions(newLabels)) {\n      throw new Error(`Option with label \"${String(newLabels)}\" not found in select ${await this.getLabelText()}`);\n    }\n\n    if (await select.isMultiple()) {\n      // Unselect old options manually\n      if (!(await select.isEmpty())) {\n        const selectedOptions = await select.getOptions({ isSelected: true });\n        await parallel(() => selectedOptions.map((option) => option.click()));\n      }\n\n      const labelsToClick = Array.isArray(newLabels) ? newLabels : [newLabels];\n      await parallel(() => {\n        return (labelsToClick).map((label) => select.clickOptions({ text: label }));\n      });\n      return;\n    }\n\n    await select.clickOptions({ text: newLabels as string });\n  }\n\n  async isDisabled(): Promise<boolean> {\n    return (await this.getSelectHarness()).isDisabled();\n  }\n\n  async getOptionLabels(): Promise<string[]> {\n    const matSelect = await this.getSelectHarness();\n    await matSelect.open();\n    const options = await matSelect.getOptions();\n\n    return parallel(() => options.map((option) => option.getText()));\n  }\n\n  async hasOptions(labels: string | string[]): Promise<boolean> {\n    const optionLabels = await this.getOptionLabels();\n    const labelsToCheck = Array.isArray(labels) ? labels : [labels];\n    return labelsToCheck.every((label) => optionLabels.includes(label));\n  }\n\n  async selectAll(): Promise<void> {\n    const labels = await this.getOptionLabels();\n    return this.setValue(labels);\n  }\n\n  async unselectAll(): Promise<void> {\n    return this.setValue([]);\n  }\n}\n"],"version":3}