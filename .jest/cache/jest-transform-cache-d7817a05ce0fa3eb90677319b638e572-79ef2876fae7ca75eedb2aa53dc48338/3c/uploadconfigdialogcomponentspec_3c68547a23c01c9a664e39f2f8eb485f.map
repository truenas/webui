{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/general-settings/upload-config-dialog/upload-config-dialog.component.spec.ts","mappings":";;;;;;;;;;;AAAA,0DAAyE;AACzE,0CAAqD;AACrD,8DAAoE;AACpE,4CAAyC;AACzC,iDAAyF;AACzF,+BAA0B;AAC1B,4EAAkE;AAClE,0EAA0E;AAC1E,sEAAkE;AAClE,qHAA+G;AAC/G,iEAA6D;AAC7D,gEAA4D;AAC5D,qFAA+E;AAE/E,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,SAAiD,CAAC;IACtD,MAAM,eAAe,GAAG,IAAA,6BAAsB,EAAC;QAC7C,SAAS,EAAE,4DAA2B;QACtC,OAAO,EAAE;YACP,2BAAmB;SACpB;QACD,SAAS,EAAE;YACT,IAAA,mBAAY,EAAC,eAAM,CAAC;YACpB,IAAA,mBAAY,EAAC,8BAAa,EAAE;gBAC1B,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;oBACxB,WAAW,EAAE,GAAG,EAAE,CAAC,IAAA,SAAE,EAAC,EAAE,CAAC;iBAC1B,CAAC,CAAC;aACJ,CAAC;YACF,IAAA,mBAAY,EAAC,8BAAa,EAAE;gBAC1B,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAA,SAAE,EAAC,IAAA,kCAAiB,GAAE,CAAC,CAAC;aACpD,CAAC;YACF,IAAA,mBAAY,EAAC,0BAAW,EAAE;gBACxB,UAAU,EAAE,IAAA,SAAE,EAAC,OAAO,CAAC;gBACvB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,SAAE,EAAC,IAAI,CAAC;aACxB,CAAC;SACH;KACF,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,eAAe,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAS,EAAE;QACvD,MAAM,MAAM,GAAG,mCAAyB,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,IAAA,0BAAQ,EAAC,WAAW,CAAC,CAAC;QAEnC,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,0CAAkB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAC;QAC3G,MAAM,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAEjC,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,0BAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QACxF,MAAM,YAAY,CAAC,KAAK,EAAE,CAAC;QAE3B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,8BAAa,CAAC,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACrE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,8BAAa,CAAC,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;QAC5G,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,eAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,CAAC,uBAAuB,CAAC,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1H,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/general-settings/upload-config-dialog/upload-config-dialog.component.spec.ts"],"sourcesContent":["import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonHarness } from '@angular/material/button/testing';\nimport { Router } from '@angular/router';\nimport { createComponentFactory, mockProvider, Spectator } from '@ngneat/spectator/jest';\nimport { of } from 'rxjs';\nimport { fakeFile } from 'app/core/testing/utils/fake-file.uitls';\nimport { fakeSuccessfulJob } from 'app/core/testing/utils/fake-job.utils';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxFileInputHarness } from 'app/modules/forms/ix-forms/components/ix-file-input/ix-file-input.harness';\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { UploadService } from 'app/services/upload.service';\nimport { UploadConfigDialogComponent } from './upload-config-dialog.component';\n\ndescribe('UploadConfigDialogComponent', () => {\n  let spectator: Spectator<UploadConfigDialogComponent>;\n  const createComponent = createComponentFactory({\n    component: UploadConfigDialogComponent,\n    imports: [\n      ReactiveFormsModule,\n    ],\n    providers: [\n      mockProvider(Router),\n      mockProvider(DialogService, {\n        jobDialog: jest.fn(() => ({\n          afterClosed: () => of({}),\n        })),\n      }),\n      mockProvider(UploadService, {\n        uploadAsJob: jest.fn(() => of(fakeSuccessfulJob())),\n      }),\n      mockProvider(AuthService, {\n        authToken$: of('token'),\n        hasRole: () => of(true),\n      }),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createComponent();\n  });\n\n  it('uploads config when dialog is submitted', async () => {\n    const loader = TestbedHarnessEnvironment.loader(spectator.fixture);\n    const file = fakeFile('config.db');\n\n    const fileInput = await loader.getHarness(IxFileInputHarness.with({ label: 'Select Configuration File' }));\n    await fileInput.setValue([file]);\n\n    const uploadButton = await loader.getHarness(MatButtonHarness.with({ text: 'Upload' }));\n    await uploadButton.click();\n\n    expect(spectator.inject(DialogService).jobDialog).toHaveBeenCalled();\n    expect(spectator.inject(UploadService).uploadAsJob).toHaveBeenCalledWith({ file, method: 'config.upload' });\n    expect(spectator.inject(Router).navigate).toHaveBeenCalledWith(['/system-tasks/restart'], { skipLocationChange: true });\n  });\n});\n"],"version":3}