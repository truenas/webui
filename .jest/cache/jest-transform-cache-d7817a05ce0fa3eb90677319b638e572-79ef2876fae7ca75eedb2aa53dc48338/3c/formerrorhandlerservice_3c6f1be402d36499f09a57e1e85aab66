23af97e026dc085ef1a63f1fdb78f60c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormErrorHandlerService = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const response_error_type_enum_1 = require("app/enums/response-error-type.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_form_service_1 = require("app/modules/forms/ix-forms/services/ix-form.service");
const error_handler_service_1 = require("app/services/error-handler.service");
let FormErrorHandlerService = class FormErrorHandlerService {
    constructor(dialog, errorHandler, formService, document) {
        this.dialog = dialog;
        this.errorHandler = errorHandler;
        this.formService = formService;
        this.document = document;
        this.isOnErrorFocused = false;
        this.needToShowError = false;
    }
    /**
     * @param error
     * @param formGroup
     * @param fieldsMap Overrides backend field names with frontend field names.
     * TODO: See if second `string` in fieldsMap can be typed to key of formGroup.
     */
    handleWsFormError(error, formGroup, fieldsMap = {}, triggerAnchor = undefined) {
        if (this.errorHandler.isWebSocketError(error) && error.type === response_error_type_enum_1.ResponseErrorType.Validation && error.extra) {
            this.handleValidationError(error, formGroup, fieldsMap, triggerAnchor);
            return;
        }
        if (this.errorHandler.isJobError(error)
            && error.exc_info.type === response_error_type_enum_1.ResponseErrorType.Validation
            && error.exc_info.extra) {
            this.handleValidationError(Object.assign(Object.assign({}, error), { extra: error.exc_info.extra }), formGroup, fieldsMap, triggerAnchor);
            return;
        }
        // Fallback to old error handling
        this.dialog.error(this.errorHandler.parseError(error));
    }
    handleValidationError(error, formGroup, fieldsMap, triggerAnchor) {
        this.isOnErrorFocused = false;
        this.needToShowError = false;
        const extra = error.extra;
        for (const extraItem of extra) {
            const field = extraItem[0].split('.').pop();
            const errorMessage = extraItem[1];
            const control = this.getFormField(formGroup, field, fieldsMap);
            const controlsNames = this.formService.getControlsNames();
            if (triggerAnchor && control && !controlsNames.includes(field)) {
                const triggerAnchorRef = this.document.getElementById(triggerAnchor);
                if (triggerAnchorRef) {
                    triggerAnchorRef.click();
                    setTimeout(() => {
                        this.showValidationError({
                            control: this.getFormField(formGroup, field, fieldsMap),
                            field,
                            errorMessage,
                            error,
                        });
                    });
                    return;
                }
            }
            this.showValidationError({
                control, field, errorMessage, error,
            });
        }
        if (this.needToShowError) {
            // Fallback to default modal error message.
            this.dialog.error(this.errorHandler.parseError(error));
        }
    }
    showValidationError({ control, field, error, errorMessage, }) {
        var _a;
        const controlsNames = this.formService.getControlsNames();
        if (!control || !controlsNames.includes(field)) {
            console.error(`Could not find control ${field}.`);
            this.needToShowError = true;
            return;
        }
        if ((_a = control.controls) === null || _a === void 0 ? void 0 : _a.length) {
            const isExactMatch = (text, match) => new RegExp(`\\b${match}\\b`).test(text);
            control = control.controls
                .find((controlOfArray) => isExactMatch(errorMessage, controlOfArray.value));
        }
        if (!control) {
            this.dialog.error(this.errorHandler.parseError(error));
        }
        else {
            control.setErrors({
                manualValidateError: true,
                manualValidateErrorMsg: errorMessage,
                ixManualValidateError: { message: errorMessage },
            });
            control.markAsTouched();
            const element = this.formService.getElementByControlName(field);
            if (element && !this.isOnErrorFocused) {
                element.scrollIntoView({ behavior: 'smooth' });
                element.focus();
                this.isOnErrorFocused = true;
            }
        }
    }
    getFormField(formGroup, field, fieldsMap) {
        var _a;
        const fieldName = (_a = fieldsMap[field]) !== null && _a !== void 0 ? _a : field;
        return formGroup.get(fieldName);
    }
};
exports.FormErrorHandlerService = FormErrorHandlerService;
FormErrorHandlerService.ctorParameters = () => [
    { type: dialog_service_1.DialogService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: ix_form_service_1.IxFormService },
    { type: Document, decorators: [{ type: core_1.Inject, args: [common_1.DOCUMENT,] }] }
];
exports.FormErrorHandlerService = FormErrorHandlerService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], FormErrorHandlerService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,