f4f6e26691233292bc8ad73f0391cc7b
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxPermissionsHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/checkbox/testing");
const posix_acl_enum_1 = require("app/enums/posix-acl.enum");
const mode_helper_1 = require("app/helpers/mode.helper");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxPermissionsHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getMatCheckboxHarnesses = this.locatorForAll(testing_2.MatCheckboxHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxPermissionsHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const permissions = (yield this.getMatCheckboxHarnesses());
            let owner = 0;
            let grp = 0;
            let other = 0;
            if ((yield permissions[0].isChecked())) {
                owner += 4;
            }
            if ((yield permissions[1].isChecked())) {
                owner += 2;
            }
            if ((yield permissions[2].isChecked())) {
                owner += 1;
            }
            if ((yield permissions[3].isChecked())) {
                grp += 4;
            }
            if ((yield permissions[4].isChecked())) {
                grp += 2;
            }
            if ((yield permissions[5].isChecked())) {
                grp += 1;
            }
            if (permissions.length > 6) {
                if ((yield permissions[6].isChecked())) {
                    other += 4;
                }
                if ((yield permissions[7].isChecked())) {
                    other += 2;
                }
                if ((yield permissions[8].isChecked())) {
                    other += 1;
                }
            }
            return new Promise((resolve) => {
                resolve(owner.toString() + grp.toString() + other.toString());
            });
        });
    }
    setValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const checkboxes = (yield this.getMatCheckboxHarnesses());
            return new Promise((resolve, reject) => {
                const permissions = (0, mode_helper_1.parseMode)(value);
                Promise.all([
                    permissions.owner[posix_acl_enum_1.PosixPermission.Read] ? checkboxes[0].check() : checkboxes[0].uncheck(),
                    permissions.owner[posix_acl_enum_1.PosixPermission.Write] ? checkboxes[1].check() : checkboxes[1].uncheck(),
                    permissions.owner[posix_acl_enum_1.PosixPermission.Execute] ? checkboxes[2].check() : checkboxes[2].uncheck(),
                    permissions.group[posix_acl_enum_1.PosixPermission.Read] ? checkboxes[3].check() : checkboxes[3].uncheck(),
                    permissions.group[posix_acl_enum_1.PosixPermission.Write] ? checkboxes[4].check() : checkboxes[4].uncheck(),
                    permissions.group[posix_acl_enum_1.PosixPermission.Execute] ? checkboxes[5].check() : checkboxes[5].uncheck(),
                    permissions.other[posix_acl_enum_1.PosixPermission.Read] ? checkboxes[6].check() : checkboxes[6].uncheck(),
                    permissions.other[posix_acl_enum_1.PosixPermission.Write] ? checkboxes[7].check() : checkboxes[7].uncheck(),
                    permissions.other[posix_acl_enum_1.PosixPermission.Execute] ? checkboxes[8].check() : checkboxes[8].uncheck(),
                ])
                    .then(() => {
                    resolve();
                })
                    .catch((errors) => {
                    reject(errors);
                });
            });
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            const checkboxes = yield this.getMatCheckboxHarnesses();
            const inputState = yield (0, testing_1.parallel)(() => checkboxes.map((control) => control.isDisabled()));
            return new Promise((resolve) => {
                resolve(inputState.every((control) => !!control));
            });
        });
    }
}
exports.IxPermissionsHarness = IxPermissionsHarness;
IxPermissionsHarness.hostSelector = 'ix-permissions';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,