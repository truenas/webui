{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_baseToString.js","mappings":";;;;;AAAA,8DAAkC;AAClC,kEAAsC;AACtC,8DAAmC;AACnC,gEAAqC;AAErC,yDAAyD;AACzD,IAAI,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;AAErB,yDAAyD;AACzD,IAAI,WAAW,GAAG,oBAAM,CAAC,CAAC,CAAC,oBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,EACnD,cAAc,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;AAEpE;;;;;;;GAOG;AACH,SAAS,YAAY,CAAC,KAAK;IACzB,0EAA0E;IAC1E,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE,CAAC;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,IAAA,oBAAO,EAAC,KAAK,CAAC,EAAE,CAAC;QACnB,iEAAiE;QACjE,OAAO,IAAA,sBAAQ,EAAC,KAAK,EAAE,YAAY,CAAC,GAAG,EAAE,CAAC;IAC5C,CAAC;IACD,IAAI,IAAA,qBAAQ,EAAC,KAAK,CAAC,EAAE,CAAC;QACpB,OAAO,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1D,CAAC;IACD,IAAI,MAAM,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;IAC1B,OAAO,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AACrE,CAAC;AAED,kBAAe,YAAY,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_baseToString.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n"],"version":3}