6f3be23f0455be81dd260422f9525ee3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LockDatasetDialogComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const role_enum_1 = require("app/enums/role.enum");
const volume_list_1 = require("app/helptext/storage/volumes/volume-list");
const dataset_interface_1 = require("app/interfaces/dataset.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let LockDatasetDialogComponent = class LockDatasetDialogComponent {
    constructor(ws, errorHandler, translate, snackbar, dialogRef, dialogService, dataset) {
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.translate = translate;
        this.snackbar = snackbar;
        this.dialogRef = dialogRef;
        this.dialogService = dialogService;
        this.dataset = dataset;
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.forceCheckbox = new forms_1.FormControl(false);
    }
    onSubmit($event) {
        $event.preventDefault();
        const force = this.forceCheckbox.value;
        this.dialogService.jobDialog(this.ws.job('pool.dataset.lock', [this.dataset.id, { force_umount: force }]), { title: this.translate.instant(volume_list_1.helptextVolumes.lock_dataset_dialog.locking_dataset) })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.snackbar.success(this.translate.instant('Dataset locked'));
            this.dialogRef.close(true);
        });
    }
};
exports.LockDatasetDialogComponent = LockDatasetDialogComponent;
LockDatasetDialogComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: core_2.TranslateService },
    { type: snackbar_service_1.SnackbarService },
    { type: dialog_1.MatDialogRef },
    { type: dialog_service_1.DialogService },
    { type: dataset_interface_1.Dataset, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.LockDatasetDialogComponent = LockDatasetDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-lock-dataset-dialog',
        template: require("./lock-dataset-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], LockDatasetDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvZW5jcnlwdGlvbi9jb21wb25lbnRzL2xvY2stZGF0YXNldC1kaWFsb2cvbG9jay1kYXRhc2V0LWRpYWxvZy5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBRXVCO0FBQ3ZCLDBDQUE2QztBQUM3QyxxREFBeUU7QUFDekUseURBQXFFO0FBQ3JFLDhDQUF1RDtBQUN2RCxtREFBMkM7QUFDM0MsMEVBQTJFO0FBQzNFLHdFQUEyRDtBQUMzRCxzRUFBa0U7QUFDbEUscUZBQWlGO0FBQ2pGLDhFQUF5RTtBQUN6RSx3REFBMkQ7QUFTcEQsSUFBTSwwQkFBMEIsR0FBaEMsTUFBTSwwQkFBMEI7SUFLckMsWUFDVSxFQUFvQixFQUNwQixZQUFpQyxFQUNqQyxTQUEyQixFQUMzQixRQUF5QixFQUN6QixTQUFtRCxFQUNuRCxhQUE0QixFQUNKLE9BQWdCO1FBTnhDLE9BQUUsR0FBRixFQUFFLENBQWtCO1FBQ3BCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNqQyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixjQUFTLEdBQVQsU0FBUyxDQUEwQztRQUNuRCxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUNKLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFYekMsa0JBQWEsR0FBRyxDQUFDLGdCQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFN0Msa0JBQWEsR0FBRyxJQUFJLG1CQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFVbkMsQ0FBQztJQUVMLFFBQVEsQ0FBQyxNQUFtQjtRQUMxQixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUM1RSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyw2QkFBZSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQ3ZGO2FBQ0UsV0FBVyxFQUFFO2FBQ2IsSUFBSSxDQUNILElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEVBQzlCLElBQUEsOEJBQWMsRUFBQyxJQUFJLENBQUMsQ0FDckI7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUFoQ1UsZ0VBQTBCOzs7Ozs7Ozs4REFZbEMsYUFBTSxTQUFDLHdCQUFlOztxQ0FaZCwwQkFBMEI7SUFQdEMsSUFBQSw0QkFBWSxHQUFFO0lBQ2QsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLHdCQUF3QjtRQUNsQyx5REFBbUQ7UUFFbkQsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztHQUNXLDBCQUEwQixDQWlDdEMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvZW5jcnlwdGlvbi9jb21wb25lbnRzL2xvY2stZGF0YXNldC1kaWFsb2cvbG9jay1kYXRhc2V0LWRpYWxvZy5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnYXBwL2VudW1zL3JvbGUuZW51bSc7XG5pbXBvcnQgeyBoZWxwdGV4dFZvbHVtZXMgfSBmcm9tICdhcHAvaGVscHRleHQvc3RvcmFnZS92b2x1bWVzL3ZvbHVtZS1saXN0JztcbmltcG9ydCB7IERhdGFzZXQgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9kYXRhc2V0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IFNuYWNrYmFyU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL3NuYWNrYmFyL3NlcnZpY2VzL3NuYWNrYmFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9lcnJvci1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy93cy5zZXJ2aWNlJztcblxuQFVudGlsRGVzdHJveSgpXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpeC1sb2NrLWRhdGFzZXQtZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xvY2stZGF0YXNldC1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9sb2NrLWRhdGFzZXQtZGlhbG9nLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBMb2NrRGF0YXNldERpYWxvZ0NvbXBvbmVudCB7XG4gIHJlYWRvbmx5IHJlcXVpcmVkUm9sZXMgPSBbUm9sZS5EYXRhc2V0V3JpdGVdO1xuXG4gIGZvcmNlQ2hlY2tib3ggPSBuZXcgRm9ybUNvbnRyb2woZmFsc2UpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgd3M6IFdlYlNvY2tldFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBzbmFja2JhcjogU25hY2tiYXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8TG9ja0RhdGFzZXREaWFsb2dDb21wb25lbnQ+LFxuICAgIHByaXZhdGUgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGFzZXQ6IERhdGFzZXQsXG4gICkgeyB9XG5cbiAgb25TdWJtaXQoJGV2ZW50OiBTdWJtaXRFdmVudCk6IHZvaWQge1xuICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgZm9yY2UgPSB0aGlzLmZvcmNlQ2hlY2tib3gudmFsdWU7XG4gICAgdGhpcy5kaWFsb2dTZXJ2aWNlLmpvYkRpYWxvZyhcbiAgICAgIHRoaXMud3Muam9iKCdwb29sLmRhdGFzZXQubG9jaycsIFt0aGlzLmRhdGFzZXQuaWQsIHsgZm9yY2VfdW1vdW50OiBmb3JjZSB9XSksXG4gICAgICB7IHRpdGxlOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KGhlbHB0ZXh0Vm9sdW1lcy5sb2NrX2RhdGFzZXRfZGlhbG9nLmxvY2tpbmdfZGF0YXNldCkgfSxcbiAgICApXG4gICAgICAuYWZ0ZXJDbG9zZWQoKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyLmNhdGNoRXJyb3IoKSxcbiAgICAgICAgdW50aWxEZXN0cm95ZWQodGhpcyksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5zbmFja2Jhci5zdWNjZXNzKHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0RhdGFzZXQgbG9ja2VkJykpO1xuICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh0cnVlKTtcbiAgICAgIH0pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=