54c65c24a487f25265265460c5178248
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.greaterThanFg = greaterThanFg;
exports.rangeValidator = rangeValidator;
const lodash_es_1 = require("lodash-es");
function greaterThanFg(controlName, comparateControlNames, errMsg) {
    return (fg) => {
        if (!(fg === null || fg === void 0 ? void 0 : fg.get(controlName))) {
            return null;
        }
        const errFields = [];
        const subjectControl = fg.get(controlName);
        for (const name of comparateControlNames) {
            const otherControl = fg.get(name);
            if (!otherControl) {
                throw new Error('greaterThanValidator(): other control is not found in the group');
            }
            const otherValueExists = otherControl.value !== null && otherControl.value !== undefined && otherControl.value !== '';
            const subjectValueExists = subjectControl.value !== null && subjectControl.value !== undefined && subjectControl.value !== '';
            if (otherValueExists && subjectValueExists) {
                if (!(0, lodash_es_1.isNumber)(otherControl.value) || !(0, lodash_es_1.isNumber)(subjectControl.value)) {
                    throw new Error('greaterThanValidator(): Comparates are not all numeric');
                }
                if ((0, lodash_es_1.toNumber)(otherControl.value) >= (0, lodash_es_1.toNumber)(subjectControl.value)) {
                    errFields.push(name);
                }
            }
        }
        if (errFields.length) {
            fg.get(controlName).setErrors({
                greaterThan: errMsg ? { message: errMsg } : true,
            });
            return {
                [controlName]: { greaterThan: errMsg ? { message: errMsg } : true },
            };
        }
        let prevErrors = Object.assign({}, fg.get(controlName).errors);
        delete prevErrors.greaterThan;
        if ((0, lodash_es_1.isEmpty)(prevErrors)) {
            prevErrors = null;
        }
        fg.get(controlName).setErrors(prevErrors);
        return null;
    };
}
function rangeValidator(min, max) {
    let thisControl;
    return function rangeValidate(control) {
        let regex;
        if (min === 0) {
            regex = /^(0|[1-9]\d*)$/;
        }
        else {
            regex = /^[1-9]\d*$/;
        }
        if (!control.parent) {
            return null;
        }
        // Initializing the validator.
        if (!thisControl) {
            thisControl = control;
        }
        if (!thisControl.value) {
            return null;
        }
        if (regex.test(thisControl.value)) {
            const num = Number(thisControl.value);
            if (num >= min) {
                if (max) {
                    if (num <= max) {
                        return null;
                    }
                }
                else {
                    return null;
                }
            }
        }
        return { range: true, rangeValue: { min, max } };
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3ZhbGlkYXRvcnMudHMiLCJtYXBwaW5ncyI6Ijs7QUFLQSxzQ0E4Q0M7QUFFRCx3Q0F1Q0M7QUF6RkQseUNBQXdEO0FBRXhELFNBQWdCLGFBQWEsQ0FDM0IsV0FBbUIsRUFDbkIscUJBQStCLEVBQy9CLE1BQWU7SUFFZixPQUFPLENBQUMsRUFBc0IsRUFBRSxFQUFFO1FBQ2hDLElBQUksQ0FBQyxDQUFBLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUEsRUFBRSxDQUFDO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELE1BQU0sU0FBUyxHQUFhLEVBQUUsQ0FBQztRQUMvQixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBdUIsQ0FBQztRQUNqRSxLQUFLLE1BQU0sSUFBSSxJQUFJLHFCQUFxQixFQUFFLENBQUM7WUFDekMsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQXVCLENBQUM7WUFDeEQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNsQixNQUFNLElBQUksS0FBSyxDQUNiLGlFQUFpRSxDQUNsRSxDQUFDO1lBQ0osQ0FBQztZQUNELE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksWUFBWSxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksWUFBWSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUM7WUFDdEgsTUFBTSxrQkFBa0IsR0FBRyxjQUFjLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxjQUFjLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxjQUFjLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUM5SCxJQUFJLGdCQUFnQixJQUFJLGtCQUFrQixFQUFFLENBQUM7Z0JBQzNDLElBQUksQ0FBQyxJQUFBLG9CQUFR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O0FBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvc2VydmljZXMvdmFsaWRhdG9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBVbnR5cGVkRm9ybUNvbnRyb2wsIFZhbGlkYXRvckZuLFxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBpc0VtcHR5LCBpc051bWJlciwgdG9OdW1iZXIgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ3JlYXRlclRoYW5GZyhcbiAgY29udHJvbE5hbWU6IHN0cmluZyxcbiAgY29tcGFyYXRlQ29udHJvbE5hbWVzOiBzdHJpbmdbXSxcbiAgZXJyTXNnPzogc3RyaW5nLFxuKTogVmFsaWRhdG9yRm4ge1xuICByZXR1cm4gKGZnOiBGb3JtR3JvdXA8dW5rbm93bj4pID0+IHtcbiAgICBpZiAoIWZnPy5nZXQoY29udHJvbE5hbWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBlcnJGaWVsZHM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3Qgc3ViamVjdENvbnRyb2wgPSBmZy5nZXQoY29udHJvbE5hbWUpIGFzIFVudHlwZWRGb3JtQ29udHJvbDtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgY29tcGFyYXRlQ29udHJvbE5hbWVzKSB7XG4gICAgICBjb25zdCBvdGhlckNvbnRyb2wgPSBmZy5nZXQobmFtZSkgYXMgVW50eXBlZEZvcm1Db250cm9sO1xuICAgICAgaWYgKCFvdGhlckNvbnRyb2wpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdncmVhdGVyVGhhblZhbGlkYXRvcigpOiBvdGhlciBjb250cm9sIGlzIG5vdCBmb3VuZCBpbiB0aGUgZ3JvdXAnLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3RoZXJWYWx1ZUV4aXN0cyA9IG90aGVyQ29udHJvbC52YWx1ZSAhPT0gbnVsbCAmJiBvdGhlckNvbnRyb2wudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBvdGhlckNvbnRyb2wudmFsdWUgIT09ICcnO1xuICAgICAgY29uc3Qgc3ViamVjdFZhbHVlRXhpc3RzID0gc3ViamVjdENvbnRyb2wudmFsdWUgIT09IG51bGwgJiYgc3ViamVjdENvbnRyb2wudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBzdWJqZWN0Q29udHJvbC52YWx1ZSAhPT0gJyc7XG4gICAgICBpZiAob3RoZXJWYWx1ZUV4aXN0cyAmJiBzdWJqZWN0VmFsdWVFeGlzdHMpIHtcbiAgICAgICAgaWYgKCFpc051bWJlcihvdGhlckNvbnRyb2wudmFsdWUpIHx8ICFpc051bWJlcihzdWJqZWN0Q29udHJvbC52YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dyZWF0ZXJUaGFuVmFsaWRhdG9yKCk6IENvbXBhcmF0ZXMgYXJlIG5vdCBhbGwgbnVtZXJpYycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b051bWJlcihvdGhlckNvbnRyb2wudmFsdWUpID49IHRvTnVtYmVyKHN1YmplY3RDb250cm9sLnZhbHVlKSkge1xuICAgICAgICAgIGVyckZpZWxkcy5wdXNoKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlcnJGaWVsZHMubGVuZ3RoKSB7XG4gICAgICBmZy5nZXQoY29udHJvbE5hbWUpLnNldEVycm9ycyh7XG4gICAgICAgIGdyZWF0ZXJUaGFuOiBlcnJNc2cgPyB7IG1lc3NhZ2U6IGVyck1zZyB9IDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2NvbnRyb2xOYW1lXTogeyBncmVhdGVyVGhhbjogZXJyTXNnID8geyBtZXNzYWdlOiBlcnJNc2cgfSA6IHRydWUgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCBwcmV2RXJyb3JzID0geyAuLi5mZy5nZXQoY29udHJvbE5hbWUpLmVycm9ycyB9O1xuICAgIGRlbGV0ZSBwcmV2RXJyb3JzLmdyZWF0ZXJUaGFuO1xuICAgIGlmIChpc0VtcHR5KHByZXZFcnJvcnMpKSB7XG4gICAgICBwcmV2RXJyb3JzID0gbnVsbDtcbiAgICB9XG4gICAgZmcuZ2V0KGNvbnRyb2xOYW1lKS5zZXRFcnJvcnMocHJldkVycm9ycyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5nZVZhbGlkYXRvcihtaW46IG51bWJlciwgbWF4PzogbnVtYmVyKTogVmFsaWRhdG9yRm4ge1xuICBsZXQgdGhpc0NvbnRyb2w6IEZvcm1Db250cm9sPHN0cmluZz47XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHJhbmdlVmFsaWRhdGUoY29udHJvbDogRm9ybUNvbnRyb2w8c3RyaW5nPikge1xuICAgIGxldCByZWdleDtcbiAgICBpZiAobWluID09PSAwKSB7XG4gICAgICByZWdleCA9IC9eKDB8WzEtOV1cXGQqKSQvO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWdleCA9IC9eWzEtOV1cXGQqJC87XG4gICAgfVxuXG4gICAgaWYgKCFjb250cm9sLnBhcmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHRoZSB2YWxpZGF0b3IuXG4gICAgaWYgKCF0aGlzQ29udHJvbCkge1xuICAgICAgdGhpc0NvbnRyb2wgPSBjb250cm9sO1xuICAgIH1cblxuICAgIGlmICghdGhpc0NvbnRyb2wudmFsdWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChyZWdleC50ZXN0KHRoaXNDb250cm9sLnZhbHVlKSkge1xuICAgICAgY29uc3QgbnVtID0gTnVtYmVyKHRoaXNDb250cm9sLnZhbHVlKTtcbiAgICAgIGlmIChudW0gPj0gbWluKSB7XG4gICAgICAgIGlmIChtYXgpIHtcbiAgICAgICAgICBpZiAobnVtIDw9IG1heCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmFuZ2U6IHRydWUsIHJhbmdlVmFsdWU6IHsgbWluLCBtYXggfSB9O1xuICB9O1xufVxuIl0sInZlcnNpb24iOjN9