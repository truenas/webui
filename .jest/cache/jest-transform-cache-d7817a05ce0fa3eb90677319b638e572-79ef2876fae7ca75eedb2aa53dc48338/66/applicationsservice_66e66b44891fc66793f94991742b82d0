76ef0aa8dd22bf2748a480d548ffdf47
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationsService = void 0;
exports.filterIgnoredApps = filterIgnoredApps;
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const catalog_constants_1 = require("app/constants/catalog.constants");
const app_extra_category_enum_1 = require("app/enums/app-extra-category.enum");
const ws_service_1 = require("app/services/ws.service");
const ignoredAppsList = [catalog_constants_1.customApp];
function filterIgnoredApps() {
    return (0, rxjs_1.pipe)((0, rxjs_1.map)((apps) => apps.filter((app) => !ignoredAppsList.includes(app.name))));
}
let ApplicationsService = class ApplicationsService {
    constructor(ws, translate) {
        this.ws = ws;
        this.translate = translate;
    }
    getPoolList() {
        return this.ws.call('pool.query');
    }
    getInterfaces() {
        return this.ws.call('interface.query');
    }
    getCatalogAppDetails(name, train) {
        return this.ws.call('catalog.get_app_details', [name, { train }]);
    }
    getAllAppsCategories() {
        return this.ws.call('app.categories');
    }
    getLatestApps(filters) {
        return this.getAppsFetchCall('app.latest', filters).pipe(filterIgnoredApps());
    }
    getAvailableApps(filters) {
        return this.getAppsFetchCall('app.available', filters).pipe(filterIgnoredApps());
    }
    getSimilarApps(app) {
        return this.ws.call('app.similar', [app.name, app.train]);
    }
    getAllApps() {
        return this.ws.call('app.query', [[], { extra: { retrieve_config: true } }]);
    }
    getApp(name) {
        return this.ws.call('app.query', [[['name', '=', name]], {
                extra: {
                    include_app_schema: true,
                    retrieve_config: true,
                },
            }]);
    }
    getInstalledAppsUpdates() {
        return this.ws.subscribe('app.query');
    }
    getInstalledAppsStatusUpdates() {
        return this.ws.subscribe('core.get_jobs').pipe((0, rxjs_1.filter)((event) => {
            return ['app.start', 'app.stop'].includes(event.fields.method);
        }));
    }
    getAppUpgradeSummary(name, version) {
        const payload = [name];
        if (version) {
            payload.push({ app_version: version });
        }
        return this.ws.call('app.upgrade_summary', payload);
    }
    startApplication(name) {
        return this.ws.job('app.start', [name]);
    }
    stopApplication(name) {
        return this.ws.job('app.stop', [name]);
    }
    restartApplication(name) {
        return this.ws.job('app.redeploy', [name]);
    }
    convertDateToRelativeDate(date) {
        const diff = Math.round((Number(new Date()) - Number(date)) / 1000);
        const day = 60 * 60 * 24;
        if (diff < day) {
            return this.translate.instant('Last 24 hours');
        }
        if (diff < day * 3) {
            return this.translate.instant('Last 3 days');
        }
        if (diff < day * 14) {
            return this.translate.instant('Last week');
        }
        if (diff < day * 60) {
            return this.translate.instant('Last month');
        }
        return this.translate.instant('Long time ago');
    }
    getAppsFetchCall(endPoint, filters) {
        var _a, _b, _c, _d, _e;
        if (filters && !((_a = filters.categories) === null || _a === void 0 ? void 0 : _a.length)) {
            delete filters.categories;
        }
        if (filters && !((_b = filters.sort) === null || _b === void 0 ? void 0 : _b.length)) {
            delete filters.sort;
        }
        if (!filters || (filters && !Object.keys(filters).length)) {
            return this.ws.call(endPoint).pipe(filterIgnoredApps());
        }
        const firstOption = [];
        if ((_c = filters.categories) === null || _c === void 0 ? void 0 : _c.includes(app_extra_category_enum_1.AppExtraCategory.Recommended)) {
            firstOption.push(['recommended', '=', true]);
        }
        filters.categories = (_d = filters.categories) === null || _d === void 0 ? void 0 : _d.filter((category) => !(category === null || category === void 0 ? void 0 : category.includes(app_extra_category_enum_1.AppExtraCategory.Recommended)));
        if ((_e = filters.categories) === null || _e === void 0 ? void 0 : _e.length) {
            firstOption.push(['OR', filters.categories.map((category) => ['categories', 'rin', category])]);
        }
        const secondOption = filters.sort ? { order_by: [filters.sort] } : {};
        return this.ws.call(endPoint, [firstOption, secondOption]).pipe(filterIgnoredApps());
    }
};
exports.ApplicationsService = ApplicationsService;
ApplicationsService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: core_2.TranslateService }
];
exports.ApplicationsService = ApplicationsService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], ApplicationsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,