ee0d2a16c2f2d89200da8035924d3489
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppRollbackModalComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const rxjs_1 = require("rxjs");
const role_enum_1 = require("app/enums/role.enum");
const apps_1 = require("app/helptext/apps/apps");
const app_interface_1 = require("app/interfaces/app.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let AppRollbackModalComponent = class AppRollbackModalComponent {
    constructor(dialogRef, ws, dialogService, formBuilder, errorHandler, app) {
        this.dialogRef = dialogRef;
        this.ws = ws;
        this.dialogService = dialogService;
        this.formBuilder = formBuilder;
        this.errorHandler = errorHandler;
        this.app = app;
        this.form = this.formBuilder.group({
            app_version: ['', forms_1.Validators.required],
            rollback_snapshot: [false],
        });
        this.helptext = apps_1.helptextApps.apps.rollback_dialog.version.tooltip;
        this.requiredRoles = [role_enum_1.Role.AppsWrite];
        this.setVersionOptions();
    }
    onRollback() {
        const rollbackParams = [this.app.name, this.form.value];
        this.dialogService.jobDialog(this.ws.job('app.rollback', rollbackParams), { title: apps_1.helptextApps.apps.rollback_dialog.job })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => this.dialogRef.close(true));
    }
    setVersionOptions() {
        this.ws.call('app.rollback_versions', [this.app.name]).pipe((0, rxjs_1.tap)((versions) => {
            const options = versions.map((version) => ({
                label: version,
                value: version,
            }));
            this.versionOptions$ = (0, rxjs_1.of)(options);
            if (options.length) {
                this.selectFirstVersion(options[0]);
            }
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
    }
    selectFirstVersion(firstOption) {
        this.form.patchValue({
            app_version: firstOption.value.toString(),
        });
    }
};
exports.AppRollbackModalComponent = AppRollbackModalComponent;
AppRollbackModalComponent.ctorParameters = () => [
    { type: dialog_1.MatDialogRef },
    { type: ws_service_1.WebSocketService },
    { type: dialog_service_1.DialogService },
    { type: forms_1.FormBuilder },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: app_interface_1.App, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.AppRollbackModalComponent = AppRollbackModalComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-app-rollback-modal',
        template: require("./app-rollback-modal.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], AppRollbackModalComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2FwcHMvY29tcG9uZW50cy9pbnN0YWxsZWQtYXBwcy9hcHAtcm9sbGJhY2stbW9kYWwvYXBwLXJvbGxiYWNrLW1vZGFsLmNvbXBvbmVudC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FFdUI7QUFDdkIsMENBQXlEO0FBQ3pELHFEQUF5RTtBQUN6RSx5REFBcUU7QUFDckUsK0JBQTJDO0FBQzNDLG1EQUEyQztBQUMzQyxpREFBc0Q7QUFDdEQsZ0VBQXNFO0FBRXRFLHNFQUFrRTtBQUNsRSw4RUFBeUU7QUFDekUsd0RBQTJEO0FBU3BELElBQU0seUJBQXlCLEdBQS9CLE1BQU0seUJBQXlCO0lBV3BDLFlBQ1UsU0FBa0QsRUFDbEQsRUFBb0IsRUFDcEIsYUFBNEIsRUFDNUIsV0FBd0IsRUFDeEIsWUFBaUMsRUFDUixHQUFRO1FBTGpDLGNBQVMsR0FBVCxTQUFTLENBQXlDO1FBQ2xELE9BQUUsR0FBRixFQUFFLENBQWtCO1FBQ3BCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNSLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFoQjNDLFNBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUM1QixXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsa0JBQVUsQ0FBQyxRQUFRLENBQUM7WUFDdEMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLENBQUM7U0FDM0IsQ0FBQyxDQUFDO1FBSU0sYUFBUSxHQUFHLG1CQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ25ELGtCQUFhLEdBQUcsQ0FBQyxnQkFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBVWxELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxVQUFVO1FBQ1IsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBZ0MsQ0FBQztRQUV2RixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxFQUMzQyxFQUFFLEtBQUssRUFBRSxtQkFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLENBQ2pEO2FBQ0UsV0FBVyxFQUFFO2FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBQSw4QkFBYyxFQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN6RCxJQUFBLFVBQUcsRUFBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2YsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDekMsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsS0FBSyxFQUFFLE9BQU87YUFDZixDQUFDLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBQSxTQUFFLEVBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkMsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLEVBQ0YsSUFBQSw4QkFBYyxFQUFDLElBQUksQ0FBQyxDQUNyQixDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxXQUFtQjtRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNuQixXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7U0FDMUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUF0RFUsOERBQXlCOzs7Ozs7O3NEQWlCakMsYUFBTSxTQUFDLHdCQUFlOztvQ0FqQmQseUJBQXlCO0lBUHJDLElBQUEsNEJBQVksR0FBRTtJQUNkLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsd0RBQWtEO1FBRWxELGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7R0FDVyx5QkFBeUIsQ0F1RHJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9wYWdlcy9hcHBzL2NvbXBvbmVudHMvaW5zdGFsbGVkLWFwcHMvYXBwLXJvbGxiYWNrLW1vZGFsL2FwcC1yb2xsYmFjay1tb2RhbC5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgdGFwIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnYXBwL2VudW1zL3JvbGUuZW51bSc7XG5pbXBvcnQgeyBoZWxwdGV4dEFwcHMgfSBmcm9tICdhcHAvaGVscHRleHQvYXBwcy9hcHBzJztcbmltcG9ydCB7IEFwcCwgQXBwUm9sbGJhY2tQYXJhbXMgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9hcHAuaW50ZXJmYWNlJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL29wdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL2RpYWxvZy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL2Vycm9yLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dzLnNlcnZpY2UnO1xuXG5AVW50aWxEZXN0cm95KClcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LWFwcC1yb2xsYmFjay1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9hcHAtcm9sbGJhY2stbW9kYWwuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9hcHAtcm9sbGJhY2stbW9kYWwuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEFwcFJvbGxiYWNrTW9kYWxDb21wb25lbnQge1xuICBmb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgYXBwX3ZlcnNpb246IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgcm9sbGJhY2tfc25hcHNob3Q6IFtmYWxzZV0sXG4gIH0pO1xuXG4gIHZlcnNpb25PcHRpb25zJDogT2JzZXJ2YWJsZTxPcHRpb25bXT47XG5cbiAgcmVhZG9ubHkgaGVscHRleHQgPSBoZWxwdGV4dEFwcHMuYXBwcy5yb2xsYmFja19kaWFsb2cudmVyc2lvbi50b29sdGlwO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcmVxdWlyZWRSb2xlcyA9IFtSb2xlLkFwcHNXcml0ZV07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxBcHBSb2xsYmFja01vZGFsQ29tcG9uZW50PixcbiAgICBwcml2YXRlIHdzOiBXZWJTb2NrZXRTZXJ2aWNlLFxuICAgIHByaXZhdGUgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcbiAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcbiAgICBwcml2YXRlIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyU2VydmljZSxcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHJpdmF0ZSBhcHA6IEFwcCxcbiAgKSB7XG4gICAgdGhpcy5zZXRWZXJzaW9uT3B0aW9ucygpO1xuICB9XG5cbiAgb25Sb2xsYmFjaygpOiB2b2lkIHtcbiAgICBjb25zdCByb2xsYmFja1BhcmFtcyA9IFt0aGlzLmFwcC5uYW1lLCB0aGlzLmZvcm0udmFsdWVdIGFzIFJlcXVpcmVkPEFwcFJvbGxiYWNrUGFyYW1zPjtcblxuICAgIHRoaXMuZGlhbG9nU2VydmljZS5qb2JEaWFsb2coXG4gICAgICB0aGlzLndzLmpvYignYXBwLnJvbGxiYWNrJywgcm9sbGJhY2tQYXJhbXMpLFxuICAgICAgeyB0aXRsZTogaGVscHRleHRBcHBzLmFwcHMucm9sbGJhY2tfZGlhbG9nLmpvYiB9LFxuICAgIClcbiAgICAgIC5hZnRlckNsb3NlZCgpXG4gICAgICAucGlwZSh0aGlzLmVycm9ySGFuZGxlci5jYXRjaEVycm9yKCksIHVudGlsRGVzdHJveWVkKHRoaXMpKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh0cnVlKSk7XG4gIH1cblxuICBwcml2YXRlIHNldFZlcnNpb25PcHRpb25zKCk6IHZvaWQge1xuICAgIHRoaXMud3MuY2FsbCgnYXBwLnJvbGxiYWNrX3ZlcnNpb25zJywgW3RoaXMuYXBwLm5hbWVdKS5waXBlKFxuICAgICAgdGFwKCh2ZXJzaW9ucykgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdmVyc2lvbnMubWFwKCh2ZXJzaW9uKSA9PiAoe1xuICAgICAgICAgIGxhYmVsOiB2ZXJzaW9uLFxuICAgICAgICAgIHZhbHVlOiB2ZXJzaW9uLFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMudmVyc2lvbk9wdGlvbnMkID0gb2Yob3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0Rmlyc3RWZXJzaW9uKG9wdGlvbnNbMF0pO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIHVudGlsRGVzdHJveWVkKHRoaXMpLFxuICAgICkuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBwcml2YXRlIHNlbGVjdEZpcnN0VmVyc2lvbihmaXJzdE9wdGlvbjogT3B0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5mb3JtLnBhdGNoVmFsdWUoe1xuICAgICAgYXBwX3ZlcnNpb246IGZpcnN0T3B0aW9uLnZhbHVlLnRvU3RyaW5nKCksXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==