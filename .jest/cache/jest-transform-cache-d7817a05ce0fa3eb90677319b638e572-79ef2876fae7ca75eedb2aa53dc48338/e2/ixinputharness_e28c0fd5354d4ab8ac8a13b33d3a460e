7f093e2f954bde86bde164dca9d15b45
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxInputHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/input/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxInputHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getMatInputHarness = this.locatorFor(testing_2.MatInputHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxInputHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatInputHarness()).getValue();
        });
    }
    setValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const harness = (yield this.getMatInputHarness());
            // MatInputHarness does not properly work with numeric values
            // (for example for <input type="number">).
            // https://github.com/angular/components/issues/23894
            if (typeof value === 'number') {
                return this.setValueAndTriggerBlur(value);
            }
            return harness.setValue(value);
        });
    }
    setValueAndTriggerBlur(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const harness = (yield this.getMatInputHarness());
            const nativeInput = yield harness.host();
            yield nativeInput.setInputValue(value);
            yield nativeInput.dispatchEvent('input');
            return nativeInput.blur();
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatInputHarness()).isDisabled();
        });
    }
    isReadonly() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatInputHarness()).isReadonly();
        });
    }
}
exports.IxInputHarness = IxInputHarness;
IxInputHarness.hostSelector = 'ix-input';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1pbnB1dC9peC1pbnB1dC5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUE4RjtBQUM5Riw2REFBa0U7QUFDbEUsc0dBQWlHO0FBRWpHLGtGQUE4RTtBQU05RSxNQUFhLGNBQWUsU0FBUSwwQkFBZ0I7SUFBcEQ7O1FBUUUsdUJBQWtCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyx5QkFBZSxDQUFDLENBQUM7UUFDdEQsaUJBQVksR0FBRyw0QkFBWSxDQUFDO0lBMkM5QixDQUFDO0lBakRDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBOEI7UUFDeEMsT0FBTyxJQUFJLDBCQUFnQixDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUM7YUFDakQsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFILENBQUM7SUFLSyxZQUFZOztZQUNoQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQ0FBYyxDQUFDLEVBQUUsQ0FBQztZQUM5RCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUIsQ0FBQztLQUFBO0lBRUssUUFBUTs7WUFDWixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3RELENBQUM7S0FBQTtJQUVLLFFBQVEsQ0FBQyxLQUFzQjs7WUFDbkMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7WUFFbEQsNkRBQTZEO1lBQzdELDJDQUEyQztZQUMzQyxxREFBcUQ7WUFDckQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztnQkFDOUIsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUMsQ0FBQztZQUVELE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxDQUFDO0tBQUE7SUFFSyxzQkFBc0IsQ0FBQyxLQUFzQjs7WUFDakQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7WUFFbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekMsTUFBTSxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQTBCLENBQUMsQ0FBQztZQUM1RCxNQUFNLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDekMsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUIsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3hELENBQUM7S0FBQTtJQUVLLFVBQVU7O1lBQ2QsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN4RCxDQUFDO0tBQUE7O0FBbkRILHdDQW9EQztBQW5EaUIsMkJBQVksR0FBRyxVQUFVLEFBQWIsQ0FBYyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWlucHV0L2l4LWlucHV0Lmhhcm5lc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUhhcm5lc3NGaWx0ZXJzLCBDb21wb25lbnRIYXJuZXNzLCBIYXJuZXNzUHJlZGljYXRlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWF0SW5wdXRIYXJuZXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQvdGVzdGluZyc7XG5pbXBvcnQgeyBJeExhYmVsSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtbGFiZWwvaXgtbGFiZWwuaGFybmVzcyc7XG5pbXBvcnQgeyBJeEZvcm1Db250cm9sSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2ludGVyZmFjZXMvaXgtZm9ybS1jb250cm9sLWhhcm5lc3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldEVycm9yVGV4dCB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL3V0aWxzL2hhcm5lc3MudXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEl4SW5wdXRIYXJuZXNzRmlsdGVycyBleHRlbmRzIEJhc2VIYXJuZXNzRmlsdGVycyB7XG4gIGxhYmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhJbnB1dEhhcm5lc3MgZXh0ZW5kcyBDb21wb25lbnRIYXJuZXNzIGltcGxlbWVudHMgSXhGb3JtQ29udHJvbEhhcm5lc3Mge1xuICBzdGF0aWMgcmVhZG9ubHkgaG9zdFNlbGVjdG9yID0gJ2l4LWlucHV0JztcblxuICBzdGF0aWMgd2l0aChvcHRpb25zOiBJeElucHV0SGFybmVzc0ZpbHRlcnMpOiBIYXJuZXNzUHJlZGljYXRlPEl4SW5wdXRIYXJuZXNzPiB7XG4gICAgcmV0dXJuIG5ldyBIYXJuZXNzUHJlZGljYXRlKEl4SW5wdXRIYXJuZXNzLCBvcHRpb25zKVxuICAgICAgLmFkZE9wdGlvbignbGFiZWwnLCBvcHRpb25zLmxhYmVsLCAoaGFybmVzcywgbGFiZWwpID0+IEhhcm5lc3NQcmVkaWNhdGUuc3RyaW5nTWF0Y2hlcyhoYXJuZXNzLmdldExhYmVsVGV4dCgpLCBsYWJlbCkpO1xuICB9XG5cbiAgZ2V0TWF0SW5wdXRIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yKE1hdElucHV0SGFybmVzcyk7XG4gIGdldEVycm9yVGV4dCA9IGdldEVycm9yVGV4dDtcblxuICBhc3luYyBnZXRMYWJlbFRleHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBsYWJlbCA9IGF3YWl0IHRoaXMubG9jYXRvckZvck9wdGlvbmFsKEl4TGFiZWxIYXJuZXNzKSgpO1xuICAgIGlmICghbGFiZWwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGxhYmVsLmdldExhYmVsKCk7XG4gIH1cblxuICBhc3luYyBnZXRWYWx1ZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRNYXRJbnB1dEhhcm5lc3MoKSkuZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIGFzeW5jIHNldFZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBoYXJuZXNzID0gKGF3YWl0IHRoaXMuZ2V0TWF0SW5wdXRIYXJuZXNzKCkpO1xuXG4gICAgLy8gTWF0SW5wdXRIYXJuZXNzIGRvZXMgbm90IHByb3Blcmx5IHdvcmsgd2l0aCBudW1lcmljIHZhbHVlc1xuICAgIC8vIChmb3IgZXhhbXBsZSBmb3IgPGlucHV0IHR5cGU9XCJudW1iZXJcIj4pLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvaXNzdWVzLzIzODk0XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlQW5kVHJpZ2dlckJsdXIodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBoYXJuZXNzLnNldFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIGFzeW5jIHNldFZhbHVlQW5kVHJpZ2dlckJsdXIodmFsdWU6IHN0cmluZyB8IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGhhcm5lc3MgPSAoYXdhaXQgdGhpcy5nZXRNYXRJbnB1dEhhcm5lc3MoKSk7XG5cbiAgICBjb25zdCBuYXRpdmVJbnB1dCA9IGF3YWl0IGhhcm5lc3MuaG9zdCgpO1xuICAgIGF3YWl0IG5hdGl2ZUlucHV0LnNldElucHV0VmFsdWUodmFsdWUgYXMgdW5rbm93biBhcyBzdHJpbmcpO1xuICAgIGF3YWl0IG5hdGl2ZUlucHV0LmRpc3BhdGNoRXZlbnQoJ2lucHV0Jyk7XG4gICAgcmV0dXJuIG5hdGl2ZUlucHV0LmJsdXIoKTtcbiAgfVxuXG4gIGFzeW5jIGlzRGlzYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldE1hdElucHV0SGFybmVzcygpKS5pc0Rpc2FibGVkKCk7XG4gIH1cblxuICBhc3luYyBpc1JlYWRvbmx5KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRNYXRJbnB1dEhhcm5lc3MoKSkuaXNSZWFkb25seSgpO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=