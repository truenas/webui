{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/store/docker.store.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/store/docker.store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  forkJoin, map, Observable, switchMap, tap,\n} from 'rxjs';\nimport { DockerConfig, DockerStatusData } from 'app/enums/docker-config.interface';\nimport { DockerStatus } from 'app/enums/docker-status.enum';\nimport { JobState } from 'app/enums/job-state.enum';\nimport { Job } from 'app/interfaces/job.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\nexport interface DockerConfigState {\n  isLoading: boolean;\n  dockerConfig: DockerConfig;\n  nvidiaDriversInstalled: boolean;\n  lacksNvidiaDrivers: boolean;\n  statusData: DockerStatusData;\n}\n\nconst initialState: DockerConfigState = {\n  isLoading: false,\n  dockerConfig: null,\n  nvidiaDriversInstalled: false,\n  lacksNvidiaDrivers: false,\n  statusData: {\n    status: null,\n    description: null,\n  },\n};\n\n@Injectable()\nexport class DockerStore extends ComponentStore<DockerConfigState> {\n  readonly isLoading$ = this.select((state) => state.isLoading);\n  readonly dockerConfig$ = this.select((state) => state.dockerConfig);\n  readonly selectedPool$ = this.select((state) => state.dockerConfig?.pool || null);\n  readonly nvidiaDriversInstalled$ = this.select((state) => state.nvidiaDriversInstalled);\n  readonly lacksNvidiaDrivers$ = this.select((state) => state.lacksNvidiaDrivers);\n  readonly isDockerStarted$ = this.select((state) => DockerStatus.Running === state.statusData.status);\n  readonly status$ = this.select((state) => state.statusData.status);\n  readonly statusDescription$ = this.select((state) => state.statusData.description);\n\n  constructor(\n    private ws: WebSocketService,\n    private dialogService: DialogService,\n    private translate: TranslateService,\n    private errorHandler: ErrorHandlerService,\n  ) {\n    super(initialState);\n  }\n\n  initialize = this.effect((trigger$: Observable<void>) => {\n    return trigger$.pipe(\n      tap(() => {\n        this.patchState({\n          isLoading: true,\n        });\n      }),\n      switchMap(() => forkJoin([\n        this.getDockerConfig(),\n        this.getDockerStatus(),\n        this.getLacksNvidiaDrivers(),\n      ])),\n      tap(\n        ([dockerConfig, statusData, lacksNvidiaDrivers]: [DockerConfig, DockerStatusData, boolean]) => {\n          this.patchState({\n            dockerConfig,\n            nvidiaDriversInstalled: dockerConfig.nvidia,\n            lacksNvidiaDrivers,\n            statusData,\n            isLoading: false,\n          });\n        },\n      ),\n    );\n  });\n\n  private getDockerConfig(): Observable<DockerConfig> {\n    return this.ws.call('docker.config');\n  }\n\n  private getLacksNvidiaDrivers(): Observable<boolean> {\n    return this.ws.call('docker.lacks_nvidia_drivers');\n  }\n\n  private getDockerStatus(): Observable<DockerStatusData> {\n    return this.ws.call('docker.status');\n  }\n\n  setDockerPool(poolName: string): Observable<Job<DockerConfig>> {\n    return this.dialogService.jobDialog(\n      this.ws.job('docker.update', [{ pool: poolName }]),\n      { title: this.translate.instant('Configuring...') },\n    )\n      .afterClosed()\n      .pipe(\n        tap((job) => {\n          if (job.state === JobState.Success) {\n            this.patchState((state) => ({\n              ...state,\n              dockerConfig: {\n                ...state.dockerConfig,\n                pool: poolName,\n              },\n            }));\n          } else if ([JobState.Failed, JobState.Aborted, JobState.Error].includes(job.state)) {\n            this.patchState((state) => ({\n              ...state,\n              dockerConfig: {\n                ...state.dockerConfig,\n                pool: null,\n              },\n            }));\n          }\n        }),\n        this.errorHandler.catchError(),\n      );\n  }\n\n  reloadDockerConfig(): Observable<DockerConfig> {\n    return this.getDockerConfig().pipe(\n      tap((dockerConfig) => {\n        this.patchState({ dockerConfig });\n      }),\n    );\n  }\n\n  setDockerNvidia(nvidiaDriversInstalled: boolean): Observable<Job<DockerConfig>> {\n    return this.dialogService.jobDialog(\n      this.ws.job('docker.update', [{ nvidia: nvidiaDriversInstalled }]),\n      { title: this.translate.instant('Configuring...') },\n    )\n      .afterClosed()\n      .pipe(\n        tap((job) => {\n          if (job.state === JobState.Success) {\n            this.patchState({\n              nvidiaDriversInstalled,\n            });\n          }\n        }),\n        this.errorHandler.catchError(),\n      );\n  }\n\n  /**\n   * Updates docker status in `DockerStore` service\n   * @returns An observable that should be subscribed to at component level. This event subscription should only\n   * stay alive until the component subscription stays alive i.e., until the component is destroyed\n   */\n  dockerStatusEventUpdates(): Observable<DockerStatusData> {\n    return this.ws.subscribe('docker.state').pipe(\n      map((event) => event.fields),\n      tap((statusData) => {\n        this.patchState({ statusData });\n      }),\n    );\n  }\n}\n"],"version":3}