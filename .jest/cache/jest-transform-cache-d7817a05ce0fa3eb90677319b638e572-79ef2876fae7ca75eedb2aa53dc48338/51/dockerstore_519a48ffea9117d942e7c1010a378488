597bf899af96d3694bacc6601d2716aa
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerStore = void 0;
const core_1 = require("@angular/core");
const component_store_1 = require("@ngrx/component-store");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const docker_status_enum_1 = require("app/enums/docker-status.enum");
const job_state_enum_1 = require("app/enums/job-state.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const initialState = {
    isLoading: false,
    dockerConfig: null,
    nvidiaDriversInstalled: false,
    lacksNvidiaDrivers: false,
    statusData: {
        status: null,
        description: null,
    },
};
let DockerStore = class DockerStore extends component_store_1.ComponentStore {
    constructor(ws, dialogService, translate, errorHandler) {
        super(initialState);
        this.ws = ws;
        this.dialogService = dialogService;
        this.translate = translate;
        this.errorHandler = errorHandler;
        this.isLoading$ = this.select((state) => state.isLoading);
        this.dockerConfig$ = this.select((state) => state.dockerConfig);
        this.selectedPool$ = this.select((state) => { var _a; return ((_a = state.dockerConfig) === null || _a === void 0 ? void 0 : _a.pool) || null; });
        this.nvidiaDriversInstalled$ = this.select((state) => state.nvidiaDriversInstalled);
        this.lacksNvidiaDrivers$ = this.select((state) => state.lacksNvidiaDrivers);
        this.isDockerStarted$ = this.select((state) => docker_status_enum_1.DockerStatus.Running === state.statusData.status);
        this.status$ = this.select((state) => state.statusData.status);
        this.statusDescription$ = this.select((state) => state.statusData.description);
        this.initialize = this.effect((trigger$) => {
            return trigger$.pipe((0, rxjs_1.tap)(() => {
                this.patchState({
                    isLoading: true,
                });
            }), (0, rxjs_1.switchMap)(() => (0, rxjs_1.forkJoin)([
                this.getDockerConfig(),
                this.getDockerStatus(),
                this.getLacksNvidiaDrivers(),
            ])), (0, rxjs_1.tap)(([dockerConfig, statusData, lacksNvidiaDrivers]) => {
                this.patchState({
                    dockerConfig,
                    nvidiaDriversInstalled: dockerConfig.nvidia,
                    lacksNvidiaDrivers,
                    statusData,
                    isLoading: false,
                });
            }));
        });
    }
    getDockerConfig() {
        return this.ws.call('docker.config');
    }
    getLacksNvidiaDrivers() {
        return this.ws.call('docker.lacks_nvidia_drivers');
    }
    getDockerStatus() {
        return this.ws.call('docker.status');
    }
    setDockerPool(poolName) {
        return this.dialogService.jobDialog(this.ws.job('docker.update', [{ pool: poolName }]), { title: this.translate.instant('Configuring...') })
            .afterClosed()
            .pipe((0, rxjs_1.tap)((job) => {
            if (job.state === job_state_enum_1.JobState.Success) {
                this.patchState((state) => (Object.assign(Object.assign({}, state), { dockerConfig: Object.assign(Object.assign({}, state.dockerConfig), { pool: poolName }) })));
            }
            else if ([job_state_enum_1.JobState.Failed, job_state_enum_1.JobState.Aborted, job_state_enum_1.JobState.Error].includes(job.state)) {
                this.patchState((state) => (Object.assign(Object.assign({}, state), { dockerConfig: Object.assign(Object.assign({}, state.dockerConfig), { pool: null }) })));
            }
        }), this.errorHandler.catchError());
    }
    reloadDockerConfig() {
        return this.getDockerConfig().pipe((0, rxjs_1.tap)((dockerConfig) => {
            this.patchState({ dockerConfig });
        }));
    }
    setDockerNvidia(nvidiaDriversInstalled) {
        return this.dialogService.jobDialog(this.ws.job('docker.update', [{ nvidia: nvidiaDriversInstalled }]), { title: this.translate.instant('Configuring...') })
            .afterClosed()
            .pipe((0, rxjs_1.tap)((job) => {
            if (job.state === job_state_enum_1.JobState.Success) {
                this.patchState({
                    nvidiaDriversInstalled,
                });
            }
        }), this.errorHandler.catchError());
    }
    /**
     * Updates docker status in `DockerStore` service
     * @returns An observable that should be subscribed to at component level. This event subscription should only
     * stay alive until the component subscription stays alive i.e., until the component is destroyed
     */
    dockerStatusEventUpdates() {
        return this.ws.subscribe('docker.state').pipe((0, rxjs_1.map)((event) => event.fields), (0, rxjs_1.tap)((statusData) => {
            this.patchState({ statusData });
        }));
    }
};
exports.DockerStore = DockerStore;
DockerStore.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: error_handler_service_1.ErrorHandlerService }
];
exports.DockerStore = DockerStore = __decorate([
    (0, core_1.Injectable)()
], DockerStore);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,