767a3631c9c941a855fc448c161e4155
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetDetailsPanelComponent = void 0;
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const rxjs_1 = require("rxjs");
const dataset_enum_1 = require("app/enums/dataset.enum");
const role_enum_1 = require("app/enums/role.enum");
const dataset_details_panel_elements_1 = require("app/pages/datasets/components/dataset-details-panel/dataset-details-panel.elements");
const dataset_form_component_1 = require("app/pages/datasets/components/dataset-form/dataset-form.component");
const zvol_form_component_1 = require("app/pages/datasets/components/zvol-form/zvol-form.component");
const dataset_store_service_1 = require("app/pages/datasets/store/dataset-store.service");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const i0 = __importStar(require("@angular/core"));
let DatasetDetailsPanelComponent = class DatasetDetailsPanelComponent {
    constructor(datasetStore, router, slideInService) {
        this.datasetStore = datasetStore;
        this.router = router;
        this.slideInService = slideInService;
        this.dataset = core_1.input.required();
        this.systemDataset = (0, core_1.input)();
        this.requiredRoles = [role_enum_1.Role.DatasetWrite];
        this.searchableElements = dataset_details_panel_elements_1.datasetDetailsPanelElements;
        this.selectedParentDataset$ = this.datasetStore.selectedParentDataset$;
        this.hasRoles = (0, core_1.computed)(() => {
            return this.dataset().type === dataset_enum_1.DatasetType.Filesystem && !(0, dataset_utils_1.isIocageMounted)(this.dataset());
        });
        this.hasPermissions = (0, core_1.computed)(() => {
            return this.hasRoles() && !this.dataset().locked;
        });
        this.hasChildrenWithShares = (0, core_1.computed)(() => (0, dataset_utils_1.doesDatasetHaveShares)(this.dataset()));
        this.isCapacityAllowed = (0, core_1.computed)(() => !this.dataset().locked);
        this.isEncryptionAllowed = (0, core_1.computed)(() => this.dataset().encrypted);
        this.ownName = (0, core_1.computed)(() => this.dataset().name.split('/').slice(-1)[0]);
        this.isZvol = (0, core_1.computed)(() => this.dataset().type === dataset_enum_1.DatasetType.Volume);
    }
    handleSlideInClosed(slideInRef, modalType) {
        slideInRef.slideInClosed$.pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((value) => {
            this.datasetStore.datasetUpdated();
            if ((modalType !== dataset_form_component_1.DatasetFormComponent && modalType !== zvol_form_component_1.ZvolFormComponent) || !(value === null || value === void 0 ? void 0 : value.id)) {
                return;
            }
            this.datasetStore.isLoading$.pipe((0, rxjs_1.filter)((isLoading) => !isLoading), (0, rxjs_1.take)(1), (0, until_destroy_1.untilDestroyed)(this))
                .subscribe(() => {
                this.router.navigate(['/datasets', value.id]);
            });
        });
    }
    onAddDataset() {
        const slideInRef = this.slideInService.open(dataset_form_component_1.DatasetFormComponent, {
            wide: true, data: { isNew: true, datasetId: this.dataset().id },
        });
        this.handleSlideInClosed(slideInRef, dataset_form_component_1.DatasetFormComponent);
    }
    onAddZvol() {
        const slideInRef = this.slideInService.open(zvol_form_component_1.ZvolFormComponent, {
            data: { isNew: true, parentId: this.dataset().id },
        });
        this.handleSlideInClosed(slideInRef, zvol_form_component_1.ZvolFormComponent);
    }
    onCloseMobileDetails() {
        this.router.navigate(['/datasets'], { state: { hideMobileDetails: true } });
    }
};
exports.DatasetDetailsPanelComponent = DatasetDetailsPanelComponent;
DatasetDetailsPanelComponent.ctorParameters = () => [
    { type: dataset_store_service_1.DatasetTreeStore },
    { type: router_1.Router },
    { type: ix_slide_in_service_1.IxSlideInService }
];
DatasetDetailsPanelComponent.propDecorators = {
    dataset: [{ type: i0.Input, args: [{ isSignal: true, alias: "dataset", required: true, transform: undefined },] }],
    systemDataset: [{ type: i0.Input, args: [{ isSignal: true, alias: "systemDataset", required: false, transform: undefined },] }]
};
exports.DatasetDetailsPanelComponent = DatasetDetailsPanelComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-dataset-details-panel',
        template: require("./dataset-details-panel.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], DatasetDetailsPanelComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL2NvbXBvbmVudHMvZGF0YXNldC1kZXRhaWxzLXBhbmVsL2RhdGFzZXQtZGV0YWlscy1wYW5lbC5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FFdUI7QUFDdkIsNENBQXlDO0FBQ3pDLHlEQUFxRTtBQUNyRSwrQkFBb0M7QUFDcEMseURBQXFEO0FBQ3JELG1EQUEyQztBQUczQyx1SUFBaUk7QUFDakksOEdBQXlHO0FBQ3pHLHFHQUFnRztBQUNoRywwRkFBa0Y7QUFDbEYsMEVBQWdHO0FBQ2hHLDBFQUFvRTs7QUFTN0QsSUFBTSw0QkFBNEIsR0FBbEMsTUFBTSw0QkFBNEI7SUFTdkMsWUFDVSxZQUE4QixFQUM5QixNQUFjLEVBQ2QsY0FBZ0M7UUFGaEMsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQzlCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxtQkFBYyxHQUFkLGNBQWMsQ0FBa0I7dUJBWHZCLFlBQUssQ0FBQyxRQUFRLEVBQWtCOzZCQUMxQixJQUFBLFlBQUssR0FBVTtRQUVyQixrQkFBYSxHQUFHLENBQUMsZ0JBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwQyx1QkFBa0IsR0FBRyw0REFBMkIsQ0FBQztRQUVwRSwyQkFBc0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDO1FBUS9DLGFBQVEsR0FBRyxJQUFBLGVBQVEsRUFBQyxHQUFHLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxLQUFLLDBCQUFXLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBQSwrQkFBZSxFQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzVGLENBQUMsQ0FBQyxDQUFDO1FBRWdCLG1CQUFjLEdBQUcsSUFBQSxlQUFRLEVBQUMsR0FBRyxFQUFFO1lB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QztJQUVELG9CQUFvQjtRQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlFLENBQUM7O0FBL0RVLG9FQUE0Qjs7Ozs7Ozs7Ozt1Q0FBNUIsNEJBQTRCO0lBUHhDLElBQUEsNEJBQVksR0FBRTtJQUNkLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSwwQkFBMEI7UUFDcEMsMkRBQXFEO1FBRXJELGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7R0FDVyw0QkFBNEIsQ0FnRXhDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9wYWdlcy9kYXRhc2V0cy9jb21wb25lbnRzL2RhdGFzZXQtZGV0YWlscy1wYW5lbC9kYXRhc2V0LWRldGFpbHMtcGFuZWwuY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGNvbXB1dGVkLCBpbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBmaWx0ZXIsIHRha2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERhdGFzZXRUeXBlIH0gZnJvbSAnYXBwL2VudW1zL2RhdGFzZXQuZW51bSc7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnYXBwL2VudW1zL3JvbGUuZW51bSc7XG5pbXBvcnQgeyBEYXRhc2V0RGV0YWlscyB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2RhdGFzZXQuaW50ZXJmYWNlJztcbmltcG9ydCB7IEl4U2xpZGVJblJlZiB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc2xpZGUtaW4vaXgtc2xpZGUtaW4tcmVmJztcbmltcG9ydCB7IGRhdGFzZXREZXRhaWxzUGFuZWxFbGVtZW50cyB9IGZyb20gJ2FwcC9wYWdlcy9kYXRhc2V0cy9jb21wb25lbnRzL2RhdGFzZXQtZGV0YWlscy1wYW5lbC9kYXRhc2V0LWRldGFpbHMtcGFuZWwuZWxlbWVudHMnO1xuaW1wb3J0IHsgRGF0YXNldEZvcm1Db21wb25lbnQgfSBmcm9tICdhcHAvcGFnZXMvZGF0YXNldHMvY29tcG9uZW50cy9kYXRhc2V0LWZvcm0vZGF0YXNldC1mb3JtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBadm9sRm9ybUNvbXBvbmVudCB9IGZyb20gJ2FwcC9wYWdlcy9kYXRhc2V0cy9jb21wb25lbnRzL3p2b2wtZm9ybS96dm9sLWZvcm0uY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFzZXRUcmVlU3RvcmUgfSBmcm9tICdhcHAvcGFnZXMvZGF0YXNldHMvc3RvcmUvZGF0YXNldC1zdG9yZS5zZXJ2aWNlJztcbmltcG9ydCB7IGRvZXNEYXRhc2V0SGF2ZVNoYXJlcywgaXNJb2NhZ2VNb3VudGVkIH0gZnJvbSAnYXBwL3BhZ2VzL2RhdGFzZXRzL3V0aWxzL2RhdGFzZXQudXRpbHMnO1xuaW1wb3J0IHsgSXhTbGlkZUluU2VydmljZSB9IGZyb20gJ2FwcC9zZXJ2aWNlcy9peC1zbGlkZS1pbi5zZXJ2aWNlJztcblxuQFVudGlsRGVzdHJveSgpXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpeC1kYXRhc2V0LWRldGFpbHMtcGFuZWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGF0YXNldC1kZXRhaWxzLXBhbmVsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZGF0YXNldC1kZXRhaWxzLXBhbmVsLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBEYXRhc2V0RGV0YWlsc1BhbmVsQ29tcG9uZW50IHtcbiAgcmVhZG9ubHkgZGF0YXNldCA9IGlucHV0LnJlcXVpcmVkPERhdGFzZXREZXRhaWxzPigpO1xuICByZWFkb25seSBzeXN0ZW1EYXRhc2V0ID0gaW5wdXQ8c3RyaW5nPigpO1xuXG4gIHByb3RlY3RlZCByZWFkb25seSByZXF1aXJlZFJvbGVzID0gW1JvbGUuRGF0YXNldFdyaXRlXTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHNlYXJjaGFibGVFbGVtZW50cyA9IGRhdGFzZXREZXRhaWxzUGFuZWxFbGVtZW50cztcblxuICBzZWxlY3RlZFBhcmVudERhdGFzZXQkID0gdGhpcy5kYXRhc2V0U3RvcmUuc2VsZWN0ZWRQYXJlbnREYXRhc2V0JDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGRhdGFzZXRTdG9yZTogRGF0YXNldFRyZWVTdG9yZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgc2xpZGVJblNlcnZpY2U6IEl4U2xpZGVJblNlcnZpY2UsXG4gICkgeyB9XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGhhc1JvbGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmRhdGFzZXQoKS50eXBlID09PSBEYXRhc2V0VHlwZS5GaWxlc3lzdGVtICYmICFpc0lvY2FnZU1vdW50ZWQodGhpcy5kYXRhc2V0KCkpO1xuICB9KTtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaGFzUGVybWlzc2lvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzUm9sZXMoKSAmJiAhdGhpcy5kYXRhc2V0KCkubG9ja2VkO1xuICB9KTtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaGFzQ2hpbGRyZW5XaXRoU2hhcmVzID0gY29tcHV0ZWQoKCkgPT4gZG9lc0RhdGFzZXRIYXZlU2hhcmVzKHRoaXMuZGF0YXNldCgpKSk7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGlzQ2FwYWNpdHlBbGxvd2VkID0gY29tcHV0ZWQoKCkgPT4gIXRoaXMuZGF0YXNldCgpLmxvY2tlZCk7XG4gIHByb3RlY3RlZCByZWFkb25seSBpc0VuY3J5cHRpb25BbGxvd2VkID0gY29tcHV0ZWQoKCkgPT4gdGhpcy5kYXRhc2V0KCkuZW5jcnlwdGVkKTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG93bk5hbWUgPSBjb21wdXRlZCgoKSA9PiB0aGlzLmRhdGFzZXQoKS5uYW1lLnNwbGl0KCcvJykuc2xpY2UoLTEpWzBdKTtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaXNadm9sID0gY29tcHV0ZWQoKCkgPT4gdGhpcy5kYXRhc2V0KCkudHlwZSA9PT0gRGF0YXNldFR5cGUuVm9sdW1lKTtcblxuICBoYW5kbGVTbGlkZUluQ2xvc2VkKHNsaWRlSW5SZWY6IEl4U2xpZGVJblJlZjx1bmtub3duPiwgbW9kYWxUeXBlOiB1bmtub3duKTogdm9pZCB7XG4gICAgc2xpZGVJblJlZi5zbGlkZUluQ2xvc2VkJC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKVxuICAgICAgLnN1YnNjcmliZSgodmFsdWU6IHsgaWQ6IHN0cmluZyB9KSA9PiB7XG4gICAgICAgIHRoaXMuZGF0YXNldFN0b3JlLmRhdGFzZXRVcGRhdGVkKCk7XG5cbiAgICAgICAgaWYgKChtb2RhbFR5cGUgIT09IERhdGFzZXRGb3JtQ29tcG9uZW50ICYmIG1vZGFsVHlwZSAhPT0gWnZvbEZvcm1Db21wb25lbnQpIHx8ICF2YWx1ZT8uaWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGFzZXRTdG9yZS5pc0xvYWRpbmckLnBpcGUoZmlsdGVyKChpc0xvYWRpbmcpID0+ICFpc0xvYWRpbmcpLCB0YWtlKDEpLCB1bnRpbERlc3Ryb3llZCh0aGlzKSlcbiAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2RhdGFzZXRzJywgdmFsdWUuaWRdKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgb25BZGREYXRhc2V0KCk6IHZvaWQge1xuICAgIGNvbnN0IHNsaWRlSW5SZWYgPSB0aGlzLnNsaWRlSW5TZXJ2aWNlLm9wZW4oRGF0YXNldEZvcm1Db21wb25lbnQsIHtcbiAgICAgIHdpZGU6IHRydWUsIGRhdGE6IHsgaXNOZXc6IHRydWUsIGRhdGFzZXRJZDogdGhpcy5kYXRhc2V0KCkuaWQgfSxcbiAgICB9KTtcbiAgICB0aGlzLmhhbmRsZVNsaWRlSW5DbG9zZWQoc2xpZGVJblJlZiwgRGF0YXNldEZvcm1Db21wb25lbnQpO1xuICB9XG5cbiAgb25BZGRadm9sKCk6IHZvaWQge1xuICAgIGNvbnN0IHNsaWRlSW5SZWYgPSB0aGlzLnNsaWRlSW5TZXJ2aWNlLm9wZW4oWnZvbEZvcm1Db21wb25lbnQsIHtcbiAgICAgIGRhdGE6IHsgaXNOZXc6IHRydWUsIHBhcmVudElkOiB0aGlzLmRhdGFzZXQoKS5pZCB9LFxuICAgIH0pO1xuICAgIHRoaXMuaGFuZGxlU2xpZGVJbkNsb3NlZChzbGlkZUluUmVmLCBadm9sRm9ybUNvbXBvbmVudCk7XG4gIH1cblxuICBvbkNsb3NlTW9iaWxlRGV0YWlscygpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9kYXRhc2V0cyddLCB7IHN0YXRlOiB7IGhpZGVNb2JpbGVEZXRhaWxzOiB0cnVlIH0gfSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==