{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_memoizeCapped.js","mappings":";;;;;AAAA,8DAAmC;AAEnC,8CAA8C;AAC9C,IAAI,gBAAgB,GAAG,GAAG,CAAC;AAE3B;;;;;;;GAOG;AACH,SAAS,aAAa,CAAC,IAAI;IACzB,IAAI,MAAM,GAAG,IAAA,oBAAO,EAAC,IAAI,EAAE,UAAS,GAAG;QACrC,IAAI,KAAK,CAAC,IAAI,KAAK,gBAAgB,EAAE,CAAC;YACpC,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;IAEH,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACzB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,kBAAe,aAAa,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_memoizeCapped.js"],"sourcesContent":["import memoize from './memoize.js';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nexport default memoizeCapped;\n"],"version":3}