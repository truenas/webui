{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/classes/async-data-provider/async-data-provider.ts","mappings":";;;AACA,+DAAsD;AACtD,wFAAmF;AAEnF,sDAA6D;AAE7D,MAAa,iBAAqB,SAAQ,qCAAmB;IAG3D,YACU,QAAyB;QAEjC,KAAK,EAAE,CAAC;QAFA,aAAQ,GAAR,QAAQ,CAAiB;QAH3B,eAAU,GAAQ,EAAE,CAAC;IAM7B,CAAC;IAED,IAAI;QACF,IAAI,CAAC,YAAY,CAAC,GAAG,CACnB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;YACtB,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,2BAAS,CAAC,eAAe,CAAC,CAAC,CAAC,2BAAS,CAAC,UAAU,CAAC,CAAC;YACvF,CAAC;YACD,KAAK,EAAE,GAAG,EAAE;gBACV,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;gBACrB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,2BAAS,CAAC,MAAM,CAAC,CAAC;YACzC,CAAC;SACF,CAAC,CACH,CAAC;IACJ,CAAC;IAEQ,SAAS,CAAC,MAAsB;QACvC,MAAM,YAAY,GAAG,IAAA,uBAAe,kCAAM,MAAM,KAAE,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,IAAG,CAAC;QAC1F,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC7B,CAAC;CACF;AA/BD,8CA+BC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/classes/async-data-provider/async-data-provider.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { EmptyType } from 'app/enums/empty-type.enum';\nimport { BaseDataProvider } from 'app/modules/ix-table/classes/base-data-provider';\nimport { TableFilter } from 'app/modules/ix-table/interfaces/table-filter.interface';\nimport { filterTableRows } from 'app/modules/ix-table/utils';\n\nexport class AsyncDataProvider<T> extends BaseDataProvider<T> {\n  private loadedRows: T[] = [];\n\n  constructor(\n    private request$: Observable<T[]>,\n  ) {\n    super();\n  }\n\n  load(): void {\n    this.subscription.add(\n      this.request$.subscribe({\n        next: (rows) => {\n          this.loadedRows = rows;\n          this.setRows(rows);\n          this.emptyType$.next(rows.length ? EmptyType.NoSearchResults : EmptyType.NoPageData);\n        },\n        error: () => {\n          this.loadedRows = [];\n          this.setRows([]);\n          this.emptyType$.next(EmptyType.Errors);\n        },\n      }),\n    );\n  }\n\n  override setFilter(filter: TableFilter<T>): void {\n    const filteredRows = filterTableRows({ ...filter, list: filter.list || this.loadedRows });\n    this.totalRows = filteredRows.length;\n    this.setRows(filteredRows);\n  }\n}\n"],"version":3}