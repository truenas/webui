a336a35e55a046913168388a643117aa
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionOptionsDialogComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const dialog_1 = require("@angular/material/dialog");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const encryption_key_format_enum_1 = require("app/enums/encryption-key-format.enum");
const role_enum_1 = require("app/enums/role.enum");
const combine_latest_is_any_helper_1 = require("app/helpers/operators/combine-latest-is-any.helper");
const dataset_form_1 = require("app/helptext/storage/volumes/datasets/dataset-form");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const password_validation_1 = require("app/modules/forms/ix-forms/validators/password-validation/password-validation");
const find_in_tree_utils_1 = require("app/modules/ix-tree/utils/find-in-tree.utils");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const encryption_options_dialog_data_interface_1 = require("./encryption-options-dialog-data.interface");
var EncryptionType;
(function (EncryptionType) {
    EncryptionType["Key"] = "key";
    EncryptionType["Passphrase"] = "passphrase";
})(EncryptionType || (EncryptionType = {}));
let EncryptionOptionsDialogComponent = class EncryptionOptionsDialogComponent {
    constructor(fb, ws, translate, loader, dialog, dialogRef, formErrorHandler, errorHandler, snackbar, data) {
        this.fb = fb;
        this.ws = ws;
        this.translate = translate;
        this.loader = loader;
        this.dialog = dialog;
        this.dialogRef = dialogRef;
        this.formErrorHandler = formErrorHandler;
        this.errorHandler = errorHandler;
        this.snackbar = snackbar;
        this.data = data;
        this.form = this.fb.group({
            inherit_encryption: [false],
            encryption_type: [null],
            generate_key: [false],
            key: ['', [forms_1.Validators.required, forms_1.Validators.minLength(64), forms_1.Validators.maxLength(64)]],
            passphrase: ['', forms_1.Validators.minLength(8)],
            confirm_passphrase: [''],
            pbkdf2iters: [350000, forms_1.Validators.min(100000)],
            algorithm: [''],
            confirm: [false, [forms_1.Validators.requiredTrue]],
        }, {
            validators: [
                (0, password_validation_1.matchOthersFgValidator)('confirm_passphrase', ['passphrase'], this.translate.instant('Passphrase and confirmation should match.')),
            ],
        });
        this.subscriptions = [];
        this.isInheriting$ = this.form.select((values) => values.inherit_encryption);
        this.isKey$ = this.form.select((values) => values.encryption_type === EncryptionType.Key);
        this.isSetToGenerateKey$ = this.form.select((values) => values.generate_key);
        this.tooltips = {
            encryption_type: dataset_form_1.helptextDatasetForm.dataset_form_encryption.encryption_type_tooltip,
            generate_key: dataset_form_1.helptextDatasetForm.dataset_form_encryption.generate_key_checkbox_tooltip,
            key: dataset_form_1.helptextDatasetForm.dataset_form_encryption.key_tooltip,
            passphrase: dataset_form_1.helptextDatasetForm.dataset_form_encryption.passphrase_tooltip,
            pbkdf2iters: dataset_form_1.helptextDatasetForm.dataset_form_encryption.pbkdf2iters_tooltip,
        };
        this.encryptionTypeOptions$ = (0, rxjs_1.of)(dataset_form_1.helptextDatasetForm.dataset_form_encryption.encryption_type_options);
        this.Role = role_enum_1.Role;
    }
    get canInherit() {
        var _a;
        return (_a = this.data.parent) === null || _a === void 0 ? void 0 : _a.encrypted;
    }
    get hasPassphraseParent() {
        var _a, _b;
        return ((_b = (_a = this.data.parent) === null || _a === void 0 ? void 0 : _a.key_format) === null || _b === void 0 ? void 0 : _b.value) === encryption_key_format_enum_1.EncryptionKeyFormat.Passphrase;
    }
    get hasKeyChild() {
        const keyChild = (0, find_in_tree_utils_1.findInTree)(this.data.dataset.children, (dataset) => (0, dataset_utils_1.isEncryptionRoot)(dataset) && !(0, dataset_utils_1.isPasswordEncrypted)(dataset));
        return Boolean(keyChild);
    }
    ngOnInit() {
        this.loadPbkdf2iters();
        this.setFormValues();
        this.setControlDependencies();
    }
    onSubmit() {
        if (this.form.value.inherit_encryption) {
            // Only try to change to inherit if not currently inheriting
            if (!(0, dataset_utils_1.isEncryptionRoot)(this.data.dataset)) {
                this.dialogRef.close(false);
                return;
            }
            this.setToInherit();
        }
        else {
            this.saveForm();
        }
    }
    setToInherit() {
        this.ws.call('pool.dataset.inherit_parent_encryption_properties', [this.data.dataset.id])
            .pipe(this.loader.withLoader(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.showSuccessMessage();
                this.dialogRef.close(true);
            },
            error: (error) => {
                this.formErrorHandler.handleWsFormError(error, this.form);
            },
        });
    }
    saveForm() {
        const values = this.form.getRawValue();
        const body = {};
        if (values.encryption_type === EncryptionType.Key) {
            body.generate_key = values.generate_key;
            if (!values.generate_key) {
                body.key = values.key;
            }
        }
        else {
            body.passphrase = values.passphrase;
            body.pbkdf2iters = Number(values.pbkdf2iters);
        }
        this.dialog.jobDialog(this.ws.job('pool.dataset.change_key', [this.data.dataset.id, body]), { title: this.translate.instant('Updating key type') })
            .afterClosed()
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.showSuccessMessage();
                this.dialogRef.close(true);
            },
            error: (error) => {
                this.formErrorHandler.handleWsFormError(error, this.form);
            },
        });
    }
    showSuccessMessage() {
        this.snackbar.success(this.translate.instant('Encryption Options Saved'));
    }
    loadPbkdf2iters() {
        this.ws.call('pool.dataset.query', [[['id', '=', this.data.dataset.id]]])
            .pipe(this.loader.withLoader(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (datasets) => {
                const pbkdf2iters = datasets[0].pbkdf2iters;
                if (!pbkdf2iters || pbkdf2iters.rawvalue === '0') {
                    return;
                }
                this.form.patchValue({
                    pbkdf2iters: Number(pbkdf2iters.rawvalue),
                });
            },
            error: (error) => {
                this.dialog.error(this.errorHandler.parseError(error));
            },
        });
    }
    setFormValues() {
        var _a;
        let encryptionType = EncryptionType.Passphrase;
        if (!this.hasPassphraseParent) {
            if (this.hasKeyChild) {
                encryptionType = EncryptionType.Key;
            }
            else {
                encryptionType = (0, dataset_utils_1.isPasswordEncrypted)(this.data.dataset) ? EncryptionType.Passphrase : EncryptionType.Key;
            }
        }
        this.form.patchValue({
            inherit_encryption: !(0, dataset_utils_1.isEncryptionRoot)(this.data.dataset),
            algorithm: ((_a = this.data.dataset.encryption_algorithm) === null || _a === void 0 ? void 0 : _a.value) || '',
            encryption_type: encryptionType,
        });
    }
    setControlDependencies() {
        this.form.controls.algorithm.disable();
        if (this.hasPassphraseParent || this.hasKeyChild) {
            this.form.controls.encryption_type.disable();
        }
        this.subscriptions.push(this.form.controls.key.disabledWhile((0, combine_latest_is_any_helper_1.combineLatestIsAny)([
            this.isSetToGenerateKey$,
            this.isKey$.pipe((0, operators_1.map)((value) => !value)),
            this.isInheriting$,
        ])));
        const arePassphraseFieldsDisabled$ = (0, combine_latest_is_any_helper_1.combineLatestIsAny)([this.isKey$, this.isInheriting$]);
        this.subscriptions.push(this.form.controls.passphrase.disabledWhile(arePassphraseFieldsDisabled$), this.form.controls.confirm_passphrase.disabledWhile(arePassphraseFieldsDisabled$), this.form.controls.pbkdf2iters.disabledWhile(arePassphraseFieldsDisabled$));
    }
};
exports.EncryptionOptionsDialogComponent = EncryptionOptionsDialogComponent;
EncryptionOptionsDialogComponent.ctorParameters = () => [
    { type: reactive_forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: core_2.TranslateService },
    { type: app_loader_service_1.AppLoaderService },
    { type: dialog_service_1.DialogService },
    { type: dialog_1.MatDialogRef },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: snackbar_service_1.SnackbarService },
    { type: encryption_options_dialog_data_interface_1.EncryptionOptionsDialogData, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.EncryptionOptionsDialogComponent = EncryptionOptionsDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)({
        arrayName: 'subscriptions',
    }),
    (0, core_1.Component)({
        selector: 'ix-encryption-options-dialog',
        template: require("./encryption-options-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], EncryptionOptionsDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,