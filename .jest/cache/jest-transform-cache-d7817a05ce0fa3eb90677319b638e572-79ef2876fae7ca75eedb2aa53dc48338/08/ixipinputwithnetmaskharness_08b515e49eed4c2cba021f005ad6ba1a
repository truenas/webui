084bfba1b98a58e6ea6d8002b2279f5e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxIpInputWithNetmaskHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/input/testing");
const testing_3 = require("@angular/material/select/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxIpInputWithNetmaskHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getAddressHarness = this.locatorFor(testing_2.MatInputHarness);
        this.getNetmaskHarness = this.locatorFor(testing_3.MatSelectHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxIpInputWithNetmaskHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const addressInput = yield this.getAddressHarness();
            const netmaskSelect = yield this.getNetmaskHarness();
            const address = yield addressInput.getValue();
            const netmask = yield netmaskSelect.getValueText();
            return `${address}/${netmask}`;
        });
    }
    setValue(addressAndNetmask) {
        return __awaiter(this, void 0, void 0, function* () {
            const [address, netmask] = addressAndNetmask.split('/');
            const addressInput = yield this.getAddressHarness();
            const netmaskSelect = yield this.getNetmaskHarness();
            yield addressInput.setValue(address);
            yield netmaskSelect.open();
            yield netmaskSelect.clickOptions({ text: netmask });
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getNetmaskHarness()).isDisabled();
        });
    }
}
exports.IxIpInputWithNetmaskHarness = IxIpInputWithNetmaskHarness;
IxIpInputWithNetmaskHarness.hostSelector = 'ix-ip-input-with-netmask';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1pcC1pbnB1dC13aXRoLW5ldG1hc2svaXgtaXAtaW5wdXQtd2l0aC1uZXRtYXNrLmhhcm5lc3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsa0RBRThCO0FBQzlCLDZEQUFrRTtBQUNsRSw4REFBb0U7QUFDcEUsc0dBQWlHO0FBRWpHLGtGQUE4RTtBQU05RSxNQUFhLDJCQUE0QixTQUFRLDBCQUFnQjtJQUFqRTs7UUFRRSxzQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUFlLENBQUMsQ0FBQztRQUNyRCxzQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLDBCQUFnQixDQUFDLENBQUM7UUFDdEQsaUJBQVksR0FBRyw0QkFBWSxDQUFDO0lBaUM5QixDQUFDO0lBeENDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBMkM7UUFDckQsT0FBTyxJQUFJLDBCQUFnQixDQUFDLDJCQUEyQixFQUFFLE9BQU8sQ0FBQzthQUM5RCxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQywwQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUgsQ0FBQztJQU1LLFlBQVk7O1lBQ2hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlDQUFjLENBQUMsRUFBRSxDQUFDO1lBQzlELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDWCxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQixDQUFDO0tBQUE7SUFFSyxRQUFROztZQUNaLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDcEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUVyRCxNQUFNLE9BQU8sR0FBRyxNQUFNLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM5QyxNQUFNLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUVuRCxPQUFPLEdBQUcsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLENBQUM7S0FBQTtJQUVLLFFBQVEsQ0FBQyxpQkFBeUI7O1lBQ3RDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDcEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUVyRCxNQUFNLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckMsTUFBTSxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsTUFBTSxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDdEQsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZELENBQUM7S0FBQTs7QUExQ0gsa0VBMkNDO0FBMUNpQix3Q0FBWSxHQUFHLDBCQUEwQixBQUE3QixDQUE4QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWlwLWlucHV0LXdpdGgtbmV0bWFzay9peC1pcC1pbnB1dC13aXRoLW5ldG1hc2suaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYXNlSGFybmVzc0ZpbHRlcnMsIENvbXBvbmVudEhhcm5lc3MsIEhhcm5lc3NQcmVkaWNhdGUsXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IE1hdElucHV0SGFybmVzcyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2lucHV0L3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWF0U2VsZWN0SGFybmVzcyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NlbGVjdC90ZXN0aW5nJztcbmltcG9ydCB7IEl4TGFiZWxIYXJuZXNzIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1sYWJlbC9peC1sYWJlbC5oYXJuZXNzJztcbmltcG9ydCB7IEl4Rm9ybUNvbnRyb2xIYXJuZXNzIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvaW50ZXJmYWNlcy9peC1mb3JtLWNvbnRyb2wtaGFybmVzcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgZ2V0RXJyb3JUZXh0IH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdXRpbHMvaGFybmVzcy51dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXhJcElucHV0V2l0aE5ldG1hc2tIYXJuZXNzRmlsdGVycyBleHRlbmRzIEJhc2VIYXJuZXNzRmlsdGVycyB7XG4gIGxhYmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhJcElucHV0V2l0aE5ldG1hc2tIYXJuZXNzIGV4dGVuZHMgQ29tcG9uZW50SGFybmVzcyBpbXBsZW1lbnRzIEl4Rm9ybUNvbnRyb2xIYXJuZXNzIHtcbiAgc3RhdGljIHJlYWRvbmx5IGhvc3RTZWxlY3RvciA9ICdpeC1pcC1pbnB1dC13aXRoLW5ldG1hc2snO1xuXG4gIHN0YXRpYyB3aXRoKG9wdGlvbnM6IEl4SXBJbnB1dFdpdGhOZXRtYXNrSGFybmVzc0ZpbHRlcnMpOiBIYXJuZXNzUHJlZGljYXRlPEl4SXBJbnB1dFdpdGhOZXRtYXNrSGFybmVzcz4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZShJeElwSW5wdXRXaXRoTmV0bWFza0hhcm5lc3MsIG9wdGlvbnMpXG4gICAgICAuYWRkT3B0aW9uKCdsYWJlbCcsIG9wdGlvbnMubGFiZWwsIChoYXJuZXNzLCBsYWJlbCkgPT4gSGFybmVzc1ByZWRpY2F0ZS5zdHJpbmdNYXRjaGVzKGhhcm5lc3MuZ2V0TGFiZWxUZXh0KCksIGxhYmVsKSk7XG4gIH1cblxuICBnZXRBZGRyZXNzSGFybmVzcyA9IHRoaXMubG9jYXRvckZvcihNYXRJbnB1dEhhcm5lc3MpO1xuICBnZXROZXRtYXNrSGFybmVzcyA9IHRoaXMubG9jYXRvckZvcihNYXRTZWxlY3RIYXJuZXNzKTtcbiAgZ2V0RXJyb3JUZXh0ID0gZ2V0RXJyb3JUZXh0O1xuXG4gIGFzeW5jIGdldExhYmVsVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGxhYmVsID0gYXdhaXQgdGhpcy5sb2NhdG9yRm9yT3B0aW9uYWwoSXhMYWJlbEhhcm5lc3MpKCk7XG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWwuZ2V0TGFiZWwoKTtcbiAgfVxuXG4gIGFzeW5jIGdldFZhbHVlKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgYWRkcmVzc0lucHV0ID0gYXdhaXQgdGhpcy5nZXRBZGRyZXNzSGFybmVzcygpO1xuICAgIGNvbnN0IG5ldG1hc2tTZWxlY3QgPSBhd2FpdCB0aGlzLmdldE5ldG1hc2tIYXJuZXNzKCk7XG5cbiAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgYWRkcmVzc0lucHV0LmdldFZhbHVlKCk7XG4gICAgY29uc3QgbmV0bWFzayA9IGF3YWl0IG5ldG1hc2tTZWxlY3QuZ2V0VmFsdWVUZXh0KCk7XG5cbiAgICByZXR1cm4gYCR7YWRkcmVzc30vJHtuZXRtYXNrfWA7XG4gIH1cblxuICBhc3luYyBzZXRWYWx1ZShhZGRyZXNzQW5kTmV0bWFzazogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgW2FkZHJlc3MsIG5ldG1hc2tdID0gYWRkcmVzc0FuZE5ldG1hc2suc3BsaXQoJy8nKTtcbiAgICBjb25zdCBhZGRyZXNzSW5wdXQgPSBhd2FpdCB0aGlzLmdldEFkZHJlc3NIYXJuZXNzKCk7XG4gICAgY29uc3QgbmV0bWFza1NlbGVjdCA9IGF3YWl0IHRoaXMuZ2V0TmV0bWFza0hhcm5lc3MoKTtcblxuICAgIGF3YWl0IGFkZHJlc3NJbnB1dC5zZXRWYWx1ZShhZGRyZXNzKTtcbiAgICBhd2FpdCBuZXRtYXNrU2VsZWN0Lm9wZW4oKTtcbiAgICBhd2FpdCBuZXRtYXNrU2VsZWN0LmNsaWNrT3B0aW9ucyh7IHRleHQ6IG5ldG1hc2sgfSk7XG4gIH1cblxuICBhc3luYyBpc0Rpc2FibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXROZXRtYXNrSGFybmVzcygpKS5pc0Rpc2FibGVkKCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==