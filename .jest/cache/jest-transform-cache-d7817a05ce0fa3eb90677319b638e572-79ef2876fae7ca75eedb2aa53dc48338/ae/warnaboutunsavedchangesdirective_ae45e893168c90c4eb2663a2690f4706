6ef2bbaa52a875610989c5ed6dc21e10
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WarnAboutUnsavedChangesDirective = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
let WarnAboutUnsavedChangesDirective = class WarnAboutUnsavedChangesDirective {
    constructor(translate, dialogService, slideInRef) {
        this.translate = translate;
        this.dialogService = dialogService;
        this.slideInRef = slideInRef;
        this.formSubmitted = false;
    }
    ngOnInit() {
        this.overrideSlideInClose();
    }
    onFormSubmit() {
        this.formSubmitted = true;
        if (this.formGroup.status === 'INVALID') {
            this.formSubmitted = false;
        }
    }
    closeWithConfirmation(response) {
        if (this.formGroup.pristine || this.formSubmitted) {
            this.emitClose(response);
            return (0, rxjs_1.of)(true);
        }
        return this.showConfirmDialog().pipe((0, operators_1.switchMap)((shouldClose) => {
            if (shouldClose) {
                this.emitClose(response);
            }
            return (0, rxjs_1.of)(shouldClose);
        }));
    }
    overrideSlideInClose() {
        this.slideInRef.close = (response) => this.closeWithConfirmation(response)
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe();
    }
    showConfirmDialog() {
        return this.dialogService.confirm({
            title: this.translate.instant('Unsaved Changes'),
            message: this.translate.instant('You have unsaved changes. Are you sure you want to close?'),
            cancelText: this.translate.instant('No'),
            buttonText: this.translate.instant('Yes'),
            buttonColor: 'red',
            hideCheckbox: true,
        });
    }
    emitClose(response) {
        this.slideInRef.slideInClosed$.next(response);
        this.slideInRef.slideInClosed$.complete();
    }
};
exports.WarnAboutUnsavedChangesDirective = WarnAboutUnsavedChangesDirective;
WarnAboutUnsavedChangesDirective.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: dialog_service_1.DialogService },
    { type: ix_slide_in_ref_1.IxSlideInRef }
];
WarnAboutUnsavedChangesDirective.propDecorators = {
    formGroup: [{ type: core_1.Input }],
    onFormSubmit: [{ type: core_1.HostListener, args: ['ngSubmit',] }]
};
exports.WarnAboutUnsavedChangesDirective = WarnAboutUnsavedChangesDirective = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Directive)({
        selector: '[warnAboutUnsavedChanges]',
        standalone: true,
    })
], WarnAboutUnsavedChangesDirective);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMuZGlyZWN0aXZlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUV1QjtBQUV2Qix5REFBcUU7QUFDckUsOENBQXVEO0FBQ3ZELCtCQUFzQztBQUN0Qyw4Q0FBMkM7QUFDM0Msc0VBQWtFO0FBQ2xFLHVHQUFpRztBQU8xRixJQUFNLGdDQUFnQyxHQUF0QyxNQUFNLGdDQUFnQztJQUszQyxZQUNVLFNBQTJCLEVBQzNCLGFBQTRCLEVBQzVCLFVBQTJCO1FBRjNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGVBQVUsR0FBVixVQUFVLENBQWlCO1FBTDdCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0lBTTNCLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUdELFlBQVk7UUFDVixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUUxQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzdCLENBQUM7SUFDSCxDQUFDO0lBRUQscUJBQXFCLENBQUMsUUFBWTtRQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNsRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sSUFBQSxTQUFFLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUNsQyxJQUFBLHFCQUFTLEVBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN4QixJQUFJLFdBQVcsRUFBRSxDQUFDO2dCQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFDRCxPQUFPLElBQUEsU0FBRSxFQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLENBQUMsUUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDO2FBQzNFLElBQUksQ0FBQyxJQUFBLDhCQUFjLEVBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUIsU0FBUyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1lBQ2hDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUNoRCxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsMkRBQTJELENBQUM7WUFDNUYsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUN4QyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ3pDLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxTQUFTLENBQUMsUUFBWTtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUMsQ0FBQzs7QUE1RFUsNEVBQWdDOzs7Ozs7O3dCQUMxQyxZQUFLOzJCQWNMLG1CQUFZLFNBQUMsVUFBVTs7MkNBZmIsZ0NBQWdDO0lBTDVDLElBQUEsNEJBQVksR0FBRTtJQUNkLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSwyQkFBMkI7UUFDckMsVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQztHQUNXLGdDQUFnQyxDQTZENUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMuZGlyZWN0aXZlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCwgSG9zdExpc3RlbmVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdhcHAvbW9kdWxlcy9kaWFsb2cvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgSXhTbGlkZUluUmVmIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zbGlkZS1pbi9peC1zbGlkZS1pbi1yZWYnO1xuXG5AVW50aWxEZXN0cm95KClcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t3YXJuQWJvdXRVbnNhdmVkQ2hhbmdlc10nLFxuICBzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBXYXJuQWJvdXRVbnNhdmVkQ2hhbmdlc0RpcmVjdGl2ZTxUPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuXG4gIHByaXZhdGUgZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcbiAgICBwcml2YXRlIHNsaWRlSW5SZWY6IEl4U2xpZGVJblJlZjxUPixcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMub3ZlcnJpZGVTbGlkZUluQ2xvc2UoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ25nU3VibWl0JylcbiAgb25Gb3JtU3VibWl0KCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybVN1Ym1pdHRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5mb3JtR3JvdXAuc3RhdHVzID09PSAnSU5WQUxJRCcpIHtcbiAgICAgIHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlV2l0aENvbmZpcm1hdGlvbihyZXNwb25zZT86IFQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBpZiAodGhpcy5mb3JtR3JvdXAucHJpc3RpbmUgfHwgdGhpcy5mb3JtU3VibWl0dGVkKSB7XG4gICAgICB0aGlzLmVtaXRDbG9zZShyZXNwb25zZSk7XG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzaG91bGRDbG9zZSkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkQ2xvc2UpIHtcbiAgICAgICAgICB0aGlzLmVtaXRDbG9zZShyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mKHNob3VsZENsb3NlKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIG92ZXJyaWRlU2xpZGVJbkNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuc2xpZGVJblJlZi5jbG9zZSA9IChyZXNwb25zZT86IFQpID0+IHRoaXMuY2xvc2VXaXRoQ29uZmlybWF0aW9uKHJlc3BvbnNlKVxuICAgICAgLnBpcGUodW50aWxEZXN0cm95ZWQodGhpcykpXG4gICAgICAuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBwcml2YXRlIHNob3dDb25maXJtRGlhbG9nKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmRpYWxvZ1NlcnZpY2UuY29uZmlybSh7XG4gICAgICB0aXRsZTogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnVW5zYXZlZCBDaGFuZ2VzJyksXG4gICAgICBtZXNzYWdlOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdZb3UgaGF2ZSB1bnNhdmVkIGNoYW5nZXMuIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjbG9zZT8nKSxcbiAgICAgIGNhbmNlbFRleHQ6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ05vJyksXG4gICAgICBidXR0b25UZXh0OiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdZZXMnKSxcbiAgICAgIGJ1dHRvbkNvbG9yOiAncmVkJyxcbiAgICAgIGhpZGVDaGVja2JveDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdENsb3NlKHJlc3BvbnNlPzogVCk6IHZvaWQge1xuICAgIHRoaXMuc2xpZGVJblJlZi5zbGlkZUluQ2xvc2VkJC5uZXh0KHJlc3BvbnNlKTtcbiAgICB0aGlzLnNsaWRlSW5SZWYuc2xpZGVJbkNsb3NlZCQuY29tcGxldGUoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9