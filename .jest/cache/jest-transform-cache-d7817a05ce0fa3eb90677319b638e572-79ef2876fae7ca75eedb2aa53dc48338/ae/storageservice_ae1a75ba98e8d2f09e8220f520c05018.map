{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/storage.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GiB } from 'app/constants/bytes.constant';\nimport { TopologyItemType, TopologyWarning, VdevType } from 'app/enums/v-dev-type.enum';\nimport { Disk } from 'app/interfaces/disk.interface';\nimport { FileSystemStat } from 'app/interfaces/filesystem-stat.interface';\nimport { Option } from 'app/interfaces/option.interface';\nimport { TopologyItem } from 'app/interfaces/storage.interface';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@Injectable({ providedIn: 'root' })\nexport class StorageService {\n  protected diskResource = 'disk.query' as const;\n\n  constructor(\n    protected ws: WebSocketService,\n  ) {}\n\n  filesystemStat(path: string): Observable<FileSystemStat> {\n    return this.ws.call('filesystem.stat', [path]);\n  }\n\n  listDisks(): Observable<Disk[]> {\n    return this.ws.call(this.diskResource, []);\n  }\n\n  getDatasetNameOptions(): Observable<Option[]> {\n    return this.ws\n      .call('pool.filesystem_choices')\n      .pipe(map((response) => response.map((value) => ({ label: value, value }))));\n  }\n\n  /**\n   * @param path The path of the dataset excluding \"/mnt/\"\n   */\n  isDatasetTopLevel(path: string): boolean {\n    if (typeof path !== 'string') {\n      throw new Error('isDatasetTopLevel received \"path\" parameter that is not of type \"string.\"');\n    }\n\n    /**\n     * Strip leading forward slash if present\n     * /zpool/d0 -> zpool/d0\n     */\n    path = path.startsWith('/') ? path.substring(1) : path;\n\n    return !path.includes('/');\n  }\n\n  getRedundancyLevel(vdev: TopologyItem): number {\n    switch (vdev.type) {\n      case TopologyItemType.Disk:\n      case TopologyItemType.Stripe:\n        return 0;\n      case TopologyItemType.Mirror:\n        return vdev.children.length - 1;\n      case TopologyItemType.Raidz:\n      case TopologyItemType.Raidz1:\n        return 1;\n      case TopologyItemType.Raidz2:\n        return 2;\n      case TopologyItemType.Raidz3:\n        return 3;\n      default:\n        // VDEV type property also includes values unrelated to layout.\n        return -1;\n    }\n  }\n\n  getVdevWidths(vdevs: TopologyItem[]): Set<number> {\n    const allVdevWidths = new Set<number>(); // There should only be one value\n\n    vdevs?.forEach((vdev) => {\n      let vdevWidthCounter = 0;\n\n      if (vdev.type === TopologyItemType.Disk || vdev.type === TopologyItemType.Stripe || vdev.children.length === 0) {\n        // Width of single disk VDEVs should be 1\n        allVdevWidths.add(1);\n      } else {\n        vdev.children.forEach(() => {\n          vdevWidthCounter += 1;\n        });\n        allVdevWidths.add(vdevWidthCounter);\n      }\n    });\n\n    return allVdevWidths;\n  }\n\n  isMixedWidth(allVdevWidths: Set<number>): boolean {\n    return allVdevWidths.size > 1;\n  }\n\n  // Get usable space on VDEV.\n  getVdevCapacities(vdevs: TopologyItem[]): Set<number> {\n    const allVdevCapacities = new Set<number>(); // There should only be one value\n    vdevs?.forEach((vdev) => {\n      allVdevCapacities.add(vdev.stats.size);\n    });\n    return allVdevCapacities;\n  }\n\n  // Check to see if every VDEV has the same capacity. Best practices dictate every vdev should be uniform\n  isMixedVdevCapacity(allVdevCapacities: Set<number>): boolean {\n    const max = Math.max(...allVdevCapacities);\n    const min = Math.min(...allVdevCapacities);\n    const fivePercentOfMax = max * (5 / 100);\n\n    return min + fivePercentOfMax + GiB * 2 < max;\n  }\n\n  getVdevDiskCapacities(vdevs: TopologyItem[], disks: Disk[]): Set<number>[] {\n    const allDiskCapacities: Set<number>[] = [];\n    vdevs?.forEach((vdev) => {\n      const vdevDiskCapacities = new Set<number>(); // There should only be one value\n      if (vdev.children.length) {\n        vdev.children.forEach((child) => {\n          const diskIndex = disks?.findIndex((disk) => disk.name === child.disk);\n          if (diskIndex >= 0 && disks[diskIndex].size) {\n            vdevDiskCapacities.add(disks[diskIndex].size);\n          }\n        });\n      } else {\n        // Topology items of type DISK will not have children\n        vdevDiskCapacities.add(vdev.stats.size);\n      }\n      allDiskCapacities.push(vdevDiskCapacities);\n    });\n    return allDiskCapacities;\n  }\n\n  // Check to see if any individual VDEVs have non-uniform disk sizes.\n  // Every disk in a VDEV should ideally be the same size\n  isMixedVdevDiskCapacity(allVdevDiskCapacities: Set<number>[]): boolean {\n    const isMixed = allVdevDiskCapacities.filter((vdev) => vdev.size > 1);\n    return isMixed.length > 0;\n  }\n\n  getVdevTypes(vdevs: TopologyItem[]): Set<string> {\n    const vdevTypes = new Set<string>();\n    vdevs?.forEach((vdev) => {\n      vdevTypes.add(vdev.type);\n    });\n    return vdevTypes;\n  }\n\n  isMixedVdevType(vdevTypes: Set<string>): boolean {\n    return vdevTypes.size > 1;\n  }\n\n  validateVdevs(\n    category: VdevType,\n    vdevs: TopologyItem[],\n    disks: Disk[],\n  ): string[] {\n    const warnings: string[] = [];\n    let isMixedVdevCapacity = false;\n    let isMixedDiskCapacity = false;\n    let isMixedWidth = false;\n    let isMixedLayout = false;\n\n    // Check for non-uniform VDEV Capacities\n    const allVdevCapacities: Set<number> = this.getVdevCapacities(vdevs); // There should only be one value\n    isMixedVdevCapacity = this.isMixedVdevCapacity(allVdevCapacities);\n\n    // Check for non-uniform Disk Capacities within each VDEV\n    const allVdevDiskCapacities: Set<number>[] = this.getVdevDiskCapacities(vdevs, disks);\n    isMixedDiskCapacity = this.isMixedVdevDiskCapacity(allVdevDiskCapacities);\n\n    // Check VDEV Widths\n    const allVdevWidths: Set<number> = this.getVdevWidths(vdevs); // There should only be one value\n    isMixedWidth = this.isMixedWidth(allVdevWidths);\n\n    // While not recommended, ZFS does allow creating a pool with mixed VDEV types.\n    // Even though the UI does not allow such pools to be created,\n    // users might still try to import such a pool.\n    const allVdevLayouts = this.getVdevTypes(vdevs);\n    isMixedLayout = this.isMixedVdevType(allVdevLayouts);\n\n    if (vdevs.length) {\n      if (isMixedLayout) {\n        warnings.push(TopologyWarning.MixedVdevLayout);\n      }\n\n      if (isMixedDiskCapacity) {\n        warnings.push(TopologyWarning.MixedDiskCapacity);\n      }\n\n      if (isMixedVdevCapacity) {\n        warnings.push(TopologyWarning.MixedVdevCapacity);\n      }\n\n      if (isMixedWidth) {\n        warnings.push(TopologyWarning.MixedVdevWidth);\n      }\n\n      // Check Redundancy\n      if (\n        [VdevType.Data, VdevType.Dedup, VdevType.Special].includes(category)\n        && this.hasZeroRedundancyLevelVdev(vdevs)\n      ) {\n        warnings.push(TopologyWarning.NoRedundancy);\n      }\n    }\n\n    return warnings;\n  }\n\n  private hasZeroRedundancyLevelVdev(vdevs: TopologyItem[]): boolean {\n    return vdevs.filter((vdev) => this.getRedundancyLevel(vdev) === 0).length > 0;\n  }\n}\n"],"version":3}