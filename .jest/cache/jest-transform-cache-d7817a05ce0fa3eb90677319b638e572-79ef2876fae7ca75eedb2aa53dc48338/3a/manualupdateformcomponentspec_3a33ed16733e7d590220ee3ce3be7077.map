{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/update/components/manual-update-form/manual-update-form.component.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/update/components/manual-update-form/manual-update-form.component.spec.ts"],"sourcesContent":["import { HarnessLoader } from '@angular/cdk/testing';\nimport { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { createComponentFactory, mockProvider, Spectator } from '@ngneat/spectator/jest';\nimport { provideMockStore } from '@ngrx/store/testing';\nimport { of } from 'rxjs';\nimport { mockAuth } from 'app/core/testing/utils/mock-auth.utils';\nimport { mockCall, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { mockWindow } from 'app/core/testing/utils/mock-window.utils';\nimport { ProductType } from 'app/enums/product-type.enum';\nimport { helptextSystemUpdate as helptext } from 'app/helptext/system/update';\nimport { Pool } from 'app/interfaces/pool.interface';\nimport { Preferences } from 'app/interfaces/preferences.interface';\nimport { SystemInfo } from 'app/interfaces/system-info.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxSelectHarness } from 'app/modules/forms/ix-forms/components/ix-select/ix-select.harness';\nimport { ManualUpdateFormComponent } from 'app/pages/system/update/components/manual-update-form/manual-update-form.component';\nimport { SystemGeneralService } from 'app/services/system-general.service';\nimport { WebSocketConnectionService } from 'app/services/websocket-connection.service';\nimport { selectIsHaLicensed } from 'app/store/ha-info/ha-info.selectors';\nimport { selectPreferences } from 'app/store/preferences/preferences.selectors';\nimport { selectSystemInfo } from 'app/store/system-info/system-info.selectors';\n\ndescribe('ManualUpdateFormComponent', () => {\n  let spectator: Spectator<ManualUpdateFormComponent>;\n  let loader: HarnessLoader;\n\n  const createComponent = createComponentFactory({\n    component: ManualUpdateFormComponent,\n    imports: [\n      ReactiveFormsModule,\n    ],\n    providers: [\n      mockWebSocket([\n        mockCall('pool.query', [\n          {\n            name: 'pool2',\n          } as Pool,\n        ]),\n        mockCall('failover.licensed'),\n        mockCall('core.get_jobs'),\n        mockCall('auth.set_attribute'),\n      ]),\n      mockProvider(DialogService, {\n        confirm: jest.fn(() => of(true)),\n      }),\n      mockProvider(Router),\n      mockProvider(SystemGeneralService),\n      mockProvider(MatDialog, {\n        open: jest.fn(() => ({\n          afterClosed: () => of(true),\n        })),\n      }),\n      mockWindow({\n        localStorage: {\n          getItem: () => ProductType.ScaleEnterprise,\n        },\n      }),\n      mockProvider(WebSocketConnectionService, {\n        isConnected$: of(true),\n      }),\n      provideMockStore({\n        selectors: [\n          {\n            selector: selectPreferences,\n            value: {\n              rebootAfterManualUpdate: false,\n            } as Preferences,\n          },\n          {\n            selector: selectSystemInfo,\n            value: {\n              version: 'TrueNAS-SCALE-22.12',\n            } as SystemInfo,\n          },\n          {\n            selector: selectIsHaLicensed,\n            value: false,\n          },\n        ],\n      }),\n      mockAuth(),\n    ],\n  });\n\n  beforeEach(/* async */ () => {\n    spectator = createComponent();\n    loader = TestbedHarnessEnvironment.loader(spectator.fixture);\n    // form = await loader.getHarness(IxFormHarness);\n    // websocket = spectator.inject(WebSocketService2);\n  });\n\n  it('loads all pool location options if is not HA system', async () => {\n    const locationSelect = await loader.getHarness(IxSelectHarness.with({ label: helptext.filelocation.placeholder }));\n    const optionLabels = await locationSelect.getOptionLabels();\n    expect(spectator.component.isHaLicensed).toBe(false);\n    expect(optionLabels).toEqual([\n      'Memory device',\n      '/mnt/pool2',\n    ]);\n  });\n\n  it('hides filelocation select if is HA system', async () => {\n    spectator.component.isHaLicensed = true;\n    const select = await loader.getHarnessOrNull(IxSelectHarness.with({ label: helptext.filelocation.placeholder }));\n\n    expect(spectator.component.isHaLicensed).toBe(true);\n    expect(select).toBeNull();\n  });\n\n  /**\n   * TODO: More tests should be written to test form submission etc once\n   * harness and test files are ready for IxFileInputComponent\n   */\n});\n"],"version":3}