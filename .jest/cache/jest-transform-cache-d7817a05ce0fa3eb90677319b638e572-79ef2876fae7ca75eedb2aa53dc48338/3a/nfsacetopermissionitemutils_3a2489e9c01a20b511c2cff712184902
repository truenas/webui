d7cb9592e6aa2c20943318da55b009e7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nfsAceToPermissionItem = nfsAceToPermissionItem;
const nfs_acl_enum_1 = require("app/enums/nfs-acl.enum");
const acl_interface_1 = require("app/interfaces/acl.interface");
const permission_item_interface_1 = require("app/pages/datasets/modules/permissions/interfaces/permission-item.interface");
const get_ace_who_string_utils_1 = require("app/pages/datasets/modules/permissions/utils/get-ace-who-string.utils");
function nfsAceToPermissionItem(translate, ace) {
    let name = translate.instant(nfs_acl_enum_1.nfsAclTagLabels.get(ace.tag));
    let type;
    switch (ace.tag) {
        case nfs_acl_enum_1.NfsAclTag.User:
        case nfs_acl_enum_1.NfsAclTag.Owner:
            type = permission_item_interface_1.PermissionsItemType.User;
            name = `${name} - ${(0, get_ace_who_string_utils_1.getAceWhoString)(ace)}`;
            break;
        case nfs_acl_enum_1.NfsAclTag.Group:
        case nfs_acl_enum_1.NfsAclTag.UserGroup:
            type = permission_item_interface_1.PermissionsItemType.Group;
            name = `${name} - ${(0, get_ace_who_string_utils_1.getAceWhoString)(ace)}`;
            break;
        default:
            type = permission_item_interface_1.PermissionsItemType.Other;
    }
    const access = translate.instant(nfs_acl_enum_1.nfsAclTypeLabels.get(ace.type));
    let action = translate.instant('Special');
    if ((0, acl_interface_1.areNfsPermissionsBasic)(ace.perms)) {
        action = translate.instant(nfs_acl_enum_1.nfsBasicPermissionLabels.get(ace.perms.BASIC));
    }
    else {
        const permissions = Object.keys(ace.perms);
        if (permissions.length === 1) {
            action = translate.instant(nfs_acl_enum_1.nfsAdvancedPermissionLabels.get(permissions[0]));
        }
    }
    return {
        type,
        name,
        description: `${access} | ${action}`,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvcGVybWlzc2lvbnMvdXRpbHMvbmZzLWFjZS10by1wZXJtaXNzaW9uLWl0ZW0udXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7QUFlQSx3REFtQ0M7QUFqREQseURBTWdDO0FBQ2hDLGdFQUFrRjtBQUNsRiwySEFHcUY7QUFDckYsb0hBQXdHO0FBRXhHLFNBQWdCLHNCQUFzQixDQUFDLFNBQTJCLEVBQUUsR0FBZTtJQUNqRixJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLDhCQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTNELElBQUksSUFBeUIsQ0FBQztJQUM5QixRQUFRLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixLQUFLLHdCQUFTLENBQUMsSUFBSSxDQUFDO1FBQ3BCLEtBQUssd0JBQVMsQ0FBQyxLQUFLO1lBQ2xCLElBQUksR0FBRywrQ0FBbUIsQ0FBQyxJQUFJLENBQUM7WUFDaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxNQUFNLElBQUEsMENBQWUsRUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzNDLE1BQU07UUFDUixLQUFLLHdCQUFTLENBQUMsS0FBSyxDQUFDO1FBQ3JCLEtBQUssd0JBQVMsQ0FBQyxTQUFTO1lBQ3RCLElBQUksR0FBRywrQ0FBbUIsQ0FBQyxLQUFLLENBQUM7WUFDakMsSUFBSSxHQUFHLEdBQUcsSUFBSSxNQUFNLElBQUEsMENBQWUsRUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzNDLE1BQU07UUFDUjtZQUNFLElBQUksR0FBRywrQ0FBbUIsQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsK0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUMsSUFBSSxJQUFBLHNDQUFzQixFQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3RDLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLHVDQUF3QixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQTRCLENBQUM7UUFDdEUsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzdCLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLDBDQUEyQixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlFLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osV0FBVyxFQUFFLEdBQUcsTUFBTSxNQUFNLE1BQU0sRUFBRTtLQUNyQyxDQUFDO0FBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvcGFnZXMvZGF0YXNldHMvbW9kdWxlcy9wZXJtaXNzaW9ucy91dGlscy9uZnMtYWNlLXRvLXBlcm1pc3Npb24taXRlbS51dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQge1xuICBOZnNBY2xUYWcsXG4gIG5mc0FjbFRhZ0xhYmVscyxcbiAgbmZzQWNsVHlwZUxhYmVscyxcbiAgTmZzQWR2YW5jZWRQZXJtaXNzaW9uLCBuZnNBZHZhbmNlZFBlcm1pc3Npb25MYWJlbHMsXG4gIG5mc0Jhc2ljUGVybWlzc2lvbkxhYmVscyxcbn0gZnJvbSAnYXBwL2VudW1zL25mcy1hY2wuZW51bSc7XG5pbXBvcnQgeyBhcmVOZnNQZXJtaXNzaW9uc0Jhc2ljLCBOZnNBY2xJdGVtIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvYWNsLmludGVyZmFjZSc7XG5pbXBvcnQge1xuICBQZXJtaXNzaW9uSXRlbSxcbiAgUGVybWlzc2lvbnNJdGVtVHlwZSxcbn0gZnJvbSAnYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvcGVybWlzc2lvbnMvaW50ZXJmYWNlcy9wZXJtaXNzaW9uLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldEFjZVdob1N0cmluZyB9IGZyb20gJ2FwcC9wYWdlcy9kYXRhc2V0cy9tb2R1bGVzL3Blcm1pc3Npb25zL3V0aWxzL2dldC1hY2Utd2hvLXN0cmluZy51dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZnNBY2VUb1Blcm1pc3Npb25JdGVtKHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSwgYWNlOiBOZnNBY2xJdGVtKTogUGVybWlzc2lvbkl0ZW0ge1xuICBsZXQgbmFtZSA9IHRyYW5zbGF0ZS5pbnN0YW50KG5mc0FjbFRhZ0xhYmVscy5nZXQoYWNlLnRhZykpO1xuXG4gIGxldCB0eXBlOiBQZXJtaXNzaW9uc0l0ZW1UeXBlO1xuICBzd2l0Y2ggKGFjZS50YWcpIHtcbiAgICBjYXNlIE5mc0FjbFRhZy5Vc2VyOlxuICAgIGNhc2UgTmZzQWNsVGFnLk93bmVyOlxuICAgICAgdHlwZSA9IFBlcm1pc3Npb25zSXRlbVR5cGUuVXNlcjtcbiAgICAgIG5hbWUgPSBgJHtuYW1lfSAtICR7Z2V0QWNlV2hvU3RyaW5nKGFjZSl9YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTmZzQWNsVGFnLkdyb3VwOlxuICAgIGNhc2UgTmZzQWNsVGFnLlVzZXJHcm91cDpcbiAgICAgIHR5cGUgPSBQZXJtaXNzaW9uc0l0ZW1UeXBlLkdyb3VwO1xuICAgICAgbmFtZSA9IGAke25hbWV9IC0gJHtnZXRBY2VXaG9TdHJpbmcoYWNlKX1gO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHR5cGUgPSBQZXJtaXNzaW9uc0l0ZW1UeXBlLk90aGVyO1xuICB9XG5cbiAgY29uc3QgYWNjZXNzID0gdHJhbnNsYXRlLmluc3RhbnQobmZzQWNsVHlwZUxhYmVscy5nZXQoYWNlLnR5cGUpKTtcbiAgbGV0IGFjdGlvbiA9IHRyYW5zbGF0ZS5pbnN0YW50KCdTcGVjaWFsJyk7XG4gIGlmIChhcmVOZnNQZXJtaXNzaW9uc0Jhc2ljKGFjZS5wZXJtcykpIHtcbiAgICBhY3Rpb24gPSB0cmFuc2xhdGUuaW5zdGFudChuZnNCYXNpY1Blcm1pc3Npb25MYWJlbHMuZ2V0KGFjZS5wZXJtcy5CQVNJQykpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBlcm1pc3Npb25zID0gT2JqZWN0LmtleXMoYWNlLnBlcm1zKSBhcyBOZnNBZHZhbmNlZFBlcm1pc3Npb25bXTtcbiAgICBpZiAocGVybWlzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICBhY3Rpb24gPSB0cmFuc2xhdGUuaW5zdGFudChuZnNBZHZhbmNlZFBlcm1pc3Npb25MYWJlbHMuZ2V0KHBlcm1pc3Npb25zWzBdKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIG5hbWUsXG4gICAgZGVzY3JpcHRpb246IGAke2FjY2Vzc30gfCAke2FjdGlvbn1gLFxuICB9O1xufVxuIl0sInZlcnNpb24iOjN9