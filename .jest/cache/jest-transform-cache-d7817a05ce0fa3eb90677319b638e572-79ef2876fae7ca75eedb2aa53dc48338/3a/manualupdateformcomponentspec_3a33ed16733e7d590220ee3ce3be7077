e4c244766fd8a514945bc00a58ab02ad
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const dialog_1 = require("@angular/material/dialog");
const router_1 = require("@angular/router");
const jest_1 = require("@ngneat/spectator/jest");
const testing_1 = require("@ngrx/store/testing");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const mock_window_utils_1 = require("app/core/testing/utils/mock-window.utils");
const product_type_enum_1 = require("app/enums/product-type.enum");
const update_1 = require("app/helptext/system/update");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_select_harness_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.harness");
const manual_update_form_component_1 = require("app/pages/system/update/components/manual-update-form/manual-update-form.component");
const system_general_service_1 = require("app/services/system-general.service");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const ha_info_selectors_1 = require("app/store/ha-info/ha-info.selectors");
const preferences_selectors_1 = require("app/store/preferences/preferences.selectors");
const system_info_selectors_1 = require("app/store/system-info/system-info.selectors");
describe('ManualUpdateFormComponent', () => {
    let spectator;
    let loader;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: manual_update_form_component_1.ManualUpdateFormComponent,
        imports: [
            forms_1.ReactiveFormsModule,
        ],
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('pool.query', [
                    {
                        name: 'pool2',
                    },
                ]),
                (0, mock_websocket_utils_1.mockCall)('failover.licensed'),
                (0, mock_websocket_utils_1.mockCall)('core.get_jobs'),
                (0, mock_websocket_utils_1.mockCall)('auth.set_attribute'),
            ]),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(router_1.Router),
            (0, jest_1.mockProvider)(system_general_service_1.SystemGeneralService),
            (0, jest_1.mockProvider)(dialog_1.MatDialog, {
                open: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)(true),
                })),
            }),
            (0, mock_window_utils_1.mockWindow)({
                localStorage: {
                    getItem: () => product_type_enum_1.ProductType.ScaleEnterprise,
                },
            }),
            (0, jest_1.mockProvider)(websocket_connection_service_1.WebSocketConnectionService, {
                isConnected$: (0, rxjs_1.of)(true),
            }),
            (0, testing_1.provideMockStore)({
                selectors: [
                    {
                        selector: preferences_selectors_1.selectPreferences,
                        value: {
                            rebootAfterManualUpdate: false,
                        },
                    },
                    {
                        selector: system_info_selectors_1.selectSystemInfo,
                        value: {
                            version: 'TrueNAS-SCALE-22.12',
                        },
                    },
                    {
                        selector: ha_info_selectors_1.selectIsHaLicensed,
                        value: false,
                    },
                ],
            }),
            (0, mock_auth_utils_1.mockAuth)(),
        ],
    });
    beforeEach(/* async */ () => {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        // form = await loader.getHarness(IxFormHarness);
        // websocket = spectator.inject(WebSocketService2);
    });
    it('loads all pool location options if is not HA system', () => __awaiter(void 0, void 0, void 0, function* () {
        const locationSelect = yield loader.getHarness(ix_select_harness_1.IxSelectHarness.with({ label: update_1.helptextSystemUpdate.filelocation.placeholder }));
        const optionLabels = yield locationSelect.getOptionLabels();
        expect(spectator.component.isHaLicensed).toBe(false);
        expect(optionLabels).toEqual([
            'Memory device',
            '/mnt/pool2',
        ]);
    }));
    it('hides filelocation select if is HA system', () => __awaiter(void 0, void 0, void 0, function* () {
        spectator.component.isHaLicensed = true;
        const select = yield loader.getHarnessOrNull(ix_select_harness_1.IxSelectHarness.with({ label: update_1.helptextSystemUpdate.filelocation.placeholder }));
        expect(spectator.component.isHaLicensed).toBe(true);
        expect(select).toBeNull();
    }));
    /**
     * TODO: More tests should be written to test form submission etc once
     * harness and test files are ready for IxFileInputComponent
     */
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL3N5c3RlbS91cGRhdGUvY29tcG9uZW50cy9tYW51YWwtdXBkYXRlLWZvcm0vbWFudWFsLXVwZGF0ZS1mb3JtLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsMERBQXlFO0FBQ3pFLDBDQUFxRDtBQUNyRCxxREFBcUQ7QUFDckQsNENBQXlDO0FBQ3pDLGlEQUF5RjtBQUN6RixpREFBdUQ7QUFDdkQsK0JBQTBCO0FBQzFCLDRFQUFrRTtBQUNsRSxzRkFBc0Y7QUFDdEYsZ0ZBQXNFO0FBQ3RFLG1FQUEwRDtBQUMxRCx1REFBOEU7QUFJOUUsc0VBQWtFO0FBQ2xFLHlHQUFvRztBQUNwRyxxSUFBK0g7QUFDL0gsZ0ZBQTJFO0FBQzNFLDRGQUF1RjtBQUN2RiwyRUFBeUU7QUFDekUsdUZBQWdGO0FBQ2hGLHVGQUErRTtBQUUvRSxRQUFRLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLElBQUksU0FBK0MsQ0FBQztJQUNwRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsTUFBTSxlQUFlLEdBQUcsSUFBQSw2QkFBc0IsRUFBQztRQUM3QyxTQUFTLEVBQUUsd0RBQXlCO1FBQ3BDLE9BQU8sRUFBRTtZQUNQLDJCQUFtQjtTQUNwQjtRQUNELFNBQVMsRUFBRTtZQUNULElBQUEsb0NBQWEsRUFBQztnQkFDWixJQUFBLCtCQUFRLEVBQUMsWUFBWSxFQUFFO29CQUNyQjt3QkFDRSxJQUFJLEVBQUUsT0FBTztxQkFDTjtpQkFDVixDQUFDO2dCQUNGLElBQUEsK0JBQVEsRUFBQyxtQkFBbUIsQ0FBQztnQkFDN0IsSUFBQSwrQkFBUSxFQUFDLGVBQWUsQ0FBQztnQkFDekIsSUFBQSwrQkFBUSxFQUFDLG9CQUFvQixDQUFDO2FBQy9CLENBQUM7WUFDRixJQUFBLG1CQUFZLEVBQUMsOEJBQWEsRUFBRTtnQkFDMUIsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMs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ay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvcGFnZXMvc3lzdGVtL3VwZGF0ZS9jb21wb25lbnRzL21hbnVhbC11cGRhdGUtZm9ybS9tYW51YWwtdXBkYXRlLWZvcm0uY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFybmVzc0xvYWRlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQgfSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZy90ZXN0YmVkJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudEZhY3RvcnksIG1vY2tQcm92aWRlciwgU3BlY3RhdG9yIH0gZnJvbSAnQG5nbmVhdC9zcGVjdGF0b3IvamVzdCc7XG5pbXBvcnQgeyBwcm92aWRlTW9ja1N0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbW9ja0F1dGggfSBmcm9tICdhcHAvY29yZS90ZXN0aW5nL3V0aWxzL21vY2stYXV0aC51dGlscyc7XG5pbXBvcnQgeyBtb2NrQ2FsbCwgbW9ja1dlYlNvY2tldCB9IGZyb20gJ2FwcC9jb3JlL3Rlc3RpbmcvdXRpbHMvbW9jay13ZWJzb2NrZXQudXRpbHMnO1xuaW1wb3J0IHsgbW9ja1dpbmRvdyB9IGZyb20gJ2FwcC9jb3JlL3Rlc3RpbmcvdXRpbHMvbW9jay13aW5kb3cudXRpbHMnO1xuaW1wb3J0IHsgUHJvZHVjdFR5cGUgfSBmcm9tICdhcHAvZW51bXMvcHJvZHVjdC10eXBlLmVudW0nO1xuaW1wb3J0IHsgaGVscHRleHRTeXN0ZW1VcGRhdGUgYXMgaGVscHRleHQgfSBmcm9tICdhcHAvaGVscHRleHQvc3lzdGVtL3VwZGF0ZSc7XG5pbXBvcnQgeyBQb29sIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvcG9vbC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUHJlZmVyZW5jZXMgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9wcmVmZXJlbmNlcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU3lzdGVtSW5mbyB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL3N5c3RlbS1pbmZvLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IEl4U2VsZWN0SGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc2VsZWN0L2l4LXNlbGVjdC5oYXJuZXNzJztcbmltcG9ydCB7IE1hbnVhbFVwZGF0ZUZvcm1Db21wb25lbnQgfSBmcm9tICdhcHAvcGFnZXMvc3lzdGVtL3VwZGF0ZS9jb21wb25lbnRzL21hbnVhbC11cGRhdGUtZm9ybS9tYW51YWwtdXBkYXRlLWZvcm0uY29tcG9uZW50JztcbmltcG9ydCB7IFN5c3RlbUdlbmVyYWxTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3N5c3RlbS1nZW5lcmFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0Q29ubmVjdGlvblNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvd2Vic29ja2V0LWNvbm5lY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBzZWxlY3RJc0hhTGljZW5zZWQgfSBmcm9tICdhcHAvc3RvcmUvaGEtaW5mby9oYS1pbmZvLnNlbGVjdG9ycyc7XG5pbXBvcnQgeyBzZWxlY3RQcmVmZXJlbmNlcyB9IGZyb20gJ2FwcC9zdG9yZS9wcmVmZXJlbmNlcy9wcmVmZXJlbmNlcy5zZWxlY3RvcnMnO1xuaW1wb3J0IHsgc2VsZWN0U3lzdGVtSW5mbyB9IGZyb20gJ2FwcC9zdG9yZS9zeXN0ZW0taW5mby9zeXN0ZW0taW5mby5zZWxlY3RvcnMnO1xuXG5kZXNjcmliZSgnTWFudWFsVXBkYXRlRm9ybUNvbXBvbmVudCcsICgpID0+IHtcbiAgbGV0IHNwZWN0YXRvcjogU3BlY3RhdG9yPE1hbnVhbFVwZGF0ZUZvcm1Db21wb25lbnQ+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGNvbnN0IGNyZWF0ZUNvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudEZhY3Rvcnkoe1xuICAgIGNvbXBvbmVudDogTWFudWFsVXBkYXRlRm9ybUNvbXBvbmVudCxcbiAgICBpbXBvcnRzOiBbXG4gICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICBtb2NrV2ViU29ja2V0KFtcbiAgICAgICAgbW9ja0NhbGwoJ3Bvb2wucXVlcnknLCBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3Bvb2wyJyxcbiAgICAgICAgICB9IGFzIFBvb2wsXG4gICAgICAgIF0pLFxuICAgICAgICBtb2NrQ2FsbCgnZmFpbG92ZXIubGljZW5zZWQnKSxcbiAgICAgICAgbW9ja0NhbGwoJ2NvcmUuZ2V0X2pvYnMnKSxcbiAgICAgICAgbW9ja0NhbGwoJ2F1dGguc2V0X2F0dHJpYnV0ZScpLFxuICAgICAgXSksXG4gICAgICBtb2NrUHJvdmlkZXIoRGlhbG9nU2VydmljZSwge1xuICAgICAgICBjb25maXJtOiBqZXN0LmZuKCgpID0+IG9mKHRydWUpKSxcbiAgICAgIH0pLFxuICAgICAgbW9ja1Byb3ZpZGVyKFJvdXRlciksXG4gICAgICBtb2NrUHJvdmlkZXIoU3lzdGVtR2VuZXJhbFNlcnZpY2UpLFxuICAgICAgbW9ja1Byb3ZpZGVyKE1hdERpYWxvZywge1xuICAgICAgICBvcGVuOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgYWZ0ZXJDbG9zZWQ6ICgpID0+IG9mKHRydWUpLFxuICAgICAgICB9KSksXG4gICAgICB9KSxcbiAgICAgIG1vY2tXaW5kb3coe1xuICAgICAgICBsb2NhbFN0b3JhZ2U6IHtcbiAgICAgICAgICBnZXRJdGVtOiAoKSA9PiBQcm9kdWN0VHlwZS5TY2FsZUVudGVycHJpc2UsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIG1vY2tQcm92aWRlcihXZWJTb2NrZXRDb25uZWN0aW9uU2VydmljZSwge1xuICAgICAgICBpc0Nvbm5lY3RlZCQ6IG9mKHRydWUpLFxuICAgICAgfSksXG4gICAgICBwcm92aWRlTW9ja1N0b3JlKHtcbiAgICAgICAgc2VsZWN0b3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdFByZWZlcmVuY2VzLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgcmVib290QWZ0ZXJNYW51YWxVcGRhdGU6IGZhbHNlLFxuICAgICAgICAgICAgfSBhcyBQcmVmZXJlbmNlcyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RTeXN0ZW1JbmZvLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgdmVyc2lvbjogJ1RydWVOQVMtU0NBTEUtMjIuMTInLFxuICAgICAgICAgICAgfSBhcyBTeXN0ZW1JbmZvLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdElzSGFMaWNlbnNlZCxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSksXG4gICAgICBtb2NrQXV0aCgpLFxuICAgIF0sXG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goLyogYXN5bmMgKi8gKCkgPT4ge1xuICAgIHNwZWN0YXRvciA9IGNyZWF0ZUNvbXBvbmVudCgpO1xuICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKHNwZWN0YXRvci5maXh0dXJlKTtcbiAgICAvLyBmb3JtID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoSXhGb3JtSGFybmVzcyk7XG4gICAgLy8gd2Vic29ja2V0ID0gc3BlY3RhdG9yLmluamVjdChXZWJTb2NrZXRTZXJ2aWNlMik7XG4gIH0pO1xuXG4gIGl0KCdsb2FkcyBhbGwgcG9vbCBsb2NhdGlvbiBvcHRpb25zIGlmIGlzIG5vdCBIQSBzeXN0ZW0nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbG9jYXRpb25TZWxlY3QgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhJeFNlbGVjdEhhcm5lc3Mud2l0aCh7IGxhYmVsOiBoZWxwdGV4dC5maWxlbG9jYXRpb24ucGxhY2Vob2xkZXIgfSkpO1xuICAgIGNvbnN0IG9wdGlvbkxhYmVscyA9IGF3YWl0IGxvY2F0aW9uU2VsZWN0LmdldE9wdGlvbkxhYmVscygpO1xuICAgIGV4cGVjdChzcGVjdGF0b3IuY29tcG9uZW50LmlzSGFMaWNlbnNlZCkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KG9wdGlvbkxhYmVscykudG9FcXVhbChbXG4gICAgICAnTWVtb3J5IGRldmljZScsXG4gICAgICAnL21udC9wb29sMicsXG4gICAgXSk7XG4gIH0pO1xuXG4gIGl0KCdoaWRlcyBmaWxlbG9jYXRpb24gc2VsZWN0IGlmIGlzIEhBIHN5c3RlbScsIGFzeW5jICgpID0+IHtcbiAgICBzcGVjdGF0b3IuY29tcG9uZW50LmlzSGFMaWNlbnNlZCA9IHRydWU7XG4gICAgY29uc3Qgc2VsZWN0ID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3NPck51bGwoSXhTZWxlY3RIYXJuZXNzLndpdGgoeyBsYWJlbDogaGVscHRleHQuZmlsZWxvY2F0aW9uLnBsYWNlaG9sZGVyIH0pKTtcblxuICAgIGV4cGVjdChzcGVjdGF0b3IuY29tcG9uZW50LmlzSGFMaWNlbnNlZCkudG9CZSh0cnVlKTtcbiAgICBleHBlY3Qoc2VsZWN0KS50b0JlTnVsbCgpO1xuICB9KTtcblxuICAvKipcbiAgICogVE9ETzogTW9yZSB0ZXN0cyBzaG91bGQgYmUgd3JpdHRlbiB0byB0ZXN0IGZvcm0gc3VibWlzc2lvbiBldGMgb25jZVxuICAgKiBoYXJuZXNzIGFuZCB0ZXN0IGZpbGVzIGFyZSByZWFkeSBmb3IgSXhGaWxlSW5wdXRDb21wb25lbnRcbiAgICovXG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==