6b0d8470f55c3a70b0f772f9985a6314
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const router_1 = require("@angular/router");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const fake_job_utils_1 = require("app/core/testing/utils/fake-job.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const fips_service_1 = require("app/services/fips.service");
const ws_service_1 = require("app/services/ws.service");
describe('FipsService', () => {
    let spectator;
    const createService = (0, jest_1.createServiceFactory)({
        service: fips_service_1.FipsService,
        providers: [
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
                jobDialog: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)({}),
                })),
            }),
            (0, jest_1.mockProvider)(router_1.Router),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockJob)('failover.reboot.other_node', (0, fake_job_utils_1.fakeSuccessfulJob)()),
            ]),
        ],
    });
    beforeEach(() => {
        spectator = createService();
    });
    describe('promptForLocalRestart', () => {
        it('prompts for local standby and redirects to restart page', () => {
            spectator.service.promptForRestart().subscribe();
            expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith(expect.objectContaining({
                buttonText: 'Restart Now',
            }));
            expect(spectator.inject(router_1.Router).navigate).toHaveBeenCalledWith(['/system-tasks/restart'], { skipLocationChange: true });
        });
    });
    describe('promptForFailover', () => {
        it('prompts for failover and redirects to failover page', () => {
            spectator.service.promptForFailover().subscribe();
            expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith(expect.objectContaining({
                buttonText: 'Failover Now',
            }));
            expect(spectator.inject(router_1.Router).navigate).toHaveBeenCalledWith(['/system-tasks/failover'], { skipLocationChange: true });
        });
    });
    describe('promptToRestartRemote', () => {
        it('prompts to restart standby and restarts with progress indication', () => {
            spectator.service.promptForRemoteRestart().subscribe();
            expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith(expect.objectContaining({
                buttonText: 'Restart Standby',
            }));
            expect(spectator.inject(ws_service_1.WebSocketService).job).toHaveBeenCalledWith('failover.reboot.other_node');
            expect(spectator.inject(dialog_service_1.DialogService).jobDialog).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2ZpcHMuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNENBQXlDO0FBQ3pDLGlEQUlnQztBQUNoQywrQkFBMEI7QUFDMUIsMEVBQTBFO0FBQzFFLHNGQUFxRjtBQUNyRixzRUFBa0U7QUFDbEUsNERBQXdEO0FBQ3hELHdEQUEyRDtBQUUzRCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixJQUFJLFNBQXdDLENBQUM7SUFDN0MsTUFBTSxhQUFhLEdBQUcsSUFBQSwyQkFBb0IsRUFBQztRQUN6QyxPQUFPLEVBQUUsMEJBQVc7UUFDcEIsU0FBUyxFQUFFO1lBQ1QsSUFBQSxtQkFBWSxFQUFDLDhCQUFhLEVBQUU7Z0JBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsU0FBRSxFQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUN4QixXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBQSxTQUFFLEVBQUMsRUFBRSxDQUFDO2lCQUMxQixDQUFDLENBQUM7YUFDSixDQUFDO1lBQ0YsSUFBQSxtQkFBWSxFQUFDLGVBQU0sQ0FBQztZQUNwQixJQUFBLG9DQUFhLEVBQUM7Z0JBQ1osSUFBQSw4QkFBTyxFQUFDLDRCQUE0QixFQUFFLElBQUEsa0NBQWlCLEdBQUUsQ0FBQzthQUMzRCxDQUFDO1NBQ0g7S0FDRixDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsU0FBUyxHQUFHLGFBQWEsRUFBRSxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtRQUNyQyxFQUFFLENBQUMseURBQXlELEVBQUUsR0FBRyxFQUFFO1lBQ2pFLFNBQVMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUVqRCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyw4QkFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQ2xFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDdEIsVUFBVSxFQUFFLGFBQWE7YUFDMUIsQ0FBQyxDQUNILENBQUM7WUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzFILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxHQUFHLEVBQUU7WUFDN0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRWxELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLDhCQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FDbEUsTUFBTSxDQUFDLGdCQUFnQixDQUFDO2dCQUN0QixVQUFVLEVBQUUsY0FBYzthQUMzQixDQUFDLENBQ0gsQ0FBQztZQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDckMsRUFBRSxDQUFDLGtFQUFrRSxFQUFFLEdBQUcsRUFBRTtZQUMxRSxTQUFTLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFdkQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsOEJBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUNsRSxNQUFNLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3RCLFVBQVUsRUFBRSxpQkFBaUI7YUFDOUIsQ0FBQyxDQUNILENBQUM7WUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLDRCQUE0QixDQUFDLENBQUM7WUFDbEcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsOEJBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9maXBzLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgY3JlYXRlU2VydmljZUZhY3RvcnksXG4gIG1vY2tQcm92aWRlcixcbiAgU3BlY3RhdG9yU2VydmljZSxcbn0gZnJvbSAnQG5nbmVhdC9zcGVjdGF0b3IvamVzdCc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmFrZVN1Y2Nlc3NmdWxKb2IgfSBmcm9tICdhcHAvY29yZS90ZXN0aW5nL3V0aWxzL2Zha2Utam9iLnV0aWxzJztcbmltcG9ydCB7IG1vY2tKb2IsIG1vY2tXZWJTb2NrZXQgfSBmcm9tICdhcHAvY29yZS90ZXN0aW5nL3V0aWxzL21vY2std2Vic29ja2V0LnV0aWxzJztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdhcHAvbW9kdWxlcy9kaWFsb2cvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmlwc1NlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvZmlwcy5zZXJ2aWNlJztcbmltcG9ydCB7IFdlYlNvY2tldFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvd3Muc2VydmljZSc7XG5cbmRlc2NyaWJlKCdGaXBzU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNwZWN0YXRvcjogU3BlY3RhdG9yU2VydmljZTxGaXBzU2VydmljZT47XG4gIGNvbnN0IGNyZWF0ZVNlcnZpY2UgPSBjcmVhdGVTZXJ2aWNlRmFjdG9yeSh7XG4gICAgc2VydmljZTogRmlwc1NlcnZpY2UsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICBtb2NrUHJvdmlkZXIoRGlhbG9nU2VydmljZSwge1xuICAgICAgICBjb25maXJtOiBqZXN0LmZuKCgpID0+IG9mKHRydWUpKSxcbiAgICAgICAgam9iRGlhbG9nOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgYWZ0ZXJDbG9zZWQ6ICgpID0+IG9mKHt9KSxcbiAgICAgICAgfSkpLFxuICAgICAgfSksXG4gICAgICBtb2NrUHJvdmlkZXIoUm91dGVyKSxcbiAgICAgIG1vY2tXZWJTb2NrZXQoW1xuICAgICAgICBtb2NrSm9iKCdmYWlsb3Zlci5yZWJvb3Qub3RoZXJfbm9kZScsIGZha2VTdWNjZXNzZnVsSm9iKCkpLFxuICAgICAgXSksXG4gICAgXSxcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3BlY3RhdG9yID0gY3JlYXRlU2VydmljZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJvbXB0Rm9yTG9jYWxSZXN0YXJ0JywgKCkgPT4ge1xuICAgIGl0KCdwcm9tcHRzIGZvciBsb2NhbCBzdGFuZGJ5IGFuZCByZWRpcmVjdHMgdG8gcmVzdGFydCBwYWdlJywgKCkgPT4ge1xuICAgICAgc3BlY3RhdG9yLnNlcnZpY2UucHJvbXB0Rm9yUmVzdGFydCgpLnN1YnNjcmliZSgpO1xuXG4gICAgICBleHBlY3Qoc3BlY3RhdG9yLmluamVjdChEaWFsb2dTZXJ2aWNlKS5jb25maXJtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIGJ1dHRvblRleHQ6ICdSZXN0YXJ0IE5vdycsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChzcGVjdGF0b3IuaW5qZWN0KFJvdXRlcikubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnL3N5c3RlbS10YXNrcy9yZXN0YXJ0J10sIHsgc2tpcExvY2F0aW9uQ2hhbmdlOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJvbXB0Rm9yRmFpbG92ZXInLCAoKSA9PiB7XG4gICAgaXQoJ3Byb21wdHMgZm9yIGZhaWxvdmVyIGFuZCByZWRpcmVjdHMgdG8gZmFpbG92ZXIgcGFnZScsICgpID0+IHtcbiAgICAgIHNwZWN0YXRvci5zZXJ2aWNlLnByb21wdEZvckZhaWxvdmVyKCkuc3Vic2NyaWJlKCk7XG5cbiAgICAgIGV4cGVjdChzcGVjdGF0b3IuaW5qZWN0KERpYWxvZ1NlcnZpY2UpLmNvbmZpcm0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgYnV0dG9uVGV4dDogJ0ZhaWxvdmVyIE5vdycsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChzcGVjdGF0b3IuaW5qZWN0KFJvdXRlcikubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnL3N5c3RlbS10YXNrcy9mYWlsb3ZlciddLCB7IHNraXBMb2NhdGlvbkNoYW5nZTogdHJ1ZSB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Byb21wdFRvUmVzdGFydFJlbW90ZScsICgpID0+IHtcbiAgICBpdCgncHJvbXB0cyB0byByZXN0YXJ0IHN0YW5kYnkgYW5kIHJlc3RhcnRzIHdpdGggcHJvZ3Jlc3MgaW5kaWNhdGlvbicsICgpID0+IHtcbiAgICAgIHNwZWN0YXRvci5zZXJ2aWNlLnByb21wdEZvclJlbW90ZVJlc3RhcnQoKS5zdWJzY3JpYmUoKTtcblxuICAgICAgZXhwZWN0KHNwZWN0YXRvci5pbmplY3QoRGlhbG9nU2VydmljZSkuY29uZmlybSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBidXR0b25UZXh0OiAnUmVzdGFydCBTdGFuZGJ5JyxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgICAgZXhwZWN0KHNwZWN0YXRvci5pbmplY3QoV2ViU29ja2V0U2VydmljZSkuam9iKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZmFpbG92ZXIucmVib290Lm90aGVyX25vZGUnKTtcbiAgICAgIGV4cGVjdChzcGVjdGF0b3IuaW5qZWN0KERpYWxvZ1NlcnZpY2UpLmpvYkRpYWxvZykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9