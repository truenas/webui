{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/fips.service.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/fips.service.spec.ts"],"sourcesContent":["import { Router } from '@angular/router';\nimport {\n  createServiceFactory,\n  mockProvider,\n  SpectatorService,\n} from '@ngneat/spectator/jest';\nimport { of } from 'rxjs';\nimport { fakeSuccessfulJob } from 'app/core/testing/utils/fake-job.utils';\nimport { mockJob, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { FipsService } from 'app/services/fips.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\ndescribe('FipsService', () => {\n  let spectator: SpectatorService<FipsService>;\n  const createService = createServiceFactory({\n    service: FipsService,\n    providers: [\n      mockProvider(DialogService, {\n        confirm: jest.fn(() => of(true)),\n        jobDialog: jest.fn(() => ({\n          afterClosed: () => of({}),\n        })),\n      }),\n      mockProvider(Router),\n      mockWebSocket([\n        mockJob('failover.reboot.other_node', fakeSuccessfulJob()),\n      ]),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createService();\n  });\n\n  describe('promptForLocalRestart', () => {\n    it('prompts for local standby and redirects to restart page', () => {\n      spectator.service.promptForRestart().subscribe();\n\n      expect(spectator.inject(DialogService).confirm).toHaveBeenCalledWith(\n        expect.objectContaining({\n          buttonText: 'Restart Now',\n        }),\n      );\n      expect(spectator.inject(Router).navigate).toHaveBeenCalledWith(['/system-tasks/restart'], { skipLocationChange: true });\n    });\n  });\n\n  describe('promptForFailover', () => {\n    it('prompts for failover and redirects to failover page', () => {\n      spectator.service.promptForFailover().subscribe();\n\n      expect(spectator.inject(DialogService).confirm).toHaveBeenCalledWith(\n        expect.objectContaining({\n          buttonText: 'Failover Now',\n        }),\n      );\n      expect(spectator.inject(Router).navigate).toHaveBeenCalledWith(['/system-tasks/failover'], { skipLocationChange: true });\n    });\n  });\n\n  describe('promptToRestartRemote', () => {\n    it('prompts to restart standby and restarts with progress indication', () => {\n      spectator.service.promptForRemoteRestart().subscribe();\n\n      expect(spectator.inject(DialogService).confirm).toHaveBeenCalledWith(\n        expect.objectContaining({\n          buttonText: 'Restart Standby',\n        }),\n      );\n      expect(spectator.inject(WebSocketService).job).toHaveBeenCalledWith('failover.reboot.other_node');\n      expect(spectator.inject(DialogService).jobDialog).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}