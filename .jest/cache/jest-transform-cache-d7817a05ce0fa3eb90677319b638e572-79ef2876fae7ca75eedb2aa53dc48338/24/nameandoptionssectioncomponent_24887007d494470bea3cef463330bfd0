abd6ccf742f5040819255b3e57b9e1a5
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameAndOptionsSectionComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const name_validator_constant_1 = require("app/constants/name-validator.constant");
const dataset_enum_1 = require("app/enums/dataset.enum");
const options_helper_1 = require("app/helpers/options.helper");
const dataset_form_1 = require("app/helptext/storage/volumes/datasets/dataset-form");
const forbidden_values_validation_1 = require("app/modules/forms/ix-forms/validators/forbidden-values-validation/forbidden-values-validation");
const name_length_validation_1 = require("app/pages/datasets/components/dataset-form/utils/name-length-validation");
const smb_validator_service_1 = require("app/pages/sharing/smb/smb-form/smb-validator.service");
const i0 = __importStar(require("@angular/core"));
let NameAndOptionsSectionComponent = class NameAndOptionsSectionComponent {
    get canCreateSmb() {
        return this.form.value.share_type === dataset_enum_1.DatasetPreset.Smb
            || this.form.value.share_type === dataset_enum_1.DatasetPreset.Multiprotocol;
    }
    get canCreateNfs() {
        return this.form.value.share_type === dataset_enum_1.DatasetPreset.Multiprotocol;
    }
    constructor(formBuilder, translate, smbValidationService, cdr) {
        this.formBuilder = formBuilder;
        this.translate = translate;
        this.smbValidationService = smbValidationService;
        this.cdr = cdr;
        this.formValidityChange = (0, core_1.output)();
        this.datasetPresetOptions$ = (0, rxjs_1.of)((0, options_helper_1.mapToOptions)(dataset_enum_1.datasetPresetLabels, this.translate));
        this.form = this.formBuilder.group({
            parent: [''],
            name: ['', [
                    forms_1.Validators.required,
                    forms_1.Validators.pattern(name_validator_constant_1.nameValidatorRegex),
                ]],
            share_type: [dataset_enum_1.DatasetPreset.Generic],
        });
        this.datasetPresetForm = this.formBuilder.group({
            create_smb: [true],
            create_nfs: [true],
            smb_name: [''],
        });
        this.helptext = dataset_form_1.helptextDatasetForm;
        this.DatasetPreset = dataset_enum_1.DatasetPreset;
    }
    ngOnChanges() {
        if (this.parent) {
            this.form.controls.parent.setValue(this.parent.name);
            this.addNameValidators();
        }
        this.setFormValues();
        this.setNameDisabledStatus();
    }
    ngOnInit() {
        this.form.controls.parent.disable();
        this.listenForSmbNameValidation();
        (0, rxjs_1.merge)(this.form.statusChanges, this.datasetPresetForm.statusChanges)
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((status) => this.formValidityChange.emit(status === 'VALID'));
    }
    getPayload() {
        const payload = this.form.value;
        if (this.existing) {
            delete payload.share_type;
            return payload;
        }
        return Object.assign(Object.assign({}, payload), { name: payload.name && this.form.controls.name.valid ? `${this.parent.name}/${payload.name}` : null });
    }
    setFormValues() {
        if (!this.existing) {
            return;
        }
        this.form.patchValue({
            name: this.existing.name,
        });
    }
    setNameDisabledStatus() {
        if (this.existing) {
            this.form.controls.name.disable();
        }
        else {
            this.form.controls.name.enable();
        }
    }
    addNameValidators() {
        const isNameCaseSensitive = this.parent.casesensitivity.value === dataset_enum_1.DatasetCaseSensitivity.Sensitive;
        const namesInUse = this.parent.children.map((child) => {
            const childName = /[^/]*$/.exec(child.name)[0];
            if (isNameCaseSensitive) {
                return childName.toLowerCase();
            }
            return childName;
        });
        this.form.controls.name.addValidators([
            (0, name_length_validation_1.datasetNameTooLong)(this.parent.name),
            (0, forbidden_values_validation_1.forbiddenValues)(namesInUse, isNameCaseSensitive),
        ]);
    }
    listenForSmbNameValidation() {
        (0, rxjs_1.merge)(this.form.controls.share_type.valueChanges, this.datasetPresetForm.controls.create_smb.valueChanges)
            .pipe((0, rxjs_1.delay)(0), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            const smbNameControl = this.datasetPresetForm.controls.smb_name;
            if (this.canCreateSmb && !!this.datasetPresetForm.controls.create_smb.value) {
                smbNameControl.addValidators(forms_1.Validators.required);
                smbNameControl.addAsyncValidators(this.smbValidationService.validate());
                smbNameControl.patchValue(this.form.controls.name.value);
                smbNameControl.markAsTouched();
            }
            else {
                smbNameControl.clearAsyncValidators();
                smbNameControl.clearValidators();
                smbNameControl.patchValue(null);
            }
            this.cdr.markForCheck();
        });
    }
};
exports.NameAndOptionsSectionComponent = NameAndOptionsSectionComponent;
NameAndOptionsSectionComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: core_2.TranslateService },
    { type: smb_validator_service_1.SmbValidationService },
    { type: core_1.ChangeDetectorRef }
];
NameAndOptionsSectionComponent.propDecorators = {
    existing: [{ type: core_1.Input }],
    parent: [{ type: core_1.Input }],
    formValidityChange: [{ type: i0.Output, args: ["formValidityChange",] }]
};
exports.NameAndOptionsSectionComponent = NameAndOptionsSectionComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-name-and-options',
        template: require("./name-and-options-section.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], NameAndOptionsSectionComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,