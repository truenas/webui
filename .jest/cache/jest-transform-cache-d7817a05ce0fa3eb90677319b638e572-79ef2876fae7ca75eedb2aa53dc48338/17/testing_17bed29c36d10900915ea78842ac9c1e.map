{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/checkbox/testing.mjs"],
  "sourcesContent": ["import { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Harness for interacting with a mat-checkbox in tests. */\nclass MatCheckboxHarness extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        this._input = this.locatorFor('input');\n        this._label = this.locatorFor('label');\n        this._inputContainer = this.locatorFor('.mdc-checkbox');\n    }\n    static { this.hostSelector = '.mat-mdc-checkbox'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a checkbox with specific attributes.\n     * @param options Options for narrowing the search:\n     *   - `selector` finds a checkbox whose host element matches the given selector.\n     *   - `label` finds a checkbox with specific label text.\n     *   - `name` finds a checkbox with specific name.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return (new HarnessPredicate(this, options)\n            .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n            // We want to provide a filter option for \"name\" because the name of the checkbox is\n            // only set on the underlying input. This means that it's not possible for developers\n            // to retrieve the harness of a specific checkbox with name through a CSS selector.\n            .addOption('name', options.name, async (harness, name) => (await harness.getName()) === name)\n            .addOption('checked', options.checked, async (harness, checked) => (await harness.isChecked()) == checked)\n            .addOption('disabled', options.disabled, async (harness, disabled) => {\n            return (await harness.isDisabled()) === disabled;\n        }));\n    }\n    /** Whether the checkbox is checked. */\n    async isChecked() {\n        const checked = (await this._input()).getProperty('checked');\n        return coerceBooleanProperty(await checked);\n    }\n    /** Whether the checkbox is in an indeterminate state. */\n    async isIndeterminate() {\n        const indeterminate = (await this._input()).getProperty('indeterminate');\n        return coerceBooleanProperty(await indeterminate);\n    }\n    /** Whether the checkbox is disabled. */\n    async isDisabled() {\n        const input = await this._input();\n        const disabled = await input.getAttribute('disabled');\n        if (disabled !== null) {\n            return coerceBooleanProperty(disabled);\n        }\n        return (await input.getAttribute('aria-disabled')) === 'true';\n    }\n    /** Whether the checkbox is required. */\n    async isRequired() {\n        const required = (await this._input()).getProperty('required');\n        return coerceBooleanProperty(await required);\n    }\n    /** Whether the checkbox is valid. */\n    async isValid() {\n        const invalid = (await this.host()).hasClass('ng-invalid');\n        return !(await invalid);\n    }\n    /** Gets the checkbox's name. */\n    async getName() {\n        return (await this._input()).getAttribute('name');\n    }\n    /** Gets the checkbox's value. */\n    async getValue() {\n        return (await this._input()).getProperty('value');\n    }\n    /** Gets the checkbox's aria-label. */\n    async getAriaLabel() {\n        return (await this._input()).getAttribute('aria-label');\n    }\n    /** Gets the checkbox's aria-labelledby. */\n    async getAriaLabelledby() {\n        return (await this._input()).getAttribute('aria-labelledby');\n    }\n    /** Gets the checkbox's label text. */\n    async getLabelText() {\n        return (await this._label()).text();\n    }\n    /** Focuses the checkbox. */\n    async focus() {\n        return (await this._input()).focus();\n    }\n    /** Blurs the checkbox. */\n    async blur() {\n        return (await this._input()).blur();\n    }\n    /** Whether the checkbox is focused. */\n    async isFocused() {\n        return (await this._input()).isFocused();\n    }\n    /**\n     * Toggles the checked state of the checkbox.\n     *\n     * Note: This attempts to toggle the checkbox as a user would, by clicking it. Therefore if you\n     * are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method\n     * might not have the expected result.\n     */\n    async toggle() {\n        const elToClick = await ((await this.isDisabled()) ? this._inputContainer() : this._input());\n        return elToClick.click();\n    }\n    /**\n     * Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing\n     * nothing if it is already checked.\n     *\n     * Note: This attempts to check the checkbox as a user would, by clicking it. Therefore if you\n     * are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method\n     * might not have the expected result.\n     */\n    async check() {\n        if (!(await this.isChecked())) {\n            await this.toggle();\n        }\n    }\n    /**\n     * Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing\n     * nothing if it is already unchecked.\n     *\n     * Note: This attempts to uncheck the checkbox as a user would, by clicking it. Therefore if you\n     * are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method\n     * might not have the expected result.\n     */\n    async uncheck() {\n        if (await this.isChecked()) {\n            await this.toggle();\n        }\n    }\n}\n\nexport { MatCheckboxHarness };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": "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",
  "names": []
}
