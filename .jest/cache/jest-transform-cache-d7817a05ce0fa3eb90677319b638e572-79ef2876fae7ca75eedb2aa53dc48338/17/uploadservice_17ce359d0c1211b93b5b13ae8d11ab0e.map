{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/upload.service.ts","mappings":";;;;;;;;;AAAA,+CAE8B;AAC9B,wCAA2C;AAC3C,uCAAoC;AACpC,+BAA0C;AAC1C,8CAAsD;AACtD,qFAAwE;AAGxE,wEAAiE;AACjE,iEAA6D;AAYtD,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YACY,IAAgB,EAClB,WAAwB,EACxB,MAAuB;QAFrB,SAAI,GAAJ,IAAI,CAAY;QAClB,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAiB;IAC9B,CAAC;IAEJ;;;OAGG;IACH,MAAM,CAAC,OAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CACrC,IAAA,gBAAI,EAAC,CAAC,CAAC,EACP,IAAA,eAAG,EAAC,CAAC,KAAK,EAAE,EAAE;YACZ,MAAM,QAAQ,GAAG,sBAAsB,GAAG,KAAK,CAAC;YAChD,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;YAChC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC;gBACrC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;aAC7B,CAAC,CAAC,CAAC;YACJ,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,OAAO,IAAI,kBAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE;gBACjD,cAAc,EAAE,IAAI;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,EACF,IAAA,qBAAS,EAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAC3C,CAAC;IACJ,CAAC;IAED,0EAA0E;IAC1E,WAAW,CAAyB,OAAyB;QAC3D,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;aACxB,IAAI,CACH,IAAA,aAAM,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,YAAY,mBAAY,CAAC,EAChD,IAAA,qBAAS,EAAC,CAAC,QAA0C,EAAE,EAAE;YACvD,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAA,yBAAS,EAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACvD,IAAI,CAAC,IAAA,iCAAU,GAAE,CAAuC,CAAC;QAC9D,CAAC,CAAC,CACH,CAAC;IACN,CAAC;;AAxCU,sCAAa;;;;;;wBAAb,aAAa;IAHzB,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,aAAa,CAyCzB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/upload.service.ts"],"sourcesContent":["import {\n  HttpClient, HttpEvent, HttpRequest, HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { filter, Observable } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { observeJob } from 'app/helpers/operators/observe-job.operator';\nimport { ApiJobMethod, ApiJobResponse } from 'app/interfaces/api/api-job-directory.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { selectJob } from 'app/modules/jobs/store/job.selectors';\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { AppState } from 'app/store';\n\nexport interface UploadOptions<M extends ApiJobMethod = ApiJobMethod> {\n  file: File;\n  method: M;\n  params?: unknown[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UploadService {\n  constructor(\n    protected http: HttpClient,\n    private authService: AuthService,\n    private store$: Store<AppState>,\n  ) {}\n\n  /**\n   * Reports progress.\n   * You need to filter for `(event) => event instanceof HttpResponse` to wait for response.\n   */\n  upload(options: UploadOptions): Observable<HttpEvent<unknown>> {\n    return this.authService.authToken$.pipe(\n      take(1),\n      map((token) => {\n        const endPoint = '/_upload?auth_token=' + token;\n        const formData = new FormData();\n        formData.append('data', JSON.stringify({\n          method: options.method,\n          params: options.params || [],\n        }));\n        formData.append('file', options.file, options.file.name);\n        return new HttpRequest('POST', endPoint, formData, {\n          reportProgress: true,\n        });\n      }),\n      switchMap((req) => this.http.request(req)),\n    );\n  }\n\n  // TODO: This may be breaking levels of abstraction. Consider refactoring.\n  uploadAsJob<M extends ApiJobMethod>(options: UploadOptions<M>): Observable<Job<ApiJobResponse<M>>> {\n    return this.upload(options)\n      .pipe(\n        filter((event) => event instanceof HttpResponse),\n        switchMap((response: HttpResponse<{ job_id: number }>) => {\n          return this.store$.select(selectJob(response.body.job_id))\n            .pipe(observeJob()) as Observable<Job<ApiJobResponse<M>>>;\n        }),\n      );\n  }\n}\n"],"version":3}