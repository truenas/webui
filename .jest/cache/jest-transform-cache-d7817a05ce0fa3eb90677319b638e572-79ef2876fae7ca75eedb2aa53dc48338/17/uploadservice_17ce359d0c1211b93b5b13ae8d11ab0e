13d7d3ff29dedd6200cc987cd0056e18
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadService = void 0;
const http_1 = require("@angular/common/http");
const core_1 = require("@angular/core");
const store_1 = require("@ngrx/store");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const observe_job_operator_1 = require("app/helpers/operators/observe-job.operator");
const job_selectors_1 = require("app/modules/jobs/store/job.selectors");
const auth_service_1 = require("app/services/auth/auth.service");
let UploadService = class UploadService {
    constructor(http, authService, store$) {
        this.http = http;
        this.authService = authService;
        this.store$ = store$;
    }
    /**
     * Reports progress.
     * You need to filter for `(event) => event instanceof HttpResponse` to wait for response.
     */
    upload(options) {
        return this.authService.authToken$.pipe((0, operators_1.take)(1), (0, operators_1.map)((token) => {
            const endPoint = '/_upload?auth_token=' + token;
            const formData = new FormData();
            formData.append('data', JSON.stringify({
                method: options.method,
                params: options.params || [],
            }));
            formData.append('file', options.file, options.file.name);
            return new http_1.HttpRequest('POST', endPoint, formData, {
                reportProgress: true,
            });
        }), (0, operators_1.switchMap)((req) => this.http.request(req)));
    }
    // TODO: This may be breaking levels of abstraction. Consider refactoring.
    uploadAsJob(options) {
        return this.upload(options)
            .pipe((0, rxjs_1.filter)((event) => event instanceof http_1.HttpResponse), (0, operators_1.switchMap)((response) => {
            return this.store$.select((0, job_selectors_1.selectJob)(response.body.job_id))
                .pipe((0, observe_job_operator_1.observeJob)());
        }));
    }
};
exports.UploadService = UploadService;
UploadService.ctorParameters = () => [
    { type: http_1.HttpClient },
    { type: auth_service_1.AuthService },
    { type: store_1.Store }
];
exports.UploadService = UploadService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], UploadService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3VwbG9hZC5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLCtDQUU4QjtBQUM5Qix3Q0FBMkM7QUFDM0MsdUNBQW9DO0FBQ3BDLCtCQUEwQztBQUMxQyw4Q0FBc0Q7QUFDdEQscUZBQXdFO0FBR3hFLHdFQUFpRTtBQUNqRSxpRUFBNkQ7QUFZdEQsSUFBTSxhQUFhLEdBQW5CLE1BQU0sYUFBYTtJQUN4QixZQUNZLElBQWdCLEVBQ2xCLFdBQXdCLEVBQ3hCLE1BQXVCO1FBRnJCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDbEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7SUFDOUIsQ0FBQztJQUVKOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxPQUFzQjtRQUMzQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDckMsSUFBQSxnQkFBSSxFQUFDLENBQUMsQ0FBQyxFQUNQLElBQUEsZUFBRyxFQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDWixNQUFNLFFBQVEsR0FBRyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7WUFDaEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNoQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNyQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07Z0JBQ3RCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUU7YUFDN0IsQ0FBQyxDQUFDLENBQUM7WUFDSixRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekQsT0FBTyxJQUFJLGtCQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUU7Z0JBQ2pELGNBQWMsRUFBRSxJQUFJO2FBQ3JCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxFQUNGLElBQUEscUJBQVMsRUFBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztJQUNKLENBQUM7SUFFRCwwRUFBMEU7SUFDMUUsV0FBVyxDQUF5QixPQUF5QjtRQUMzRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ3hCLElBQUksQ0FDSCxJQUFBLGFBQU0sRUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxZQUFZLG1CQUFZLENBQUMsRUFDaEQsSUFBQSxxQkFBUyxFQUFDLENBQUMsUUFBMEMsRUFBRSxFQUFFO1lBQ3ZELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBQSx5QkFBUyxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3ZELElBQUksQ0FBQyxJQUFBLGlDQUFVLEdBQUUsQ0FBdUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQzs7QUF4Q1Usc0NBQWE7Ozs7Ozt3QkFBYixhQUFhO0lBSHpCLElBQUEsaUJBQVUsRUFBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyxhQUFhLENBeUN6QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvc2VydmljZXMvdXBsb2FkLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSHR0cENsaWVudCwgSHR0cEV2ZW50LCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlLFxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IGZpbHRlciwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBvYnNlcnZlSm9iIH0gZnJvbSAnYXBwL2hlbHBlcnMvb3BlcmF0b3JzL29ic2VydmUtam9iLm9wZXJhdG9yJztcbmltcG9ydCB7IEFwaUpvYk1ldGhvZCwgQXBpSm9iUmVzcG9uc2UgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9hcGkvYXBpLWpvYi1kaXJlY3RvcnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IEpvYiB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2pvYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgc2VsZWN0Sm9iIH0gZnJvbSAnYXBwL21vZHVsZXMvam9icy9zdG9yZS9qb2Iuc2VsZWN0b3JzJztcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL2F1dGgvYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcFN0YXRlIH0gZnJvbSAnYXBwL3N0b3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBVcGxvYWRPcHRpb25zPE0gZXh0ZW5kcyBBcGlKb2JNZXRob2QgPSBBcGlKb2JNZXRob2Q+IHtcbiAgZmlsZTogRmlsZTtcbiAgbWV0aG9kOiBNO1xuICBwYXJhbXM/OiB1bmtub3duW107XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBVcGxvYWRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBzdG9yZSQ6IFN0b3JlPEFwcFN0YXRlPixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZXBvcnRzIHByb2dyZXNzLlxuICAgKiBZb3UgbmVlZCB0byBmaWx0ZXIgZm9yIGAoZXZlbnQpID0+IGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlYCB0byB3YWl0IGZvciByZXNwb25zZS5cbiAgICovXG4gIHVwbG9hZChvcHRpb25zOiBVcGxvYWRPcHRpb25zKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8dW5rbm93bj4+IHtcbiAgICByZXR1cm4gdGhpcy5hdXRoU2VydmljZS5hdXRoVG9rZW4kLnBpcGUoXG4gICAgICB0YWtlKDEpLFxuICAgICAgbWFwKCh0b2tlbikgPT4ge1xuICAgICAgICBjb25zdCBlbmRQb2ludCA9ICcvX3VwbG9hZD9hdXRoX3Rva2VuPScgKyB0b2tlbjtcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdkYXRhJywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIG1ldGhvZDogb3B0aW9ucy5tZXRob2QsXG4gICAgICAgICAgcGFyYW1zOiBvcHRpb25zLnBhcmFtcyB8fCBbXSxcbiAgICAgICAgfSkpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBvcHRpb25zLmZpbGUsIG9wdGlvbnMuZmlsZS5uYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBIdHRwUmVxdWVzdCgnUE9TVCcsIGVuZFBvaW50LCBmb3JtRGF0YSwge1xuICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgc3dpdGNoTWFwKChyZXEpID0+IHRoaXMuaHR0cC5yZXF1ZXN0KHJlcSkpLFxuICAgICk7XG4gIH1cblxuICAvLyBUT0RPOiBUaGlzIG1heSBiZSBicmVha2luZyBsZXZlbHMgb2YgYWJzdHJhY3Rpb24uIENvbnNpZGVyIHJlZmFjdG9yaW5nLlxuICB1cGxvYWRBc0pvYjxNIGV4dGVuZHMgQXBpSm9iTWV0aG9kPihvcHRpb25zOiBVcGxvYWRPcHRpb25zPE0+KTogT2JzZXJ2YWJsZTxKb2I8QXBpSm9iUmVzcG9uc2U8TT4+PiB7XG4gICAgcmV0dXJuIHRoaXMudXBsb2FkKG9wdGlvbnMpXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpLFxuICAgICAgICBzd2l0Y2hNYXAoKHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8eyBqb2JfaWQ6IG51bWJlciB9PikgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0b3JlJC5zZWxlY3Qoc2VsZWN0Sm9iKHJlc3BvbnNlLmJvZHkuam9iX2lkKSlcbiAgICAgICAgICAgIC5waXBlKG9ic2VydmVKb2IoKSkgYXMgT2JzZXJ2YWJsZTxKb2I8QXBpSm9iUmVzcG9uc2U8TT4+PjtcbiAgICAgICAgfSksXG4gICAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=