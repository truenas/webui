2bf1cf4de958b40ec81d0c47a0a85243
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  MatCheckboxHarness: () => MatCheckboxHarness
});
module.exports = __toCommonJS(testing_exports);
var import_testing = require("@angular/cdk/testing");
var import_coercion = require("@angular/cdk/coercion");
const _MatCheckboxHarness = class _MatCheckboxHarness extends import_testing.ComponentHarness {
  constructor() {
    super(...arguments);
    this._input = this.locatorFor("input");
    this._label = this.locatorFor("label");
    this._inputContainer = this.locatorFor(".mdc-checkbox");
  }
  /**
   * Gets a `HarnessPredicate` that can be used to search for a checkbox with specific attributes.
   * @param options Options for narrowing the search:
   *   - `selector` finds a checkbox whose host element matches the given selector.
   *   - `label` finds a checkbox with specific label text.
   *   - `name` finds a checkbox with specific name.
   * @return a `HarnessPredicate` configured with the given options.
   */
  static with(options = {}) {
    return new import_testing.HarnessPredicate(this, options).addOption("label", options.label, (harness, label) => import_testing.HarnessPredicate.stringMatches(harness.getLabelText(), label)).addOption("name", options.name, (harness, name) => __async(this, null, function* () {
      return (yield harness.getName()) === name;
    })).addOption("checked", options.checked, (harness, checked) => __async(this, null, function* () {
      return (yield harness.isChecked()) == checked;
    })).addOption("disabled", options.disabled, (harness, disabled) => __async(this, null, function* () {
      return (yield harness.isDisabled()) === disabled;
    }));
  }
  /** Whether the checkbox is checked. */
  isChecked() {
    return __async(this, null, function* () {
      const checked = (yield this._input()).getProperty("checked");
      return (0, import_coercion.coerceBooleanProperty)(yield checked);
    });
  }
  /** Whether the checkbox is in an indeterminate state. */
  isIndeterminate() {
    return __async(this, null, function* () {
      const indeterminate = (yield this._input()).getProperty("indeterminate");
      return (0, import_coercion.coerceBooleanProperty)(yield indeterminate);
    });
  }
  /** Whether the checkbox is disabled. */
  isDisabled() {
    return __async(this, null, function* () {
      const input = yield this._input();
      const disabled = yield input.getAttribute("disabled");
      if (disabled !== null) {
        return (0, import_coercion.coerceBooleanProperty)(disabled);
      }
      return (yield input.getAttribute("aria-disabled")) === "true";
    });
  }
  /** Whether the checkbox is required. */
  isRequired() {
    return __async(this, null, function* () {
      const required = (yield this._input()).getProperty("required");
      return (0, import_coercion.coerceBooleanProperty)(yield required);
    });
  }
  /** Whether the checkbox is valid. */
  isValid() {
    return __async(this, null, function* () {
      const invalid = (yield this.host()).hasClass("ng-invalid");
      return !(yield invalid);
    });
  }
  /** Gets the checkbox's name. */
  getName() {
    return __async(this, null, function* () {
      return (yield this._input()).getAttribute("name");
    });
  }
  /** Gets the checkbox's value. */
  getValue() {
    return __async(this, null, function* () {
      return (yield this._input()).getProperty("value");
    });
  }
  /** Gets the checkbox's aria-label. */
  getAriaLabel() {
    return __async(this, null, function* () {
      return (yield this._input()).getAttribute("aria-label");
    });
  }
  /** Gets the checkbox's aria-labelledby. */
  getAriaLabelledby() {
    return __async(this, null, function* () {
      return (yield this._input()).getAttribute("aria-labelledby");
    });
  }
  /** Gets the checkbox's label text. */
  getLabelText() {
    return __async(this, null, function* () {
      return (yield this._label()).text();
    });
  }
  /** Focuses the checkbox. */
  focus() {
    return __async(this, null, function* () {
      return (yield this._input()).focus();
    });
  }
  /** Blurs the checkbox. */
  blur() {
    return __async(this, null, function* () {
      return (yield this._input()).blur();
    });
  }
  /** Whether the checkbox is focused. */
  isFocused() {
    return __async(this, null, function* () {
      return (yield this._input()).isFocused();
    });
  }
  /**
   * Toggles the checked state of the checkbox.
   *
   * Note: This attempts to toggle the checkbox as a user would, by clicking it. Therefore if you
   * are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method
   * might not have the expected result.
   */
  toggle() {
    return __async(this, null, function* () {
      const elToClick = yield (yield this.isDisabled()) ? this._inputContainer() : this._input();
      return elToClick.click();
    });
  }
  /**
   * Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing
   * nothing if it is already checked.
   *
   * Note: This attempts to check the checkbox as a user would, by clicking it. Therefore if you
   * are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method
   * might not have the expected result.
   */
  check() {
    return __async(this, null, function* () {
      if (!(yield this.isChecked())) {
        yield this.toggle();
      }
    });
  }
  /**
   * Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing
   * nothing if it is already unchecked.
   *
   * Note: This attempts to uncheck the checkbox as a user would, by clicking it. Therefore if you
   * are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method
   * might not have the expected result.
   */
  uncheck() {
    return __async(this, null, function* () {
      if (yield this.isChecked()) {
        yield this.toggle();
      }
    });
  }
};
_MatCheckboxHarness.hostSelector = ".mat-mdc-checkbox";
let MatCheckboxHarness = _MatCheckboxHarness;
