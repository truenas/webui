{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-icon/ix-icon.component.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wCAUuB;AACvB,iDAEgC;AAChC,+FAAyF;AACzF,2FAA8E;;AAE9E;;;;;;;;;GASG;AAeI,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,cAAO;IAY1C,IAAY,QAAQ;QAClB,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,OAAO,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,IAAY,YAAY,CAAC,QAAgB;QACvC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,GAAG,QAAQ,CAAC;IACtD,CAAC;IACD,IAAY,YAAY;;QACtB,OAAO,MAAA,MAAA,IAAI,CAAC,WAAW,0CAAE,aAAa,0CAAE,SAAS,CAAC;IACpD,CAAC;IAED,YACE,UAAmC,EACnC,YAA4B,EACF,UAAkB,EACjB,QAAyB,EAC3C,YAAqC,EACA,QAAgC;QAE9E,KAAK,CAAC,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QAHrE,iBAAY,GAAZ,YAAY,CAAyB;QAtChD,aAAQ,GAAG,KAAK;oBAEA,IAAA,YAAK,GAAU;IAwC/B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/B,CAAC;IAEQ,QAAQ;QACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,KAAK,CAAC,QAAQ,EAAE,CAAC;IACnB,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAEO,UAAU,CAAC,QAA4B;QAC7C,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO;QACT,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC1B,CAAC;;AApEU,0CAAe;;;;yCA0CvB,gBAAS,SAAC,aAAa;yDACvB,aAAM,SAAC,wBAAiB;;+DAExB,eAAQ,YAAI,aAAM,SAAC,+BAAwB;;;uBAzC7C,YAAK,YACL,kBAAW,SAAC,iBAAiB;;;0BALnB,eAAe;IAd3B,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,QAAQ;QAClB,qEAAqE;QACrE,IAAI,EAAE;YACJ,KAAK,EAAE,SAAS;YAChB,2BAA2B,EAAE,oCAAoC;YACjE,gCAAgC,EAAE,wCAAwC;SAC3E;QAED,6CAAqC;QACrC,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;KACjB,CAAC;GACW,eAAe,CAqE3B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-icon/ix-icon.component.ts"],"sourcesContent":["import {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef, HostBinding,\n  Inject, Input, input,\n  OnChanges,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  MatIcon, MatIconDefaultOptions, MatIconLocation, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION,\n} from '@angular/material/icon';\nimport { IconErrorHandlerService } from 'app/modules/ix-icon/icon-error-handler.service';\nimport { IxIconRegistry } from 'app/modules/ix-icon/ix-icon-registry.service';\n\n/**\n * IxIcon component extends MatIcon\n * It provides single interface to access all icons in the app.\n * You can use:\n * - Google's material icons `<ix-icon name=\"left-arrow\"></ix-icon>`\n * - material design icons (https://pictogrammers.com/library/mdi/) `<ix-icon name=\"mdi-left-arrow\"></ix-icon>`\n * - custom icons `<ix-icon name=\"ix-left-arrow\"></ix-icon>` added to `src/assets/icons/custom`.\n *\n * More information on how icon sprite works is available in the assets/icons/README.md.\n */\n@Component({\n  selector: 'ix-icon',\n  exportAs: 'ixIcon',\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    class: 'ix-icon',\n    '[attr.data-mat-icon-name]': '(_svgIcon && _svgName) || fontIcon',\n    '[attr.data-mat-icon-namespace]': '(_svgIcon && _svgNamespace) || fontSet',\n  },\n  styleUrls: ['./ix-icon.component.scss'],\n  templateUrl: 'ix-icon.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n})\nexport class IxIconComponent extends MatIcon implements OnInit, OnChanges, AfterContentInit {\n  /**\n   * Do not apply ordinary 24px size to the icon.\n   */\n  @Input()\n  @HostBinding('class.full-size')\n  fullSize = false;\n\n  readonly name = input<string>();\n\n  override _elementRef: ElementRef<HTMLElement>;\n\n  private get iconName(): string | undefined {\n    if (this.name()) {\n      return this.name();\n    }\n\n    if (this.iconLigature) {\n      return this.iconLigature;\n    }\n\n    if (this.svgIcon) {\n      return this.svgIcon;\n    }\n\n    if (this.fontIcon) {\n      return this.fontIcon;\n    }\n\n    return undefined;\n  }\n\n  private set iconLigature(iconName: string) {\n    this._elementRef.nativeElement.innerText = iconName;\n  }\n  private get iconLigature(): string {\n    return this._elementRef?.nativeElement?.innerText;\n  }\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    iconRegistry: IxIconRegistry,\n    @Attribute('aria-hidden') ariaHidden: string,\n    @Inject(MAT_ICON_LOCATION) location: MatIconLocation,\n    readonly errorHandler: IconErrorHandlerService,\n    @Optional() @Inject(MAT_ICON_DEFAULT_OPTIONS) defaults?: MatIconDefaultOptions,\n  ) {\n    super(elementRef, iconRegistry, ariaHidden, location, errorHandler, defaults);\n  }\n\n  ngOnChanges(): void {\n    this.updateIcon(this.name());\n  }\n\n  override ngOnInit(): void {\n    this.updateIcon(this.iconName);\n    super.ngOnInit();\n  }\n\n  ngAfterContentInit(): void {\n    this.updateIcon(this.iconName);\n  }\n\n  private updateIcon(iconName: string | undefined): void {\n    if (!iconName) {\n      return;\n    }\n    this.svgIcon = iconName;\n  }\n}\n"],"version":3}