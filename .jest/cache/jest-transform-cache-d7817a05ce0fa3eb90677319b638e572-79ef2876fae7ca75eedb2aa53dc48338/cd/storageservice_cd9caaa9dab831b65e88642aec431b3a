6c1bdeb963cd56aa8c97695b634fde83
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageService = void 0;
const core_1 = require("@angular/core");
const operators_1 = require("rxjs/operators");
const bytes_constant_1 = require("app/constants/bytes.constant");
const v_dev_type_enum_1 = require("app/enums/v-dev-type.enum");
const ws_service_1 = require("app/services/ws.service");
let StorageService = class StorageService {
    constructor(ws) {
        this.ws = ws;
        this.diskResource = 'disk.query';
    }
    filesystemStat(path) {
        return this.ws.call('filesystem.stat', [path]);
    }
    listDisks() {
        return this.ws.call(this.diskResource, []);
    }
    getDatasetNameOptions() {
        return this.ws
            .call('pool.filesystem_choices')
            .pipe((0, operators_1.map)((response) => response.map((value) => ({ label: value, value }))));
    }
    /**
     * @param path The path of the dataset excluding "/mnt/"
     */
    isDatasetTopLevel(path) {
        if (typeof path !== 'string') {
            throw new Error('isDatasetTopLevel received "path" parameter that is not of type "string."');
        }
        /**
         * Strip leading forward slash if present
         * /zpool/d0 -> zpool/d0
         */
        path = path.startsWith('/') ? path.substring(1) : path;
        return !path.includes('/');
    }
    getRedundancyLevel(vdev) {
        switch (vdev.type) {
            case v_dev_type_enum_1.TopologyItemType.Disk:
            case v_dev_type_enum_1.TopologyItemType.Stripe:
                return 0;
            case v_dev_type_enum_1.TopologyItemType.Mirror:
                return vdev.children.length - 1;
            case v_dev_type_enum_1.TopologyItemType.Raidz:
            case v_dev_type_enum_1.TopologyItemType.Raidz1:
                return 1;
            case v_dev_type_enum_1.TopologyItemType.Raidz2:
                return 2;
            case v_dev_type_enum_1.TopologyItemType.Raidz3:
                return 3;
            default:
                // VDEV type property also includes values unrelated to layout.
                return -1;
        }
    }
    getVdevWidths(vdevs) {
        const allVdevWidths = new Set(); // There should only be one value
        vdevs === null || vdevs === void 0 ? void 0 : vdevs.forEach((vdev) => {
            let vdevWidthCounter = 0;
            if (vdev.type === v_dev_type_enum_1.TopologyItemType.Disk || vdev.type === v_dev_type_enum_1.TopologyItemType.Stripe || vdev.children.length === 0) {
                // Width of single disk VDEVs should be 1
                allVdevWidths.add(1);
            }
            else {
                vdev.children.forEach(() => {
                    vdevWidthCounter += 1;
                });
                allVdevWidths.add(vdevWidthCounter);
            }
        });
        return allVdevWidths;
    }
    isMixedWidth(allVdevWidths) {
        return allVdevWidths.size > 1;
    }
    // Get usable space on VDEV.
    getVdevCapacities(vdevs) {
        const allVdevCapacities = new Set(); // There should only be one value
        vdevs === null || vdevs === void 0 ? void 0 : vdevs.forEach((vdev) => {
            allVdevCapacities.add(vdev.stats.size);
        });
        return allVdevCapacities;
    }
    // Check to see if every VDEV has the same capacity. Best practices dictate every vdev should be uniform
    isMixedVdevCapacity(allVdevCapacities) {
        const max = Math.max(...allVdevCapacities);
        const min = Math.min(...allVdevCapacities);
        const fivePercentOfMax = max * (5 / 100);
        return min + fivePercentOfMax + bytes_constant_1.GiB * 2 < max;
    }
    getVdevDiskCapacities(vdevs, disks) {
        const allDiskCapacities = [];
        vdevs === null || vdevs === void 0 ? void 0 : vdevs.forEach((vdev) => {
            const vdevDiskCapacities = new Set(); // There should only be one value
            if (vdev.children.length) {
                vdev.children.forEach((child) => {
                    const diskIndex = disks === null || disks === void 0 ? void 0 : disks.findIndex((disk) => disk.name === child.disk);
                    if (diskIndex >= 0 && disks[diskIndex].size) {
                        vdevDiskCapacities.add(disks[diskIndex].size);
                    }
                });
            }
            else {
                // Topology items of type DISK will not have children
                vdevDiskCapacities.add(vdev.stats.size);
            }
            allDiskCapacities.push(vdevDiskCapacities);
        });
        return allDiskCapacities;
    }
    // Check to see if any individual VDEVs have non-uniform disk sizes.
    // Every disk in a VDEV should ideally be the same size
    isMixedVdevDiskCapacity(allVdevDiskCapacities) {
        const isMixed = allVdevDiskCapacities.filter((vdev) => vdev.size > 1);
        return isMixed.length > 0;
    }
    getVdevTypes(vdevs) {
        const vdevTypes = new Set();
        vdevs === null || vdevs === void 0 ? void 0 : vdevs.forEach((vdev) => {
            vdevTypes.add(vdev.type);
        });
        return vdevTypes;
    }
    isMixedVdevType(vdevTypes) {
        return vdevTypes.size > 1;
    }
    validateVdevs(category, vdevs, disks) {
        const warnings = [];
        let isMixedVdevCapacity = false;
        let isMixedDiskCapacity = false;
        let isMixedWidth = false;
        let isMixedLayout = false;
        // Check for non-uniform VDEV Capacities
        const allVdevCapacities = this.getVdevCapacities(vdevs); // There should only be one value
        isMixedVdevCapacity = this.isMixedVdevCapacity(allVdevCapacities);
        // Check for non-uniform Disk Capacities within each VDEV
        const allVdevDiskCapacities = this.getVdevDiskCapacities(vdevs, disks);
        isMixedDiskCapacity = this.isMixedVdevDiskCapacity(allVdevDiskCapacities);
        // Check VDEV Widths
        const allVdevWidths = this.getVdevWidths(vdevs); // There should only be one value
        isMixedWidth = this.isMixedWidth(allVdevWidths);
        // While not recommended, ZFS does allow creating a pool with mixed VDEV types.
        // Even though the UI does not allow such pools to be created,
        // users might still try to import such a pool.
        const allVdevLayouts = this.getVdevTypes(vdevs);
        isMixedLayout = this.isMixedVdevType(allVdevLayouts);
        if (vdevs.length) {
            if (isMixedLayout) {
                warnings.push(v_dev_type_enum_1.TopologyWarning.MixedVdevLayout);
            }
            if (isMixedDiskCapacity) {
                warnings.push(v_dev_type_enum_1.TopologyWarning.MixedDiskCapacity);
            }
            if (isMixedVdevCapacity) {
                warnings.push(v_dev_type_enum_1.TopologyWarning.MixedVdevCapacity);
            }
            if (isMixedWidth) {
                warnings.push(v_dev_type_enum_1.TopologyWarning.MixedVdevWidth);
            }
            // Check Redundancy
            if ([v_dev_type_enum_1.VdevType.Data, v_dev_type_enum_1.VdevType.Dedup, v_dev_type_enum_1.VdevType.Special].includes(category)
                && this.hasZeroRedundancyLevelVdev(vdevs)) {
                warnings.push(v_dev_type_enum_1.TopologyWarning.NoRedundancy);
            }
        }
        return warnings;
    }
    hasZeroRedundancyLevelVdev(vdevs) {
        return vdevs.filter((vdev) => this.getRedundancyLevel(vdev) === 0).length > 0;
    }
};
exports.StorageService = StorageService;
StorageService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.StorageService = StorageService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], StorageService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,