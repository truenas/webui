{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAA8F;AAC9F,oEAA+E;AAE/E,kFAA8E;AAM9E,MAAa,oBAAqB,SAAQ,0BAAgB;IAA1D;;QAQE,6BAAwB,GAAG,IAAI,CAAC,UAAU,CAAC,+BAAqB,CAAC,CAAC;QAClE,iBAAY,GAAG,4BAAY,CAAC;IA2B9B,CAAC;IAjCC,MAAM,CAAC,IAAI,CAAC,OAAoC;QAC9C,OAAO,IAAI,0BAAgB,CAAC,oBAAoB,EAAE,OAAO,CAAC;aACvD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,0BAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1H,CAAC;IAKK,YAAY;;YAChB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YAC/C,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;QAC9C,CAAC;KAAA;IAEK,QAAQ;;YACZ,OAAO,CAAC,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7D,CAAC;KAAA;IAEK,QAAQ,CAAC,KAAc;;YAC3B,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YACpE,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,qBAAqB,CAAC,KAAK,EAAE,CAAC;YACvC,CAAC;YAED,OAAO,qBAAqB,CAAC,OAAO,EAAE,CAAC;QACzC,CAAC;KAAA;IAEK,UAAU;;YACd,OAAO,CAAC,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;QAC9D,CAAC;KAAA;IAEK,MAAM;;YACV,OAAO,CAAC,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;QAC1D,CAAC;KAAA;;AAnCH,oDAoCC;AAnCiB,iCAAY,GAAG,iBAAiB,AAApB,CAAqB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.harness.ts"],"sourcesContent":["import { BaseHarnessFilters, ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { MatSlideToggleHarness } from '@angular/material/slide-toggle/testing';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\n\nexport interface IxSlideToggleHarnessFilters extends BaseHarnessFilters {\n  label: string;\n}\n\nexport class IxSlideToggleHarness extends ComponentHarness implements IxFormControlHarness {\n  static readonly hostSelector = 'ix-slide-toggle';\n\n  static with(options: IxSlideToggleHarnessFilters): HarnessPredicate<IxSlideToggleHarness> {\n    return new HarnessPredicate(IxSlideToggleHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getMatSlideToggleHarness = this.locatorFor(MatSlideToggleHarness);\n  getErrorText = getErrorText;\n\n  async getLabelText(): Promise<string> {\n    const label = await this.locatorFor('label')();\n    return label.text({ exclude: '.required' });\n  }\n\n  async getValue(): Promise<boolean> {\n    return (await this.getMatSlideToggleHarness()).isChecked();\n  }\n\n  async setValue(value: boolean): Promise<void> {\n    const matSlideToggleHarness = await this.getMatSlideToggleHarness();\n    if (value) {\n      return matSlideToggleHarness.check();\n    }\n\n    return matSlideToggleHarness.uncheck();\n  }\n\n  async isDisabled(): Promise<boolean> {\n    return (await this.getMatSlideToggleHarness()).isDisabled();\n  }\n\n  async toggle(): Promise<void> {\n    return (await this.getMatSlideToggleHarness()).toggle();\n  }\n}\n"],"version":3}