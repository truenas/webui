{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/token-last-used.service.ts","mappings":";;;;;;;;;AAAA,wCAAmD;AACnD,yDAAqE;AACrE,+BAIc;AACd,+DAA8D;AAC9D,+EAAkE;AAClE,6DAAmD;AAEnD,wDAA2D;AAMpD,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAG/B;;MAEE;IACF,IAAI,sBAAsB;QACxB,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAC7B,IAAA,UAAG,EAAC,CAAC,aAAa,EAAE,EAAE;YACpB,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnB,OAAO,KAAK,CAAC;YACf,CAAC;YAED,MAAM,wBAAwB,GAAG,CAAC,GAAG,+BAAe,CAAC;YACrD,MAAM,iBAAiB,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,CAAC;YAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE/B,OAAO,WAAW,GAAG,iBAAiB,IAAI,wBAAwB,CAAC;QACrE,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,YACU,EAAoB,EACJ,MAAc;QAD9B,OAAE,GAAF,EAAE,CAAkB;QACJ,WAAM,GAAN,MAAM,CAAQ;QAvBhC,mBAAc,GAAG,IAAI,sBAAe,CAAS,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;IAyBxG,CAAC;IAED,uBAAuB,CAAC,KAA+B;QACrD,KAAK,CAAC,IAAI,CACR,IAAA,aAAM,EAAC,OAAO,CAAC,EACf,IAAA,2BAAO,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,EACzC,IAAA,gBAAS,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,IAAA,mBAAY,EAAC,IAAI,CAAC,CAAC,CAAC,EACvE,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,EACrC,IAAA,8BAAc,EAAC,IAAI,CAAC,CACrB,CAAC,SAAS,EAAE,CAAC;IAChB,CAAC;IAED,mBAAmB;QACjB,MAAM,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QACjE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC;;AA/CU,oDAAoB;;;yCAwB5B,aAAM,SAAC,sBAAM;;+BAxBL,oBAAoB;IAJhC,IAAA,4BAAY,GAAE;IACd,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,oBAAoB,CAgDhC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/token-last-used.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  BehaviorSubject,\n  debounceTime,\n  filter, map, Observable, switchMap, tap,\n} from 'rxjs';\nimport { oneMinuteMillis } from 'app/constants/time.constant';\nimport { tapOnce } from 'app/helpers/operators/tap-once.operator';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { LoggedInUser } from 'app/interfaces/ds-cache.interface';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class TokenLastUsedService {\n  private tokenLastUsed$ = new BehaviorSubject<string>(this.window.localStorage.getItem('tokenLastUsed'));\n\n  /**\n   * Check if token was used no more than 5 minutes ago (default )\n  */\n  get isTokenWithinTimeline$(): Observable<boolean> {\n    return this.tokenLastUsed$.pipe(\n      map((tokenLastUsed) => {\n        if (!tokenLastUsed) {\n          return false;\n        }\n\n        const tokenRecentUsageLifetime = 5 * oneMinuteMillis;\n        const tokenLastUsedTime = new Date(tokenLastUsed).getTime();\n        const currentTime = Date.now();\n\n        return currentTime - tokenLastUsedTime <= tokenRecentUsageLifetime;\n      }),\n    );\n  }\n\n  constructor(\n    private ws: WebSocketService,\n    @Inject(WINDOW) private window: Window,\n  ) {\n  }\n\n  setupTokenLastUsedValue(user$: Observable<LoggedInUser>): void {\n    user$.pipe(\n      filter(Boolean),\n      tapOnce(() => this.updateTokenLastUsed()),\n      switchMap(() => this.ws.getWebSocketStream$().pipe(debounceTime(5000))),\n      tap(() => this.updateTokenLastUsed()),\n      untilDestroyed(this),\n    ).subscribe();\n  }\n\n  updateTokenLastUsed(): void {\n    const tokenLastUsed = new Date().toISOString();\n    this.window.localStorage.setItem('tokenLastUsed', tokenLastUsed);\n    this.tokenLastUsed$.next(tokenLastUsed);\n  }\n\n  clearTokenLastUsed(): void {\n    this.tokenLastUsed$.next(null);\n    this.window.localStorage.removeItem('tokenLastUsed');\n  }\n}\n"],"version":3}