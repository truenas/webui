c09d260a2acbe93bc743b6b9e3bcbeb6
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxSlideToggleHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/slide-toggle/testing");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxSlideToggleHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getMatSlideToggleHarness = this.locatorFor(testing_2.MatSlideToggleHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxSlideToggleHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorFor('label')();
            return label.text({ exclude: '.required' });
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatSlideToggleHarness()).isChecked();
        });
    }
    setValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const matSlideToggleHarness = yield this.getMatSlideToggleHarness();
            if (value) {
                return matSlideToggleHarness.check();
            }
            return matSlideToggleHarness.uncheck();
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatSlideToggleHarness()).isDisabled();
        });
    }
    toggle() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatSlideToggleHarness()).toggle();
        });
    }
}
exports.IxSlideToggleHarness = IxSlideToggleHarness;
IxSlideToggleHarness.hostSelector = 'ix-slide-toggle';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zbGlkZS10b2dnbGUvaXgtc2xpZGUtdG9nZ2xlLmhhcm5lc3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsa0RBQThGO0FBQzlGLG9FQUErRTtBQUUvRSxrRkFBOEU7QUFNOUUsTUFBYSxvQkFBcUIsU0FBUSwwQkFBZ0I7SUFBMUQ7O1FBUUUsNkJBQXdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQywrQkFBcUIsQ0FBQyxDQUFDO1FBQ2xFLGlCQUFZLEdBQUcsNEJBQVksQ0FBQztJQTJCOUIsQ0FBQztJQWpDQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQW9DO1FBQzlDLE9BQU8sSUFBSSwwQkFBZ0IsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUM7YUFDdkQsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFILENBQUM7SUFLSyxZQUFZOztZQUNoQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMvQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUM5QyxDQUFDO0tBQUE7SUFFSyxRQUFROztZQUNaLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDN0QsQ0FBQztLQUFBO0lBRUssUUFBUSxDQUFDLEtBQWM7O1lBQzNCLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztZQUNwRSxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUNWLE9BQU8scUJBQXFCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDdkMsQ0FBQztZQUVELE9BQU8scUJBQXFCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzlELENBQUM7S0FBQTtJQUVLLE1BQU07O1lBQ1YsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMxRCxDQUFDO0tBQUE7O0FBbkNILG9EQW9DQztBQW5DaUIsaUNBQVksR0FBRyxpQkFBaUIsQUFBcEIsQ0FBcUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zbGlkZS10b2dnbGUvaXgtc2xpZGUtdG9nZ2xlLmhhcm5lc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUhhcm5lc3NGaWx0ZXJzLCBDb21wb25lbnRIYXJuZXNzLCBIYXJuZXNzUHJlZGljYXRlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWF0U2xpZGVUb2dnbGVIYXJuZXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2xpZGUtdG9nZ2xlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSXhGb3JtQ29udHJvbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9pbnRlcmZhY2VzL2l4LWZvcm0tY29udHJvbC1oYXJuZXNzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBnZXRFcnJvclRleHQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy91dGlscy9oYXJuZXNzLnV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBJeFNsaWRlVG9nZ2xlSGFybmVzc0ZpbHRlcnMgZXh0ZW5kcyBCYXNlSGFybmVzc0ZpbHRlcnMge1xuICBsYWJlbDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhTbGlkZVRvZ2dsZUhhcm5lc3MgZXh0ZW5kcyBDb21wb25lbnRIYXJuZXNzIGltcGxlbWVudHMgSXhGb3JtQ29udHJvbEhhcm5lc3Mge1xuICBzdGF0aWMgcmVhZG9ubHkgaG9zdFNlbGVjdG9yID0gJ2l4LXNsaWRlLXRvZ2dsZSc7XG5cbiAgc3RhdGljIHdpdGgob3B0aW9uczogSXhTbGlkZVRvZ2dsZUhhcm5lc3NGaWx0ZXJzKTogSGFybmVzc1ByZWRpY2F0ZTxJeFNsaWRlVG9nZ2xlSGFybmVzcz4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZShJeFNsaWRlVG9nZ2xlSGFybmVzcywgb3B0aW9ucylcbiAgICAgIC5hZGRPcHRpb24oJ2xhYmVsJywgb3B0aW9ucy5sYWJlbCwgKGhhcm5lc3MsIGxhYmVsKSA9PiBIYXJuZXNzUHJlZGljYXRlLnN0cmluZ01hdGNoZXMoaGFybmVzcy5nZXRMYWJlbFRleHQoKSwgbGFiZWwpKTtcbiAgfVxuXG4gIGdldE1hdFNsaWRlVG9nZ2xlSGFybmVzcyA9IHRoaXMubG9jYXRvckZvcihNYXRTbGlkZVRvZ2dsZUhhcm5lc3MpO1xuICBnZXRFcnJvclRleHQgPSBnZXRFcnJvclRleHQ7XG5cbiAgYXN5bmMgZ2V0TGFiZWxUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgbGFiZWwgPSBhd2FpdCB0aGlzLmxvY2F0b3JGb3IoJ2xhYmVsJykoKTtcbiAgICByZXR1cm4gbGFiZWwudGV4dCh7IGV4Y2x1ZGU6ICcucmVxdWlyZWQnIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0VmFsdWUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldE1hdFNsaWRlVG9nZ2xlSGFybmVzcygpKS5pc0NoZWNrZWQoKTtcbiAgfVxuXG4gIGFzeW5jIHNldFZhbHVlKHZhbHVlOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbWF0U2xpZGVUb2dnbGVIYXJuZXNzID0gYXdhaXQgdGhpcy5nZXRNYXRTbGlkZVRvZ2dsZUhhcm5lc3MoKTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBtYXRTbGlkZVRvZ2dsZUhhcm5lc3MuY2hlY2soKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0U2xpZGVUb2dnbGVIYXJuZXNzLnVuY2hlY2soKTtcbiAgfVxuXG4gIGFzeW5jIGlzRGlzYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldE1hdFNsaWRlVG9nZ2xlSGFybmVzcygpKS5pc0Rpc2FibGVkKCk7XG4gIH1cblxuICBhc3luYyB0b2dnbGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldE1hdFNsaWRlVG9nZ2xlSGFybmVzcygpKS50b2dnbGUoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9