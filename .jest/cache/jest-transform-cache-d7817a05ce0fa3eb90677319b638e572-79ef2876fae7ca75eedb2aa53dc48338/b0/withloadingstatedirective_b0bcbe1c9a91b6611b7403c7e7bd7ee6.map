{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/loader/directives/with-loading-state/with-loading-state.directive.ts","mappings":";;;;;;;;;AAAA,wCAEuB;AACvB,+BAA8D;AAE9D,qKAEsH;AACtH,wKAEwH;AAExH;;;;;;;;GAQG;AAKI,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IAGpC,YACU,WAAoD,EACpD,gBAAkC,EAClC,GAAsB;QAFtB,gBAAW,GAAX,WAAW,CAAyC;QACpD,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,QAAG,GAAH,GAAG,CAAmB;IAC7B,CAAC;QAE6B,KAAK,CAAC,MAAqD;;QAC1F,MAAA,IAAI,CAAC,kBAAkB,0CAAE,WAAW,EAAE,CAAC;QAEvC,IAAI,IAAA,mBAAY,EAAC,MAAM,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,kBAAkB,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAClF,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,WAAW;;QACT,MAAA,IAAI,CAAC,kBAAkB,0CAAE,WAAW,EAAE,CAAC;IACzC,CAAC;IAEO,WAAW,CAAC,KAAsB;QACxC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAE9B,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,KAAK,CAAC,SAAS;gBAClB,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,qEAA+B,CAAC,CAAC;gBACvE,MAAM;YACR,KAAK,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,mEAA8B,CAAC,CAAC;gBAC7F,cAAc,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;gBAC5C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACtD,MAAM;YACR,CAAC;YACD;gBACE,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE;oBACzD,SAAS,EAAE,KAAK,CAAC,KAAK;oBACtB,kBAAkB,EAAE,KAAK,CAAC,KAAK;iBAChC,CAAC,CAAC;QACP,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,sBAAsB,CAC3B,SAAuC,EACvC,OAAgB;QAEhB,OAAO,IAAI,CAAC;IACd,CAAC;;AAnDU,8DAAyB;;;;;;;oBASnC,YAAK,SAAC,oBAAoB;;oCAThB,yBAAyB;IAJrC,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,UAAU,EAAE,IAAI;KACjB,CAAC;GACW,yBAAyB,CAoDrC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/loader/directives/with-loading-state/with-loading-state.directive.ts"],"sourcesContent":["import {\n  ChangeDetectorRef, Directive, Input, OnDestroy, TemplateRef, ViewContainerRef,\n} from '@angular/core';\nimport { isObservable, Observable, Subscription } from 'rxjs';\nimport { LoadingState } from 'app/helpers/operators/to-loading-state.helper';\nimport {\n  WithLoadingStateErrorComponent,\n} from 'app/modules/loader/directives/with-loading-state/with-loading-state-error/with-loading-state-error.component';\nimport {\n  WithLoadingStateLoaderComponent,\n} from 'app/modules/loader/directives/with-loading-state/with-loading-state-loader/with-loading-state-loader.component';\n\n/**\n * Shows inline skeleton loader, error or content depending on the loading state.\n * Designed to be used with toLoadingState pipe.\n *\n * Usage:\n * ```\n * <div *ixWithLoadingState=\"value$ as value\">{{ value }}</div>\n * ```\n */\n@Directive({\n  selector: '[ixWithLoadingState]',\n  standalone: true,\n})\nexport class WithLoadingStateDirective<V = unknown> implements OnDestroy {\n  renderSubscription: Subscription;\n\n  constructor(\n    private templateRef: TemplateRef<WithLoadingStateContext<V>>,\n    private viewContainerRef: ViewContainerRef,\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  @Input('ixWithLoadingState') set state(state$: LoadingState<V> | Observable<LoadingState<V>>) {\n    this.renderSubscription?.unsubscribe();\n\n    if (isObservable(state$)) {\n      this.renderSubscription = state$?.subscribe((state) => this.renderState(state));\n    } else {\n      this.renderState(state$);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.renderSubscription?.unsubscribe();\n  }\n\n  private renderState(state: LoadingState<V>): void {\n    this.viewContainerRef.clear();\n\n    switch (true) {\n      case state.isLoading:\n        this.viewContainerRef.createComponent(WithLoadingStateLoaderComponent);\n        break;\n      case Boolean(state.error): {\n        const errorComponent = this.viewContainerRef.createComponent(WithLoadingStateErrorComponent);\n        errorComponent.instance.error = state.error;\n        this.viewContainerRef.insert(errorComponent.hostView);\n        break;\n      }\n      default:\n        this.viewContainerRef.createEmbeddedView(this.templateRef, {\n          $implicit: state.value,\n          ixWithLoadingState: state.value,\n        });\n    }\n\n    this.cdr.markForCheck();\n  }\n\n  static ngTemplateContextGuard<V>(\n    directive: WithLoadingStateDirective<V>,\n    context: unknown,\n  ): context is WithLoadingStateContext<V> {\n    return true;\n  }\n}\n\nexport interface WithLoadingStateContext<V> {\n  $implicit: V;\n  ixWithLoadingState: V;\n}\n"],"version":3}