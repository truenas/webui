ad25f84aa4b9f19697ae2d36b4a4d658
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithLoadingStateDirective = void 0;
const core_1 = require("@angular/core");
const rxjs_1 = require("rxjs");
const with_loading_state_error_component_1 = require("app/modules/loader/directives/with-loading-state/with-loading-state-error/with-loading-state-error.component");
const with_loading_state_loader_component_1 = require("app/modules/loader/directives/with-loading-state/with-loading-state-loader/with-loading-state-loader.component");
/**
 * Shows inline skeleton loader, error or content depending on the loading state.
 * Designed to be used with toLoadingState pipe.
 *
 * Usage:
 * ```
 * <div *ixWithLoadingState="value$ as value">{{ value }}</div>
 * ```
 */
let WithLoadingStateDirective = class WithLoadingStateDirective {
    constructor(templateRef, viewContainerRef, cdr) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.cdr = cdr;
    }
    set state(state$) {
        var _a;
        (_a = this.renderSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        if ((0, rxjs_1.isObservable)(state$)) {
            this.renderSubscription = state$ === null || state$ === void 0 ? void 0 : state$.subscribe((state) => this.renderState(state));
        }
        else {
            this.renderState(state$);
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.renderSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    renderState(state) {
        this.viewContainerRef.clear();
        switch (true) {
            case state.isLoading:
                this.viewContainerRef.createComponent(with_loading_state_loader_component_1.WithLoadingStateLoaderComponent);
                break;
            case Boolean(state.error): {
                const errorComponent = this.viewContainerRef.createComponent(with_loading_state_error_component_1.WithLoadingStateErrorComponent);
                errorComponent.instance.error = state.error;
                this.viewContainerRef.insert(errorComponent.hostView);
                break;
            }
            default:
                this.viewContainerRef.createEmbeddedView(this.templateRef, {
                    $implicit: state.value,
                    ixWithLoadingState: state.value,
                });
        }
        this.cdr.markForCheck();
    }
    static ngTemplateContextGuard(directive, context) {
        return true;
    }
};
exports.WithLoadingStateDirective = WithLoadingStateDirective;
WithLoadingStateDirective.ctorParameters = () => [
    { type: core_1.TemplateRef },
    { type: core_1.ViewContainerRef },
    { type: core_1.ChangeDetectorRef }
];
WithLoadingStateDirective.propDecorators = {
    state: [{ type: core_1.Input, args: ['ixWithLoadingState',] }]
};
exports.WithLoadingStateDirective = WithLoadingStateDirective = __decorate([
    (0, core_1.Directive)({
        selector: '[ixWithLoadingState]',
        standalone: true,
    })
], WithLoadingStateDirective);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvbG9hZGVyL2RpcmVjdGl2ZXMvd2l0aC1sb2FkaW5nLXN0YXRlL3dpdGgtbG9hZGluZy1zdGF0ZS5kaXJlY3RpdmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBRXVCO0FBQ3ZCLCtCQUE4RDtBQUU5RCxxS0FFc0g7QUFDdEgsd0tBRXdIO0FBRXhIOzs7Ozs7OztHQVFHO0FBS0ksSUFBTSx5QkFBeUIsR0FBL0IsTUFBTSx5QkFBeUI7SUFHcEMsWUFDVSxXQUFvRCxFQUNwRCxnQkFBa0MsRUFDbEMsR0FBc0I7UUFGdEIsZ0JBQVcsR0FBWCxXQUFXLENBQXlDO1FBQ3BELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsUUFBRyxHQUFILEdBQUcsQ0FBbUI7SUFDN0IsQ0FBQztRQUU2QixLQUFLLENBQUMsTUFBcUQ7O1FBQzFGLE1BQUEsSUFBSSxDQUFDLGtCQUFrQiwwQ0FBRSxXQUFXLEVBQUUsQ0FBQztRQUV2QyxJQUFJLElBQUEsbUJBQVksRUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbEYsQ0FBQzthQUFNLENBQUM7WUFDTixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDO0lBRUQsV0FBVzs7UUFDVCxNQUFBLElBQUksQ0FBQyxrQkFBa0IsMENBQUUsV0FBVyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFzQjtRQUN4QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsUUFBUSxJQUFJLEVBQUUsQ0FBQztZQUNiLEtBQUssS0FBSyxDQUFDLFNBQVM7Z0JBQ2xCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMscUVBQStCLENBQUMsQ0FBQztnQkFDdkUsTUFBTTtZQUNSLEtBQUssT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsbUVBQThCLENBQUMsQ0FBQztnQkFDN0YsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDNUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3RELE1BQU07WUFDUixDQUFDO1lBQ0Q7Z0JBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3pELFNBQVMsRUFBRSxLQUFLLENBQUMsS0FBSztvQkFDdEIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLEtBQUs7aUJBQ2hDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsc0JBQXNCLENBQzNCLFNBQXVDLEVBQ3ZDLE9BQWdCO1FBRWhCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7QUFuRFUsOERBQXlCOzs7Ozs7O29CQVNuQyxZQUFLLFNBQUMsb0JBQW9COztvQ0FUaEIseUJBQXlCO0lBSnJDLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSxzQkFBc0I7UUFDaEMsVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQztHQUNXLHlCQUF5QixDQW9EckMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvbG9hZGVyL2RpcmVjdGl2ZXMvd2l0aC1sb2FkaW5nLXN0YXRlL3dpdGgtbG9hZGluZy1zdGF0ZS5kaXJlY3RpdmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgSW5wdXQsIE9uRGVzdHJveSwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExvYWRpbmdTdGF0ZSB9IGZyb20gJ2FwcC9oZWxwZXJzL29wZXJhdG9ycy90by1sb2FkaW5nLXN0YXRlLmhlbHBlcic7XG5pbXBvcnQge1xuICBXaXRoTG9hZGluZ1N0YXRlRXJyb3JDb21wb25lbnQsXG59IGZyb20gJ2FwcC9tb2R1bGVzL2xvYWRlci9kaXJlY3RpdmVzL3dpdGgtbG9hZGluZy1zdGF0ZS93aXRoLWxvYWRpbmctc3RhdGUtZXJyb3Ivd2l0aC1sb2FkaW5nLXN0YXRlLWVycm9yLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBXaXRoTG9hZGluZ1N0YXRlTG9hZGVyQ29tcG9uZW50LFxufSBmcm9tICdhcHAvbW9kdWxlcy9sb2FkZXIvZGlyZWN0aXZlcy93aXRoLWxvYWRpbmctc3RhdGUvd2l0aC1sb2FkaW5nLXN0YXRlLWxvYWRlci93aXRoLWxvYWRpbmctc3RhdGUtbG9hZGVyLmNvbXBvbmVudCc7XG5cbi8qKlxuICogU2hvd3MgaW5saW5lIHNrZWxldG9uIGxvYWRlciwgZXJyb3Igb3IgY29udGVudCBkZXBlbmRpbmcgb24gdGhlIGxvYWRpbmcgc3RhdGUuXG4gKiBEZXNpZ25lZCB0byBiZSB1c2VkIHdpdGggdG9Mb2FkaW5nU3RhdGUgcGlwZS5cbiAqXG4gKiBVc2FnZTpcbiAqIGBgYFxuICogPGRpdiAqaXhXaXRoTG9hZGluZ1N0YXRlPVwidmFsdWUkIGFzIHZhbHVlXCI+e3sgdmFsdWUgfX08L2Rpdj5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaXhXaXRoTG9hZGluZ1N0YXRlXScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIFdpdGhMb2FkaW5nU3RhdGVEaXJlY3RpdmU8ViA9IHVua25vd24+IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcmVuZGVyU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8V2l0aExvYWRpbmdTdGF0ZUNvbnRleHQ8Vj4+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICkge31cblxuICBASW5wdXQoJ2l4V2l0aExvYWRpbmdTdGF0ZScpIHNldCBzdGF0ZShzdGF0ZSQ6IExvYWRpbmdTdGF0ZTxWPiB8IE9ic2VydmFibGU8TG9hZGluZ1N0YXRlPFY+Pikge1xuICAgIHRoaXMucmVuZGVyU3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xuXG4gICAgaWYgKGlzT2JzZXJ2YWJsZShzdGF0ZSQpKSB7XG4gICAgICB0aGlzLnJlbmRlclN1YnNjcmlwdGlvbiA9IHN0YXRlJD8uc3Vic2NyaWJlKChzdGF0ZSkgPT4gdGhpcy5yZW5kZXJTdGF0ZShzdGF0ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlclN0YXRlKHN0YXRlJCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlclN0YXRlKHN0YXRlOiBMb2FkaW5nU3RhdGU8Vj4pOiB2b2lkIHtcbiAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcblxuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSBzdGF0ZS5pc0xvYWRpbmc6XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoV2l0aExvYWRpbmdTdGF0ZUxvYWRlckNvbXBvbmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBCb29sZWFuKHN0YXRlLmVycm9yKToge1xuICAgICAgICBjb25zdCBlcnJvckNvbXBvbmVudCA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoV2l0aExvYWRpbmdTdGF0ZUVycm9yQ29tcG9uZW50KTtcbiAgICAgICAgZXJyb3JDb21wb25lbnQuaW5zdGFuY2UuZXJyb3IgPSBzdGF0ZS5lcnJvcjtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmluc2VydChlcnJvckNvbXBvbmVudC5ob3N0Vmlldyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB7XG4gICAgICAgICAgJGltcGxpY2l0OiBzdGF0ZS52YWx1ZSxcbiAgICAgICAgICBpeFdpdGhMb2FkaW5nU3RhdGU6IHN0YXRlLnZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHN0YXRpYyBuZ1RlbXBsYXRlQ29udGV4dEd1YXJkPFY+KFxuICAgIGRpcmVjdGl2ZTogV2l0aExvYWRpbmdTdGF0ZURpcmVjdGl2ZTxWPixcbiAgICBjb250ZXh0OiB1bmtub3duLFxuICApOiBjb250ZXh0IGlzIFdpdGhMb2FkaW5nU3RhdGVDb250ZXh0PFY+IHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdpdGhMb2FkaW5nU3RhdGVDb250ZXh0PFY+IHtcbiAgJGltcGxpY2l0OiBWO1xuICBpeFdpdGhMb2FkaW5nU3RhdGU6IFY7XG59XG4iXSwidmVyc2lvbiI6M30=