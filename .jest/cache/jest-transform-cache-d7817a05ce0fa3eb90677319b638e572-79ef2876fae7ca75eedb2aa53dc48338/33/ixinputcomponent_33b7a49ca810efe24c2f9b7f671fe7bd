696802de8e47fee3102c0225349b5969
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxInputComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const autocomplete_1 = require("@angular/material/autocomplete");
const button_1 = require("@angular/material/button");
const core_2 = require("@angular/material/core");
const form_field_1 = require("@angular/material/form-field");
const input_1 = require("@angular/material/input");
const tooltip_1 = require("@angular/material/tooltip");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_3 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
const ix_label_component_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.component");
const ix_form_service_1 = require("app/modules/forms/ix-forms/services/ix-form.service");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_override_directive_1 = require("app/modules/test-id/test-override/test-override.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
let IxInputComponent = class IxInputComponent {
    constructor(controlDirective, translate, cdr, formService, elementRef) {
        this.controlDirective = controlDirective;
        this.translate = translate;
        this.cdr = cdr;
        this.formService = formService;
        this.elementRef = elementRef;
        this.autocomplete = 'off';
        this.maxLength = 524288;
        this._value = this.controlDirective.value;
        this.formatted = '';
        this.isDisabled = false;
        this.showPassword = false;
        this.invalid = false;
        this.lastKnownValue = this._value;
        this.onChange = () => { };
        this.onTouch = () => { };
        this.controlDirective.valueAccessor = this;
    }
    ngOnChanges(changes) {
        if ('autocompleteOptions' in changes) {
            this.filterOptions();
        }
    }
    ngOnInit() {
        if (this.autocompleteOptions) {
            this.handleAutocompleteOptionsOnInit();
        }
    }
    ngAfterViewInit() {
        this.formService.registerControl(this.controlDirective, this.elementRef);
    }
    ngOnDestroy() {
        this.formService.unregisterControl(this.controlDirective);
    }
    get value() {
        return this._value;
    }
    set value(val) {
        if (this.type === 'number') {
            this._value = (val || val === 0) ? Number(val) : null;
            return;
        }
        this._value = val;
    }
    writeValue(value) {
        let formatted = value;
        if (value && this.format) {
            formatted = this.format(value);
        }
        this.formatted = formatted;
        this.value = value;
    }
    input(ixInput) {
        var _a;
        this.invalid = (_a = ixInput.validity) === null || _a === void 0 ? void 0 : _a.badInput;
        const value = ixInput.value;
        this.value = value;
        this.formatted = value;
        if (value && this.parse) {
            this.value = this.parse(value);
        }
        this.onChange(this.value);
        this.filterOptions();
    }
    invalidMessage() {
        return this.translate.instant('Value must be a {type}', {
            type: this.type,
        });
    }
    registerOnChange(onChange) {
        this.onChange = (val) => {
            this.lastKnownValue = val;
            onChange(val);
        };
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    shouldShowResetInput() {
        return (!this.isDisabled
            && this.hasValue()
            && this.type !== 'password'
            && !this.readonly);
    }
    getType() {
        // Mimicking a password field to prevent browsers from remembering passwords.
        const isFakePassword = this.type === 'password' && (this.autocomplete === 'off' || this.showPassword);
        return isFakePassword ? 'text' : this.type;
    }
    isPasswordField() {
        return this.type === 'password' && !this.showPassword;
    }
    hasValue() {
        var _a, _b;
        return this.invalid || ((_b = (_a = this.value) === null || _a === void 0 ? void 0 : _a.toString()) === null || _b === void 0 ? void 0 : _b.length) > 0;
    }
    resetInput(input) {
        input.value = '';
        this.invalid = false;
        this.value = '';
        this.formatted = '';
        this.onChange(this.value);
        this.filterOptions();
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.cdr.markForCheck();
    }
    focus(ixInput) {
        this.onTouch();
        if (this.readonly) {
            ixInput.select();
        }
        this.filterOptions('');
    }
    blurred() {
        this.onTouch();
        if (this.formatted) {
            if (this.parse) {
                this.value = this.parse(this.formatted);
                this.formatted = this.value;
            }
            if (this.format) {
                this.formatted = this.format(this.value);
            }
        }
        if (this.value !== this.lastKnownValue) {
            this.lastKnownValue = this.value;
            this.onChange(this.value);
        }
        if (this.autocompleteOptions && !this.findExistingOption(this.value)) {
            this.writeValue('');
            this.onChange('');
            this.formatted = '';
        }
        this.cdr.markForCheck();
    }
    onPasswordToggled() {
        this.showPassword = !this.showPassword;
    }
    optionSelected(option) {
        var _a;
        if ((_a = this.inputElementRef) === null || _a === void 0 ? void 0 : _a.nativeElement) {
            this.inputElementRef.nativeElement.value = option.label;
        }
        this.value = option.value;
        this.onChange(option.value);
        this.cdr.markForCheck();
    }
    filterOptions(customFilterValue) {
        const filterValue = (customFilterValue !== null && customFilterValue !== void 0 ? customFilterValue : this.value) || '';
        if (this.autocompleteOptions) {
            this.filteredOptions = this.autocompleteOptions.filter((option) => {
                return option.label.toString().toLowerCase().includes((filterValue).toString().toLowerCase());
            }).slice(0, 50);
        }
    }
    findExistingOption(value) {
        var _a;
        return (_a = this.autocompleteOptions) === null || _a === void 0 ? void 0 : _a.find((option) => (option.label === value) || (option.value === value));
    }
    handleAutocompleteOptionsOnInit() {
        var _a, _b;
        // handle input value changes for this.autocomplete options
        this.controlDirective.control.valueChanges.pipe((0, rxjs_1.debounceTime)(100), (0, rxjs_1.distinctUntilChanged)(), (0, until_destroy_1.untilDestroyed)(this)).subscribe((value) => {
            const existingOption = this.findExistingOption(value);
            if (this.autocompleteOptions && (existingOption === null || existingOption === void 0 ? void 0 : existingOption.value)) {
                this.value = existingOption.value;
                this.onChange(existingOption.value);
                this.cdr.markForCheck();
            }
        });
        // handling initial value formatting from value to label
        if (this.value !== undefined) {
            this.formatted = (_b = (_a = this.findExistingOption(this.value)) === null || _a === void 0 ? void 0 : _a.label) !== null && _b !== void 0 ? _b : '';
        }
        this.filterOptions('');
    }
};
exports.IxInputComponent = IxInputComponent;
IxInputComponent.ctorParameters = () => [
    { type: forms_1.NgControl },
    { type: core_3.TranslateService },
    { type: core_1.ChangeDetectorRef },
    { type: ix_form_service_1.IxFormService },
    { type: core_1.ElementRef }
];
IxInputComponent.propDecorators = {
    label: [{ type: core_1.Input }],
    placeholder: [{ type: core_1.Input }],
    prefixIcon: [{ type: core_1.Input }],
    hint: [{ type: core_1.Input }],
    tooltip: [{ type: core_1.Input }],
    required: [{ type: core_1.Input }],
    readonly: [{ type: core_1.Input }],
    type: [{ type: core_1.Input }],
    autocomplete: [{ type: core_1.Input }],
    autocompleteOptions: [{ type: core_1.Input }],
    maxLength: [{ type: core_1.Input }],
    format: [{ type: core_1.Input }],
    parse: [{ type: core_1.Input }],
    inputElementRef: [{ type: core_1.ViewChild, args: ['ixInput',] }]
};
exports.IxInputComponent = IxInputComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-input',
        template: require("./ix-input.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_label_component_1.IxLabelComponent,
            ix_icon_component_1.IxIconComponent,
            input_1.MatInput,
            autocomplete_1.MatAutocompleteTrigger,
            button_1.MatIconButton,
            tooltip_1.MatTooltip,
            autocomplete_1.MatAutocomplete,
            core_2.MatOption,
            form_field_1.MatError,
            ix_errors_component_1.IxErrorsComponent,
            form_field_1.MatHint,
            core_3.TranslateModule,
            test_override_directive_1.TestOverrideDirective,
            test_directive_1.TestDirective,
        ],
    })
], IxInputComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,