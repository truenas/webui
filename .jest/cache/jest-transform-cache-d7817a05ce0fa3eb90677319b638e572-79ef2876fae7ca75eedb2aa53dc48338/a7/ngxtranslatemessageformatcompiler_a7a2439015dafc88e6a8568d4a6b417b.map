{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/ngx-translate-messageformat-compiler/fesm2022/ngx-translate-messageformat-compiler.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { TranslateCompiler } from '@ngx-translate/core';\nimport MessageFormat from '@messageformat/core';\n\nconst MESSAGE_FORMAT_CONFIG = new InjectionToken(\"MESSAGE_FORMAT_CONFIG\");\nconst defaultConfig = {\n    biDiSupport: false,\n    formatters: {},\n    strictNumberSign: false,\n    currency: \"USD\",\n    strictPluralKeys: true,\n    throwOnError: false,\n    fallbackPrefix: undefined,\n};\n\n/**\n * This compiler expects ICU syntax and compiles the expressions with messageformat.js\n */\nclass TranslateMessageFormatCompiler extends TranslateCompiler {\n    constructor(config) {\n        super();\n        this.mfCache = new Map();\n        const { formatters: customFormatters, biDiSupport, strictNumberSign: strict, currency, strictPluralKeys, throwOnError, fallbackPrefix, } = {\n            ...defaultConfig,\n            ...config,\n        };\n        this.messageFormatOptions = {\n            customFormatters,\n            biDiSupport,\n            strict,\n            currency,\n            strictPluralKeys,\n        };\n        this.throwOnError = !!throwOnError;\n        this.fallbackPrefix = fallbackPrefix;\n    }\n    compile(value, lang) {\n        if (this.fallbackPrefix && value.startsWith(this.fallbackPrefix)) {\n            return value.slice(this.fallbackPrefix.length);\n        }\n        let result;\n        try {\n            result = this.getMessageFormatInstance(lang).compile(value);\n        }\n        catch (err) {\n            if (this.throwOnError) {\n                throw err;\n            }\n            console.error(err);\n            console.error(`[ngx-translate-messageformat-compiler] Could not compile message for lang '${lang}': '${value}'`);\n            result = compileFallback(value, lang);\n        }\n        if (!this.throwOnError) {\n            result = wrapInterpolationFunction(result, value);\n        }\n        return result;\n    }\n    compileTranslations(translations, lang) {\n        if (typeof translations === \"string\") {\n            return this.compile(translations, lang);\n        }\n        return Object.keys(translations).reduce((acc, key) => {\n            const value = translations[key];\n            acc[key] = this.compileTranslations(value, lang);\n            return acc;\n        }, {});\n    }\n    getMessageFormatInstance(locale) {\n        if (!this.mfCache.has(locale)) {\n            this.mfCache.set(locale, new MessageFormat(locale, this.messageFormatOptions));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.mfCache.get(locale);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatCompiler, deps: [{ token: MESSAGE_FORMAT_CONFIG, optional: true }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatCompiler }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatCompiler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MESSAGE_FORMAT_CONFIG]\n                }] }]; } });\nfunction wrapInterpolationFunction(fn, message) {\n    return (params) => {\n        let result = message;\n        try {\n            result = fn(params);\n        }\n        catch (err) {\n            console.error(err);\n            console.error(`[ngx-translate-messageformat-compiler] Could not interpolate '${message}' with params '${params}'`);\n        }\n        return result;\n    };\n}\nfunction compileFallback(message, lang) {\n    return () => {\n        console.warn(`[ngx-translate-messageformat-compiler] Falling back to original invalid message: '${message}' ('${lang}')`);\n        return String(message);\n    };\n}\n\n/* eslint-disable-next-line  no-console */\nconst log = (...message) => console.log(tag, ...message);\nconst tag = \"[TranslateMessageFormatCompiler]\";\nclass TranslateMessageFormatDebugCompiler extends TranslateMessageFormatCompiler {\n    compile(value, lang) {\n        log(`COMPILE (${lang})`, value);\n        const interpolationFn = super.compile(value, lang);\n        return isFunction(interpolationFn)\n            ? this.wrap(interpolationFn, value)\n            : value;\n    }\n    compileTranslations(value, lang) {\n        log(`COMPILE (${lang})`, value);\n        return super.compileTranslations(value, lang);\n    }\n    wrap(fn, reference) {\n        return (params) => {\n            log(\"INTERPOLATE\", reference, params);\n            return fn(params);\n        };\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatDebugCompiler, deps: null, target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatDebugCompiler }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatDebugCompiler, decorators: [{\n            type: Injectable\n        }] });\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n\n/*\n * Public API Surface of ngx-translate-messageformat-compiler\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MESSAGE_FORMAT_CONFIG, TranslateMessageFormatCompiler, TranslateMessageFormatDebugCompiler, defaultConfig };\n//# sourceMappingURL=ngx-translate-messageformat-compiler.mjs.map\n"],
  "mappings": "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",
  "names": ["import_core", "MessageFormat"]
}
