{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/common/fesm2022/testing.mjs"],
  "sourcesContent": ["/**\n * @license Angular v18.2.4\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { \u0275PlatformNavigation, DOCUMENT, PlatformLocation, \u0275normalizeQueryParams, LocationStrategy, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, Optional, inject, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * This class wraps the platform Navigation API which allows server-specific and test\n * implementations.\n */\nclass PlatformNavigation {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: PlatformNavigation, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: PlatformNavigation, providedIn: 'platform', useFactory: () => window.navigation }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: PlatformNavigation, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'platform', useFactory: () => window.navigation }]\n        }] });\n\n/**\n * Fake implementation of user agent history and navigation behavior. This is a\n * high-fidelity implementation of browser behavior that attempts to emulate\n * things like traversal delay.\n */\nclass FakeNavigation {\n    /** Equivalent to `navigation.currentEntry`. */\n    get currentEntry() {\n        return this.entriesArr[this.currentEntryIndex];\n    }\n    get canGoBack() {\n        return this.currentEntryIndex > 0;\n    }\n    get canGoForward() {\n        return this.currentEntryIndex < this.entriesArr.length - 1;\n    }\n    constructor(window, startURL) {\n        this.window = window;\n        /**\n         * The fake implementation of an entries array. Only same-document entries\n         * allowed.\n         */\n        this.entriesArr = [];\n        /**\n         * The current active entry index into `entriesArr`.\n         */\n        this.currentEntryIndex = 0;\n        /**\n         * The current navigate event.\n         */\n        this.navigateEvent = undefined;\n        /**\n         * A Map of pending traversals, so that traversals to the same entry can be\n         * re-used.\n         */\n        this.traversalQueue = new Map();\n        /**\n         * A Promise that resolves when the previous traversals have finished. Used to\n         * simulate the cross-process communication necessary for traversals.\n         */\n        this.nextTraversal = Promise.resolve();\n        /**\n         * A prospective current active entry index, which includes unresolved\n         * traversals. Used by `go` to determine where navigations are intended to go.\n         */\n        this.prospectiveEntryIndex = 0;\n        /**\n         * A test-only option to make traversals synchronous, rather than emulate\n         * cross-process communication.\n         */\n        this.synchronousTraversals = false;\n        /** Whether to allow a call to setInitialEntryForTesting. */\n        this.canSetInitialEntry = true;\n        /** `EventTarget` to dispatch events. */\n        this.eventTarget = this.window.document.createElement('div');\n        /** The next unique id for created entries. Replace recreates this id. */\n        this.nextId = 0;\n        /** The next unique key for created entries. Replace inherits this id. */\n        this.nextKey = 0;\n        /** Whether this fake is disposed. */\n        this.disposed = false;\n        // First entry.\n        this.setInitialEntryForTesting(startURL);\n    }\n    /**\n     * Sets the initial entry.\n     */\n    setInitialEntryForTesting(url, options = { historyState: null }) {\n        if (!this.canSetInitialEntry) {\n            throw new Error('setInitialEntryForTesting can only be called before any ' + 'navigation has occurred');\n        }\n        const currentInitialEntry = this.entriesArr[0];\n        this.entriesArr[0] = new FakeNavigationHistoryEntry(new URL(url).toString(), {\n            index: 0,\n            key: currentInitialEntry?.key ?? String(this.nextKey++),\n            id: currentInitialEntry?.id ?? String(this.nextId++),\n            sameDocument: true,\n            historyState: options?.historyState,\n            state: options.state,\n        });\n    }\n    /** Returns whether the initial entry is still eligible to be set. */\n    canSetInitialEntryForTesting() {\n        return this.canSetInitialEntry;\n    }\n    /**\n     * Sets whether to emulate traversals as synchronous rather than\n     * asynchronous.\n     */\n    setSynchronousTraversalsForTesting(synchronousTraversals) {\n        this.synchronousTraversals = synchronousTraversals;\n    }\n    /** Equivalent to `navigation.entries()`. */\n    entries() {\n        return this.entriesArr.slice();\n    }\n    /** Equivalent to `navigation.navigate()`. */\n    navigate(url, options) {\n        const fromUrl = new URL(this.currentEntry.url);\n        const toUrl = new URL(url, this.currentEntry.url);\n        let navigationType;\n        if (!options?.history || options.history === 'auto') {\n            // Auto defaults to push, but if the URLs are the same, is a replace.\n            if (fromUrl.toString() === toUrl.toString()) {\n                navigationType = 'replace';\n            }\n            else {\n                navigationType = 'push';\n            }\n        }\n        else {\n            navigationType = options.history;\n        }\n        const hashChange = isHashChange(fromUrl, toUrl);\n        const destination = new FakeNavigationDestination({\n            url: toUrl.toString(),\n            state: options?.state,\n            sameDocument: hashChange,\n            historyState: null,\n        });\n        const result = new InternalNavigationResult();\n        this.userAgentNavigate(destination, result, {\n            navigationType,\n            cancelable: true,\n            canIntercept: true,\n            // Always false for navigate().\n            userInitiated: false,\n            hashChange,\n            info: options?.info,\n        });\n        return {\n            committed: result.committed,\n            finished: result.finished,\n        };\n    }\n    /** Equivalent to `history.pushState()`. */\n    pushState(data, title, url) {\n        this.pushOrReplaceState('push', data, title, url);\n    }\n    /** Equivalent to `history.replaceState()`. */\n    replaceState(data, title, url) {\n        this.pushOrReplaceState('replace', data, title, url);\n    }\n    pushOrReplaceState(navigationType, data, _title, url) {\n        const fromUrl = new URL(this.currentEntry.url);\n        const toUrl = url ? new URL(url, this.currentEntry.url) : fromUrl;\n        const hashChange = isHashChange(fromUrl, toUrl);\n        const destination = new FakeNavigationDestination({\n            url: toUrl.toString(),\n            sameDocument: true,\n            historyState: data,\n        });\n        const result = new InternalNavigationResult();\n        this.userAgentNavigate(destination, result, {\n            navigationType,\n            cancelable: true,\n            canIntercept: true,\n            // Always false for pushState() or replaceState().\n            userInitiated: false,\n            hashChange,\n            skipPopState: true,\n        });\n    }\n    /** Equivalent to `navigation.traverseTo()`. */\n    traverseTo(key, options) {\n        const fromUrl = new URL(this.currentEntry.url);\n        const entry = this.findEntry(key);\n        if (!entry) {\n            const domException = new DOMException('Invalid key', 'InvalidStateError');\n            const committed = Promise.reject(domException);\n            const finished = Promise.reject(domException);\n            committed.catch(() => { });\n            finished.catch(() => { });\n            return {\n                committed,\n                finished,\n            };\n        }\n        if (entry === this.currentEntry) {\n            return {\n                committed: Promise.resolve(this.currentEntry),\n                finished: Promise.resolve(this.currentEntry),\n            };\n        }\n        if (this.traversalQueue.has(entry.key)) {\n            const existingResult = this.traversalQueue.get(entry.key);\n            return {\n                committed: existingResult.committed,\n                finished: existingResult.finished,\n            };\n        }\n        const hashChange = isHashChange(fromUrl, new URL(entry.url, this.currentEntry.url));\n        const destination = new FakeNavigationDestination({\n            url: entry.url,\n            state: entry.getState(),\n            historyState: entry.getHistoryState(),\n            key: entry.key,\n            id: entry.id,\n            index: entry.index,\n            sameDocument: entry.sameDocument,\n        });\n        this.prospectiveEntryIndex = entry.index;\n        const result = new InternalNavigationResult();\n        this.traversalQueue.set(entry.key, result);\n        this.runTraversal(() => {\n            this.traversalQueue.delete(entry.key);\n            this.userAgentNavigate(destination, result, {\n                navigationType: 'traverse',\n                cancelable: true,\n                canIntercept: true,\n                // Always false for traverseTo().\n                userInitiated: false,\n                hashChange,\n                info: options?.info,\n            });\n        });\n        return {\n            committed: result.committed,\n            finished: result.finished,\n        };\n    }\n    /** Equivalent to `navigation.back()`. */\n    back(options) {\n        if (this.currentEntryIndex === 0) {\n            const domException = new DOMException('Cannot go back', 'InvalidStateError');\n            const committed = Promise.reject(domException);\n            const finished = Promise.reject(domException);\n            committed.catch(() => { });\n            finished.catch(() => { });\n            return {\n                committed,\n                finished,\n            };\n        }\n        const entry = this.entriesArr[this.currentEntryIndex - 1];\n        return this.traverseTo(entry.key, options);\n    }\n    /** Equivalent to `navigation.forward()`. */\n    forward(options) {\n        if (this.currentEntryIndex === this.entriesArr.length - 1) {\n            const domException = new DOMException('Cannot go forward', 'InvalidStateError');\n            const committed = Promise.reject(domException);\n            const finished = Promise.reject(domException);\n            committed.catch(() => { });\n            finished.catch(() => { });\n            return {\n                committed,\n                finished,\n            };\n        }\n        const entry = this.entriesArr[this.currentEntryIndex + 1];\n        return this.traverseTo(entry.key, options);\n    }\n    /**\n     * Equivalent to `history.go()`.\n     * Note that this method does not actually work precisely to how Chrome\n     * does, instead choosing a simpler model with less unexpected behavior.\n     * Chrome has a few edge case optimizations, for instance with repeated\n     * `back(); forward()` chains it collapses certain traversals.\n     */\n    go(direction) {\n        const targetIndex = this.prospectiveEntryIndex + direction;\n        if (targetIndex >= this.entriesArr.length || targetIndex < 0) {\n            return;\n        }\n        this.prospectiveEntryIndex = targetIndex;\n        this.runTraversal(() => {\n            // Check again that destination is in the entries array.\n            if (targetIndex >= this.entriesArr.length || targetIndex < 0) {\n                return;\n            }\n            const fromUrl = new URL(this.currentEntry.url);\n            const entry = this.entriesArr[targetIndex];\n            const hashChange = isHashChange(fromUrl, new URL(entry.url, this.currentEntry.url));\n            const destination = new FakeNavigationDestination({\n                url: entry.url,\n                state: entry.getState(),\n                historyState: entry.getHistoryState(),\n                key: entry.key,\n                id: entry.id,\n                index: entry.index,\n                sameDocument: entry.sameDocument,\n            });\n            const result = new InternalNavigationResult();\n            this.userAgentNavigate(destination, result, {\n                navigationType: 'traverse',\n                cancelable: true,\n                canIntercept: true,\n                // Always false for go().\n                userInitiated: false,\n                hashChange,\n            });\n        });\n    }\n    /** Runs a traversal synchronously or asynchronously */\n    runTraversal(traversal) {\n        if (this.synchronousTraversals) {\n            traversal();\n            return;\n        }\n        // Each traversal occupies a single timeout resolution.\n        // This means that Promises added to commit and finish should resolve\n        // before the next traversal.\n        this.nextTraversal = this.nextTraversal.then(() => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve();\n                    traversal();\n                });\n            });\n        });\n    }\n    /** Equivalent to `navigation.addEventListener()`. */\n    addEventListener(type, callback, options) {\n        this.eventTarget.addEventListener(type, callback, options);\n    }\n    /** Equivalent to `navigation.removeEventListener()`. */\n    removeEventListener(type, callback, options) {\n        this.eventTarget.removeEventListener(type, callback, options);\n    }\n    /** Equivalent to `navigation.dispatchEvent()` */\n    dispatchEvent(event) {\n        return this.eventTarget.dispatchEvent(event);\n    }\n    /** Cleans up resources. */\n    dispose() {\n        // Recreate eventTarget to release current listeners.\n        // `document.createElement` because NodeJS `EventTarget` is incompatible with Domino's `Event`.\n        this.eventTarget = this.window.document.createElement('div');\n        this.disposed = true;\n    }\n    /** Returns whether this fake is disposed. */\n    isDisposed() {\n        return this.disposed;\n    }\n    /** Implementation for all navigations and traversals. */\n    userAgentNavigate(destination, result, options) {\n        // The first navigation should disallow any future calls to set the initial\n        // entry.\n        this.canSetInitialEntry = false;\n        if (this.navigateEvent) {\n            this.navigateEvent.cancel(new DOMException('Navigation was aborted', 'AbortError'));\n            this.navigateEvent = undefined;\n        }\n        const navigateEvent = createFakeNavigateEvent({\n            navigationType: options.navigationType,\n            cancelable: options.cancelable,\n            canIntercept: options.canIntercept,\n            userInitiated: options.userInitiated,\n            hashChange: options.hashChange,\n            signal: result.signal,\n            destination,\n            info: options.info,\n            sameDocument: destination.sameDocument,\n            skipPopState: options.skipPopState,\n            result,\n            userAgentCommit: () => {\n                this.userAgentCommit();\n            },\n        });\n        this.navigateEvent = navigateEvent;\n        this.eventTarget.dispatchEvent(navigateEvent);\n        navigateEvent.dispatchedNavigateEvent();\n        if (navigateEvent.commitOption === 'immediate') {\n            navigateEvent.commit(/* internal= */ true);\n        }\n    }\n    /** Implementation to commit a navigation. */\n    userAgentCommit() {\n        if (!this.navigateEvent) {\n            return;\n        }\n        const from = this.currentEntry;\n        if (!this.navigateEvent.sameDocument) {\n            const error = new Error('Cannot navigate to a non-same-document URL.');\n            this.navigateEvent.cancel(error);\n            throw error;\n        }\n        if (this.navigateEvent.navigationType === 'push' ||\n            this.navigateEvent.navigationType === 'replace') {\n            this.userAgentPushOrReplace(this.navigateEvent.destination, {\n                navigationType: this.navigateEvent.navigationType,\n            });\n        }\n        else if (this.navigateEvent.navigationType === 'traverse') {\n            this.userAgentTraverse(this.navigateEvent.destination);\n        }\n        this.navigateEvent.userAgentNavigated(this.currentEntry);\n        const currentEntryChangeEvent = createFakeNavigationCurrentEntryChangeEvent({\n            from,\n            navigationType: this.navigateEvent.navigationType,\n        });\n        this.eventTarget.dispatchEvent(currentEntryChangeEvent);\n        if (!this.navigateEvent.skipPopState) {\n            const popStateEvent = createPopStateEvent({\n                state: this.navigateEvent.destination.getHistoryState(),\n            });\n            this.window.dispatchEvent(popStateEvent);\n        }\n    }\n    /** Implementation for a push or replace navigation. */\n    userAgentPushOrReplace(destination, { navigationType }) {\n        if (navigationType === 'push') {\n            this.currentEntryIndex++;\n            this.prospectiveEntryIndex = this.currentEntryIndex;\n        }\n        const index = this.currentEntryIndex;\n        const key = navigationType === 'push' ? String(this.nextKey++) : this.currentEntry.key;\n        const entry = new FakeNavigationHistoryEntry(destination.url, {\n            id: String(this.nextId++),\n            key,\n            index,\n            sameDocument: true,\n            state: destination.getState(),\n            historyState: destination.getHistoryState(),\n        });\n        if (navigationType === 'push') {\n            this.entriesArr.splice(index, Infinity, entry);\n        }\n        else {\n            this.entriesArr[index] = entry;\n        }\n    }\n    /** Implementation for a traverse navigation. */\n    userAgentTraverse(destination) {\n        this.currentEntryIndex = destination.index;\n    }\n    /** Utility method for finding entries with the given `key`. */\n    findEntry(key) {\n        for (const entry of this.entriesArr) {\n            if (entry.key === key)\n                return entry;\n        }\n        return undefined;\n    }\n    set onnavigate(_handler) {\n        throw new Error('unimplemented');\n    }\n    get onnavigate() {\n        throw new Error('unimplemented');\n    }\n    set oncurrententrychange(_handler) {\n        throw new Error('unimplemented');\n    }\n    get oncurrententrychange() {\n        throw new Error('unimplemented');\n    }\n    set onnavigatesuccess(_handler) {\n        throw new Error('unimplemented');\n    }\n    get onnavigatesuccess() {\n        throw new Error('unimplemented');\n    }\n    set onnavigateerror(_handler) {\n        throw new Error('unimplemented');\n    }\n    get onnavigateerror() {\n        throw new Error('unimplemented');\n    }\n    get transition() {\n        throw new Error('unimplemented');\n    }\n    updateCurrentEntry(_options) {\n        throw new Error('unimplemented');\n    }\n    reload(_options) {\n        throw new Error('unimplemented');\n    }\n}\n/**\n * Fake equivalent of `NavigationHistoryEntry`.\n */\nclass FakeNavigationHistoryEntry {\n    constructor(url, { id, key, index, sameDocument, state, historyState, }) {\n        this.url = url;\n        // tslint:disable-next-line:no-any\n        this.ondispose = null;\n        this.id = id;\n        this.key = key;\n        this.index = index;\n        this.sameDocument = sameDocument;\n        this.state = state;\n        this.historyState = historyState;\n    }\n    getState() {\n        // Budget copy.\n        return this.state ? JSON.parse(JSON.stringify(this.state)) : this.state;\n    }\n    getHistoryState() {\n        // Budget copy.\n        return this.historyState ? JSON.parse(JSON.stringify(this.historyState)) : this.historyState;\n    }\n    addEventListener(type, callback, options) {\n        throw new Error('unimplemented');\n    }\n    removeEventListener(type, callback, options) {\n        throw new Error('unimplemented');\n    }\n    dispatchEvent(event) {\n        throw new Error('unimplemented');\n    }\n}\n/**\n * Create a fake equivalent of `NavigateEvent`. This is not a class because ES5\n * transpiled JavaScript cannot extend native Event.\n */\nfunction createFakeNavigateEvent({ cancelable, canIntercept, userInitiated, hashChange, navigationType, signal, destination, info, sameDocument, skipPopState, result, userAgentCommit, }) {\n    const event = new Event('navigate', { bubbles: false, cancelable });\n    event.canIntercept = canIntercept;\n    event.userInitiated = userInitiated;\n    event.hashChange = hashChange;\n    event.navigationType = navigationType;\n    event.signal = signal;\n    event.destination = destination;\n    event.info = info;\n    event.downloadRequest = null;\n    event.formData = null;\n    event.sameDocument = sameDocument;\n    event.skipPopState = skipPopState;\n    event.commitOption = 'immediate';\n    let handlerFinished = undefined;\n    let interceptCalled = false;\n    let dispatchedNavigateEvent = false;\n    let commitCalled = false;\n    event.intercept = function (options) {\n        interceptCalled = true;\n        event.sameDocument = true;\n        const handler = options?.handler;\n        if (handler) {\n            handlerFinished = handler();\n        }\n        if (options?.commit) {\n            event.commitOption = options.commit;\n        }\n        if (options?.focusReset !== undefined || options?.scroll !== undefined) {\n            throw new Error('unimplemented');\n        }\n    };\n    event.scroll = function () {\n        throw new Error('unimplemented');\n    };\n    event.commit = function (internal = false) {\n        if (!internal && !interceptCalled) {\n            throw new DOMException(`Failed to execute 'commit' on 'NavigateEvent': intercept() must be ` +\n                `called before commit().`, 'InvalidStateError');\n        }\n        if (!dispatchedNavigateEvent) {\n            throw new DOMException(`Failed to execute 'commit' on 'NavigateEvent': commit() may not be ` +\n                `called during event dispatch.`, 'InvalidStateError');\n        }\n        if (commitCalled) {\n            throw new DOMException(`Failed to execute 'commit' on 'NavigateEvent': commit() already ` + `called.`, 'InvalidStateError');\n        }\n        commitCalled = true;\n        userAgentCommit();\n    };\n    // Internal only.\n    event.cancel = function (reason) {\n        result.committedReject(reason);\n        result.finishedReject(reason);\n    };\n    // Internal only.\n    event.dispatchedNavigateEvent = function () {\n        dispatchedNavigateEvent = true;\n        if (event.commitOption === 'after-transition') {\n            // If handler finishes before commit, call commit.\n            handlerFinished?.then(() => {\n                if (!commitCalled) {\n                    event.commit(/* internal */ true);\n                }\n            }, () => { });\n        }\n        Promise.all([result.committed, handlerFinished]).then(([entry]) => {\n            result.finishedResolve(entry);\n        }, (reason) => {\n            result.finishedReject(reason);\n        });\n    };\n    // Internal only.\n    event.userAgentNavigated = function (entry) {\n        result.committedResolve(entry);\n    };\n    return event;\n}\n/**\n * Create a fake equivalent of `NavigationCurrentEntryChange`. This does not use\n * a class because ES5 transpiled JavaScript cannot extend native Event.\n */\nfunction createFakeNavigationCurrentEntryChangeEvent({ from, navigationType, }) {\n    const event = new Event('currententrychange', {\n        bubbles: false,\n        cancelable: false,\n    });\n    event.from = from;\n    event.navigationType = navigationType;\n    return event;\n}\n/**\n * Create a fake equivalent of `PopStateEvent`. This does not use a class\n * because ES5 transpiled JavaScript cannot extend native Event.\n */\nfunction createPopStateEvent({ state }) {\n    const event = new Event('popstate', {\n        bubbles: false,\n        cancelable: false,\n    });\n    event.state = state;\n    return event;\n}\n/**\n * Fake equivalent of `NavigationDestination`.\n */\nclass FakeNavigationDestination {\n    constructor({ url, sameDocument, historyState, state, key = null, id = null, index = -1, }) {\n        this.url = url;\n        this.sameDocument = sameDocument;\n        this.state = state;\n        this.historyState = historyState;\n        this.key = key;\n        this.id = id;\n        this.index = index;\n    }\n    getState() {\n        return this.state;\n    }\n    getHistoryState() {\n        return this.historyState;\n    }\n}\n/** Utility function to determine whether two UrlLike have the same hash. */\nfunction isHashChange(from, to) {\n    return (to.hash !== from.hash &&\n        to.hostname === from.hostname &&\n        to.pathname === from.pathname &&\n        to.search === from.search);\n}\n/** Internal utility class for representing the result of a navigation.  */\nclass InternalNavigationResult {\n    get signal() {\n        return this.abortController.signal;\n    }\n    constructor() {\n        this.abortController = new AbortController();\n        this.committed = new Promise((resolve, reject) => {\n            this.committedResolve = resolve;\n            this.committedReject = reject;\n        });\n        this.finished = new Promise(async (resolve, reject) => {\n            this.finishedResolve = resolve;\n            this.finishedReject = (reason) => {\n                reject(reason);\n                this.abortController.abort(reason);\n            };\n        });\n        // All rejections are handled.\n        this.committed.catch(() => { });\n        this.finished.catch(() => { });\n    }\n}\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nfunction parseUrl(urlStr, baseHref) {\n    const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n    let serverBase;\n    // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n    // an arbitrary base URL which can be removed afterward.\n    if (!verifyProtocol.test(urlStr)) {\n        serverBase = 'http://empty.com/';\n    }\n    let parsedUrl;\n    try {\n        parsedUrl = new URL(urlStr, serverBase);\n    }\n    catch (e) {\n        const result = urlParse.exec(serverBase || '' + urlStr);\n        if (!result) {\n            throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n        }\n        const hostSplit = result[4].split(':');\n        parsedUrl = {\n            protocol: result[1],\n            hostname: hostSplit[0],\n            port: hostSplit[1] || '',\n            pathname: result[5],\n            search: result[6],\n            hash: result[8],\n        };\n    }\n    if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n        parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n    }\n    return {\n        hostname: (!serverBase && parsedUrl.hostname) || '',\n        protocol: (!serverBase && parsedUrl.protocol) || '',\n        port: (!serverBase && parsedUrl.port) || '',\n        pathname: parsedUrl.pathname || '/',\n        search: parsedUrl.search || '',\n        hash: parsedUrl.hash || '',\n    };\n}\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\nclass MockPlatformLocation {\n    constructor(config) {\n        this.baseHref = '';\n        this.hashUpdate = new Subject();\n        this.popStateSubject = new Subject();\n        this.urlChangeIndex = 0;\n        this.urlChanges = [{ hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null }];\n        if (config) {\n            this.baseHref = config.appBaseHref || '';\n            const parsedChanges = this.parseChanges(null, config.startUrl || 'http://_empty_/', this.baseHref);\n            this.urlChanges[0] = { ...parsedChanges };\n        }\n    }\n    get hostname() {\n        return this.urlChanges[this.urlChangeIndex].hostname;\n    }\n    get protocol() {\n        return this.urlChanges[this.urlChangeIndex].protocol;\n    }\n    get port() {\n        return this.urlChanges[this.urlChangeIndex].port;\n    }\n    get pathname() {\n        return this.urlChanges[this.urlChangeIndex].pathname;\n    }\n    get search() {\n        return this.urlChanges[this.urlChangeIndex].search;\n    }\n    get hash() {\n        return this.urlChanges[this.urlChangeIndex].hash;\n    }\n    get state() {\n        return this.urlChanges[this.urlChangeIndex].state;\n    }\n    getBaseHrefFromDOM() {\n        return this.baseHref;\n    }\n    onPopState(fn) {\n        const subscription = this.popStateSubject.subscribe(fn);\n        return () => subscription.unsubscribe();\n    }\n    onHashChange(fn) {\n        const subscription = this.hashUpdate.subscribe(fn);\n        return () => subscription.unsubscribe();\n    }\n    get href() {\n        let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n        url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n        return url;\n    }\n    get url() {\n        return `${this.pathname}${this.search}${this.hash}`;\n    }\n    parseChanges(state, url, baseHref = '') {\n        // When the `history.state` value is stored, it is always copied.\n        state = JSON.parse(JSON.stringify(state));\n        return { ...parseUrl(url, baseHref), state };\n    }\n    replaceState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        this.urlChanges[this.urlChangeIndex] = {\n            ...this.urlChanges[this.urlChangeIndex],\n            pathname,\n            search,\n            hash,\n            state: parsedState,\n        };\n    }\n    pushState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        if (this.urlChangeIndex > 0) {\n            this.urlChanges.splice(this.urlChangeIndex + 1);\n        }\n        this.urlChanges.push({\n            ...this.urlChanges[this.urlChangeIndex],\n            pathname,\n            search,\n            hash,\n            state: parsedState,\n        });\n        this.urlChangeIndex = this.urlChanges.length - 1;\n    }\n    forward() {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        if (this.urlChangeIndex < this.urlChanges.length) {\n            this.urlChangeIndex++;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    back() {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        if (this.urlChangeIndex > 0) {\n            this.urlChangeIndex--;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    historyGo(relativePosition = 0) {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        const nextPageIndex = this.urlChangeIndex + relativePosition;\n        if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n            this.urlChangeIndex = nextPageIndex;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    getState() {\n        return this.state;\n    }\n    /**\n     * Browsers are inconsistent in when they fire events and perform the state updates\n     * The most easiest thing to do in our mock is synchronous and that happens to match\n     * Firefox and Chrome, at least somewhat closely\n     *\n     * https://github.com/WICG/navigation-api#watching-for-navigations\n     * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94\n     * popstate is always sent before hashchange:\n     * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n     */\n    emitEvents(oldHash, oldUrl) {\n        this.popStateSubject.next({\n            type: 'popstate',\n            state: this.getState(),\n            oldUrl,\n            newUrl: this.url,\n        });\n        if (oldHash !== this.hash) {\n            this.hashUpdate.next({\n                type: 'hashchange',\n                state: null,\n                oldUrl,\n                newUrl: this.url,\n            });\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: MockPlatformLocation, deps: [{ token: MOCK_PLATFORM_LOCATION_CONFIG, optional: true }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: MockPlatformLocation }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: MockPlatformLocation, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MOCK_PLATFORM_LOCATION_CONFIG]\n                }, {\n                    type: Optional\n                }] }] });\n/**\n * Mock implementation of URL state.\n */\nclass FakeNavigationPlatformLocation {\n    constructor() {\n        this._platformNavigation = inject(\u0275PlatformNavigation);\n        this.window = inject(DOCUMENT).defaultView;\n        this.config = inject(MOCK_PLATFORM_LOCATION_CONFIG, { optional: true });\n        if (!(this._platformNavigation instanceof FakeNavigation)) {\n            throw new Error('FakePlatformNavigation cannot be used without FakeNavigation. Use ' +\n                '`provideFakeNavigation` to have all these services provided together.');\n        }\n    }\n    getBaseHrefFromDOM() {\n        return this.config?.appBaseHref ?? '';\n    }\n    onPopState(fn) {\n        this.window.addEventListener('popstate', fn);\n        return () => this.window.removeEventListener('popstate', fn);\n    }\n    onHashChange(fn) {\n        this.window.addEventListener('hashchange', fn);\n        return () => this.window.removeEventListener('hashchange', fn);\n    }\n    get href() {\n        return this._platformNavigation.currentEntry.url;\n    }\n    get protocol() {\n        return new URL(this._platformNavigation.currentEntry.url).protocol;\n    }\n    get hostname() {\n        return new URL(this._platformNavigation.currentEntry.url).hostname;\n    }\n    get port() {\n        return new URL(this._platformNavigation.currentEntry.url).port;\n    }\n    get pathname() {\n        return new URL(this._platformNavigation.currentEntry.url).pathname;\n    }\n    get search() {\n        return new URL(this._platformNavigation.currentEntry.url).search;\n    }\n    get hash() {\n        return new URL(this._platformNavigation.currentEntry.url).hash;\n    }\n    pushState(state, title, url) {\n        this._platformNavigation.pushState(state, title, url);\n    }\n    replaceState(state, title, url) {\n        this._platformNavigation.replaceState(state, title, url);\n    }\n    forward() {\n        this._platformNavigation.forward();\n    }\n    back() {\n        this._platformNavigation.back();\n    }\n    historyGo(relativePosition = 0) {\n        this._platformNavigation.go(relativePosition);\n    }\n    getState() {\n        return this._platformNavigation.currentEntry.getHistoryState();\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: FakeNavigationPlatformLocation, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: FakeNavigationPlatformLocation }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: FakeNavigationPlatformLocation, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n\n/**\n * Return a provider for the `FakeNavigation` in place of the real Navigation API.\n */\nfunction provideFakePlatformNavigation() {\n    return [\n        {\n            provide: PlatformNavigation,\n            useFactory: () => {\n                const config = inject(MOCK_PLATFORM_LOCATION_CONFIG, { optional: true });\n                return new FakeNavigation(inject(DOCUMENT).defaultView, config?.startUrl ?? 'http://_empty_/');\n            },\n        },\n        { provide: PlatformLocation, useClass: FakeNavigationPlatformLocation },\n    ];\n}\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\nclass SpyLocation {\n    constructor() {\n        this.urlChanges = [];\n        this._history = [new LocationState('', '', null)];\n        this._historyIndex = 0;\n        /** @internal */\n        this._subject = new EventEmitter();\n        /** @internal */\n        this._basePath = '';\n        /** @internal */\n        this._locationStrategy = null;\n        /** @internal */\n        this._urlChangeListeners = [];\n        /** @internal */\n        this._urlChangeSubscription = null;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeListeners = [];\n    }\n    setInitialPath(url) {\n        this._history[this._historyIndex].path = url;\n    }\n    setBaseHref(url) {\n        this._basePath = url;\n    }\n    path() {\n        return this._history[this._historyIndex].path;\n    }\n    getState() {\n        return this._history[this._historyIndex].state;\n    }\n    isCurrentPathEqualTo(path, query = '') {\n        const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n        const currPath = this.path().endsWith('/')\n            ? this.path().substring(0, this.path().length - 1)\n            : this.path();\n        return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n    }\n    simulateUrlPop(pathname) {\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n    }\n    simulateHashChange(pathname) {\n        const path = this.prepareExternalUrl(pathname);\n        this.pushHistory(path, '', null);\n        this.urlChanges.push('hash: ' + pathname);\n        // the browser will automatically fire popstate event before each `hashchange` event, so we need\n        // to simulate it.\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\n    }\n    prepareExternalUrl(url) {\n        if (url.length > 0 && !url.startsWith('/')) {\n            url = '/' + url;\n        }\n        return this._basePath + url;\n    }\n    go(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        this.pushHistory(path, query, state);\n        const locationState = this._history[this._historyIndex - 1];\n        if (locationState.path == path && locationState.query == query) {\n            return;\n        }\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.urlChanges.push(url);\n        this._notifyUrlChangeListeners(path + \u0275normalizeQueryParams(query), state);\n    }\n    replaceState(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        const history = this._history[this._historyIndex];\n        history.state = state;\n        if (history.path == path && history.query == query) {\n            return;\n        }\n        history.path = path;\n        history.query = query;\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.urlChanges.push('replace: ' + url);\n        this._notifyUrlChangeListeners(path + \u0275normalizeQueryParams(query), state);\n    }\n    forward() {\n        if (this._historyIndex < this._history.length - 1) {\n            this._historyIndex++;\n            this._subject.emit({\n                'url': this.path(),\n                'state': this.getState(),\n                'pop': true,\n                'type': 'popstate',\n            });\n        }\n    }\n    back() {\n        if (this._historyIndex > 0) {\n            this._historyIndex--;\n            this._subject.emit({\n                'url': this.path(),\n                'state': this.getState(),\n                'pop': true,\n                'type': 'popstate',\n            });\n        }\n    }\n    historyGo(relativePosition = 0) {\n        const nextPageIndex = this._historyIndex + relativePosition;\n        if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n            this._historyIndex = nextPageIndex;\n            this._subject.emit({\n                'url': this.path(),\n                'state': this.getState(),\n                'pop': true,\n                'type': 'popstate',\n            });\n        }\n    }\n    onUrlChange(fn) {\n        this._urlChangeListeners.push(fn);\n        this._urlChangeSubscription ??= this.subscribe((v) => {\n            this._notifyUrlChangeListeners(v.url, v.state);\n        });\n        return () => {\n            const fnIndex = this._urlChangeListeners.indexOf(fn);\n            this._urlChangeListeners.splice(fnIndex, 1);\n            if (this._urlChangeListeners.length === 0) {\n                this._urlChangeSubscription?.unsubscribe();\n                this._urlChangeSubscription = null;\n            }\n        };\n    }\n    /** @internal */\n    _notifyUrlChangeListeners(url = '', state) {\n        this._urlChangeListeners.forEach((fn) => fn(url, state));\n    }\n    subscribe(onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    }\n    normalize(url) {\n        return null;\n    }\n    pushHistory(path, query, state) {\n        if (this._historyIndex > 0) {\n            this._history.splice(this._historyIndex + 1);\n        }\n        this._history.push(new LocationState(path, query, state));\n        this._historyIndex = this._history.length - 1;\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: SpyLocation, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: SpyLocation }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: SpyLocation, decorators: [{\n            type: Injectable\n        }] });\nclass LocationState {\n    constructor(path, query, state) {\n        this.path = path;\n        this.query = query;\n        this.state = state;\n    }\n}\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\nclass MockLocationStrategy extends LocationStrategy {\n    constructor() {\n        super();\n        this.internalBaseHref = '/';\n        this.internalPath = '/';\n        this.internalTitle = '';\n        this.urlChanges = [];\n        /** @internal */\n        this._subject = new EventEmitter();\n        this.stateChanges = [];\n    }\n    simulatePopState(url) {\n        this.internalPath = url;\n        this._subject.emit(new _MockPopStateEvent(this.path()));\n    }\n    path(includeHash = false) {\n        return this.internalPath;\n    }\n    prepareExternalUrl(internal) {\n        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n            return this.internalBaseHref + internal.substring(1);\n        }\n        return this.internalBaseHref + internal;\n    }\n    pushState(ctx, title, path, query) {\n        // Add state change to changes array\n        this.stateChanges.push(ctx);\n        this.internalTitle = title;\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.internalPath = url;\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push(externalUrl);\n    }\n    replaceState(ctx, title, path, query) {\n        // Reset the last index of stateChanges to the ctx (state) object\n        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n        this.internalTitle = title;\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.internalPath = url;\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push('replace: ' + externalUrl);\n    }\n    onPopState(fn) {\n        this._subject.subscribe({ next: fn });\n    }\n    getBaseHref() {\n        return this.internalBaseHref;\n    }\n    back() {\n        if (this.urlChanges.length > 0) {\n            this.urlChanges.pop();\n            this.stateChanges.pop();\n            const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n            this.simulatePopState(nextUrl);\n        }\n    }\n    forward() {\n        throw 'not implemented';\n    }\n    getState() {\n        return this.stateChanges[(this.stateChanges.length || 1) - 1];\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: MockLocationStrategy, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: MockLocationStrategy }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: MockLocationStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\nclass _MockPopStateEvent {\n    constructor(newUrl) {\n        this.newUrl = newUrl;\n        this.pop = true;\n        this.type = 'popstate';\n    }\n}\n\n/**\n * Returns mock providers for the `Location` and `LocationStrategy` classes.\n * The mocks are helpful in tests to fire simulated location events.\n *\n * @publicApi\n */\nfunction provideLocationMocks() {\n    return [\n        { provide: Location, useClass: SpyLocation },\n        { provide: LocationStrategy, useClass: MockLocationStrategy },\n    ];\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common/testing package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation, provideLocationMocks, provideFakePlatformNavigation as \u0275provideFakePlatformNavigation };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": "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",
  "names": ["window", "_a"]
}
