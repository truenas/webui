81122c1bfd9439be221d2d324164ca47
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  MOCK_PLATFORM_LOCATION_CONFIG: () => MOCK_PLATFORM_LOCATION_CONFIG,
  MockLocationStrategy: () => MockLocationStrategy,
  MockPlatformLocation: () => MockPlatformLocation,
  SpyLocation: () => SpyLocation,
  provideLocationMocks: () => provideLocationMocks,
  \u0275provideFakePlatformNavigation: () => provideFakePlatformNavigation
});
module.exports = __toCommonJS(testing_exports);
var import_common = require("@angular/common");
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_rxjs = require("rxjs");
/**
 * @license Angular v18.2.4
 * (c) 2010-2024 Google LLC. https://angular.io/
 * License: MIT
 */
const _PlatformNavigation = class _PlatformNavigation {
};
_PlatformNavigation.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _PlatformNavigation, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable });
_PlatformNavigation.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _PlatformNavigation, providedIn: "platform", useFactory: () => window.navigation });
let PlatformNavigation = _PlatformNavigation;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: PlatformNavigation, decorators: [{
  type: import_core.Injectable,
  args: [{ providedIn: "platform", useFactory: () => window.navigation }]
}] });
class FakeNavigation {
  /** Equivalent to `navigation.currentEntry`. */
  get currentEntry() {
    return this.entriesArr[this.currentEntryIndex];
  }
  get canGoBack() {
    return this.currentEntryIndex > 0;
  }
  get canGoForward() {
    return this.currentEntryIndex < this.entriesArr.length - 1;
  }
  constructor(window2, startURL) {
    this.window = window2;
    this.entriesArr = [];
    this.currentEntryIndex = 0;
    this.navigateEvent = void 0;
    this.traversalQueue = /* @__PURE__ */ new Map();
    this.nextTraversal = Promise.resolve();
    this.prospectiveEntryIndex = 0;
    this.synchronousTraversals = false;
    this.canSetInitialEntry = true;
    this.eventTarget = this.window.document.createElement("div");
    this.nextId = 0;
    this.nextKey = 0;
    this.disposed = false;
    this.setInitialEntryForTesting(startURL);
  }
  /**
   * Sets the initial entry.
   */
  setInitialEntryForTesting(url, options = { historyState: null }) {
    var _a, _b;
    if (!this.canSetInitialEntry) {
      throw new Error("setInitialEntryForTesting can only be called before any navigation has occurred");
    }
    const currentInitialEntry = this.entriesArr[0];
    this.entriesArr[0] = new FakeNavigationHistoryEntry(new URL(url).toString(), {
      index: 0,
      key: (_a = currentInitialEntry == null ? void 0 : currentInitialEntry.key) != null ? _a : String(this.nextKey++),
      id: (_b = currentInitialEntry == null ? void 0 : currentInitialEntry.id) != null ? _b : String(this.nextId++),
      sameDocument: true,
      historyState: options == null ? void 0 : options.historyState,
      state: options.state
    });
  }
  /** Returns whether the initial entry is still eligible to be set. */
  canSetInitialEntryForTesting() {
    return this.canSetInitialEntry;
  }
  /**
   * Sets whether to emulate traversals as synchronous rather than
   * asynchronous.
   */
  setSynchronousTraversalsForTesting(synchronousTraversals) {
    this.synchronousTraversals = synchronousTraversals;
  }
  /** Equivalent to `navigation.entries()`. */
  entries() {
    return this.entriesArr.slice();
  }
  /** Equivalent to `navigation.navigate()`. */
  navigate(url, options) {
    const fromUrl = new URL(this.currentEntry.url);
    const toUrl = new URL(url, this.currentEntry.url);
    let navigationType;
    if (!(options == null ? void 0 : options.history) || options.history === "auto") {
      if (fromUrl.toString() === toUrl.toString()) {
        navigationType = "replace";
      } else {
        navigationType = "push";
      }
    } else {
      navigationType = options.history;
    }
    const hashChange = isHashChange(fromUrl, toUrl);
    const destination = new FakeNavigationDestination({
      url: toUrl.toString(),
      state: options == null ? void 0 : options.state,
      sameDocument: hashChange,
      historyState: null
    });
    const result = new InternalNavigationResult();
    this.userAgentNavigate(destination, result, {
      navigationType,
      cancelable: true,
      canIntercept: true,
      // Always false for navigate().
      userInitiated: false,
      hashChange,
      info: options == null ? void 0 : options.info
    });
    return {
      committed: result.committed,
      finished: result.finished
    };
  }
  /** Equivalent to `history.pushState()`. */
  pushState(data, title, url) {
    this.pushOrReplaceState("push", data, title, url);
  }
  /** Equivalent to `history.replaceState()`. */
  replaceState(data, title, url) {
    this.pushOrReplaceState("replace", data, title, url);
  }
  pushOrReplaceState(navigationType, data, _title, url) {
    const fromUrl = new URL(this.currentEntry.url);
    const toUrl = url ? new URL(url, this.currentEntry.url) : fromUrl;
    const hashChange = isHashChange(fromUrl, toUrl);
    const destination = new FakeNavigationDestination({
      url: toUrl.toString(),
      sameDocument: true,
      historyState: data
    });
    const result = new InternalNavigationResult();
    this.userAgentNavigate(destination, result, {
      navigationType,
      cancelable: true,
      canIntercept: true,
      // Always false for pushState() or replaceState().
      userInitiated: false,
      hashChange,
      skipPopState: true
    });
  }
  /** Equivalent to `navigation.traverseTo()`. */
  traverseTo(key, options) {
    const fromUrl = new URL(this.currentEntry.url);
    const entry = this.findEntry(key);
    if (!entry) {
      const domException = new DOMException("Invalid key", "InvalidStateError");
      const committed = Promise.reject(domException);
      const finished = Promise.reject(domException);
      committed.catch(() => {
      });
      finished.catch(() => {
      });
      return {
        committed,
        finished
      };
    }
    if (entry === this.currentEntry) {
      return {
        committed: Promise.resolve(this.currentEntry),
        finished: Promise.resolve(this.currentEntry)
      };
    }
    if (this.traversalQueue.has(entry.key)) {
      const existingResult = this.traversalQueue.get(entry.key);
      return {
        committed: existingResult.committed,
        finished: existingResult.finished
      };
    }
    const hashChange = isHashChange(fromUrl, new URL(entry.url, this.currentEntry.url));
    const destination = new FakeNavigationDestination({
      url: entry.url,
      state: entry.getState(),
      historyState: entry.getHistoryState(),
      key: entry.key,
      id: entry.id,
      index: entry.index,
      sameDocument: entry.sameDocument
    });
    this.prospectiveEntryIndex = entry.index;
    const result = new InternalNavigationResult();
    this.traversalQueue.set(entry.key, result);
    this.runTraversal(() => {
      this.traversalQueue.delete(entry.key);
      this.userAgentNavigate(destination, result, {
        navigationType: "traverse",
        cancelable: true,
        canIntercept: true,
        // Always false for traverseTo().
        userInitiated: false,
        hashChange,
        info: options == null ? void 0 : options.info
      });
    });
    return {
      committed: result.committed,
      finished: result.finished
    };
  }
  /** Equivalent to `navigation.back()`. */
  back(options) {
    if (this.currentEntryIndex === 0) {
      const domException = new DOMException("Cannot go back", "InvalidStateError");
      const committed = Promise.reject(domException);
      const finished = Promise.reject(domException);
      committed.catch(() => {
      });
      finished.catch(() => {
      });
      return {
        committed,
        finished
      };
    }
    const entry = this.entriesArr[this.currentEntryIndex - 1];
    return this.traverseTo(entry.key, options);
  }
  /** Equivalent to `navigation.forward()`. */
  forward(options) {
    if (this.currentEntryIndex === this.entriesArr.length - 1) {
      const domException = new DOMException("Cannot go forward", "InvalidStateError");
      const committed = Promise.reject(domException);
      const finished = Promise.reject(domException);
      committed.catch(() => {
      });
      finished.catch(() => {
      });
      return {
        committed,
        finished
      };
    }
    const entry = this.entriesArr[this.currentEntryIndex + 1];
    return this.traverseTo(entry.key, options);
  }
  /**
   * Equivalent to `history.go()`.
   * Note that this method does not actually work precisely to how Chrome
   * does, instead choosing a simpler model with less unexpected behavior.
   * Chrome has a few edge case optimizations, for instance with repeated
   * `back(); forward()` chains it collapses certain traversals.
   */
  go(direction) {
    const targetIndex = this.prospectiveEntryIndex + direction;
    if (targetIndex >= this.entriesArr.length || targetIndex < 0) {
      return;
    }
    this.prospectiveEntryIndex = targetIndex;
    this.runTraversal(() => {
      if (targetIndex >= this.entriesArr.length || targetIndex < 0) {
        return;
      }
      const fromUrl = new URL(this.currentEntry.url);
      const entry = this.entriesArr[targetIndex];
      const hashChange = isHashChange(fromUrl, new URL(entry.url, this.currentEntry.url));
      const destination = new FakeNavigationDestination({
        url: entry.url,
        state: entry.getState(),
        historyState: entry.getHistoryState(),
        key: entry.key,
        id: entry.id,
        index: entry.index,
        sameDocument: entry.sameDocument
      });
      const result = new InternalNavigationResult();
      this.userAgentNavigate(destination, result, {
        navigationType: "traverse",
        cancelable: true,
        canIntercept: true,
        // Always false for go().
        userInitiated: false,
        hashChange
      });
    });
  }
  /** Runs a traversal synchronously or asynchronously */
  runTraversal(traversal) {
    if (this.synchronousTraversals) {
      traversal();
      return;
    }
    this.nextTraversal = this.nextTraversal.then(() => {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
          traversal();
        });
      });
    });
  }
  /** Equivalent to `navigation.addEventListener()`. */
  addEventListener(type, callback, options) {
    this.eventTarget.addEventListener(type, callback, options);
  }
  /** Equivalent to `navigation.removeEventListener()`. */
  removeEventListener(type, callback, options) {
    this.eventTarget.removeEventListener(type, callback, options);
  }
  /** Equivalent to `navigation.dispatchEvent()` */
  dispatchEvent(event) {
    return this.eventTarget.dispatchEvent(event);
  }
  /** Cleans up resources. */
  dispose() {
    this.eventTarget = this.window.document.createElement("div");
    this.disposed = true;
  }
  /** Returns whether this fake is disposed. */
  isDisposed() {
    return this.disposed;
  }
  /** Implementation for all navigations and traversals. */
  userAgentNavigate(destination, result, options) {
    this.canSetInitialEntry = false;
    if (this.navigateEvent) {
      this.navigateEvent.cancel(new DOMException("Navigation was aborted", "AbortError"));
      this.navigateEvent = void 0;
    }
    const navigateEvent = createFakeNavigateEvent({
      navigationType: options.navigationType,
      cancelable: options.cancelable,
      canIntercept: options.canIntercept,
      userInitiated: options.userInitiated,
      hashChange: options.hashChange,
      signal: result.signal,
      destination,
      info: options.info,
      sameDocument: destination.sameDocument,
      skipPopState: options.skipPopState,
      result,
      userAgentCommit: () => {
        this.userAgentCommit();
      }
    });
    this.navigateEvent = navigateEvent;
    this.eventTarget.dispatchEvent(navigateEvent);
    navigateEvent.dispatchedNavigateEvent();
    if (navigateEvent.commitOption === "immediate") {
      navigateEvent.commit(
        /* internal= */
        true
      );
    }
  }
  /** Implementation to commit a navigation. */
  userAgentCommit() {
    if (!this.navigateEvent) {
      return;
    }
    const from = this.currentEntry;
    if (!this.navigateEvent.sameDocument) {
      const error = new Error("Cannot navigate to a non-same-document URL.");
      this.navigateEvent.cancel(error);
      throw error;
    }
    if (this.navigateEvent.navigationType === "push" || this.navigateEvent.navigationType === "replace") {
      this.userAgentPushOrReplace(this.navigateEvent.destination, {
        navigationType: this.navigateEvent.navigationType
      });
    } else if (this.navigateEvent.navigationType === "traverse") {
      this.userAgentTraverse(this.navigateEvent.destination);
    }
    this.navigateEvent.userAgentNavigated(this.currentEntry);
    const currentEntryChangeEvent = createFakeNavigationCurrentEntryChangeEvent({
      from,
      navigationType: this.navigateEvent.navigationType
    });
    this.eventTarget.dispatchEvent(currentEntryChangeEvent);
    if (!this.navigateEvent.skipPopState) {
      const popStateEvent = createPopStateEvent({
        state: this.navigateEvent.destination.getHistoryState()
      });
      this.window.dispatchEvent(popStateEvent);
    }
  }
  /** Implementation for a push or replace navigation. */
  userAgentPushOrReplace(destination, { navigationType }) {
    if (navigationType === "push") {
      this.currentEntryIndex++;
      this.prospectiveEntryIndex = this.currentEntryIndex;
    }
    const index = this.currentEntryIndex;
    const key = navigationType === "push" ? String(this.nextKey++) : this.currentEntry.key;
    const entry = new FakeNavigationHistoryEntry(destination.url, {
      id: String(this.nextId++),
      key,
      index,
      sameDocument: true,
      state: destination.getState(),
      historyState: destination.getHistoryState()
    });
    if (navigationType === "push") {
      this.entriesArr.splice(index, Infinity, entry);
    } else {
      this.entriesArr[index] = entry;
    }
  }
  /** Implementation for a traverse navigation. */
  userAgentTraverse(destination) {
    this.currentEntryIndex = destination.index;
  }
  /** Utility method for finding entries with the given `key`. */
  findEntry(key) {
    for (const entry of this.entriesArr) {
      if (entry.key === key)
        return entry;
    }
    return void 0;
  }
  set onnavigate(_handler) {
    throw new Error("unimplemented");
  }
  get onnavigate() {
    throw new Error("unimplemented");
  }
  set oncurrententrychange(_handler) {
    throw new Error("unimplemented");
  }
  get oncurrententrychange() {
    throw new Error("unimplemented");
  }
  set onnavigatesuccess(_handler) {
    throw new Error("unimplemented");
  }
  get onnavigatesuccess() {
    throw new Error("unimplemented");
  }
  set onnavigateerror(_handler) {
    throw new Error("unimplemented");
  }
  get onnavigateerror() {
    throw new Error("unimplemented");
  }
  get transition() {
    throw new Error("unimplemented");
  }
  updateCurrentEntry(_options) {
    throw new Error("unimplemented");
  }
  reload(_options) {
    throw new Error("unimplemented");
  }
}
class FakeNavigationHistoryEntry {
  constructor(url, { id, key, index, sameDocument, state, historyState }) {
    this.url = url;
    this.ondispose = null;
    this.id = id;
    this.key = key;
    this.index = index;
    this.sameDocument = sameDocument;
    this.state = state;
    this.historyState = historyState;
  }
  getState() {
    return this.state ? JSON.parse(JSON.stringify(this.state)) : this.state;
  }
  getHistoryState() {
    return this.historyState ? JSON.parse(JSON.stringify(this.historyState)) : this.historyState;
  }
  addEventListener(type, callback, options) {
    throw new Error("unimplemented");
  }
  removeEventListener(type, callback, options) {
    throw new Error("unimplemented");
  }
  dispatchEvent(event) {
    throw new Error("unimplemented");
  }
}
function createFakeNavigateEvent({ cancelable, canIntercept, userInitiated, hashChange, navigationType, signal, destination, info, sameDocument, skipPopState, result, userAgentCommit }) {
  const event = new Event("navigate", { bubbles: false, cancelable });
  event.canIntercept = canIntercept;
  event.userInitiated = userInitiated;
  event.hashChange = hashChange;
  event.navigationType = navigationType;
  event.signal = signal;
  event.destination = destination;
  event.info = info;
  event.downloadRequest = null;
  event.formData = null;
  event.sameDocument = sameDocument;
  event.skipPopState = skipPopState;
  event.commitOption = "immediate";
  let handlerFinished = void 0;
  let interceptCalled = false;
  let dispatchedNavigateEvent = false;
  let commitCalled = false;
  event.intercept = function(options) {
    interceptCalled = true;
    event.sameDocument = true;
    const handler = options == null ? void 0 : options.handler;
    if (handler) {
      handlerFinished = handler();
    }
    if (options == null ? void 0 : options.commit) {
      event.commitOption = options.commit;
    }
    if ((options == null ? void 0 : options.focusReset) !== void 0 || (options == null ? void 0 : options.scroll) !== void 0) {
      throw new Error("unimplemented");
    }
  };
  event.scroll = function() {
    throw new Error("unimplemented");
  };
  event.commit = function(internal = false) {
    if (!internal && !interceptCalled) {
      throw new DOMException(`Failed to execute 'commit' on 'NavigateEvent': intercept() must be called before commit().`, "InvalidStateError");
    }
    if (!dispatchedNavigateEvent) {
      throw new DOMException(`Failed to execute 'commit' on 'NavigateEvent': commit() may not be called during event dispatch.`, "InvalidStateError");
    }
    if (commitCalled) {
      throw new DOMException(`Failed to execute 'commit' on 'NavigateEvent': commit() already called.`, "InvalidStateError");
    }
    commitCalled = true;
    userAgentCommit();
  };
  event.cancel = function(reason) {
    result.committedReject(reason);
    result.finishedReject(reason);
  };
  event.dispatchedNavigateEvent = function() {
    dispatchedNavigateEvent = true;
    if (event.commitOption === "after-transition") {
      handlerFinished == null ? void 0 : handlerFinished.then(() => {
        if (!commitCalled) {
          event.commit(
            /* internal */
            true
          );
        }
      }, () => {
      });
    }
    Promise.all([result.committed, handlerFinished]).then(([entry]) => {
      result.finishedResolve(entry);
    }, (reason) => {
      result.finishedReject(reason);
    });
  };
  event.userAgentNavigated = function(entry) {
    result.committedResolve(entry);
  };
  return event;
}
function createFakeNavigationCurrentEntryChangeEvent({ from, navigationType }) {
  const event = new Event("currententrychange", {
    bubbles: false,
    cancelable: false
  });
  event.from = from;
  event.navigationType = navigationType;
  return event;
}
function createPopStateEvent({ state }) {
  const event = new Event("popstate", {
    bubbles: false,
    cancelable: false
  });
  event.state = state;
  return event;
}
class FakeNavigationDestination {
  constructor({ url, sameDocument, historyState, state, key = null, id = null, index = -1 }) {
    this.url = url;
    this.sameDocument = sameDocument;
    this.state = state;
    this.historyState = historyState;
    this.key = key;
    this.id = id;
    this.index = index;
  }
  getState() {
    return this.state;
  }
  getHistoryState() {
    return this.historyState;
  }
}
function isHashChange(from, to) {
  return to.hash !== from.hash && to.hostname === from.hostname && to.pathname === from.pathname && to.search === from.search;
}
class InternalNavigationResult {
  get signal() {
    return this.abortController.signal;
  }
  constructor() {
    this.abortController = new AbortController();
    this.committed = new Promise((resolve, reject) => {
      this.committedResolve = resolve;
      this.committedReject = reject;
    });
    this.finished = new Promise((resolve, reject) => __async(this, null, function* () {
      this.finishedResolve = resolve;
      this.finishedReject = (reason) => {
        reject(reason);
        this.abortController.abort(reason);
      };
    }));
    this.committed.catch(() => {
    });
    this.finished.catch(() => {
    });
  }
}
const urlParse = /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
function parseUrl(urlStr, baseHref) {
  const verifyProtocol = /^((http[s]?|ftp):\/\/)/;
  let serverBase;
  if (!verifyProtocol.test(urlStr)) {
    serverBase = "http://empty.com/";
  }
  let parsedUrl;
  try {
    parsedUrl = new URL(urlStr, serverBase);
  } catch (e) {
    const result = urlParse.exec(serverBase || "" + urlStr);
    if (!result) {
      throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);
    }
    const hostSplit = result[4].split(":");
    parsedUrl = {
      protocol: result[1],
      hostname: hostSplit[0],
      port: hostSplit[1] || "",
      pathname: result[5],
      search: result[6],
      hash: result[8]
    };
  }
  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {
    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);
  }
  return {
    hostname: !serverBase && parsedUrl.hostname || "",
    protocol: !serverBase && parsedUrl.protocol || "",
    port: !serverBase && parsedUrl.port || "",
    pathname: parsedUrl.pathname || "/",
    search: parsedUrl.search || "",
    hash: parsedUrl.hash || ""
  };
}
const MOCK_PLATFORM_LOCATION_CONFIG = new import_core.InjectionToken("MOCK_PLATFORM_LOCATION_CONFIG");
const _MockPlatformLocation = class _MockPlatformLocation {
  constructor(config) {
    this.baseHref = "";
    this.hashUpdate = new import_rxjs.Subject();
    this.popStateSubject = new import_rxjs.Subject();
    this.urlChangeIndex = 0;
    this.urlChanges = [{ hostname: "", protocol: "", port: "", pathname: "/", search: "", hash: "", state: null }];
    if (config) {
      this.baseHref = config.appBaseHref || "";
      const parsedChanges = this.parseChanges(null, config.startUrl || "http://_empty_/", this.baseHref);
      this.urlChanges[0] = __spreadValues({}, parsedChanges);
    }
  }
  get hostname() {
    return this.urlChanges[this.urlChangeIndex].hostname;
  }
  get protocol() {
    return this.urlChanges[this.urlChangeIndex].protocol;
  }
  get port() {
    return this.urlChanges[this.urlChangeIndex].port;
  }
  get pathname() {
    return this.urlChanges[this.urlChangeIndex].pathname;
  }
  get search() {
    return this.urlChanges[this.urlChangeIndex].search;
  }
  get hash() {
    return this.urlChanges[this.urlChangeIndex].hash;
  }
  get state() {
    return this.urlChanges[this.urlChangeIndex].state;
  }
  getBaseHrefFromDOM() {
    return this.baseHref;
  }
  onPopState(fn) {
    const subscription = this.popStateSubject.subscribe(fn);
    return () => subscription.unsubscribe();
  }
  onHashChange(fn) {
    const subscription = this.hashUpdate.subscribe(fn);
    return () => subscription.unsubscribe();
  }
  get href() {
    let url = `${this.protocol}//${this.hostname}${this.port ? ":" + this.port : ""}`;
    url += `${this.pathname === "/" ? "" : this.pathname}${this.search}${this.hash}`;
    return url;
  }
  get url() {
    return `${this.pathname}${this.search}${this.hash}`;
  }
  parseChanges(state, url, baseHref = "") {
    state = JSON.parse(JSON.stringify(state));
    return __spreadProps(__spreadValues({}, parseUrl(url, baseHref)), { state });
  }
  replaceState(state, title, newUrl) {
    const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);
    this.urlChanges[this.urlChangeIndex] = __spreadProps(__spreadValues({}, this.urlChanges[this.urlChangeIndex]), {
      pathname,
      search,
      hash,
      state: parsedState
    });
  }
  pushState(state, title, newUrl) {
    const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);
    if (this.urlChangeIndex > 0) {
      this.urlChanges.splice(this.urlChangeIndex + 1);
    }
    this.urlChanges.push(__spreadProps(__spreadValues({}, this.urlChanges[this.urlChangeIndex]), {
      pathname,
      search,
      hash,
      state: parsedState
    }));
    this.urlChangeIndex = this.urlChanges.length - 1;
  }
  forward() {
    const oldUrl = this.url;
    const oldHash = this.hash;
    if (this.urlChangeIndex < this.urlChanges.length) {
      this.urlChangeIndex++;
    }
    this.emitEvents(oldHash, oldUrl);
  }
  back() {
    const oldUrl = this.url;
    const oldHash = this.hash;
    if (this.urlChangeIndex > 0) {
      this.urlChangeIndex--;
    }
    this.emitEvents(oldHash, oldUrl);
  }
  historyGo(relativePosition = 0) {
    const oldUrl = this.url;
    const oldHash = this.hash;
    const nextPageIndex = this.urlChangeIndex + relativePosition;
    if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {
      this.urlChangeIndex = nextPageIndex;
    }
    this.emitEvents(oldHash, oldUrl);
  }
  getState() {
    return this.state;
  }
  /**
   * Browsers are inconsistent in when they fire events and perform the state updates
   * The most easiest thing to do in our mock is synchronous and that happens to match
   * Firefox and Chrome, at least somewhat closely
   *
   * https://github.com/WICG/navigation-api#watching-for-navigations
   * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94
   * popstate is always sent before hashchange:
   * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent
   */
  emitEvents(oldHash, oldUrl) {
    this.popStateSubject.next({
      type: "popstate",
      state: this.getState(),
      oldUrl,
      newUrl: this.url
    });
    if (oldHash !== this.hash) {
      this.hashUpdate.next({
        type: "hashchange",
        state: null,
        oldUrl,
        newUrl: this.url
      });
    }
  }
};
_MockPlatformLocation.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _MockPlatformLocation, deps: [{ token: MOCK_PLATFORM_LOCATION_CONFIG, optional: true }], target: i0.\u0275\u0275FactoryTarget.Injectable });
_MockPlatformLocation.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _MockPlatformLocation });
let MockPlatformLocation = _MockPlatformLocation;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: MockPlatformLocation, decorators: [{
  type: import_core.Injectable
}], ctorParameters: () => [{ type: void 0, decorators: [{
  type: import_core.Inject,
  args: [MOCK_PLATFORM_LOCATION_CONFIG]
}, {
  type: import_core.Optional
}] }] });
const _FakeNavigationPlatformLocation = class _FakeNavigationPlatformLocation {
  constructor() {
    this._platformNavigation = (0, import_core.inject)(import_common.\u0275PlatformNavigation);
    this.window = (0, import_core.inject)(import_common.DOCUMENT).defaultView;
    this.config = (0, import_core.inject)(MOCK_PLATFORM_LOCATION_CONFIG, { optional: true });
    if (!(this._platformNavigation instanceof FakeNavigation)) {
      throw new Error("FakePlatformNavigation cannot be used without FakeNavigation. Use `provideFakeNavigation` to have all these services provided together.");
    }
  }
  getBaseHrefFromDOM() {
    var _a, _b;
    return (_b = (_a = this.config) == null ? void 0 : _a.appBaseHref) != null ? _b : "";
  }
  onPopState(fn) {
    this.window.addEventListener("popstate", fn);
    return () => this.window.removeEventListener("popstate", fn);
  }
  onHashChange(fn) {
    this.window.addEventListener("hashchange", fn);
    return () => this.window.removeEventListener("hashchange", fn);
  }
  get href() {
    return this._platformNavigation.currentEntry.url;
  }
  get protocol() {
    return new URL(this._platformNavigation.currentEntry.url).protocol;
  }
  get hostname() {
    return new URL(this._platformNavigation.currentEntry.url).hostname;
  }
  get port() {
    return new URL(this._platformNavigation.currentEntry.url).port;
  }
  get pathname() {
    return new URL(this._platformNavigation.currentEntry.url).pathname;
  }
  get search() {
    return new URL(this._platformNavigation.currentEntry.url).search;
  }
  get hash() {
    return new URL(this._platformNavigation.currentEntry.url).hash;
  }
  pushState(state, title, url) {
    this._platformNavigation.pushState(state, title, url);
  }
  replaceState(state, title, url) {
    this._platformNavigation.replaceState(state, title, url);
  }
  forward() {
    this._platformNavigation.forward();
  }
  back() {
    this._platformNavigation.back();
  }
  historyGo(relativePosition = 0) {
    this._platformNavigation.go(relativePosition);
  }
  getState() {
    return this._platformNavigation.currentEntry.getHistoryState();
  }
};
_FakeNavigationPlatformLocation.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _FakeNavigationPlatformLocation, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable });
_FakeNavigationPlatformLocation.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _FakeNavigationPlatformLocation });
let FakeNavigationPlatformLocation = _FakeNavigationPlatformLocation;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: FakeNavigationPlatformLocation, decorators: [{
  type: import_core.Injectable
}], ctorParameters: () => [] });
function provideFakePlatformNavigation() {
  return [
    {
      provide: PlatformNavigation,
      useFactory: () => {
        var _a;
        const config = (0, import_core.inject)(MOCK_PLATFORM_LOCATION_CONFIG, { optional: true });
        return new FakeNavigation((0, import_core.inject)(import_common.DOCUMENT).defaultView, (_a = config == null ? void 0 : config.startUrl) != null ? _a : "http://_empty_/");
      }
    },
    { provide: import_common.PlatformLocation, useClass: FakeNavigationPlatformLocation }
  ];
}
const _SpyLocation = class _SpyLocation {
  constructor() {
    this.urlChanges = [];
    this._history = [new LocationState("", "", null)];
    this._historyIndex = 0;
    this._subject = new import_core.EventEmitter();
    this._basePath = "";
    this._locationStrategy = null;
    this._urlChangeListeners = [];
    this._urlChangeSubscription = null;
  }
  /** @nodoc */
  ngOnDestroy() {
    var _a;
    (_a = this._urlChangeSubscription) == null ? void 0 : _a.unsubscribe();
    this._urlChangeListeners = [];
  }
  setInitialPath(url) {
    this._history[this._historyIndex].path = url;
  }
  setBaseHref(url) {
    this._basePath = url;
  }
  path() {
    return this._history[this._historyIndex].path;
  }
  getState() {
    return this._history[this._historyIndex].state;
  }
  isCurrentPathEqualTo(path, query = "") {
    const givenPath = path.endsWith("/") ? path.substring(0, path.length - 1) : path;
    const currPath = this.path().endsWith("/") ? this.path().substring(0, this.path().length - 1) : this.path();
    return currPath == givenPath + (query.length > 0 ? "?" + query : "");
  }
  simulateUrlPop(pathname) {
    this._subject.emit({ "url": pathname, "pop": true, "type": "popstate" });
  }
  simulateHashChange(pathname) {
    const path = this.prepareExternalUrl(pathname);
    this.pushHistory(path, "", null);
    this.urlChanges.push("hash: " + pathname);
    this._subject.emit({ "url": pathname, "pop": true, "type": "popstate" });
    this._subject.emit({ "url": pathname, "pop": true, "type": "hashchange" });
  }
  prepareExternalUrl(url) {
    if (url.length > 0 && !url.startsWith("/")) {
      url = "/" + url;
    }
    return this._basePath + url;
  }
  go(path, query = "", state = null) {
    path = this.prepareExternalUrl(path);
    this.pushHistory(path, query, state);
    const locationState = this._history[this._historyIndex - 1];
    if (locationState.path == path && locationState.query == query) {
      return;
    }
    const url = path + (query.length > 0 ? "?" + query : "");
    this.urlChanges.push(url);
    this._notifyUrlChangeListeners(path + (0, import_common.\u0275normalizeQueryParams)(query), state);
  }
  replaceState(path, query = "", state = null) {
    path = this.prepareExternalUrl(path);
    const history = this._history[this._historyIndex];
    history.state = state;
    if (history.path == path && history.query == query) {
      return;
    }
    history.path = path;
    history.query = query;
    const url = path + (query.length > 0 ? "?" + query : "");
    this.urlChanges.push("replace: " + url);
    this._notifyUrlChangeListeners(path + (0, import_common.\u0275normalizeQueryParams)(query), state);
  }
  forward() {
    if (this._historyIndex < this._history.length - 1) {
      this._historyIndex++;
      this._subject.emit({
        "url": this.path(),
        "state": this.getState(),
        "pop": true,
        "type": "popstate"
      });
    }
  }
  back() {
    if (this._historyIndex > 0) {
      this._historyIndex--;
      this._subject.emit({
        "url": this.path(),
        "state": this.getState(),
        "pop": true,
        "type": "popstate"
      });
    }
  }
  historyGo(relativePosition = 0) {
    const nextPageIndex = this._historyIndex + relativePosition;
    if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {
      this._historyIndex = nextPageIndex;
      this._subject.emit({
        "url": this.path(),
        "state": this.getState(),
        "pop": true,
        "type": "popstate"
      });
    }
  }
  onUrlChange(fn) {
    var _a;
    this._urlChangeListeners.push(fn);
    (_a = this._urlChangeSubscription) != null ? _a : this._urlChangeSubscription = this.subscribe((v) => {
      this._notifyUrlChangeListeners(v.url, v.state);
    });
    return () => {
      var _a2;
      const fnIndex = this._urlChangeListeners.indexOf(fn);
      this._urlChangeListeners.splice(fnIndex, 1);
      if (this._urlChangeListeners.length === 0) {
        (_a2 = this._urlChangeSubscription) == null ? void 0 : _a2.unsubscribe();
        this._urlChangeSubscription = null;
      }
    };
  }
  /** @internal */
  _notifyUrlChangeListeners(url = "", state) {
    this._urlChangeListeners.forEach((fn) => fn(url, state));
  }
  subscribe(onNext, onThrow, onReturn) {
    return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
  }
  normalize(url) {
    return null;
  }
  pushHistory(path, query, state) {
    if (this._historyIndex > 0) {
      this._history.splice(this._historyIndex + 1);
    }
    this._history.push(new LocationState(path, query, state));
    this._historyIndex = this._history.length - 1;
  }
};
_SpyLocation.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _SpyLocation, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable });
_SpyLocation.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _SpyLocation });
let SpyLocation = _SpyLocation;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: SpyLocation, decorators: [{
  type: import_core.Injectable
}] });
class LocationState {
  constructor(path, query, state) {
    this.path = path;
    this.query = query;
    this.state = state;
  }
}
const _MockLocationStrategy = class _MockLocationStrategy extends import_common.LocationStrategy {
  constructor() {
    super();
    this.internalBaseHref = "/";
    this.internalPath = "/";
    this.internalTitle = "";
    this.urlChanges = [];
    this._subject = new import_core.EventEmitter();
    this.stateChanges = [];
  }
  simulatePopState(url) {
    this.internalPath = url;
    this._subject.emit(new _MockPopStateEvent(this.path()));
  }
  path(includeHash = false) {
    return this.internalPath;
  }
  prepareExternalUrl(internal) {
    if (internal.startsWith("/") && this.internalBaseHref.endsWith("/")) {
      return this.internalBaseHref + internal.substring(1);
    }
    return this.internalBaseHref + internal;
  }
  pushState(ctx, title, path, query) {
    this.stateChanges.push(ctx);
    this.internalTitle = title;
    const url = path + (query.length > 0 ? "?" + query : "");
    this.internalPath = url;
    const externalUrl = this.prepareExternalUrl(url);
    this.urlChanges.push(externalUrl);
  }
  replaceState(ctx, title, path, query) {
    this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;
    this.internalTitle = title;
    const url = path + (query.length > 0 ? "?" + query : "");
    this.internalPath = url;
    const externalUrl = this.prepareExternalUrl(url);
    this.urlChanges.push("replace: " + externalUrl);
  }
  onPopState(fn) {
    this._subject.subscribe({ next: fn });
  }
  getBaseHref() {
    return this.internalBaseHref;
  }
  back() {
    if (this.urlChanges.length > 0) {
      this.urlChanges.pop();
      this.stateChanges.pop();
      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : "";
      this.simulatePopState(nextUrl);
    }
  }
  forward() {
    throw "not implemented";
  }
  getState() {
    return this.stateChanges[(this.stateChanges.length || 1) - 1];
  }
};
_MockLocationStrategy.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _MockLocationStrategy, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable });
_MockLocationStrategy.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _MockLocationStrategy });
let MockLocationStrategy = _MockLocationStrategy;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: MockLocationStrategy, decorators: [{
  type: import_core.Injectable
}], ctorParameters: () => [] });
class _MockPopStateEvent {
  constructor(newUrl) {
    this.newUrl = newUrl;
    this.pop = true;
    this.type = "popstate";
  }
}
function provideLocationMocks() {
  return [
    { provide: import_common.Location, useClass: SpyLocation },
    { provide: import_common.LocationStrategy, useClass: MockLocationStrategy }
  ];
}
