2230b7429b03cc4d585bf4eef0b8cc49
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BreadcrumbComponent = void 0;
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const lodash_es_1 = require("lodash-es");
const operators_1 = require("rxjs/operators");
const test_directive_1 = require("app/modules/test-id/test.directive");
const route_parts_service_1 = require("app/services/route-parts/route-parts.service");
// TODO: Bad. Redo.
const noLinksRoutes = ['/credentials', '/reportsdashboard', '/system'];
let BreadcrumbComponent = class BreadcrumbComponent {
    constructor(router, routePartsService, cdr) {
        this.router = router;
        this.routePartsService = routePartsService;
        this.cdr = cdr;
    }
    ngOnInit() {
        this.breadcrumbs = this.getBreadcrumbs();
        this.router.events
            .pipe((0, operators_1.filter)((event) => event instanceof router_1.NavigationEnd), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.breadcrumbs = this.getBreadcrumbs();
            this.cdr.markForCheck();
        });
    }
    getBreadcrumbs() {
        const sortedRoutes = this.routePartsService.routeParts.sort((a, b) => a.ngUrl.length - b.ngUrl.length);
        const uniqRoutesList = (0, lodash_es_1.uniqBy)(sortedRoutes, 'url');
        const validRoutesBeforeCurrent = uniqRoutesList.filter((routePart) => {
            routePart.ngUrl = routePart.ngUrl.filter((item) => item !== '');
            if (routePart.url === this.router.url) {
                return false;
            }
            return Boolean(routePart.breadcrumb);
        });
        return validRoutesBeforeCurrent.map((routePart) => {
            if (noLinksRoutes.some((url) => routePart.url === url)) {
                return Object.assign(Object.assign({}, routePart), { url: null });
            }
            return routePart;
        });
    }
};
exports.BreadcrumbComponent = BreadcrumbComponent;
BreadcrumbComponent.ctorParameters = () => [
    { type: router_1.Router },
    { type: route_parts_service_1.RoutePartsService },
    { type: core_1.ChangeDetectorRef }
];
exports.BreadcrumbComponent = BreadcrumbComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-breadcrumb',
        template: require("./breadcrumb.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            router_1.RouterLink,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
        ],
    })
], BreadcrumbComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvcGFnZS1oZWFkZXIvYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FFdUI7QUFDdkIsNENBQW9FO0FBQ3BFLHlEQUFxRTtBQUNyRSw4Q0FBc0Q7QUFDdEQseUNBQW1DO0FBQ25DLDhDQUF3QztBQUN4Qyx1RUFBbUU7QUFDbkUsc0ZBQTRGO0FBRTVGLG1CQUFtQjtBQUNuQixNQUFNLGFBQWEsR0FBRyxDQUFDLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQztBQWVoRSxJQUFNLG1CQUFtQixHQUF6QixNQUFNLG1CQUFtQjtJQUU5QixZQUNVLE1BQWMsRUFDZCxpQkFBb0MsRUFDcEMsR0FBc0I7UUFGdEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsUUFBRyxHQUFILEdBQUcsQ0FBbUI7SUFDNUIsQ0FBQztJQUVMLFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07YUFDZixJQUFJLENBQ0gsSUFBQSxrQkFBTSxFQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLFlBQVksc0JBQWEsQ0FBQyxFQUNqRCxJQUFBLDhCQUFjLEVBQUMsSUFBSSxDQUFDLENBQ3JCLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sY0FBYztRQUNwQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkcsTUFBTSxjQUFjLEdBQUcsSUFBQSxrQkFBTSxFQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRCxNQUFNLHdCQUF3QixHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNuRSxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDaEUsSUFBSSxTQUFTLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3RDLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztZQUNELE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sd0JBQXdCLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDaEQsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ3ZELHVDQUFZLFNBQVMsS0FBRSxHQUFHLEVBQUUsSUFBSSxJQUFHO1lBQ3JDLENBQUM7WUFDRCxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBckNVLGtEQUFtQjs7Ozs7OzhCQUFuQixtQkFBbUI7SUFiL0IsSUFBQSw0QkFBWSxHQUFFO0lBQ2QsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLGVBQWU7UUFDekIsZ0RBQTBDO1FBRTFDLGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLE9BQU8sRUFBRTtZQUNQLG1CQUFVO1lBQ1YsOEJBQWE7WUFDYixzQkFBZTtTQUNoQjtLQUNGLENBQUM7R0FDVyxtQkFBbUIsQ0FzQy9CIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL3BhZ2UtaGVhZGVyL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQsIFJvdXRlckxpbmsgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IHVuaXFCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUZXN0RGlyZWN0aXZlIH0gZnJvbSAnYXBwL21vZHVsZXMvdGVzdC1pZC90ZXN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSb3V0ZVBhcnRzU2VydmljZSwgUm91dGVQYXJ0IH0gZnJvbSAnYXBwL3NlcnZpY2VzL3JvdXRlLXBhcnRzL3JvdXRlLXBhcnRzLnNlcnZpY2UnO1xuXG4vLyBUT0RPOiBCYWQuIFJlZG8uXG5jb25zdCBub0xpbmtzUm91dGVzID0gWycvY3JlZGVudGlhbHMnLCAnL3JlcG9ydHNkYXNoYm9hcmQnLCAnL3N5c3RlbSddO1xuXG5AVW50aWxEZXN0cm95KClcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LWJyZWFkY3J1bWInLFxuICB0ZW1wbGF0ZVVybDogJy4vYnJlYWRjcnVtYi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2JyZWFkY3J1bWIuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBSb3V0ZXJMaW5rLFxuICAgIFRlc3REaXJlY3RpdmUsXG4gICAgVHJhbnNsYXRlTW9kdWxlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgYnJlYWRjcnVtYnM6IFJvdXRlUGFydFtdO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgcm91dGVQYXJ0c1NlcnZpY2U6IFJvdXRlUGFydHNTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmJyZWFkY3J1bWJzID0gdGhpcy5nZXRCcmVhZGNydW1icygpO1xuXG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSxcbiAgICAgICAgdW50aWxEZXN0cm95ZWQodGhpcyksXG4gICAgICApLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuYnJlYWRjcnVtYnMgPSB0aGlzLmdldEJyZWFkY3J1bWJzKCk7XG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldEJyZWFkY3J1bWJzKCk6IFJvdXRlUGFydFtdIHtcbiAgICBjb25zdCBzb3J0ZWRSb3V0ZXMgPSB0aGlzLnJvdXRlUGFydHNTZXJ2aWNlLnJvdXRlUGFydHMuc29ydCgoYSwgYikgPT4gYS5uZ1VybC5sZW5ndGggLSBiLm5nVXJsLmxlbmd0aCk7XG4gICAgY29uc3QgdW5pcVJvdXRlc0xpc3QgPSB1bmlxQnkoc29ydGVkUm91dGVzLCAndXJsJyk7XG4gICAgY29uc3QgdmFsaWRSb3V0ZXNCZWZvcmVDdXJyZW50ID0gdW5pcVJvdXRlc0xpc3QuZmlsdGVyKChyb3V0ZVBhcnQpID0+IHtcbiAgICAgIHJvdXRlUGFydC5uZ1VybCA9IHJvdXRlUGFydC5uZ1VybC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gIT09ICcnKTtcbiAgICAgIGlmIChyb3V0ZVBhcnQudXJsID09PSB0aGlzLnJvdXRlci51cmwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEJvb2xlYW4ocm91dGVQYXJ0LmJyZWFkY3J1bWIpO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWxpZFJvdXRlc0JlZm9yZUN1cnJlbnQubWFwKChyb3V0ZVBhcnQpID0+IHtcbiAgICAgIGlmIChub0xpbmtzUm91dGVzLnNvbWUoKHVybCkgPT4gcm91dGVQYXJ0LnVybCA9PT0gdXJsKSkge1xuICAgICAgICByZXR1cm4geyAuLi5yb3V0ZVBhcnQsIHVybDogbnVsbCB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvdXRlUGFydDtcbiAgICB9KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9