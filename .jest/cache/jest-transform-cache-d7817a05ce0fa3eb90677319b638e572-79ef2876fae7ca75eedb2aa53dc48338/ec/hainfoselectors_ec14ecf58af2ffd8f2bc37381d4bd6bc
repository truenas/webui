d79abc877c54294dbb507a98471cb751
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectCanFailover = exports.selectIsUpgradePending = exports.selectIsHaEnabled = exports.selectIsHaLicensed = exports.selectHaStatus = exports.selectHaInfoState = exports.haInfoStateKey = void 0;
const store_1 = require("@ngrx/store");
const failover_disabled_reason_enum_1 = require("app/enums/failover-disabled-reason.enum");
exports.haInfoStateKey = 'haInfo';
exports.selectHaInfoState = (0, store_1.createFeatureSelector)(exports.haInfoStateKey);
exports.selectHaStatus = (0, store_1.createSelector)(exports.selectHaInfoState, (state) => state === null || state === void 0 ? void 0 : state.haStatus);
exports.selectIsHaLicensed = (0, store_1.createSelector)(exports.selectHaInfoState, (state) => (state === null || state === void 0 ? void 0 : state.isHaLicensed) || false);
exports.selectIsHaEnabled = (0, store_1.createSelector)(exports.selectHaStatus, (state) => (state === null || state === void 0 ? void 0 : state.hasHa) || false);
exports.selectIsUpgradePending = (0, store_1.createSelector)(exports.selectHaInfoState, (state) => (state === null || state === void 0 ? void 0 : state.isUpgradePending) || false);
exports.selectCanFailover = (0, store_1.createSelector)(exports.selectHaInfoState, ({ haStatus }) => {
    if (!haStatus) {
        return false;
    }
    if (haStatus.hasHa) {
        return true;
    }
    return haStatus.reasons.every((reason) => failover_disabled_reason_enum_1.failoverAllowedReasons.includes(reason));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3N0b3JlL2hhLWluZm8vaGEtaW5mby5zZWxlY3RvcnMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQW9FO0FBQ3BFLDJGQUFpRjtBQUdwRSxRQUFBLGNBQWMsR0FBRyxRQUFRLENBQUM7QUFFMUIsUUFBQSxpQkFBaUIsR0FBRyxJQUFBLDZCQUFxQixFQUFjLHNCQUFjLENBQUMsQ0FBQztBQUV2RSxRQUFBLGNBQWMsR0FBRyxJQUFBLHNCQUFjLEVBQzFDLHlCQUFpQixFQUNqQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFFBQVEsQ0FDM0IsQ0FBQztBQUVXLFFBQUEsa0JBQWtCLEdBQUcsSUFBQSxzQkFBYyxFQUM5Qyx5QkFBaUIsRUFDakIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFlBQVksS0FBSSxLQUFLLENBQ3hDLENBQUM7QUFFVyxRQUFBLGlCQUFpQixHQUFHLElBQUEsc0JBQWMsRUFDN0Msc0JBQWMsRUFDZCxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsS0FBSyxLQUFJLEtBQUssQ0FDakMsQ0FBQztBQUVXLFFBQUEsc0JBQXNCLEdBQUcsSUFBQSxzQkFBYyxFQUNsRCx5QkFBaUIsRUFDakIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGdCQUFnQixLQUFJLEtBQUssQ0FDNUMsQ0FBQztBQUVXLFFBQUEsaUJBQWlCLEdBQUcsSUFBQSxzQkFBYyxFQUM3Qyx5QkFBaUIsRUFDakIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7SUFDZixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxzREFBc0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNyRixDQUFDLENBQ0YsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvc3RvcmUvaGEtaW5mby9oYS1pbmZvLnNlbGVjdG9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgZmFpbG92ZXJBbGxvd2VkUmVhc29ucyB9IGZyb20gJ2FwcC9lbnVtcy9mYWlsb3Zlci1kaXNhYmxlZC1yZWFzb24uZW51bSc7XG5pbXBvcnQgeyBIYUluZm9TdGF0ZSB9IGZyb20gJ2FwcC9zdG9yZS9oYS1pbmZvL2hhLWluZm8ucmVkdWNlcic7XG5cbmV4cG9ydCBjb25zdCBoYUluZm9TdGF0ZUtleSA9ICdoYUluZm8nO1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0SGFJbmZvU3RhdGUgPSBjcmVhdGVGZWF0dXJlU2VsZWN0b3I8SGFJbmZvU3RhdGU+KGhhSW5mb1N0YXRlS2V5KTtcblxuZXhwb3J0IGNvbnN0IHNlbGVjdEhhU3RhdHVzID0gY3JlYXRlU2VsZWN0b3IoXG4gIHNlbGVjdEhhSW5mb1N0YXRlLFxuICAoc3RhdGUpID0+IHN0YXRlPy5oYVN0YXR1cyxcbik7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RJc0hhTGljZW5zZWQgPSBjcmVhdGVTZWxlY3RvcihcbiAgc2VsZWN0SGFJbmZvU3RhdGUsXG4gIChzdGF0ZSkgPT4gc3RhdGU/LmlzSGFMaWNlbnNlZCB8fCBmYWxzZSxcbik7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RJc0hhRW5hYmxlZCA9IGNyZWF0ZVNlbGVjdG9yKFxuICBzZWxlY3RIYVN0YXR1cyxcbiAgKHN0YXRlKSA9PiBzdGF0ZT8uaGFzSGEgfHwgZmFsc2UsXG4pO1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0SXNVcGdyYWRlUGVuZGluZyA9IGNyZWF0ZVNlbGVjdG9yKFxuICBzZWxlY3RIYUluZm9TdGF0ZSxcbiAgKHN0YXRlKSA9PiBzdGF0ZT8uaXNVcGdyYWRlUGVuZGluZyB8fCBmYWxzZSxcbik7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RDYW5GYWlsb3ZlciA9IGNyZWF0ZVNlbGVjdG9yKFxuICBzZWxlY3RIYUluZm9TdGF0ZSxcbiAgKHsgaGFTdGF0dXMgfSkgPT4ge1xuICAgIGlmICghaGFTdGF0dXMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaGFTdGF0dXMuaGFzSGEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBoYVN0YXR1cy5yZWFzb25zLmV2ZXJ5KChyZWFzb24pID0+IGZhaWxvdmVyQWxsb3dlZFJlYXNvbnMuaW5jbHVkZXMocmVhc29uKSk7XG4gIH0sXG4pO1xuIl0sInZlcnNpb24iOjN9