{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component.ts","mappings":";;;;;;;;;AAAA,wCAEuB;AACvB,0CAEwB;AACxB,iEAAsF;AACtF,yDAAqD;AACrD,6GAAwG;AACxG,uEAAmE;AACnE,6EAAyE;AAgBlE,IAAM,sBAAsB,GAA5B,MAAM,sBAAsB;IASjC,YACS,gBAA2B,EAC1B,GAAsB;QADvB,qBAAgB,GAAhB,gBAAgB,CAAW;QAC1B,QAAG,GAAH,GAAG,CAAmB;QALhC,eAAU,GAAG,KAAK,CAAC;QAUnB,aAAQ,GAA6B,GAAS,EAAE,GAAE,CAAC,CAAC;QACpD,YAAO,GAAe,GAAS,EAAE,GAAE,CAAC,CAAC;QAJnC,IAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,IAAI,CAAC;IAC7C,CAAC;IAKD,UAAU,CAAC,KAAc;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,gBAAgB,CAAC,QAAkC;QACjD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,iBAAiB,CAAC,SAAqB;QACrC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC3B,CAAC;IAED,gBAAgB,CAAE,UAAmB;QACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAED,oBAAoB,CAAC,KAA2B;QAC9C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;;AAxCU,wDAAsB;;;;;;oBAChC,YAAK;mBACL,YAAK;sBACL,YAAK;uBACL,YAAK;;iCAJK,sBAAsB;IAdlC,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,iBAAiB;QAE3B,qDAA+C;QAC/C,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE;YACP,6BAAc;YACd,oCAAgB;YAChB,uCAAiB;YACjB,8BAAa;SACd;KACF,CAAC;GACW,sBAAsB,CAyClC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, Input,\n} from '@angular/core';\nimport {\n  ControlValueAccessor, NgControl,\n} from '@angular/forms';\nimport { MatSlideToggleChange, MatSlideToggle } from '@angular/material/slide-toggle';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { IxErrorsComponent } from 'app/modules/forms/ix-forms/components/ix-errors/ix-errors.component';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport { TooltipComponent } from 'app/modules/tooltip/tooltip.component';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-slide-toggle',\n  styleUrls: ['./ix-slide-toggle.component.scss'],\n  templateUrl: './ix-slide-toggle.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatSlideToggle,\n    TooltipComponent,\n    IxErrorsComponent,\n    TestDirective,\n  ],\n})\nexport class IxSlideToggleComponent implements ControlValueAccessor {\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() tooltip: string;\n  @Input() required: boolean;\n\n  isDisabled = false;\n  value: boolean;\n\n  constructor(\n    public controlDirective: NgControl,\n    private cdr: ChangeDetectorRef,\n  ) {\n    this.controlDirective.valueAccessor = this;\n  }\n\n  onChange: (value: boolean) => void = (): void => {};\n  onTouch: () => void = (): void => {};\n\n  writeValue(value: boolean): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(onChange: (value: boolean) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: () => void): void {\n    this.onTouch = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  onSlideToggleChanged(event: MatSlideToggleChange): void {\n    this.value = event.checked;\n    this.onChange(event.checked);\n  }\n}\n"],"version":3}