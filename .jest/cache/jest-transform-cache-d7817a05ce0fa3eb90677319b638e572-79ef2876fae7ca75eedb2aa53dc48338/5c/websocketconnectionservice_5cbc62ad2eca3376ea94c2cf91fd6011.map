{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/websocket-connection.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/websocket-connection.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { UUID } from 'angular2-uuid';\nimport { environment } from 'environments/environment';\nimport {\n  BehaviorSubject, interval, NEVER, Observable, of, switchMap, tap, timer,\n} from 'rxjs';\nimport { webSocket as rxjsWebSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { IncomingApiMessageType, OutgoingApiMessageType } from 'app/enums/api-message-type.enum';\nimport { WEBSOCKET } from 'app/helpers/websocket.helper';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { ApiEventMethod, ApiEventTyped, IncomingWebSocketMessage } from 'app/interfaces/api-message.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebSocketConnectionService {\n  private ws$: WebSocketSubject<unknown>;\n\n  private readonly pingTimeoutMillis = 20 * 1000;\n  private readonly reconnectTimeoutMillis = 5 * 1000;\n  private pendingCallsBeforeConnectionReady = new Map<string, unknown>();\n\n  isTryingReconnect = false;\n  shutDownInProgress = false;\n  private connectionUrl = (this.window.location.protocol === 'https:' ? 'wss://' : 'ws://') + environment.remote + '/websocket';\n\n  private isConnectionReady = false;\n  private wsAsObservable$: Observable<unknown>;\n\n  get websocket$(): Observable<unknown> {\n    return this.wsAsObservable$;\n  }\n\n  readonly isConnected$ = new BehaviorSubject(false);\n  private readonly _isClosed$ = new BehaviorSubject(false);\n  private readonly _isAccessRestricted$ = new BehaviorSubject(false);\n\n  set isClosed$(value: boolean) {\n    this._isClosed$.next(value);\n  }\n\n  get isClosed$(): Observable<boolean> {\n    return this._isClosed$;\n  }\n\n  set isAccessRestricted$(value: boolean) {\n    this._isAccessRestricted$.next(value);\n  }\n\n  get isAccessRestricted$(): Observable<boolean> {\n    return this._isAccessRestricted$;\n  }\n\n  constructor(\n    @Inject(WINDOW) protected window: Window,\n    @Inject(WEBSOCKET) private webSocket: typeof rxjsWebSocket,\n  ) {\n    this.initializeWebSocket();\n    this.subscribeToConnectionStatus();\n    this.setupPing();\n  }\n\n  private initializeWebSocket(): void {\n    if (this.ws$) {\n      this.ws$.complete();\n    }\n\n    performance.mark('WS Init');\n    this.ws$ = this.webSocket({\n      url: this.connectionUrl,\n      openObserver: {\n        next: this.onOpen.bind(this),\n      },\n      closeObserver: {\n        next: this.onClose.bind(this),\n      },\n    });\n    this.wsAsObservable$ = this.ws$.asObservable().pipe(\n      switchMap((data: IncomingWebSocketMessage) => {\n        if (this.hasAuthError(data)) {\n          console.error(data);\n          this.ws$.complete();\n        }\n        return of(data);\n      }),\n    );\n    // At least one explicit subscription required to keep the connection open\n    this.ws$.pipe(\n      tap((response: IncomingWebSocketMessage) => {\n        if (response.msg === IncomingApiMessageType.Connected) {\n          performance.mark('WS Connected');\n          performance.measure('Establishing WS connection', 'WS Init', 'WS Connected');\n          this.isConnected$.next(true);\n        }\n      }),\n    ).subscribe();\n  }\n\n  private onOpen(): void {\n    if (this.isTryingReconnect) {\n      this.closeWebSocketConnection();\n      return;\n    }\n    this.shutDownInProgress = false;\n    this.sendConnectMessage();\n  }\n\n  /** TODO: Extract disconnection logic somewhere else */\n  private onClose(event: CloseEvent): void {\n    if (this.isTryingReconnect) {\n      return;\n    }\n    this.isTryingReconnect = true;\n    this.isConnected$.next(false);\n    this.isClosed$ = true;\n    if (event.code === 1008) {\n      this.isAccessRestricted$ = true;\n    } else {\n      this.reconnect();\n    }\n  }\n\n  reconnect(): void {\n    timer(this.reconnectTimeoutMillis).subscribe({\n      next: () => {\n        this.isTryingReconnect = false;\n        this.initializeWebSocket();\n      },\n    });\n  }\n\n  private hasAuthError(data: IncomingWebSocketMessage): boolean {\n    return 'error' in data && data.error.error === 207;\n  }\n\n  private setupPing(): void {\n    this.isConnected$.pipe(\n      switchMap((isConnected) => {\n        if (!isConnected) {\n          return NEVER;\n        }\n\n        return interval(this.pingTimeoutMillis);\n      }),\n    ).subscribe(() => {\n      this.ws$.next({ msg: OutgoingApiMessageType.Ping, id: UUID.UUID() });\n    });\n  }\n\n  private sendConnectMessage(): void {\n    this.ws$.next({\n      msg: OutgoingApiMessageType.Connect,\n      version: '1',\n      support: ['1'],\n    });\n  }\n\n  buildSubscriber<K extends ApiEventMethod, R extends ApiEventTyped<K>>(name: K): Observable<R> {\n    const id = UUID.UUID();\n    return this.ws$.multiplex(\n      () => ({ id, name, msg: OutgoingApiMessageType.Sub }),\n      () => ({ id, msg: OutgoingApiMessageType.UnSub }),\n      (message: R) => (message.collection === name && message.msg !== IncomingApiMessageType.NoSub),\n    ) as Observable<R>;\n  }\n\n  send(payload: unknown): void {\n    if (this.isConnectionReady) {\n      this.ws$.next(payload);\n    } else {\n      this.pendingCallsBeforeConnectionReady.set(UUID.UUID(), payload);\n    }\n  }\n\n  sendPendingCalls(): void {\n    this.pendingCallsBeforeConnectionReady.forEach((value, key) => {\n      this.send(value);\n      this.pendingCallsBeforeConnectionReady.delete(key);\n    });\n  }\n\n  closeWebSocketConnection(): void {\n    this.ws$.complete();\n  }\n\n  prepareShutdown(): void {\n    this.shutDownInProgress = true;\n  }\n\n  setupConnectionUrl(protocol: string, remote: string): void {\n    this.connectionUrl = (protocol === 'https:' ? 'wss://' : 'ws://')\n      + remote + '/websocket';\n  }\n\n  private subscribeToConnectionStatus(): void {\n    this.isConnected$.subscribe({\n      next: (isConnected) => {\n        this.isConnectionReady = isConnected;\n        if (isConnected) {\n          this.sendPendingCalls();\n        }\n      },\n    });\n  }\n}\n"],"version":3}