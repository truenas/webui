{"file":"/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_baseIsNative.js","mappings":";;;;;AAAA,oEAAyC;AACzC,kEAAsC;AACtC,gEAAqC;AACrC,kEAAsC;AAEtC;;;GAGG;AACH,IAAI,YAAY,GAAG,qBAAqB,CAAC;AAEzC,iDAAiD;AACjD,IAAI,YAAY,GAAG,6BAA6B,CAAC;AAEjD,2CAA2C;AAC3C,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,EAC9B,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;AAEnC,0DAA0D;AAC1D,IAAI,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC;AAEtC,gDAAgD;AAChD,IAAI,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;AAEhD,4CAA4C;AAC5C,IAAI,UAAU,GAAG,MAAM,CAAC,GAAG;IACzB,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;SAC9D,OAAO,CAAC,wDAAwD,EAAE,OAAO,CAAC,GAAG,GAAG,CAClF,CAAC;AAEF;;;;;;;GAOG;AACH,SAAS,YAAY,CAAC,KAAK;IACzB,IAAI,CAAC,IAAA,qBAAQ,EAAC,KAAK,CAAC,IAAI,IAAA,sBAAQ,EAAC,KAAK,CAAC,EAAE,CAAC;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,OAAO,GAAG,IAAA,uBAAU,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC;IAC5D,OAAO,OAAO,CAAC,IAAI,CAAC,IAAA,sBAAQ,EAAC,KAAK,CAAC,CAAC,CAAC;AACvC,CAAC;AAED,kBAAe,YAAY,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/lodash-es/_baseIsNative.js"],"sourcesContent":["import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n"],"version":3}