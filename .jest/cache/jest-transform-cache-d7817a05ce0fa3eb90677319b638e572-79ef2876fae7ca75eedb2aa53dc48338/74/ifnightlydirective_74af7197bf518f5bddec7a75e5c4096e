c6826c724e51a1317887ae5bae89a3f4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IfNightlyDirective = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const system_info_selectors_1 = require("app/store/system-info/system-info.selectors");
let IfNightlyDirective = class IfNightlyDirective {
    constructor(templateRef, viewContainer, cdr, store$) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.cdr = cdr;
        this.store$ = store$;
        this.isNightly = false;
    }
    ngOnInit() {
        this.store$.pipe(system_info_selectors_1.waitForSystemInfo, (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((systemInfo) => {
            this.viewContainer.clear();
            this.cdr.markForCheck();
            this.isNightly = systemInfo.version.includes('MASTER');
            if (!this.isNightly) {
                return;
            }
            this.viewContainer.createEmbeddedView(this.templateRef);
            this.cdr.markForCheck();
        });
    }
};
exports.IfNightlyDirective = IfNightlyDirective;
IfNightlyDirective.ctorParameters = () => [
    { type: core_1.TemplateRef },
    { type: core_1.ViewContainerRef },
    { type: core_1.ChangeDetectorRef },
    { type: store_1.Store }
];
exports.IfNightlyDirective = IfNightlyDirective = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Directive)({
        selector: '[ixIfNightly]',
        standalone: true,
    })
], IfNightlyDirective);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvaWYtbmlnaHRseS9pZi1uaWdodGx5LmRpcmVjdGl2ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FHdUI7QUFDdkIseURBQXFFO0FBQ3JFLHVDQUFvQztBQUVwQyx1RkFBZ0Y7QUFPekUsSUFBTSxrQkFBa0IsR0FBeEIsTUFBTSxrQkFBa0I7SUFHN0IsWUFDVSxXQUFpQyxFQUNqQyxhQUErQixFQUMvQixHQUFzQixFQUN0QixNQUF1QjtRQUh2QixnQkFBVyxHQUFYLFdBQVcsQ0FBc0I7UUFDakMsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3RCLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBTnpCLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFPdEIsQ0FBQztJQUVMLFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZCx5Q0FBaUIsRUFDakIsSUFBQSw4QkFBYyxFQUFDLElBQUksQ0FBQyxDQUNyQjthQUNFLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUV4QixJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQ3BCLE9BQU87WUFDVCxDQUFDO1lBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O0FBM0JVLGdEQUFrQjs7Ozs7Ozs2QkFBbEIsa0JBQWtCO0lBTDlCLElBQUEsNEJBQVksR0FBRTtJQUNkLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSxlQUFlO1FBQ3pCLFVBQVUsRUFBRSxJQUFJO0tBQ2pCLENBQUM7R0FDVyxrQkFBa0IsQ0E0QjlCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9kaXJlY3RpdmVzL2lmLW5pZ2h0bHkvaWYtbmlnaHRseS5kaXJlY3RpdmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVbnRpbERlc3Ryb3ksIHVudGlsRGVzdHJveWVkIH0gZnJvbSAnQG5nbmVhdC91bnRpbC1kZXN0cm95JztcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQXBwU3RhdGUgfSBmcm9tICdhcHAvc3RvcmUnO1xuaW1wb3J0IHsgd2FpdEZvclN5c3RlbUluZm8gfSBmcm9tICdhcHAvc3RvcmUvc3lzdGVtLWluZm8vc3lzdGVtLWluZm8uc2VsZWN0b3JzJztcblxuQFVudGlsRGVzdHJveSgpXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaXhJZk5pZ2h0bHldJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgSWZOaWdodGx5RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBpc05pZ2h0bHkgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjx1bmtub3duPixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgc3RvcmUkOiBTdG9yZTxBcHBTdGF0ZT4sXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yZSQucGlwZShcbiAgICAgIHdhaXRGb3JTeXN0ZW1JbmZvLFxuICAgICAgdW50aWxEZXN0cm95ZWQodGhpcyksXG4gICAgKVxuICAgICAgLnN1YnNjcmliZSgoc3lzdGVtSW5mbykgPT4ge1xuICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG5cbiAgICAgICAgdGhpcy5pc05pZ2h0bHkgPSBzeXN0ZW1JbmZvLnZlcnNpb24uaW5jbHVkZXMoJ01BU1RFUicpO1xuICAgICAgICBpZiAoIXRoaXMuaXNOaWdodGx5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9