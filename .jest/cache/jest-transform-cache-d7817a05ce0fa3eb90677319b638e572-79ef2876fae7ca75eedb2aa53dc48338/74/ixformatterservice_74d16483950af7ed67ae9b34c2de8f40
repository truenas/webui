fa1f53c61a6dbc3b3d0fbbde94556d27
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxFormatterService = void 0;
const core_1 = require("@angular/core");
const window_helper_1 = require("app/helpers/window.helper");
let IxFormatterService = class IxFormatterService {
    constructor(window) {
        var _a, _b;
        this.window = window;
        this.protocol = ((_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.protocol) || 'http:';
        this.iecUnits = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB'];
        /**
         * Formats any memory size in bytes to human readable string, e.g., '2147483648' to '2 GiB'
         * @param value The string to be formatted
         * @returns Formatted string
         */
        this.memorySizeFormatting = (value) => {
            if (!value) {
                return '';
            }
            value = value.toString();
            return !value || Number.isNaN(Number(value)) ? '' : this.convertBytesToHumanReadable(value, 2);
        };
        /**
         * Parses passed in human readable memory size string into a normalized value.
         * If no units are provided, MiB is used as default unit
         * @param value The value to be parsed
         * @returns The parsed value
         */
        this.memorySizeParsing = (value, postfix) => {
            if (!value) {
                return null;
            }
            const finalValue = `${value} ${!Number(value) ? '' : postfix || ''}`.trim();
            const humanStringToNum = this.convertHumanStringToNum(finalValue, true);
            // Default unit is MiB so if the user passed in no unit, we assume unit is MiB
            return (humanStringToNum !== Number(finalValue)) ? humanStringToNum : this.convertHumanStringToNum(finalValue + 'mb', true);
        };
        /**
         * Converts a number from bytes to the most natural human readable format
         * @param rawBytes Bytes to be converted
         * @param decimalPlaces Number of decimal places that the final value should be rounded off to
         * @param minUnits If no unit is provided, what minimum base unit should be assumed
         * @param hideBytes If the value is in bytes, should the 'B' sign be added
         * @returns A human readable string with appropriate units
         */
        this.convertBytesToHumanReadable = (rawBytes, decimalPlaces, minUnits, hideBytes) => {
            let i = 0;
            let units;
            let bytes = Number(rawBytes);
            const dec = decimalPlaces !== undefined ? decimalPlaces : 2;
            if (bytes >= 1024) {
                do {
                    bytes = bytes / 1024;
                    i++;
                } while (bytes >= 1024 && i < 4);
                units = this.iecUnits[i];
            }
            else if (minUnits) {
                units = minUnits;
            }
            else {
                units = hideBytes ? '' : 'B';
            }
            return `${parseFloat(bytes.toFixed(dec))} ${units}`;
        };
        /**
         * Converts a human readable size string with units into bytes. Any invalid letters result in null returned
         * @param hstr The string to be converted
         * @param dec Does the passed string has a decimal point values
         * @param allowedUnits allowedUnits should include any or all of 'bkmgtp', the first letters of KiB, Mib, etc.
         * The first letter is used as the default, so for 'gtp', an entered value of 256 becomes 256 GiB.
         * If you don't pass in allowedUnits, all of the above are accepted AND no unit is attached to an unlabeled number,
         * so 256 is considered 256 bytes.
         * @returns The passed human readable string converted into number of bytes
         */
        this.convertHumanStringToNum = (hstr, dec = false, allowedUnits) => {
            const { unit, number } = this.getNumberAndUnitFromHumanString(hstr, dec, allowedUnits);
            return number === null ? null : Number(number) * this.convertUnitToNum(unit);
        };
        /**
         * Normalize short units ("MB") or human units ("M") to IEC units ("MiB")
         * @param unitStr The unit string to be normalized
         * @returns Normalized unit string based on the passed value
         */
        this.normalizeUnit = (unitStr) => {
            // empty unit is valid, just return
            if (!unitStr) {
                return '';
            }
            const iecUnitsStr = this.iecUnits.join('|');
            const shortUnitsStr = this.iecUnits.map((unit) => {
                if (unit.length > 1) {
                    return unit.charAt(0) + unit.charAt(2);
                }
                return 'BYTES';
            }).join('|');
            const humanUnitsStr = this.iecUnits.map((unit) => unit.charAt(0)).join('|');
            const allUnitsStr = (iecUnitsStr + '|' + shortUnitsStr + '|' + humanUnitsStr).toUpperCase();
            const unitsRe = new RegExp('^\\s*(' + allUnitsStr + '){1}\\s*$');
            unitStr = unitStr.toUpperCase();
            if (unitStr.match(unitsRe)) {
                // always return IEC units
                // could take a parameter to return short or human units
                if (unitStr.toLowerCase() === 'b' || unitStr.toLowerCase() === 'bytes') {
                    return 'B';
                }
                return unitStr.charAt(0).toUpperCase() + 'iB';
            }
            return undefined;
        };
        /**
         * Convert IEC ("MiB"), short ("MB"), or human ("M") units to number of bytes. Unknown units are evaluated as 1
         * @param unitStr The unit string to be converted
         * @returns Number of bytes
         */
        this.convertUnitToNum = (unitStr) => {
            unitStr = this.normalizeUnit(unitStr);
            if (!unitStr) {
                return 1;
            }
            return (1024 ** (this.iecUnits.indexOf(unitStr)));
        };
        this.stringAsUrlParsing = (value) => {
            if (value.startsWith('http')) {
                return value;
            }
            return `${this.protocol}//${value}`;
        };
    }
    /**
     * Converts passed in human readable string into two parts. The digit value in numbers and the unit that's applied.
     * @param hstr The human readable size string
     * @param dec Does the value has decimal point values
     * @param allowedUnits allowedUnits should include any or all of 'bkmgtp', the first letters of KiB, Mib, etc.
     * The first letter is used as the default, so for 'gtp', an entered value of 256 becomes 256 GiB.
     * If you don't pass in allowedUnits, all of the above are accepted AND no unit is attached to an unlabeled number,
     * so 256 is considered 256 bytes.
     * @returns The passed human readable string converted into number and unit seperately
     */
    getNumberAndUnitFromHumanString(hstr, dec = false, allowedUnits) {
        let num;
        let unit = '';
        // empty value is evaluated as zero
        if (!hstr) {
            return { number: null, unit: null };
        }
        // remove whitespace
        hstr = hstr.replace(/\s+/g, '');
        // get leading number
        let match = [];
        if (dec) {
            match = hstr.match(/^(\d+(\.\d+)?)/);
        }
        else {
            match = hstr.match(/^(\d+)/);
        }
        if (match && match.length > 1) {
            num = match[1];
        }
        else {
            // leading number is required
            return { number: null, unit: null };
        }
        // get optional unit
        unit = hstr.replace(num, '');
        if (!unit && allowedUnits) {
            unit = allowedUnits[0];
        }
        const normalizedUnit = this.normalizeUnit(unit);
        if (
        // error when unit is present and...
        (unit) && (
        // ...allowedUnits are passed in but unit is not in allowed Units
        (allowedUnits && !allowedUnits.toLowerCase().includes(unit[0].toLowerCase()))
            // ...when allowedUnits are not passed in and unit is not recognized
            || !normalizedUnit)) {
            return { number: null, unit: null };
        }
        return { number: num, unit: normalizedUnit };
    }
};
exports.IxFormatterService = IxFormatterService;
IxFormatterService.ctorParameters = () => [
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.IxFormatterService = IxFormatterService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], IxFormatterService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,