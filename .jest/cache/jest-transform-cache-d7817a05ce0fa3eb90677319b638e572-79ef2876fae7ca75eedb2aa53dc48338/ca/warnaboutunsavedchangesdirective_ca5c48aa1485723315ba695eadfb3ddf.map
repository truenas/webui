{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/warn-about-unsaved-changes/warn-about-unsaved-changes.directive.ts","mappings":";;;;;;;;;AAAA,wCAEuB;AAEvB,yDAAqE;AACrE,8CAAuD;AACvD,+BAAsC;AACtC,8CAA2C;AAC3C,sEAAkE;AAClE,uGAAiG;AAO1F,IAAM,gCAAgC,GAAtC,MAAM,gCAAgC;IAK3C,YACU,SAA2B,EAC3B,aAA4B,EAC5B,UAA2B;QAF3B,cAAS,GAAT,SAAS,CAAkB;QAC3B,kBAAa,GAAb,aAAa,CAAe;QAC5B,eAAU,GAAV,UAAU,CAAiB;QAL7B,kBAAa,GAAG,KAAK,CAAC;IAM3B,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAGD,YAAY;QACV,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAE1B,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YACxC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,qBAAqB,CAAC,QAAY;QAChC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YAClD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACzB,OAAO,IAAA,SAAE,EAAC,IAAI,CAAC,CAAC;QAClB,CAAC;QAED,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAClC,IAAA,qBAAS,EAAC,CAAC,WAAW,EAAE,EAAE;YACxB,IAAI,WAAW,EAAE,CAAC;gBAChB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3B,CAAC;YACD,OAAO,IAAA,SAAE,EAAC,WAAW,CAAC,CAAC;QACzB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,oBAAoB;QAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,QAAY,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;aAC3E,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC;aAC1B,SAAS,EAAE,CAAC;IACjB,CAAC;IAEO,iBAAiB;QACvB,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAChD,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,2DAA2D,CAAC;YAC5F,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC;YACxC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;YACzC,WAAW,EAAE,KAAK;YAClB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAEO,SAAS,CAAC,QAAY;;QAC5B,MAAA,IAAI,CAAC,UAAU,CAAC,cAAc,0CAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,MAAA,IAAI,CAAC,UAAU,CAAC,cAAc,0CAAE,QAAQ,EAAE,CAAC;IAC7C,CAAC;;AA5DU,4EAAgC;;;;;;;wBAC1C,YAAK;2BAcL,mBAAY,SAAC,UAAU;;2CAfb,gCAAgC;IAL5C,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,2BAA2B;QACrC,UAAU,EAAE,IAAI;KACjB,CAAC;GACW,gCAAgC,CA6D5C","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/warn-about-unsaved-changes/warn-about-unsaved-changes.directive.ts"],"sourcesContent":["import {\n  Directive, Input, OnInit, HostListener,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxSlideInRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref';\n\n@UntilDestroy()\n@Directive({\n  selector: '[warnAboutUnsavedChanges]',\n  standalone: true,\n})\nexport class WarnAboutUnsavedChangesDirective<T> implements OnInit {\n  @Input() formGroup: FormGroup;\n\n  private formSubmitted = false;\n\n  constructor(\n    private translate: TranslateService,\n    private dialogService: DialogService,\n    private slideInRef: IxSlideInRef<T>,\n  ) {}\n\n  ngOnInit(): void {\n    this.overrideSlideInClose();\n  }\n\n  @HostListener('ngSubmit')\n  onFormSubmit(): void {\n    this.formSubmitted = true;\n\n    if (this.formGroup.status === 'INVALID') {\n      this.formSubmitted = false;\n    }\n  }\n\n  closeWithConfirmation(response?: T): Observable<boolean> {\n    if (this.formGroup.pristine || this.formSubmitted) {\n      this.emitClose(response);\n      return of(true);\n    }\n\n    return this.showConfirmDialog().pipe(\n      switchMap((shouldClose) => {\n        if (shouldClose) {\n          this.emitClose(response);\n        }\n        return of(shouldClose);\n      }),\n    );\n  }\n\n  private overrideSlideInClose(): void {\n    this.slideInRef.close = (response?: T) => this.closeWithConfirmation(response)\n      .pipe(untilDestroyed(this))\n      .subscribe();\n  }\n\n  private showConfirmDialog(): Observable<boolean> {\n    return this.dialogService.confirm({\n      title: this.translate.instant('Unsaved Changes'),\n      message: this.translate.instant('You have unsaved changes. Are you sure you want to close?'),\n      cancelText: this.translate.instant('No'),\n      buttonText: this.translate.instant('Yes'),\n      buttonColor: 'red',\n      hideCheckbox: true,\n    });\n  }\n\n  private emitClose(response?: T): void {\n    this.slideInRef.slideInClosed$?.next(response);\n    this.slideInRef.slideInClosed$?.complete();\n  }\n}\n"],"version":3}