{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/two-factor-auth/components/two-factor/two-factor.component.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/two-factor-auth/components/two-factor/two-factor.component.spec.ts"],"sourcesContent":["import { HarnessLoader } from '@angular/cdk/testing';\nimport { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { MatButtonHarness } from '@angular/material/button/testing';\nimport { Spectator, createComponentFactory, mockProvider } from '@ngneat/spectator/jest';\nimport { MockComponent } from 'ng-mocks';\nimport { of } from 'rxjs';\nimport { mockCall, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { helptext2fa } from 'app/helptext/system/2fa';\nimport { LoggedInUser } from 'app/interfaces/ds-cache.interface';\nimport { GlobalTwoFactorConfig, UserTwoFactorConfig } from 'app/interfaces/two-factor-config.interface';\nimport { CopyButtonComponent } from 'app/modules/buttons/copy-button/copy-button.component';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxWarningComponent } from 'app/modules/forms/ix-forms/components/ix-warning/ix-warning.component';\nimport { QrViewerComponent } from 'app/pages/two-factor-auth/components/two-factor/qr-viewer/qr-viewer.component';\nimport { TwoFactorComponent } from 'app/pages/two-factor-auth/components/two-factor/two-factor.component';\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\ndescribe('TwoFactorComponent', () => {\n  let spectator: Spectator<TwoFactorComponent>;\n  let loader: HarnessLoader;\n  let ws: WebSocketService;\n\n  const createComponent = createComponentFactory({\n    component: TwoFactorComponent,\n    declarations: [\n      MockComponent(IxWarningComponent),\n      MockComponent(QrViewerComponent),\n      MockComponent(CopyButtonComponent),\n    ],\n    providers: [\n      mockProvider(DialogService, {\n        confirm: jest.fn(() => of(true)),\n      }),\n      mockWebSocket([\n        mockCall('user.renew_2fa_secret'),\n      ]),\n      mockProvider(AuthService, {\n        user$: of({\n          pw_name: 'dummy',\n          two_factor_config: {\n            secret_configured: true,\n          },\n        } as LoggedInUser),\n        userTwoFactorConfig$: of({\n          provisioning_uri: 'somepath://here/iXsystems:first-test?secret=KYC123',\n          interval: 30,\n          otp_digits: 6,\n          secret_configured: true,\n        } as UserTwoFactorConfig),\n        getGlobalTwoFactorConfig: jest.fn(() => of({ enabled: false } as GlobalTwoFactorConfig)),\n      }),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createComponent();\n    loader = TestbedHarnessEnvironment.loader(spectator.fixture);\n    ws = spectator.inject(WebSocketService);\n  });\n\n  it('shows warning when global setting is disabled', () => {\n    jest.spyOn(spectator.inject(AuthService), 'getGlobalTwoFactorConfig').mockImplementation(() => of({\n      enabled: true,\n    } as GlobalTwoFactorConfig));\n    const warning = spectator.query(IxWarningComponent);\n    expect(warning).toBeTruthy();\n    expect(warning).toHaveAttribute('message', helptext2fa.two_factor.global_disabled);\n  });\n\n  it('shows warning when global setting is enabled but user disabled', () => {\n    spectator.component.ngOnInit();\n    spectator.component.userTwoFactorAuthConfigured = false;\n    spectator.detectChanges();\n    const warning = spectator.query(IxWarningComponent);\n    expect(warning).toBeTruthy();\n    expect(warning).toHaveAttribute('message', helptext2fa.two_factor.global_enabled_user_disabled);\n  });\n\n  it('shows warning when global setting is enabled and user enabled', () => {\n    spectator.component.ngOnInit();\n    spectator.detectChanges();\n    const warning = spectator.query(IxWarningComponent);\n    expect(warning).toBeTruthy();\n    expect(warning).toHaveAttribute('message', helptext2fa.two_factor.global_enabled_user_enabled);\n  });\n\n  it('renews secret when button is clicked', async () => {\n    const renewBtn = await loader.getHarness(MatButtonHarness.with({ text: 'Renew 2FA Secret' }));\n    await renewBtn.click();\n\n    expect(spectator.inject(DialogService).confirm).toHaveBeenCalledWith({\n      title: helptext2fa.two_factor.renewSecret.title,\n      message: helptext2fa.two_factor.renewSecret.message,\n      hideCheckbox: true,\n      buttonText: helptext2fa.two_factor.renewSecret.btn,\n    });\n\n    expect(ws.call).toHaveBeenCalledWith('user.renew_2fa_secret', ['dummy', {\n      interval: 30,\n      otp_digits: 6,\n    }]);\n  });\n\n  it('displays the secret from provisioning URI in the component', () => {\n    spectator.component.userTwoFactorAuthConfigured = true;\n    spectator.detectChanges();\n\n    const secretElement = spectator.query('.secret p');\n    expect(secretElement).toBeTruthy();\n    expect(secretElement).toHaveText('KYC123');\n  });\n\n  it('shows a copy button with the correct secret', () => {\n    spectator.component.userTwoFactorAuthConfigured = true;\n    spectator.detectChanges();\n\n    const copyButton = spectator.query(CopyButtonComponent);\n    expect(copyButton).toBeTruthy();\n    expect(copyButton).toHaveProperty('text', 'KYC123');\n  });\n});\n"],"version":3}