{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/operators/options.operators.ts","mappings":";;AAUA,4CAMC;AAED,wCAIC;AAED,oDAIC;AAED,oEAIC;AAED,oDAIC;AAxCD,yCAAiC;AAEjC,8CAAqC;AAIrC;;;GAGG;AACH,SAAgB,gBAAgB;IAC9B,OAAO,IAAA,eAAG,EAAC,CAAC,OAAO,EAAE,EAAE;QACrB,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAChC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CACvC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,cAAc;IAC5B,OAAO,IAAA,eAAG,EAAC,CAAC,OAAO,EAAE,EAAE;QACrB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,oBAAoB;IAClC,OAAO,IAAA,eAAG,EAAC,CAAC,OAAO,EAAE,EAAE;QACrB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,4BAA4B;IAC1C,OAAO,IAAA,eAAG,EAAC,CAAC,cAAc,EAAE,EAAE;QAC5B,OAAO,IAAA,gBAAI,EAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,oBAAoB;IAClC,OAAO,IAAA,eAAG,EAAC,CAAC,OAAO,EAAE,EAAE;QACrB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;AACL,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/operators/options.operators.ts"],"sourcesContent":["import { uniq } from 'lodash-es';\nimport { OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Choices } from 'app/interfaces/choices.interface';\nimport { MapOption, Option } from 'app/interfaces/option.interface';\n\n/**\n * Convert choices to options\n * @returns Option[]\n */\nexport function choicesToOptions(): OperatorFunction<Choices, Option[]> {\n  return map((choices) => {\n    return Object.entries(choices).map(\n      ([value, label]) => ({ label, value }),\n    );\n  });\n}\n\nexport function arrayToOptions(): OperatorFunction<MapOption[], Option[]> {\n  return map((choices) => {\n    return choices.map(([value, label]) => ({ label, value }));\n  });\n}\n\nexport function singleArrayToOptions(): OperatorFunction<(string | number)[], Option[]> {\n  return map((choices) => {\n    return choices.map((choice) => ({ label: String(choice), value: choice }));\n  });\n}\n\nexport function redundantListToUniqueOptions(): OperatorFunction<string[], Option[]> {\n  return map((redundantArray) => {\n    return uniq(redundantArray).map((item: string) => ({ label: item, value: item }));\n  });\n}\n\nexport function idNameArrayToOptions<T = number>(): OperatorFunction<{ id: T; name: string }[], Option<T>[]> {\n  return map((options) => {\n    return options.map((option) => ({ label: option.name, value: option.id }));\n  });\n}\n"],"version":3}