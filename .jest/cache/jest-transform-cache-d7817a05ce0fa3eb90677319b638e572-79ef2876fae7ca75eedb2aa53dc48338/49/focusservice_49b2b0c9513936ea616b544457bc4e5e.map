{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/focus.service.ts","mappings":";;;;;;;;;AAAA,4CAA2C;AAC3C,wCAAmD;AAK5C,IAAM,YAAY,GAAlB,MAAM,YAAY;IACvB,YAC4B,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QAGpC,uBAAkB,GAAuB,IAAI,CAAC;QAE9C,uBAAkB,GAAG;YAC3B,SAAS,EAAE,YAAY,EAAE,4CAA4C;YACrE,wBAAwB,EAAE,0BAA0B;YACpD,wBAAwB,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO;YACrD,mBAAmB,EAAE,iCAAiC;SACvD,CAAC;IATD,CAAC;IAWF,mBAAmB;QACjB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,aAA4B,CAAC;IACvE,CAAC;IAED,YAAY;QACV,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,UAAU,CAAC,GAAG,EAAE;;gBACd,MAAM,aAAa,GAAG,MAAA,IAAI,CAAC,kBAAkB,0CAAE,YAAY,CAAC,WAAW,CAAC,CAAC;gBACzE,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;gBAE7E,IAAI,aAAa,IAAI,CAAC,eAAe,EAAE,CAAC;oBACtC,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,eAAe,aAAa,IAAI,CAAC,CAAC;oBACrF,eAA+B,aAA/B,eAAe,uBAAf,eAAe,CAAkB,KAAK,EAAE,CAAC;gBAC5C,CAAC;qBAAM,CAAC;oBACN,MAAA,IAAI,CAAC,kBAAkB,0CAAE,KAAK,EAAE,CAAC;gBACnC,CAAC;gBAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YACjC,CAAC,EAAE,GAAG,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,EAAU;;QACzB,MAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,0CAAE,KAAK,EAAE,CAAC;IAC5C,CAAC;IAED,0BAA0B,CAAC,OAAoB;QAC7C,IAAI,CAAC,OAAO;YAAE,OAAO;QAErB,MAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClD,MAAM,cAAc,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC5C,cAAc,CAAC,KAAK,EAAE,CAAC;QACzB,CAAC;IACH,CAAC;IAED,oBAAoB,CAAC,OAAoB;QACvC,MAAM,QAAQ,GAAG,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9E,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAkB,CAAC;IAC/C,CAAC;;AArDQ,oCAAY;;2CAEpB,aAAM,SAAC,iBAAQ;;uBAFP,YAAY;IAHxB,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,YAAY,CAsDxB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/focus.service.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FocusService {\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n  ) {}\n\n    private lastFocusedElement: HTMLElement | null = null;\n\n    private focusableSelectors = [\n      'a[href]', 'area[href]', 'input:not([disabled]):not([type=\"hidden\"])',\n      'select:not([disabled])', 'textarea:not([disabled])',\n      'button:not([disabled])', 'iframe', 'object', 'embed',\n      '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])',\n    ];\n\n    captureCurrentFocus(): void {\n      this.lastFocusedElement = this.document.activeElement as HTMLElement;\n    }\n\n    restoreFocus(): void {\n      if (this.lastFocusedElement) {\n        setTimeout(() => {\n          const dataTestValue = this.lastFocusedElement?.getAttribute('data-test');\n          const overlayBackdrop = this.document.querySelector('.cdk-overlay-backdrop');\n\n          if (dataTestValue && !overlayBackdrop) {\n            const dataTestElement = this.document.querySelector(`[data-test=\"${dataTestValue}\"]`);\n            (dataTestElement as HTMLElement)?.focus();\n          } else {\n            this.lastFocusedElement?.focus();\n          }\n\n          this.lastFocusedElement = null;\n        }, 200);\n      }\n    }\n\n    focusElementById(id: string): void {\n      this.document.getElementById(id)?.focus();\n    }\n\n    focusFirstFocusableElement(element: HTMLElement): void {\n      if (!element) return;\n\n      const focusableElements = this.getFocusableElements(element);\n      if (this.getFocusableElements(element).length > 0) {\n        const firstFocusable = focusableElements[0];\n        firstFocusable.focus();\n      }\n    }\n\n    getFocusableElements(wrapper: HTMLElement): HTMLElement[] {\n      const elements = wrapper.querySelectorAll(this.focusableSelectors.join(', '));\n      return Array.from(elements) as HTMLElement[];\n    }\n}\n"],"version":3}