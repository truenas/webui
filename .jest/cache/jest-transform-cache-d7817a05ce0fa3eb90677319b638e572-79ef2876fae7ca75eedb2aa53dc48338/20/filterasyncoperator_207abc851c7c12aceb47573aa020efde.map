{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/operators/filter-async.operator.ts","mappings":";;AAOA,kCAWC;AAlBD,+BAEc;AAEd;;GAEG;AACH,SAAgB,WAAW,CAAI,gBAAmD;IAChF,OAAO,CAAC,OAAsB,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAC7C,IAAA,gBAAS,EAAC,CAAC,KAAK,EAAE,EAAE;QAClB,MAAM,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC3C,OAAO,UAAU,CAAC,IAAI,CACpB,IAAA,WAAI,EAAC,CAAC,CAAC,EACP,IAAA,aAAM,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAC1B,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CACjB,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;AACJ,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/operators/filter-async.operator.ts"],"sourcesContent":["import {\n  filter, map, Observable, OperatorFunction, switchMap, take,\n} from 'rxjs';\n\n/**\n * Similar to filter(), but accepts an observable.\n */\nexport function filterAsync<T>(predicateFactory: (value: T) => Observable<boolean>): OperatorFunction<T, T> {\n  return (source$: Observable<T>) => source$.pipe(\n    switchMap((value) => {\n      const predicate$ = predicateFactory(value);\n      return predicate$.pipe(\n        take(1),\n        filter((result) => result),\n        map(() => value),\n      );\n    }),\n  );\n}\n"],"version":3}