f431bf3063b6101ecb7dd61596ccbf83
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxTableHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/button/testing");
const cell_harness_1 = require("app/modules/ix-table/components/ix-table/cell.harness");
const row_harness_1 = require("app/modules/ix-table/components/ix-table/row.harness");
class IxTableHarness extends testing_1.ContentContainerComponentHarness {
    constructor() {
        super(...arguments);
        this.getCells = this.locatorForAll(cell_harness_1.IxCellHarness);
        this.getRows = this.locatorForAll(row_harness_1.IxRowHarness);
    }
    getHeaderTexts() {
        return __awaiter(this, void 0, void 0, function* () {
            const headerCells = yield this.locatorForAll('th')();
            return Promise.all(headerCells.map((cell) => cell.text()));
        });
    }
    getRowCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const rows = yield this.locatorForAll('.row')();
            return rows.length;
        });
    }
    getColumnCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const headerCells = yield this.locatorForAll('th')();
            return headerCells.length;
        });
    }
    getCell(row, column) {
        return __awaiter(this, void 0, void 0, function* () {
            const cells = yield this.getCells();
            const columnCount = yield this.getColumnCount();
            return cells[row * columnCount + column];
        });
    }
    getHarnessInCell(query, row, column) {
        return __awaiter(this, void 0, void 0, function* () {
            const cell = yield this.getCell(row, column);
            if (!cell) {
                throw new Error(`No cell found at row ${row} and column ${column}`);
            }
            return cell.getHarness(query);
        });
    }
    getAllHarnessesInCell(query, row, column) {
        return __awaiter(this, void 0, void 0, function* () {
            const cell = yield this.getCell(row, column);
            if (!cell) {
                throw new Error(`No cell found at row ${row} and column ${column}`);
            }
            return cell.getAllHarnesses(query);
        });
    }
    getHarnessInRow(query, text) {
        return __awaiter(this, void 0, void 0, function* () {
            const rowNumber = yield this.getNumberRowByText(text);
            const row = (yield this.getRows())[rowNumber];
            if (!row) {
                throw new Error(`No row found with number ${rowNumber}`);
            }
            return row.getHarness(query);
        });
    }
    getAllHarnessesInRow(query, text) {
        return __awaiter(this, void 0, void 0, function* () {
            const rowNumber = yield this.getNumberRowByText(text);
            const row = (yield this.getRows())[rowNumber];
            if (!row) {
                throw new Error(`No row found with number ${rowNumber}`);
            }
            return row.getAllHarnesses(query);
        });
    }
    getNumberRowByText(text) {
        return __awaiter(this, void 0, void 0, function* () {
            const texts = (yield this.getCellTexts()).slice(1);
            for (let i = 0; i < texts.length; i += 1) {
                if (texts[i].includes(text)) {
                    return i;
                }
            }
            throw new Error(`No row found with the text '${text}'`);
        });
    }
    getRowElement(row) {
        return __awaiter(this, void 0, void 0, function* () {
            const rows = yield this.locatorForAll('.row')();
            return rows[row];
        });
    }
    getToggle(row) {
        return __awaiter(this, void 0, void 0, function* () {
            const toggles = yield this.locatorForAll(testing_2.MatButtonHarness.with({ selector: '[ixTest="toggle-row"]' }))();
            return toggles[row];
        });
    }
    getCellTexts() {
        return __awaiter(this, void 0, void 0, function* () {
            const cells = yield this.getCells();
            const texts = yield (0, testing_1.parallel)(() => cells.map((cell) => cell.getText()));
            const columnCount = yield this.getColumnCount();
            if (!columnCount) {
                throw new Error('Could not determine column count');
            }
            const result = [];
            for (let i = 0; i < texts.length; i += columnCount) {
                result.push(texts.slice(i, i + columnCount));
            }
            return result;
        });
    }
    clickRow(row) {
        return __awaiter(this, void 0, void 0, function* () {
            (yield this.getRowElement(row)).click();
        });
    }
    clickToggle(row) {
        return __awaiter(this, void 0, void 0, function* () {
            (yield this.getToggle(row)).click();
        });
    }
}
exports.IxTableHarness = IxTableHarness;
IxTableHarness.hostSelector = 'ix-table';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,