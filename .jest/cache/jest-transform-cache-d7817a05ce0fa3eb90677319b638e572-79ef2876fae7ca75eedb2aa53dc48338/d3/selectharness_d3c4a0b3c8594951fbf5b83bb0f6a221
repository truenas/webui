73fefc1d976e5b38c43b59a52cc98111
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectHarness = void 0;
const testing_1 = require("@angular/material/select/testing");
const option_harness_1 = require("app/modules/forms/ix-forms/components/ix-select/option.harness");
/**
 * Overrides some methods in MatSelectHarness to use OptionHarness instead of MatOptionHarness.
 * Our custom OptionHarness removes tooltip text from option text.
 */
class SelectHarness extends testing_1.MatSelectHarness {
    constructor() {
        super(...arguments);
        this.optionClass = option_harness_1.OptionHarness;
    }
    /** Gets the options inside the select panel. */
    getOptions(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.documentRootLocatorFactory().locatorForAll(this.optionClass.with(Object.assign(Object.assign({}, (filter || {})), { ancestor: yield this.getPanelSelector() })))();
        });
    }
    getPanelSelector() {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield (yield this.host()).getAttribute('id');
            return `#${id}-panel`;
        });
    }
}
exports.SelectHarness = SelectHarness;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zZWxlY3Qvc2VsZWN0Lmhhcm5lc3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsOERBQW9FO0FBQ3BFLG1HQUErRjtBQUUvRjs7O0dBR0c7QUFDSCxNQUFhLGFBQWMsU0FBUSwwQkFBZ0I7SUFBbkQ7O1FBQ1ksZ0JBQVcsR0FBRyw4QkFBYSxDQUFDO0lBZ0J4QyxDQUFDO0lBZEMsZ0RBQWdEO0lBQ2pDLFVBQVUsQ0FBQyxNQUErQzs7WUFDdkUsT0FBTyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxhQUFhLENBQ3BELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdDQUNqQixDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsS0FDakIsUUFBUSxFQUFFLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQ2hCLENBQUMsQ0FDM0IsRUFBRSxDQUFDO1FBQ04sQ0FBQztLQUFBO0lBRWEsZ0JBQWdCOztZQUM1QixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEQsT0FBTyxJQUFJLEVBQUUsUUFBUSxDQUFDO1FBQ3hCLENBQUM7S0FBQTtDQUNGO0FBakJELHNDQWlCQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LXNlbGVjdC9zZWxlY3QuaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb25IYXJuZXNzRmlsdGVycyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBNYXRTZWxlY3RIYXJuZXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2VsZWN0L3Rlc3RpbmcnO1xuaW1wb3J0IHsgT3B0aW9uSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc2VsZWN0L29wdGlvbi5oYXJuZXNzJztcblxuLyoqXG4gKiBPdmVycmlkZXMgc29tZSBtZXRob2RzIGluIE1hdFNlbGVjdEhhcm5lc3MgdG8gdXNlIE9wdGlvbkhhcm5lc3MgaW5zdGVhZCBvZiBNYXRPcHRpb25IYXJuZXNzLlxuICogT3VyIGN1c3RvbSBPcHRpb25IYXJuZXNzIHJlbW92ZXMgdG9vbHRpcCB0ZXh0IGZyb20gb3B0aW9uIHRleHQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3RIYXJuZXNzIGV4dGVuZHMgTWF0U2VsZWN0SGFybmVzcyB7XG4gIHByb3RlY3RlZCBvcHRpb25DbGFzcyA9IE9wdGlvbkhhcm5lc3M7XG5cbiAgLyoqIEdldHMgdGhlIG9wdGlvbnMgaW5zaWRlIHRoZSBzZWxlY3QgcGFuZWwuICovXG4gIG92ZXJyaWRlIGFzeW5jIGdldE9wdGlvbnMoZmlsdGVyPzogT21pdDxPcHRpb25IYXJuZXNzRmlsdGVycywgJ2FuY2VzdG9yJz4pOiBQcm9taXNlPE9wdGlvbkhhcm5lc3NbXT4ge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Um9vdExvY2F0b3JGYWN0b3J5KCkubG9jYXRvckZvckFsbChcbiAgICAgIHRoaXMub3B0aW9uQ2xhc3Mud2l0aCh7XG4gICAgICAgIC4uLihmaWx0ZXIgfHwge30pLFxuICAgICAgICBhbmNlc3RvcjogYXdhaXQgdGhpcy5nZXRQYW5lbFNlbGVjdG9yKCksXG4gICAgICB9IGFzIE9wdGlvbkhhcm5lc3NGaWx0ZXJzKSxcbiAgICApKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFBhbmVsU2VsZWN0b3IoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBpZCA9IGF3YWl0IChhd2FpdCB0aGlzLmhvc3QoKSkuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIHJldHVybiBgIyR7aWR9LXBhbmVsYDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9