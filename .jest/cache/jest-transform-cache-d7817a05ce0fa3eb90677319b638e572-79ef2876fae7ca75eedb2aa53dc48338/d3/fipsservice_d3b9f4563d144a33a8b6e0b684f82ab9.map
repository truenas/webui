{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/fips.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/fips.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of, switchMap } from 'rxjs';\nimport {\n  filter, tap,\n} from 'rxjs/operators';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { SnackbarService } from 'app/modules/snackbar/services/snackbar.service';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FipsService {\n  /**\n   * Multiple dialogs may happen because of multiple events from failover.disabled.reasons.\n   */\n  private isFailoverPromptOpen = false;\n  private isRemotePromptOpen = false;\n\n  constructor(\n    private dialog: DialogService,\n    private translate: TranslateService,\n    private router: Router,\n    private snackbar: SnackbarService,\n    private ws: WebSocketService,\n    private errorHandler: ErrorHandlerService,\n  ) {}\n\n  promptForRestart(): Observable<unknown> {\n    return this.dialog.confirm({\n      title: this.translate.instant('FIPS Settings'),\n      message: this.translate.instant('Restart is recommended for new FIPS setting to take effect. Would you like to restart now?'),\n      buttonText: this.translate.instant('Restart Now'),\n    })\n      .pipe(\n        tap((approved) => {\n          if (approved) {\n            this.router.navigate(['/system-tasks/restart'], { skipLocationChange: true });\n          }\n        }),\n      );\n  }\n\n  promptForFailover(): Observable<unknown> {\n    return of(this.isFailoverPromptOpen).pipe(\n      filter((isOpen) => !isOpen),\n      switchMap(() => {\n        this.isFailoverPromptOpen = true;\n        return this.dialog.confirm({\n          title: this.translate.instant('FIPS Settings'),\n          message: this.translate.instant('Failover is recommended for new FIPS setting to take effect. Would you like to failover now?'),\n          buttonText: this.translate.instant('Failover Now'),\n        });\n      }),\n      tap((approved) => {\n        this.isFailoverPromptOpen = false;\n        if (approved) {\n          this.router.navigate(['/system-tasks/failover'], { skipLocationChange: true });\n        }\n      }),\n    );\n  }\n\n  promptForRemoteRestart(): Observable<unknown> {\n    return of(this.isRemotePromptOpen).pipe(\n      filter((isOpen) => !isOpen),\n      switchMap(() => {\n        this.isRemotePromptOpen = true;\n        return this.dialog.confirm({\n          title: this.translate.instant('FIPS Settings'),\n          message: this.translate.instant('Restart of a remote system is required for new FIPS setting to take effect. Would you like to restart standby now?'),\n          buttonText: this.translate.instant('Restart Standby'),\n        });\n      }),\n      switchMap((approved) => {\n        this.isRemotePromptOpen = false;\n        if (!approved) {\n          return of({});\n        }\n        return this.restartRemote();\n      }),\n    );\n  }\n\n  private restartRemote(): Observable<unknown> {\n    return this.dialog.jobDialog(\n      this.ws.job('failover.reboot.other_node'),\n      { title: this.translate.instant('Restarting Standby') },\n    )\n      .afterClosed()\n      .pipe(\n        this.errorHandler.catchError(),\n        tap(() => {\n          this.snackbar.success(this.translate.instant('System Security Settings Updated.'));\n        }),\n      );\n  }\n}\n"],"version":3}