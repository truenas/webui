628440adc761488cd49f14d26da4128b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FipsService = void 0;
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let FipsService = class FipsService {
    constructor(dialog, translate, router, snackbar, ws, errorHandler) {
        this.dialog = dialog;
        this.translate = translate;
        this.router = router;
        this.snackbar = snackbar;
        this.ws = ws;
        this.errorHandler = errorHandler;
        /**
         * Multiple dialogs may happen because of multiple events from failover.disabled.reasons.
         */
        this.isFailoverPromptOpen = false;
        this.isRemotePromptOpen = false;
    }
    promptForRestart() {
        return this.dialog.confirm({
            title: this.translate.instant('FIPS Settings'),
            message: this.translate.instant('Restart is recommended for new FIPS setting to take effect. Would you like to restart now?'),
            buttonText: this.translate.instant('Restart Now'),
        })
            .pipe((0, operators_1.tap)((approved) => {
            if (approved) {
                this.router.navigate(['/system-tasks/restart'], { skipLocationChange: true });
            }
        }));
    }
    promptForFailover() {
        return (0, rxjs_1.of)(this.isFailoverPromptOpen).pipe((0, operators_1.filter)((isOpen) => !isOpen), (0, rxjs_1.switchMap)(() => {
            this.isFailoverPromptOpen = true;
            return this.dialog.confirm({
                title: this.translate.instant('FIPS Settings'),
                message: this.translate.instant('Failover is recommended for new FIPS setting to take effect. Would you like to failover now?'),
                buttonText: this.translate.instant('Failover Now'),
            });
        }), (0, operators_1.tap)((approved) => {
            this.isFailoverPromptOpen = false;
            if (approved) {
                this.router.navigate(['/system-tasks/failover'], { skipLocationChange: true });
            }
        }));
    }
    promptForRemoteRestart() {
        return (0, rxjs_1.of)(this.isRemotePromptOpen).pipe((0, operators_1.filter)((isOpen) => !isOpen), (0, rxjs_1.switchMap)(() => {
            this.isRemotePromptOpen = true;
            return this.dialog.confirm({
                title: this.translate.instant('FIPS Settings'),
                message: this.translate.instant('Restart of a remote system is required for new FIPS setting to take effect. Would you like to restart standby now?'),
                buttonText: this.translate.instant('Restart Standby'),
            });
        }), (0, rxjs_1.switchMap)((approved) => {
            this.isRemotePromptOpen = false;
            if (!approved) {
                return (0, rxjs_1.of)({});
            }
            return this.restartRemote();
        }));
    }
    restartRemote() {
        return this.dialog.jobDialog(this.ws.job('failover.reboot.other_node'), { title: this.translate.instant('Restarting Standby') })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, operators_1.tap)(() => {
            this.snackbar.success(this.translate.instant('System Security Settings Updated.'));
        }));
    }
};
exports.FipsService = FipsService;
FipsService.ctorParameters = () => [
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: router_1.Router },
    { type: snackbar_service_1.SnackbarService },
    { type: ws_service_1.WebSocketService },
    { type: error_handler_service_1.ErrorHandlerService }
];
exports.FipsService = FipsService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], FipsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,