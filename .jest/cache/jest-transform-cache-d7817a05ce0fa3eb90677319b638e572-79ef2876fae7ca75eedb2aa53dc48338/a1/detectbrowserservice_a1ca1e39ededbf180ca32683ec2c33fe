50cbd86c5a541e8a6256588a59078c9b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DetectBrowserService = void 0;
const core_1 = require("@angular/core");
const window_helper_1 = require("app/helpers/window.helper");
/**
 * Avoid using if possible.
 */
let DetectBrowserService = class DetectBrowserService {
    constructor(window) {
        this.window = window;
    }
    isMacOs() {
        return this.window.navigator.userAgent.includes('Macintosh');
    }
    matchesBrowser(name) {
        const appName = this.window.navigator.appName;
        const ua = this.window.navigator.userAgent;
        const browserVersion = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
        const versionMatch = ua.match(/version\/([.\d]+)/i);
        if (browserVersion && versionMatch !== null) {
            browserVersion[2] = versionMatch[1];
        }
        const browserName = browserVersion ? browserVersion[1] : appName;
        return name === browserName;
    }
};
exports.DetectBrowserService = DetectBrowserService;
DetectBrowserService.ctorParameters = () => [
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.DetectBrowserService = DetectBrowserService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], DetectBrowserService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2RldGVjdC1icm93c2VyLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBQW1EO0FBQ25ELDZEQUFtRDtBQUVuRDs7R0FFRztBQUlJLElBQU0sb0JBQW9CLEdBQTFCLE1BQU0sb0JBQW9CO0lBQy9CLFlBQzBCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3JDLENBQUM7SUFFSixPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxjQUFjLENBQUMsSUFBWTtRQUN6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDOUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQzNDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQztRQUM3RixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEQsSUFBSSxjQUFjLElBQUksWUFBWSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQzVDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFFakUsT0FBTyxJQUFJLEtBQUssV0FBVyxDQUFDO0lBQzlCLENBQUM7O0FBcEJVLG9EQUFvQjs7eUNBRTVCLGFBQU0sU0FBQyxzQkFBTTs7K0JBRkwsb0JBQW9CO0lBSGhDLElBQUEsaUJBQVUsRUFBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyxvQkFBb0IsQ0FxQmhDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9kZXRlY3QtYnJvd3Nlci5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnYXBwL2hlbHBlcnMvd2luZG93LmhlbHBlcic7XG5cbi8qKlxuICogQXZvaWQgdXNpbmcgaWYgcG9zc2libGUuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBEZXRlY3RCcm93c2VyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoV0lORE9XKSBwcml2YXRlIHdpbmRvdzogV2luZG93LFxuICApIHt9XG5cbiAgaXNNYWNPcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy53aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnTWFjaW50b3NoJyk7XG4gIH1cblxuICBtYXRjaGVzQnJvd3NlcihuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBhcHBOYW1lID0gdGhpcy53aW5kb3cubmF2aWdhdG9yLmFwcE5hbWU7XG4gICAgY29uc3QgdWEgPSB0aGlzLndpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIGNvbnN0IGJyb3dzZXJWZXJzaW9uID0gdWEubWF0Y2goLyhvcGVyYXxjaHJvbWV8c2FmYXJpfGZpcmVmb3h8bXNpZSlcXC8/XFxzKihcXC4/XFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIGNvbnN0IHZlcnNpb25NYXRjaCA9IHVhLm1hdGNoKC92ZXJzaW9uXFwvKFsuXFxkXSspL2kpO1xuICAgIGlmIChicm93c2VyVmVyc2lvbiAmJiB2ZXJzaW9uTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgIGJyb3dzZXJWZXJzaW9uWzJdID0gdmVyc2lvbk1hdGNoWzFdO1xuICAgIH1cbiAgICBjb25zdCBicm93c2VyTmFtZSA9IGJyb3dzZXJWZXJzaW9uID8gYnJvd3NlclZlcnNpb25bMV0gOiBhcHBOYW1lO1xuXG4gICAgcmV0dXJuIG5hbWUgPT09IGJyb3dzZXJOYW1lO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=