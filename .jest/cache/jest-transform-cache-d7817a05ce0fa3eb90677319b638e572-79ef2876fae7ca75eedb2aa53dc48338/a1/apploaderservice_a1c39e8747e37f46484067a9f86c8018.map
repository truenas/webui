{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/loader/app-loader.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,qDAAmE;AACnE,0FAAsE;AACtE,+BAEc;AACd,wGAAmG;AAG5F,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAG3B,YAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IAAI,CAAC;IAE7C;;OAEG;IACH,UAAU;QACR,OAAO,CAAC,OAAsB,EAAE,EAAE,CAAC,IAAA,YAAK,EAAC,GAAG,EAAE;YAC5C,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO,OAAO,CAAC,IAAI,CACjB,IAAA,eAAQ,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAC7B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,QAAgB,IAAA,qCAAC,EAAC,aAAa,CAAC;QACnC,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;YACjC,OAAO,YAAK,CAAC;QACf,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,yCAAkB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,GAAG,KAAK,CAAC;QAC/C,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC;IAED,KAAK;QACH,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,GAAG,KAAK,CAAC;IACjD,CAAC;;AAzCU,4CAAgB;;;;2BAAhB,gBAAgB;IAD5B,IAAA,iBAAU,EAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,gBAAgB,CA0C5B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/loader/app-loader.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { marker as T } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n  defer, EMPTY, finalize, MonoTypeOperatorFunction, Observable,\n} from 'rxjs';\nimport { AppLoaderComponent } from 'app/modules/loader/components/app-loader/app-loader.component';\n\n@Injectable({ providedIn: 'root' })\nexport class AppLoaderService {\n  dialogRef: MatDialogRef<AppLoaderComponent>;\n\n  constructor(private matDialog: MatDialog) { }\n\n  /**\n   * Opens loader when observable (request) starts and closes when it ends.\n   */\n  withLoader<T>(): MonoTypeOperatorFunction<T> {\n    return (source$: Observable<T>) => defer(() => {\n      this.open();\n      return source$.pipe(\n        finalize(() => this.close()),\n      );\n    });\n  }\n\n  open(title: string = T('Please wait')): Observable<boolean> {\n    if (this.dialogRef !== undefined) {\n      return EMPTY;\n    }\n\n    this.dialogRef = this.matDialog.open(AppLoaderComponent, { disableClose: true });\n    this.dialogRef.updateSize('200px', '200px');\n    this.dialogRef.componentInstance.title = title;\n    return this.dialogRef.afterClosed();\n  }\n\n  close(): void {\n    if (this.dialogRef) {\n      this.dialogRef.close();\n      this.dialogRef = undefined;\n    }\n  }\n\n  setTitle(title: string): void {\n    if (!this.dialogRef) {\n      return;\n    }\n\n    this.dialogRef.componentInstance.title = title;\n  }\n}\n"],"version":3}