17cd95c9d9c4ad295595fe1d5b8f7b59
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemGeneralService = void 0;
const core_1 = require("@angular/core");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const product_type_enum_1 = require("app/enums/product-type.enum");
const ws_service_1 = require("app/services/ws.service");
let SystemGeneralService = class SystemGeneralService {
    /**
     * @deprecated
     * Use selectIsEnterprise selector instead
     */
    get isEnterprise() {
        return this.getProductType() === product_type_enum_1.ProductType.ScaleEnterprise;
    }
    /**
     * @deprecated
     * Use selectProductType selector instead
     */
    getProductType() {
        return this.productType;
    }
    loadProductType() {
        return this.getProductType$.pipe((0, operators_1.map)((productType) => {
            this.productType = productType;
            return undefined;
        }));
    }
    constructor(ws) {
        this.ws = ws;
        this.certificateList = 'certificate.query';
        this.caList = 'certificateauthority.query';
        this.updateRunning = new core_1.EventEmitter();
        this.updateRunningNoticeSent = new core_1.EventEmitter();
        this.updateIsDone$ = new rxjs_1.Subject();
        /**
         * @deprecated
         * Use selectProductType selector instead
         */
        this.getProductType$ = this.ws.call('system.product_type').pipe((0, operators_1.shareReplay)({ refCount: false, bufferSize: 1 }));
        /**
         * @deprecated
         * Use selectIsEnterprise selector instead
         */
        this.isEnterprise$ = this.getProductType$.pipe((0, operators_1.map)((productType) => productType === product_type_enum_1.ProductType.ScaleEnterprise), (0, operators_1.shareReplay)({ refCount: true, bufferSize: 1 }));
    }
    getCertificateAuthorities() {
        return this.ws.call(this.caList, []);
    }
    getCertificates() {
        return this.ws.call(this.certificateList);
    }
    getUnsignedCertificates() {
        return this.ws.call(this.certificateList, [[['CSR', '!=', null]]]);
    }
    getUnsignedCas() {
        return this.ws.call(this.caList, [[['privatekey', '!=', null]]]);
    }
    getCertificateCountryChoices() {
        return this.ws.call('certificate.country_choices');
    }
    ipChoicesv4() {
        return this.ws.call('system.general.ui_address_choices');
    }
    ipChoicesv6() {
        return this.ws.call('system.general.ui_v6address_choices');
    }
    kbdMapChoices() {
        return this.ws.call('system.general.kbdmap_choices').pipe((0, operators_1.map)((response) => {
            return Object.keys(response || {}).map((key) => ({
                label: `${response[key]} (${key})`,
                value: key,
            }));
        }));
    }
    languageChoices() {
        return this.ws.call('system.general.language_choices');
    }
    languageOptions(sortLanguagesByName) {
        return this.languageChoices().pipe((0, operators_1.map)((languageList) => {
            let options = Object.keys(languageList || {}).map((key) => ({
                label: sortLanguagesByName
                    ? `${languageList[key]} (${key})`
                    : `${key} (${languageList[key]})`,
                value: key,
            }));
            options = (0, lodash_es_1.sortBy)(options, sortLanguagesByName ? 'label' : 'value');
            return options;
        }));
    }
    timezoneChoices() {
        return this.ws.call('system.general.timezone_choices').pipe((0, operators_1.map)((response) => {
            return Object.keys(response || {}).map((key) => ({
                label: response[key],
                value: key,
            }));
        }));
    }
    uiCertificateOptions() {
        return this.ws.call('system.general.ui_certificate_choices');
    }
    uiHttpsProtocolsOptions() {
        return this.ws.call('system.general.ui_httpsprotocols_choices');
    }
    refreshDirServicesCache() {
        return this.ws.job('directoryservices.cache_refresh');
    }
    updateDone() {
        this.updateIsDone$.next();
    }
};
exports.SystemGeneralService = SystemGeneralService;
SystemGeneralService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.SystemGeneralService = SystemGeneralService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], SystemGeneralService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,