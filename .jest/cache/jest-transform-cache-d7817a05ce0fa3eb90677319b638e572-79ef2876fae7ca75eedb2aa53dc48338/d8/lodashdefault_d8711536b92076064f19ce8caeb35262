bd200a593471660db0a7ef61d5748b62
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
const array_js_1 = __importDefault(require("./array.js"));
const collection_js_1 = __importDefault(require("./collection.js"));
const date_js_1 = __importDefault(require("./date.js"));
const function_js_1 = __importDefault(require("./function.js"));
const lang_js_1 = __importDefault(require("./lang.js"));
const math_js_1 = __importDefault(require("./math.js"));
const number_js_1 = __importDefault(require("./number.js"));
const object_js_1 = __importDefault(require("./object.js"));
const seq_js_1 = __importDefault(require("./seq.js"));
const string_js_1 = __importDefault(require("./string.js"));
const util_js_1 = __importDefault(require("./util.js"));
const _LazyWrapper_js_1 = __importDefault(require("./_LazyWrapper.js"));
const _LodashWrapper_js_1 = __importDefault(require("./_LodashWrapper.js"));
const _Symbol_js_1 = __importDefault(require("./_Symbol.js"));
const _arrayEach_js_1 = __importDefault(require("./_arrayEach.js"));
const _arrayPush_js_1 = __importDefault(require("./_arrayPush.js"));
const _baseForOwn_js_1 = __importDefault(require("./_baseForOwn.js"));
const _baseFunctions_js_1 = __importDefault(require("./_baseFunctions.js"));
const _baseInvoke_js_1 = __importDefault(require("./_baseInvoke.js"));
const _baseIteratee_js_1 = __importDefault(require("./_baseIteratee.js"));
const _baseRest_js_1 = __importDefault(require("./_baseRest.js"));
const _createHybrid_js_1 = __importDefault(require("./_createHybrid.js"));
const identity_js_1 = __importDefault(require("./identity.js"));
const isArray_js_1 = __importDefault(require("./isArray.js"));
const isObject_js_1 = __importDefault(require("./isObject.js"));
const keys_js_1 = __importDefault(require("./keys.js"));
const last_js_1 = __importDefault(require("./last.js"));
const _lazyClone_js_1 = __importDefault(require("./_lazyClone.js"));
const _lazyReverse_js_1 = __importDefault(require("./_lazyReverse.js"));
const _lazyValue_js_1 = __importDefault(require("./_lazyValue.js"));
const mixin_js_1 = __importDefault(require("./mixin.js"));
const negate_js_1 = __importDefault(require("./negate.js"));
const _realNames_js_1 = __importDefault(require("./_realNames.js"));
const thru_js_1 = __importDefault(require("./thru.js"));
const toInteger_js_1 = __importDefault(require("./toInteger.js"));
const wrapperLodash_js_1 = __importDefault(require("./wrapperLodash.js"));
/** Used as the semantic version number. */
var VERSION = '4.17.21';
/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_KEY_FLAG = 2;
/** Used to indicate the type of lazy iteratees. */
var LAZY_FILTER_FLAG = 1, LAZY_WHILE_FLAG = 3;
/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;
/** Used for built-in method references. */
var arrayProto = Array.prototype, objectProto = Object.prototype;
/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */
var symIterator = _Symbol_js_1.default ? _Symbol_js_1.default.iterator : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max, nativeMin = Math.min;
// wrap `_.mixin` so it works when provided only one argument
var mixin = (function (func) {
    return function (object, source, options) {
        if (options == null) {
            var isObj = (0, isObject_js_1.default)(source), props = isObj && (0, keys_js_1.default)(source), methodNames = props && props.length && (0, _baseFunctions_js_1.default)(source, props);
            if (!(methodNames ? methodNames.length : isObj)) {
                options = source;
                source = object;
                object = this;
            }
        }
        return func(object, source, options);
    };
}(mixin_js_1.default));
// Add methods that return wrapped values in chain sequences.
wrapperLodash_js_1.default.after = function_js_1.default.after;
wrapperLodash_js_1.default.ary = function_js_1.default.ary;
wrapperLodash_js_1.default.assign = object_js_1.default.assign;
wrapperLodash_js_1.default.assignIn = object_js_1.default.assignIn;
wrapperLodash_js_1.default.assignInWith = object_js_1.default.assignInWith;
wrapperLodash_js_1.default.assignWith = object_js_1.default.assignWith;
wrapperLodash_js_1.default.at = object_js_1.default.at;
wrapperLodash_js_1.default.before = function_js_1.default.before;
wrapperLodash_js_1.default.bind = function_js_1.default.bind;
wrapperLodash_js_1.default.bindAll = util_js_1.default.bindAll;
wrapperLodash_js_1.default.bindKey = function_js_1.default.bindKey;
wrapperLodash_js_1.default.castArray = lang_js_1.default.castArray;
wrapperLodash_js_1.default.chain = seq_js_1.default.chain;
wrapperLodash_js_1.default.chunk = array_js_1.default.chunk;
wrapperLodash_js_1.default.compact = array_js_1.default.compact;
wrapperLodash_js_1.default.concat = array_js_1.default.concat;
wrapperLodash_js_1.default.cond = util_js_1.default.cond;
wrapperLodash_js_1.default.conforms = util_js_1.default.conforms;
wrapperLodash_js_1.default.constant = util_js_1.default.constant;
wrapperLodash_js_1.default.countBy = collection_js_1.default.countBy;
wrapperLodash_js_1.default.create = object_js_1.default.create;
wrapperLodash_js_1.default.curry = function_js_1.default.curry;
wrapperLodash_js_1.default.curryRight = function_js_1.default.curryRight;
wrapperLodash_js_1.default.debounce = function_js_1.default.debounce;
wrapperLodash_js_1.default.defaults = object_js_1.default.defaults;
wrapperLodash_js_1.default.defaultsDeep = object_js_1.default.defaultsDeep;
wrapperLodash_js_1.default.defer = function_js_1.default.defer;
wrapperLodash_js_1.default.delay = function_js_1.default.delay;
wrapperLodash_js_1.default.difference = array_js_1.default.difference;
wrapperLodash_js_1.default.differenceBy = array_js_1.default.differenceBy;
wrapperLodash_js_1.default.differenceWith = array_js_1.default.differenceWith;
wrapperLodash_js_1.default.drop = array_js_1.default.drop;
wrapperLodash_js_1.default.dropRight = array_js_1.default.dropRight;
wrapperLodash_js_1.default.dropRightWhile = array_js_1.default.dropRightWhile;
wrapperLodash_js_1.default.dropWhile = array_js_1.default.dropWhile;
wrapperLodash_js_1.default.fill = array_js_1.default.fill;
wrapperLodash_js_1.default.filter = collection_js_1.default.filter;
wrapperLodash_js_1.default.flatMap = collection_js_1.default.flatMap;
wrapperLodash_js_1.default.flatMapDeep = collection_js_1.default.flatMapDeep;
wrapperLodash_js_1.default.flatMapDepth = collection_js_1.default.flatMapDepth;
wrapperLodash_js_1.default.flatten = array_js_1.default.flatten;
wrapperLodash_js_1.default.flattenDeep = array_js_1.default.flattenDeep;
wrapperLodash_js_1.default.flattenDepth = array_js_1.default.flattenDepth;
wrapperLodash_js_1.default.flip = function_js_1.default.flip;
wrapperLodash_js_1.default.flow = util_js_1.default.flow;
wrapperLodash_js_1.default.flowRight = util_js_1.default.flowRight;
wrapperLodash_js_1.default.fromPairs = array_js_1.default.fromPairs;
wrapperLodash_js_1.default.functions = object_js_1.default.functions;
wrapperLodash_js_1.default.functionsIn = object_js_1.default.functionsIn;
wrapperLodash_js_1.default.groupBy = collection_js_1.default.groupBy;
wrapperLodash_js_1.default.initial = array_js_1.default.initial;
wrapperLodash_js_1.default.intersection = array_js_1.default.intersection;
wrapperLodash_js_1.default.intersectionBy = array_js_1.default.intersectionBy;
wrapperLodash_js_1.default.intersectionWith = array_js_1.default.intersectionWith;
wrapperLodash_js_1.default.invert = object_js_1.default.invert;
wrapperLodash_js_1.default.invertBy = object_js_1.default.invertBy;
wrapperLodash_js_1.default.invokeMap = collection_js_1.default.invokeMap;
wrapperLodash_js_1.default.iteratee = util_js_1.default.iteratee;
wrapperLodash_js_1.default.keyBy = collection_js_1.default.keyBy;
wrapperLodash_js_1.default.keys = keys_js_1.default;
wrapperLodash_js_1.default.keysIn = object_js_1.default.keysIn;
wrapperLodash_js_1.default.map = collection_js_1.default.map;
wrapperLodash_js_1.default.mapKeys = object_js_1.default.mapKeys;
wrapperLodash_js_1.default.mapValues = object_js_1.default.mapValues;
wrapperLodash_js_1.default.matches = util_js_1.default.matches;
wrapperLodash_js_1.default.matchesProperty = util_js_1.default.matchesProperty;
wrapperLodash_js_1.default.memoize = function_js_1.default.memoize;
wrapperLodash_js_1.default.merge = object_js_1.default.merge;
wrapperLodash_js_1.default.mergeWith = object_js_1.default.mergeWith;
wrapperLodash_js_1.default.method = util_js_1.default.method;
wrapperLodash_js_1.default.methodOf = util_js_1.default.methodOf;
wrapperLodash_js_1.default.mixin = mixin;
wrapperLodash_js_1.default.negate = negate_js_1.default;
wrapperLodash_js_1.default.nthArg = util_js_1.default.nthArg;
wrapperLodash_js_1.default.omit = object_js_1.default.omit;
wrapperLodash_js_1.default.omitBy = object_js_1.default.omitBy;
wrapperLodash_js_1.default.once = function_js_1.default.once;
wrapperLodash_js_1.default.orderBy = collection_js_1.default.orderBy;
wrapperLodash_js_1.default.over = util_js_1.default.over;
wrapperLodash_js_1.default.overArgs = function_js_1.default.overArgs;
wrapperLodash_js_1.default.overEvery = util_js_1.default.overEvery;
wrapperLodash_js_1.default.overSome = util_js_1.default.overSome;
wrapperLodash_js_1.default.partial = function_js_1.default.partial;
wrapperLodash_js_1.default.partialRight = function_js_1.default.partialRight;
wrapperLodash_js_1.default.partition = collection_js_1.default.partition;
wrapperLodash_js_1.default.pick = object_js_1.default.pick;
wrapperLodash_js_1.default.pickBy = object_js_1.default.pickBy;
wrapperLodash_js_1.default.property = util_js_1.default.property;
wrapperLodash_js_1.default.propertyOf = util_js_1.default.propertyOf;
wrapperLodash_js_1.default.pull = array_js_1.default.pull;
wrapperLodash_js_1.default.pullAll = array_js_1.default.pullAll;
wrapperLodash_js_1.default.pullAllBy = array_js_1.default.pullAllBy;
wrapperLodash_js_1.default.pullAllWith = array_js_1.default.pullAllWith;
wrapperLodash_js_1.default.pullAt = array_js_1.default.pullAt;
wrapperLodash_js_1.default.range = util_js_1.default.range;
wrapperLodash_js_1.default.rangeRight = util_js_1.default.rangeRight;
wrapperLodash_js_1.default.rearg = function_js_1.default.rearg;
wrapperLodash_js_1.default.reject = collection_js_1.default.reject;
wrapperLodash_js_1.default.remove = array_js_1.default.remove;
wrapperLodash_js_1.default.rest = function_js_1.default.rest;
wrapperLodash_js_1.default.reverse = array_js_1.default.reverse;
wrapperLodash_js_1.default.sampleSize = collection_js_1.default.sampleSize;
wrapperLodash_js_1.default.set = object_js_1.default.set;
wrapperLodash_js_1.default.setWith = object_js_1.default.setWith;
wrapperLodash_js_1.default.shuffle = collection_js_1.default.shuffle;
wrapperLodash_js_1.default.slice = array_js_1.default.slice;
wrapperLodash_js_1.default.sortBy = collection_js_1.default.sortBy;
wrapperLodash_js_1.default.sortedUniq = array_js_1.default.sortedUniq;
wrapperLodash_js_1.default.sortedUniqBy = array_js_1.default.sortedUniqBy;
wrapperLodash_js_1.default.split = string_js_1.default.split;
wrapperLodash_js_1.default.spread = function_js_1.default.spread;
wrapperLodash_js_1.default.tail = array_js_1.default.tail;
wrapperLodash_js_1.default.take = array_js_1.default.take;
wrapperLodash_js_1.default.takeRight = array_js_1.default.takeRight;
wrapperLodash_js_1.default.takeRightWhile = array_js_1.default.takeRightWhile;
wrapperLodash_js_1.default.takeWhile = array_js_1.default.takeWhile;
wrapperLodash_js_1.default.tap = seq_js_1.default.tap;
wrapperLodash_js_1.default.throttle = function_js_1.default.throttle;
wrapperLodash_js_1.default.thru = thru_js_1.default;
wrapperLodash_js_1.default.toArray = lang_js_1.default.toArray;
wrapperLodash_js_1.default.toPairs = object_js_1.default.toPairs;
wrapperLodash_js_1.default.toPairsIn = object_js_1.default.toPairsIn;
wrapperLodash_js_1.default.toPath = util_js_1.default.toPath;
wrapperLodash_js_1.default.toPlainObject = lang_js_1.default.toPlainObject;
wrapperLodash_js_1.default.transform = object_js_1.default.transform;
wrapperLodash_js_1.default.unary = function_js_1.default.unary;
wrapperLodash_js_1.default.union = array_js_1.default.union;
wrapperLodash_js_1.default.unionBy = array_js_1.default.unionBy;
wrapperLodash_js_1.default.unionWith = array_js_1.default.unionWith;
wrapperLodash_js_1.default.uniq = array_js_1.default.uniq;
wrapperLodash_js_1.default.uniqBy = array_js_1.default.uniqBy;
wrapperLodash_js_1.default.uniqWith = array_js_1.default.uniqWith;
wrapperLodash_js_1.default.unset = object_js_1.default.unset;
wrapperLodash_js_1.default.unzip = array_js_1.default.unzip;
wrapperLodash_js_1.default.unzipWith = array_js_1.default.unzipWith;
wrapperLodash_js_1.default.update = object_js_1.default.update;
wrapperLodash_js_1.default.updateWith = object_js_1.default.updateWith;
wrapperLodash_js_1.default.values = object_js_1.default.values;
wrapperLodash_js_1.default.valuesIn = object_js_1.default.valuesIn;
wrapperLodash_js_1.default.without = array_js_1.default.without;
wrapperLodash_js_1.default.words = string_js_1.default.words;
wrapperLodash_js_1.default.wrap = function_js_1.default.wrap;
wrapperLodash_js_1.default.xor = array_js_1.default.xor;
wrapperLodash_js_1.default.xorBy = array_js_1.default.xorBy;
wrapperLodash_js_1.default.xorWith = array_js_1.default.xorWith;
wrapperLodash_js_1.default.zip = array_js_1.default.zip;
wrapperLodash_js_1.default.zipObject = array_js_1.default.zipObject;
wrapperLodash_js_1.default.zipObjectDeep = array_js_1.default.zipObjectDeep;
wrapperLodash_js_1.default.zipWith = array_js_1.default.zipWith;
// Add aliases.
wrapperLodash_js_1.default.entries = object_js_1.default.toPairs;
wrapperLodash_js_1.default.entriesIn = object_js_1.default.toPairsIn;
wrapperLodash_js_1.default.extend = object_js_1.default.assignIn;
wrapperLodash_js_1.default.extendWith = object_js_1.default.assignInWith;
// Add methods to `lodash.prototype`.
mixin(wrapperLodash_js_1.default, wrapperLodash_js_1.default);
// Add methods that return unwrapped values in chain sequences.
wrapperLodash_js_1.default.add = math_js_1.default.add;
wrapperLodash_js_1.default.attempt = util_js_1.default.attempt;
wrapperLodash_js_1.default.camelCase = string_js_1.default.camelCase;
wrapperLodash_js_1.default.capitalize = string_js_1.default.capitalize;
wrapperLodash_js_1.default.ceil = math_js_1.default.ceil;
wrapperLodash_js_1.default.clamp = number_js_1.default.clamp;
wrapperLodash_js_1.default.clone = lang_js_1.default.clone;
wrapperLodash_js_1.default.cloneDeep = lang_js_1.default.cloneDeep;
wrapperLodash_js_1.default.cloneDeepWith = lang_js_1.default.cloneDeepWith;
wrapperLodash_js_1.default.cloneWith = lang_js_1.default.cloneWith;
wrapperLodash_js_1.default.conformsTo = lang_js_1.default.conformsTo;
wrapperLodash_js_1.default.deburr = string_js_1.default.deburr;
wrapperLodash_js_1.default.defaultTo = util_js_1.default.defaultTo;
wrapperLodash_js_1.default.divide = math_js_1.default.divide;
wrapperLodash_js_1.default.endsWith = string_js_1.default.endsWith;
wrapperLodash_js_1.default.eq = lang_js_1.default.eq;
wrapperLodash_js_1.default.escape = string_js_1.default.escape;
wrapperLodash_js_1.default.escapeRegExp = string_js_1.default.escapeRegExp;
wrapperLodash_js_1.default.every = collection_js_1.default.every;
wrapperLodash_js_1.default.find = collection_js_1.default.find;
wrapperLodash_js_1.default.findIndex = array_js_1.default.findIndex;
wrapperLodash_js_1.default.findKey = object_js_1.default.findKey;
wrapperLodash_js_1.default.findLast = collection_js_1.default.findLast;
wrapperLodash_js_1.default.findLastIndex = array_js_1.default.findLastIndex;
wrapperLodash_js_1.default.findLastKey = object_js_1.default.findLastKey;
wrapperLodash_js_1.default.floor = math_js_1.default.floor;
wrapperLodash_js_1.default.forEach = collection_js_1.default.forEach;
wrapperLodash_js_1.default.forEachRight = collection_js_1.default.forEachRight;
wrapperLodash_js_1.default.forIn = object_js_1.default.forIn;
wrapperLodash_js_1.default.forInRight = object_js_1.default.forInRight;
wrapperLodash_js_1.default.forOwn = object_js_1.default.forOwn;
wrapperLodash_js_1.default.forOwnRight = object_js_1.default.forOwnRight;
wrapperLodash_js_1.default.get = object_js_1.default.get;
wrapperLodash_js_1.default.gt = lang_js_1.default.gt;
wrapperLodash_js_1.default.gte = lang_js_1.default.gte;
wrapperLodash_js_1.default.has = object_js_1.default.has;
wrapperLodash_js_1.default.hasIn = object_js_1.default.hasIn;
wrapperLodash_js_1.default.head = array_js_1.default.head;
wrapperLodash_js_1.default.identity = identity_js_1.default;
wrapperLodash_js_1.default.includes = collection_js_1.default.includes;
wrapperLodash_js_1.default.indexOf = array_js_1.default.indexOf;
wrapperLodash_js_1.default.inRange = number_js_1.default.inRange;
wrapperLodash_js_1.default.invoke = object_js_1.default.invoke;
wrapperLodash_js_1.default.isArguments = lang_js_1.default.isArguments;
wrapperLodash_js_1.default.isArray = isArray_js_1.default;
wrapperLodash_js_1.default.isArrayBuffer = lang_js_1.default.isArrayBuffer;
wrapperLodash_js_1.default.isArrayLike = lang_js_1.default.isArrayLike;
wrapperLodash_js_1.default.isArrayLikeObject = lang_js_1.default.isArrayLikeObject;
wrapperLodash_js_1.default.isBoolean = lang_js_1.default.isBoolean;
wrapperLodash_js_1.default.isBuffer = lang_js_1.default.isBuffer;
wrapperLodash_js_1.default.isDate = lang_js_1.default.isDate;
wrapperLodash_js_1.default.isElement = lang_js_1.default.isElement;
wrapperLodash_js_1.default.isEmpty = lang_js_1.default.isEmpty;
wrapperLodash_js_1.default.isEqual = lang_js_1.default.isEqual;
wrapperLodash_js_1.default.isEqualWith = lang_js_1.default.isEqualWith;
wrapperLodash_js_1.default.isError = lang_js_1.default.isError;
wrapperLodash_js_1.default.isFinite = lang_js_1.default.isFinite;
wrapperLodash_js_1.default.isFunction = lang_js_1.default.isFunction;
wrapperLodash_js_1.default.isInteger = lang_js_1.default.isInteger;
wrapperLodash_js_1.default.isLength = lang_js_1.default.isLength;
wrapperLodash_js_1.default.isMap = lang_js_1.default.isMap;
wrapperLodash_js_1.default.isMatch = lang_js_1.default.isMatch;
wrapperLodash_js_1.default.isMatchWith = lang_js_1.default.isMatchWith;
wrapperLodash_js_1.default.isNaN = lang_js_1.default.isNaN;
wrapperLodash_js_1.default.isNative = lang_js_1.default.isNative;
wrapperLodash_js_1.default.isNil = lang_js_1.default.isNil;
wrapperLodash_js_1.default.isNull = lang_js_1.default.isNull;
wrapperLodash_js_1.default.isNumber = lang_js_1.default.isNumber;
wrapperLodash_js_1.default.isObject = isObject_js_1.default;
wrapperLodash_js_1.default.isObjectLike = lang_js_1.default.isObjectLike;
wrapperLodash_js_1.default.isPlainObject = lang_js_1.default.isPlainObject;
wrapperLodash_js_1.default.isRegExp = lang_js_1.default.isRegExp;
wrapperLodash_js_1.default.isSafeInteger = lang_js_1.default.isSafeInteger;
wrapperLodash_js_1.default.isSet = lang_js_1.default.isSet;
wrapperLodash_js_1.default.isString = lang_js_1.default.isString;
wrapperLodash_js_1.default.isSymbol = lang_js_1.default.isSymbol;
wrapperLodash_js_1.default.isTypedArray = lang_js_1.default.isTypedArray;
wrapperLodash_js_1.default.isUndefined = lang_js_1.default.isUndefined;
wrapperLodash_js_1.default.isWeakMap = lang_js_1.default.isWeakMap;
wrapperLodash_js_1.default.isWeakSet = lang_js_1.default.isWeakSet;
wrapperLodash_js_1.default.join = array_js_1.default.join;
wrapperLodash_js_1.default.kebabCase = string_js_1.default.kebabCase;
wrapperLodash_js_1.default.last = last_js_1.default;
wrapperLodash_js_1.default.lastIndexOf = array_js_1.default.lastIndexOf;
wrapperLodash_js_1.default.lowerCase = string_js_1.default.lowerCase;
wrapperLodash_js_1.default.lowerFirst = string_js_1.default.lowerFirst;
wrapperLodash_js_1.default.lt = lang_js_1.default.lt;
wrapperLodash_js_1.default.lte = lang_js_1.default.lte;
wrapperLodash_js_1.default.max = math_js_1.default.max;
wrapperLodash_js_1.default.maxBy = math_js_1.default.maxBy;
wrapperLodash_js_1.default.mean = math_js_1.default.mean;
wrapperLodash_js_1.default.meanBy = math_js_1.default.meanBy;
wrapperLodash_js_1.default.min = math_js_1.default.min;
wrapperLodash_js_1.default.minBy = math_js_1.default.minBy;
wrapperLodash_js_1.default.stubArray = util_js_1.default.stubArray;
wrapperLodash_js_1.default.stubFalse = util_js_1.default.stubFalse;
wrapperLodash_js_1.default.stubObject = util_js_1.default.stubObject;
wrapperLodash_js_1.default.stubString = util_js_1.default.stubString;
wrapperLodash_js_1.default.stubTrue = util_js_1.default.stubTrue;
wrapperLodash_js_1.default.multiply = math_js_1.default.multiply;
wrapperLodash_js_1.default.nth = array_js_1.default.nth;
wrapperLodash_js_1.default.noop = util_js_1.default.noop;
wrapperLodash_js_1.default.now = date_js_1.default.now;
wrapperLodash_js_1.default.pad = string_js_1.default.pad;
wrapperLodash_js_1.default.padEnd = string_js_1.default.padEnd;
wrapperLodash_js_1.default.padStart = string_js_1.default.padStart;
wrapperLodash_js_1.default.parseInt = string_js_1.default.parseInt;
wrapperLodash_js_1.default.random = number_js_1.default.random;
wrapperLodash_js_1.default.reduce = collection_js_1.default.reduce;
wrapperLodash_js_1.default.reduceRight = collection_js_1.default.reduceRight;
wrapperLodash_js_1.default.repeat = string_js_1.default.repeat;
wrapperLodash_js_1.default.replace = string_js_1.default.replace;
wrapperLodash_js_1.default.result = object_js_1.default.result;
wrapperLodash_js_1.default.round = math_js_1.default.round;
wrapperLodash_js_1.default.sample = collection_js_1.default.sample;
wrapperLodash_js_1.default.size = collection_js_1.default.size;
wrapperLodash_js_1.default.snakeCase = string_js_1.default.snakeCase;
wrapperLodash_js_1.default.some = collection_js_1.default.some;
wrapperLodash_js_1.default.sortedIndex = array_js_1.default.sortedIndex;
wrapperLodash_js_1.default.sortedIndexBy = array_js_1.default.sortedIndexBy;
wrapperLodash_js_1.default.sortedIndexOf = array_js_1.default.sortedIndexOf;
wrapperLodash_js_1.default.sortedLastIndex = array_js_1.default.sortedLastIndex;
wrapperLodash_js_1.default.sortedLastIndexBy = array_js_1.default.sortedLastIndexBy;
wrapperLodash_js_1.default.sortedLastIndexOf = array_js_1.default.sortedLastIndexOf;
wrapperLodash_js_1.default.startCase = string_js_1.default.startCase;
wrapperLodash_js_1.default.startsWith = string_js_1.default.startsWith;
wrapperLodash_js_1.default.subtract = math_js_1.default.subtract;
wrapperLodash_js_1.default.sum = math_js_1.default.sum;
wrapperLodash_js_1.default.sumBy = math_js_1.default.sumBy;
wrapperLodash_js_1.default.template = string_js_1.default.template;
wrapperLodash_js_1.default.times = util_js_1.default.times;
wrapperLodash_js_1.default.toFinite = lang_js_1.default.toFinite;
wrapperLodash_js_1.default.toInteger = toInteger_js_1.default;
wrapperLodash_js_1.default.toLength = lang_js_1.default.toLength;
wrapperLodash_js_1.default.toLower = string_js_1.default.toLower;
wrapperLodash_js_1.default.toNumber = lang_js_1.default.toNumber;
wrapperLodash_js_1.default.toSafeInteger = lang_js_1.default.toSafeInteger;
wrapperLodash_js_1.default.toString = lang_js_1.default.toString;
wrapperLodash_js_1.default.toUpper = string_js_1.default.toUpper;
wrapperLodash_js_1.default.trim = string_js_1.default.trim;
wrapperLodash_js_1.default.trimEnd = string_js_1.default.trimEnd;
wrapperLodash_js_1.default.trimStart = string_js_1.default.trimStart;
wrapperLodash_js_1.default.truncate = string_js_1.default.truncate;
wrapperLodash_js_1.default.unescape = string_js_1.default.unescape;
wrapperLodash_js_1.default.uniqueId = util_js_1.default.uniqueId;
wrapperLodash_js_1.default.upperCase = string_js_1.default.upperCase;
wrapperLodash_js_1.default.upperFirst = string_js_1.default.upperFirst;
// Add aliases.
wrapperLodash_js_1.default.each = collection_js_1.default.forEach;
wrapperLodash_js_1.default.eachRight = collection_js_1.default.forEachRight;
wrapperLodash_js_1.default.first = array_js_1.default.head;
mixin(wrapperLodash_js_1.default, (function () {
    var source = {};
    (0, _baseForOwn_js_1.default)(wrapperLodash_js_1.default, function (func, methodName) {
        if (!hasOwnProperty.call(wrapperLodash_js_1.default.prototype, methodName)) {
            source[methodName] = func;
        }
    });
    return source;
}()), { 'chain': false });
/**
 * The semantic version number.
 *
 * @static
 * @memberOf _
 * @type {string}
 */
wrapperLodash_js_1.default.VERSION = VERSION;
(wrapperLodash_js_1.default.templateSettings = string_js_1.default.templateSettings).imports._ = wrapperLodash_js_1.default;
// Assign default placeholders.
(0, _arrayEach_js_1.default)(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
    wrapperLodash_js_1.default[methodName].placeholder = wrapperLodash_js_1.default;
});
// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
(0, _arrayEach_js_1.default)(['drop', 'take'], function (methodName, index) {
    _LazyWrapper_js_1.default.prototype[methodName] = function (n) {
        n = n === undefined ? 1 : nativeMax((0, toInteger_js_1.default)(n), 0);
        var result = (this.__filtered__ && !index)
            ? new _LazyWrapper_js_1.default(this)
            : this.clone();
        if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
        }
        else {
            result.__views__.push({
                'size': nativeMin(n, MAX_ARRAY_LENGTH),
                'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
        }
        return result;
    };
    _LazyWrapper_js_1.default.prototype[methodName + 'Right'] = function (n) {
        return this.reverse()[methodName](n).reverse();
    };
});
// Add `LazyWrapper` methods that accept an `iteratee` value.
(0, _arrayEach_js_1.default)(['filter', 'map', 'takeWhile'], function (methodName, index) {
    var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
    _LazyWrapper_js_1.default.prototype[methodName] = function (iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
            'iteratee': (0, _baseIteratee_js_1.default)(iteratee, 3),
            'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
    };
});
// Add `LazyWrapper` methods for `_.head` and `_.last`.
(0, _arrayEach_js_1.default)(['head', 'last'], function (methodName, index) {
    var takeName = 'take' + (index ? 'Right' : '');
    _LazyWrapper_js_1.default.prototype[methodName] = function () {
        return this[takeName](1).value()[0];
    };
});
// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
(0, _arrayEach_js_1.default)(['initial', 'tail'], function (methodName, index) {
    var dropName = 'drop' + (index ? '' : 'Right');
    _LazyWrapper_js_1.default.prototype[methodName] = function () {
        return this.__filtered__ ? new _LazyWrapper_js_1.default(this) : this[dropName](1);
    };
});
_LazyWrapper_js_1.default.prototype.compact = function () {
    return this.filter(identity_js_1.default);
};
_LazyWrapper_js_1.default.prototype.find = function (predicate) {
    return this.filter(predicate).head();
};
_LazyWrapper_js_1.default.prototype.findLast = function (predicate) {
    return this.reverse().find(predicate);
};
_LazyWrapper_js_1.default.prototype.invokeMap = (0, _baseRest_js_1.default)(function (path, args) {
    if (typeof path == 'function') {
        return new _LazyWrapper_js_1.default(this);
    }
    return this.map(function (value) {
        return (0, _baseInvoke_js_1.default)(value, path, args);
    });
});
_LazyWrapper_js_1.default.prototype.reject = function (predicate) {
    return this.filter((0, negate_js_1.default)((0, _baseIteratee_js_1.default)(predicate)));
};
_LazyWrapper_js_1.default.prototype.slice = function (start, end) {
    start = (0, toInteger_js_1.default)(start);
    var result = this;
    if (result.__filtered__ && (start > 0 || end < 0)) {
        return new _LazyWrapper_js_1.default(result);
    }
    if (start < 0) {
        result = result.takeRight(-start);
    }
    else if (start) {
        result = result.drop(start);
    }
    if (end !== undefined) {
        end = (0, toInteger_js_1.default)(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    }
    return result;
};
_LazyWrapper_js_1.default.prototype.takeRightWhile = function (predicate) {
    return this.reverse().takeWhile(predicate).reverse();
};
_LazyWrapper_js_1.default.prototype.toArray = function () {
    return this.take(MAX_ARRAY_LENGTH);
};
// Add `LazyWrapper` methods to `lodash.prototype`.
(0, _baseForOwn_js_1.default)(_LazyWrapper_js_1.default.prototype, function (func, methodName) {
    var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = wrapperLodash_js_1.default[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
    if (!lodashFunc) {
        return;
    }
    wrapperLodash_js_1.default.prototype[methodName] = function () {
        var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof _LazyWrapper_js_1.default, iteratee = args[0], useLazy = isLazy || (0, isArray_js_1.default)(value);
        var interceptor = function (value) {
            var result = lodashFunc.apply(wrapperLodash_js_1.default, (0, _arrayPush_js_1.default)([value], args));
            return (isTaker && chainAll) ? result[0] : result;
        };
        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
        }
        var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
        if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new _LazyWrapper_js_1.default(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru_js_1.default, 'args': [interceptor], 'thisArg': undefined });
            return new _LodashWrapper_js_1.default(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
    };
});
// Add `Array` methods to `lodash.prototype`.
(0, _arrayEach_js_1.default)(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
    var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
    wrapperLodash_js_1.default.prototype[methodName] = function () {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply((0, isArray_js_1.default)(value) ? value : [], args);
        }
        return this[chainName](function (value) {
            return func.apply((0, isArray_js_1.default)(value) ? value : [], args);
        });
    };
});
// Map minified method names to their real names.
(0, _baseForOwn_js_1.default)(_LazyWrapper_js_1.default.prototype, function (func, methodName) {
    var lodashFunc = wrapperLodash_js_1.default[methodName];
    if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(_realNames_js_1.default, key)) {
            _realNames_js_1.default[key] = [];
        }
        _realNames_js_1.default[key].push({ 'name': methodName, 'func': lodashFunc });
    }
});
_realNames_js_1.default[(0, _createHybrid_js_1.default)(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
    }];
// Add methods to `LazyWrapper`.
_LazyWrapper_js_1.default.prototype.clone = _lazyClone_js_1.default;
_LazyWrapper_js_1.default.prototype.reverse = _lazyReverse_js_1.default;
_LazyWrapper_js_1.default.prototype.value = _lazyValue_js_1.default;
// Add chain sequence methods to the `lodash` wrapper.
wrapperLodash_js_1.default.prototype.at = seq_js_1.default.at;
wrapperLodash_js_1.default.prototype.chain = seq_js_1.default.wrapperChain;
wrapperLodash_js_1.default.prototype.commit = seq_js_1.default.commit;
wrapperLodash_js_1.default.prototype.next = seq_js_1.default.next;
wrapperLodash_js_1.default.prototype.plant = seq_js_1.default.plant;
wrapperLodash_js_1.default.prototype.reverse = seq_js_1.default.reverse;
wrapperLodash_js_1.default.prototype.toJSON = wrapperLodash_js_1.default.prototype.valueOf = wrapperLodash_js_1.default.prototype.value = seq_js_1.default.value;
// Add lazy aliases.
wrapperLodash_js_1.default.prototype.first = wrapperLodash_js_1.default.prototype.head;
if (symIterator) {
    wrapperLodash_js_1.default.prototype[symIterator] = seq_js_1.default.toIterator;
}
exports.default = wrapperLodash_js_1.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,