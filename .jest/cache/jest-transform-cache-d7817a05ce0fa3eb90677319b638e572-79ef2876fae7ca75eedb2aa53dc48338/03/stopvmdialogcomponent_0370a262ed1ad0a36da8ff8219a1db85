9f5b89cc86f003f6d6c30c5b274e6324
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StopVmDialogComponent = void 0;
const scrolling_1 = require("@angular/cdk/scrolling");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const role_enum_1 = require("app/enums/role.enum");
const vm_list_1 = require("app/helptext/vm/vm-list");
const virtual_machine_interface_1 = require("app/interfaces/virtual-machine.interface");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
let StopVmDialogComponent = class StopVmDialogComponent {
    constructor(dialogRef, vm) {
        this.dialogRef = dialogRef;
        this.vm = vm;
        this.forceAfterTimeoutCheckbox = new forms_1.FormControl(false);
        this.requiredRoles = [role_enum_1.Role.VmWrite];
        this.helptext = vm_list_1.helptextVmList;
    }
    onStop() {
        this.dialogRef.close({
            forceAfterTimeout: this.forceAfterTimeoutCheckbox.value,
        });
    }
};
exports.StopVmDialogComponent = StopVmDialogComponent;
StopVmDialogComponent.ctorParameters = () => [
    { type: dialog_1.MatDialogRef },
    { type: virtual_machine_interface_1.VirtualMachine, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.StopVmDialogComponent = StopVmDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-stop-vm-dialog',
        template: require("./stop-vm-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            scrolling_1.CdkScrollable,
            dialog_1.MatDialogContent,
            ix_checkbox_component_1.IxCheckboxComponent,
            forms_1.ReactiveFormsModule,
            dialog_1.MatDialogActions,
            form_actions_component_1.FormActionsComponent,
            button_1.MatButton,
            test_directive_1.TestDirective,
            dialog_1.MatDialogClose,
            requires_roles_directive_1.RequiresRolesDirective,
            core_2.TranslateModule,
        ],
    })
], StopVmDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL3ZtL3ZtLWxpc3Qvc3RvcC12bS1kaWFsb2cvc3RvcC12bS1kaWFsb2cuY29tcG9uZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNEQUF1RDtBQUN2RCx3Q0FFdUI7QUFDdkIsMENBQWtFO0FBQ2xFLHFEQUFxRDtBQUNyRCxxREFFa0M7QUFDbEMseURBQXFEO0FBQ3JELDhDQUFzRDtBQUN0RCxxR0FBZ0c7QUFDaEcsbURBQTJDO0FBQzNDLHFEQUF5RDtBQUN6RCx3RkFBMEU7QUFDMUUsc0hBQWlIO0FBQ2pILG1IQUE4RztBQUM5Ryx1RUFBbUU7QUE0QjVELElBQU0scUJBQXFCLEdBQTNCLE1BQU0scUJBQXFCO0lBTWhDLFlBQ1UsU0FBZ0UsRUFDeEMsRUFBa0I7UUFEMUMsY0FBUyxHQUFULFNBQVMsQ0FBdUQ7UUFDeEMsT0FBRSxHQUFGLEVBQUUsQ0FBZ0I7UUFQcEQsOEJBQXlCLEdBQUcsSUFBSSxtQkFBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLGtCQUFhLEdBQUcsQ0FBQyxnQkFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXpDLGFBQVEsR0FBRyx3QkFBYyxDQUFDO0lBSy9CLENBQUM7SUFFTCxNQUFNO1FBQ0osSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDbkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUs7U0FDeEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFmVSxzREFBcUI7Ozs2RUFRN0IsYUFBTSxTQUFDLHdCQUFlOztnQ0FSZCxxQkFBcUI7SUF0QmpDLElBQUEsNEJBQVksR0FBRTtJQUNkLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7UUFDN0Isb0RBQThDO1FBRTlDLGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLE9BQU8sRUFBRTtZQUNQLHVCQUFjO1lBQ2QseUJBQWE7WUFDYix5QkFBZ0I7WUFDaEIsMkNBQW1CO1lBQ25CLDJCQUFtQjtZQUNuQix5QkFBZ0I7WUFDaEIsNkNBQW9CO1lBQ3BCLGtCQUFTO1lBQ1QsOEJBQWE7WUFDYix1QkFBYztZQUNkLGlEQUFzQjtZQUN0QixzQkFBZTtTQUNoQjtLQUNGLENBQUM7R0FDVyxxQkFBcUIsQ0FnQmpDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9wYWdlcy92bS92bS1saXN0L3N0b3Atdm0tZGlhbG9nL3N0b3Atdm0tZGlhbG9nLmNvbXBvbmVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtTY3JvbGxhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXRCdXR0b24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9idXR0b24nO1xuaW1wb3J0IHtcbiAgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYsIE1hdERpYWxvZ1RpdGxlLCBNYXREaWFsb2dDb250ZW50LCBNYXREaWFsb2dBY3Rpb25zLCBNYXREaWFsb2dDbG9zZSxcbn0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IFJlcXVpcmVzUm9sZXNEaXJlY3RpdmUgfSBmcm9tICdhcHAvZGlyZWN0aXZlcy9yZXF1aXJlcy1yb2xlcy9yZXF1aXJlcy1yb2xlcy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gJ2FwcC9lbnVtcy9yb2xlLmVudW0nO1xuaW1wb3J0IHsgaGVscHRleHRWbUxpc3QgfSBmcm9tICdhcHAvaGVscHRleHQvdm0vdm0tbGlzdCc7XG5pbXBvcnQgeyBWaXJ0dWFsTWFjaGluZSB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL3ZpcnR1YWwtbWFjaGluZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRm9ybUFjdGlvbnNDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2Zvcm0tYWN0aW9ucy9mb3JtLWFjdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IEl4Q2hlY2tib3hDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWNoZWNrYm94L2l4LWNoZWNrYm94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUZXN0RGlyZWN0aXZlIH0gZnJvbSAnYXBwL21vZHVsZXMvdGVzdC1pZC90ZXN0LmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcFZtRGlhbG9nRGF0YSB7XG4gIGZvcmNlQWZ0ZXJUaW1lb3V0OiBib29sZWFuO1xufVxuXG5AVW50aWxEZXN0cm95KClcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LXN0b3Atdm0tZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N0b3Atdm0tZGlhbG9nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3RvcC12bS1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBNYXREaWFsb2dUaXRsZSxcbiAgICBDZGtTY3JvbGxhYmxlLFxuICAgIE1hdERpYWxvZ0NvbnRlbnQsXG4gICAgSXhDaGVja2JveENvbXBvbmVudCxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIE1hdERpYWxvZ0FjdGlvbnMsXG4gICAgRm9ybUFjdGlvbnNDb21wb25lbnQsXG4gICAgTWF0QnV0dG9uLFxuICAgIFRlc3REaXJlY3RpdmUsXG4gICAgTWF0RGlhbG9nQ2xvc2UsXG4gICAgUmVxdWlyZXNSb2xlc0RpcmVjdGl2ZSxcbiAgICBUcmFuc2xhdGVNb2R1bGUsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFN0b3BWbURpYWxvZ0NvbXBvbmVudCB7XG4gIGZvcmNlQWZ0ZXJUaW1lb3V0Q2hlY2tib3ggPSBuZXcgRm9ybUNvbnRyb2woZmFsc2UpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcmVxdWlyZWRSb2xlcyA9IFtSb2xlLlZtV3JpdGVdO1xuXG4gIHJlYWRvbmx5IGhlbHB0ZXh0ID0gaGVscHRleHRWbUxpc3Q7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxTdG9wVm1EaWFsb2dDb21wb25lbnQsIFN0b3BWbURpYWxvZ0RhdGE+LFxuICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgdm06IFZpcnR1YWxNYWNoaW5lLFxuICApIHsgfVxuXG4gIG9uU3RvcCgpOiB2b2lkIHtcbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh7XG4gICAgICBmb3JjZUFmdGVyVGltZW91dDogdGhpcy5mb3JjZUFmdGVyVGltZW91dENoZWNrYm94LnZhbHVlLFxuICAgIH0pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=