{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/buttons/oauth-button/components/oauth-button/oauth-button.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/buttons/oauth-button/components/oauth-button/oauth-button.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Input, OnDestroy, output,\n} from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { GmailOauthConfig } from 'app/interfaces/mail-config.interface';\nimport { OauthMessage } from 'app/interfaces/oauth-message.interface';\nimport { OauthButtonType } from 'app/modules/buttons/oauth-button/interfaces/oauth-button.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { OauthJiraMessage } from 'app/modules/feedback/interfaces/file-ticket.interface';\nimport { OauthProviderData } from 'app/pages/credentials/backup-credentials/cloud-credentials-form/oauth-provider/oauth-provider.component';\n\n@Component({\n  selector: 'ix-oauth-button',\n  templateUrl: './oauth-button.component.html',\n  styleUrls: ['./oauth-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OauthButtonComponent implements OnDestroy {\n  @Input() oauthType: OauthButtonType;\n  @Input() isLoggedIn = false;\n  @Input() disabled = false;\n  @Input() oauthUrl: string;\n  @Input() testId: string;\n\n  readonly loggedIn = output<unknown>();\n\n  private readonly jiraAuthFn = (message: OauthJiraMessage): void => this.onLogInWithJiraSuccess(message);\n  private readonly gmailAuthFn = (message: OauthMessage<GmailOauthConfig>): void => {\n    this.onLogInWithGmailSuccess(message);\n  };\n\n  get buttonText(): string {\n    switch (this.oauthType) {\n      case OauthButtonType.Jira:\n        if (this.isLoggedIn) {\n          return this.translate.instant('Logged In To Jira');\n        }\n        return this.translate.instant('Login To Jira To Submit');\n\n      case OauthButtonType.Provider:\n        if (this.isLoggedIn) {\n          return this.translate.instant('Logged In To Provider');\n        }\n        return this.translate.instant('Log In To Provider');\n\n      case OauthButtonType.Gmail:\n        if (this.isLoggedIn) {\n          return this.translate.instant('Logged In To Gmail');\n        }\n        return this.translate.instant('Log In To Gmail');\n    }\n\n    return '';\n  }\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private dialogService: DialogService,\n    private translate: TranslateService,\n    @Inject(WINDOW) private window: Window,\n  ) {}\n\n  ngOnDestroy(): void {\n    this.window.removeEventListener('message', this.jiraAuthFn, false);\n    this.window.removeEventListener('message', this.gmailAuthFn, false);\n  }\n\n  onOauthClicked(): void {\n    switch (this.oauthType) {\n      case OauthButtonType.Jira:\n        this.onLoginWithJira();\n        break;\n      case OauthButtonType.Provider:\n        this.onLogInWithProvider();\n        break;\n      case OauthButtonType.Gmail:\n        this.onLoginWithGmail();\n        break;\n    }\n  }\n\n  private onLoginWithJira(): void {\n    this.doCommonOauthLoginLogic(this.jiraAuthFn);\n  }\n\n  private onLogInWithJiraSuccess(message: OauthJiraMessage): void {\n    const token = message.data as string;\n    if (typeof token !== 'string') {\n      return;\n    }\n    this.loggedIn.emit(token);\n    this.cdr.markForCheck();\n  }\n\n  private onLoginWithGmail(): void {\n    this.doCommonOauthLoginLogic(this.gmailAuthFn);\n  }\n\n  private onLogInWithGmailSuccess(message: OauthMessage<GmailOauthConfig>): void {\n    if (message.data.oauth_portal) {\n      if (message.data.error) {\n        this.handleProviderError(message.data.error);\n      } else {\n        this.loggedIn.emit(message.data.result);\n        this.cdr.markForCheck();\n      }\n    }\n  }\n\n  private onLogInWithProvider(): void {\n    const authFn = (message: OauthMessage<OauthProviderData>): void => this.onLoggedInWithProviderSuccess(message);\n    this.doCommonOauthLoginLogic(authFn);\n  }\n\n  private onLoggedInWithProviderSuccess = (message: OauthMessage<OauthProviderData>): void => {\n    if (message.origin !== 'https://www.truenas.com') {\n      return;\n    }\n    if (!('oauth_portal' in message.data)) {\n      return;\n    }\n\n    if (message.data.error) {\n      this.handleProviderError(message.data.error);\n      return;\n    }\n\n    this.loggedIn.emit(message.data.result);\n  };\n\n  private doCommonOauthLoginLogic(\n    authFn: (\n      message: OauthMessage<GmailOauthConfig> | OauthMessage<OauthProviderData> | OauthJiraMessage\n    ) => void,\n  ): void {\n    this.window.removeEventListener('message', authFn, false);\n    this.window.open(\n      this.oauthUrl + encodeURIComponent(this.window.location.toString()),\n      '_blank',\n      'width=640,height=480',\n    );\n    this.window.addEventListener('message', authFn, false);\n  }\n\n  private handleProviderError(error: string): void {\n    this.dialogService.closeAllDialogs();\n\n    this.dialogService.error({\n      title: this.translate.instant('Error'),\n      message: error.includes('Missing code parameter in response')\n        ? this.translate.instant('Login was canceled. Please try again if you want to connect your account.')\n        : this.translate.instant(error),\n    });\n  }\n}\n"],"version":3}