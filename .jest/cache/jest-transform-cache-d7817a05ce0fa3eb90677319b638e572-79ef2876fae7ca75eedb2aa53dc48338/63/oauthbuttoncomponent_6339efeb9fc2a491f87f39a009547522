1f37847430883b741aca4dcf6fe17f75
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OauthButtonComponent = void 0;
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const window_helper_1 = require("app/helpers/window.helper");
const oauth_button_interface_1 = require("app/modules/buttons/oauth-button/interfaces/oauth-button.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const i0 = __importStar(require("@angular/core"));
let OauthButtonComponent = class OauthButtonComponent {
    get buttonText() {
        switch (this.oauthType) {
            case oauth_button_interface_1.OauthButtonType.Jira:
                if (this.isLoggedIn) {
                    return this.translate.instant('Logged In To Jira');
                }
                return this.translate.instant('Login To Jira To Submit');
            case oauth_button_interface_1.OauthButtonType.Provider:
                if (this.isLoggedIn) {
                    return this.translate.instant('Logged In To Provider');
                }
                return this.translate.instant('Log In To Provider');
            case oauth_button_interface_1.OauthButtonType.Gmail:
                if (this.isLoggedIn) {
                    return this.translate.instant('Logged In To Gmail');
                }
                return this.translate.instant('Log In To Gmail');
        }
        return '';
    }
    constructor(cdr, dialogService, translate, window) {
        this.cdr = cdr;
        this.dialogService = dialogService;
        this.translate = translate;
        this.window = window;
        this.isLoggedIn = false;
        this.disabled = false;
        this.loggedIn = (0, core_1.output)();
        this.jiraAuthFn = (message) => this.onLogInWithJiraSuccess(message);
        this.gmailAuthFn = (message) => {
            this.onLogInWithGmailSuccess(message);
        };
        this.onLoggedInWithProviderSuccess = (message) => {
            if (message.origin !== 'https://www.truenas.com') {
                return;
            }
            if (!('oauth_portal' in message.data)) {
                return;
            }
            if (message.data.error) {
                this.handleProviderError(message.data.error);
                return;
            }
            this.loggedIn.emit(message.data.result);
        };
    }
    ngOnDestroy() {
        this.window.removeEventListener('message', this.jiraAuthFn, false);
        this.window.removeEventListener('message', this.gmailAuthFn, false);
    }
    onOauthClicked() {
        switch (this.oauthType) {
            case oauth_button_interface_1.OauthButtonType.Jira:
                this.onLoginWithJira();
                break;
            case oauth_button_interface_1.OauthButtonType.Provider:
                this.onLogInWithProvider();
                break;
            case oauth_button_interface_1.OauthButtonType.Gmail:
                this.onLoginWithGmail();
                break;
        }
    }
    onLoginWithJira() {
        this.doCommonOauthLoginLogic(this.jiraAuthFn);
    }
    onLogInWithJiraSuccess(message) {
        const token = message.data;
        if (typeof token !== 'string') {
            return;
        }
        this.loggedIn.emit(token);
        this.cdr.markForCheck();
    }
    onLoginWithGmail() {
        this.doCommonOauthLoginLogic(this.gmailAuthFn);
    }
    onLogInWithGmailSuccess(message) {
        if (message.data.oauth_portal) {
            if (message.data.error) {
                this.handleProviderError(message.data.error);
            }
            else {
                this.loggedIn.emit(message.data.result);
                this.cdr.markForCheck();
            }
        }
    }
    onLogInWithProvider() {
        const authFn = (message) => this.onLoggedInWithProviderSuccess(message);
        this.doCommonOauthLoginLogic(authFn);
    }
    doCommonOauthLoginLogic(authFn) {
        this.window.removeEventListener('message', authFn, false);
        this.window.open(this.oauthUrl + encodeURIComponent(this.window.location.toString()), '_blank', 'width=640,height=480');
        this.window.addEventListener('message', authFn, false);
    }
    handleProviderError(error) {
        this.dialogService.closeAllDialogs();
        this.dialogService.error({
            title: this.translate.instant('Error'),
            message: error.includes('Missing code parameter in response')
                ? this.translate.instant('Login was canceled. Please try again if you want to connect your account.')
                : this.translate.instant(error),
        });
    }
};
exports.OauthButtonComponent = OauthButtonComponent;
OauthButtonComponent.ctorParameters = () => [
    { type: core_1.ChangeDetectorRef },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
OauthButtonComponent.propDecorators = {
    oauthType: [{ type: core_1.Input }],
    isLoggedIn: [{ type: core_1.Input }],
    disabled: [{ type: core_1.Input }],
    oauthUrl: [{ type: core_1.Input }],
    testId: [{ type: core_1.Input }],
    loggedIn: [{ type: i0.Output, args: ["loggedIn",] }]
};
exports.OauthButtonComponent = OauthButtonComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-oauth-button',
        template: require("./oauth-button.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], OauthButtonComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,