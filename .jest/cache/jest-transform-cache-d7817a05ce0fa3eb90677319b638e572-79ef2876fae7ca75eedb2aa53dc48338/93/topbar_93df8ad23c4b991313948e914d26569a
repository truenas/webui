033ad6477e985b6d305d74e87ccc46b4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helptextTopbar = void 0;
const ngx_translate_extract_marker_1 = require("@biesbjerg/ngx-translate-extract-marker");
const global_helptext_1 = require("app/helptext/global-helptext");
const icon_marker_util_1 = require("app/modules/ix-icon/icon-marker.util");
exports.helptextTopbar = {
    ha_status: (0, ngx_translate_extract_marker_1.marker)('HA Status'),
    ha_status_text_enabled: (0, ngx_translate_extract_marker_1.marker)('HA Enabled'),
    ha_is_enabled: (0, ngx_translate_extract_marker_1.marker)('HA is enabled'),
    ha_status_text_disabled: (0, ngx_translate_extract_marker_1.marker)('HA Disabled'),
    updateRunning_dialog: {
        title: (0, ngx_translate_extract_marker_1.marker)('Update in Progress'),
        message: global_helptext_1.helptextGlobal.sysUpdateMessage,
        message_pt2: `<b>${global_helptext_1.helptextGlobal.sysUpdateMessagePt2}</b>`,
    },
    mat_tooltips: {
        toggle_collapse: (0, ngx_translate_extract_marker_1.marker)('Toggle Collapse'),
        tc_connect: (0, ngx_translate_extract_marker_1.marker)('Connecting to TrueCommand'),
        tc_status: (0, ngx_translate_extract_marker_1.marker)('Status of TrueCommand'),
        update: (0, ngx_translate_extract_marker_1.marker)('Update in Progress'),
        upgrade_waiting: (0, ngx_translate_extract_marker_1.marker)('Upgrade Waiting to Finish'),
        pending_network_changes: (0, ngx_translate_extract_marker_1.marker)('Pending Network Changes'),
        directory_services_monitor: (0, ngx_translate_extract_marker_1.marker)('Directory Services Monitor'),
        resilvering: (0, ngx_translate_extract_marker_1.marker)('Resilvering'),
        replication: (0, ngx_translate_extract_marker_1.marker)('Replication'),
        task_manager: (0, ngx_translate_extract_marker_1.marker)('Running Jobs'),
        alerts: (0, ngx_translate_extract_marker_1.marker)('Alerts'),
        settings: (0, ngx_translate_extract_marker_1.marker)('Settings'),
        power: (0, ngx_translate_extract_marker_1.marker)('Power'),
    },
    signupDialog: {
        content: (0, ngx_translate_extract_marker_1.marker)('This allows your TrueNAS system to be monitored and administrated by\
 TrueCommand. Click <b>SIGNUP</b> to create a new TrueCommand Cloud instance or <b>CONNECT</b> to join an existing instance.'),
    },
    updateDialog: {
        title_connect: (0, ngx_translate_extract_marker_1.marker)('Connect to TrueCommand Cloud'),
        title_update: (0, ngx_translate_extract_marker_1.marker)('Update TrueCommand Settings'),
        connect_btn: (0, ngx_translate_extract_marker_1.marker)('Connect'),
        save_btn: (0, ngx_translate_extract_marker_1.marker)('Save'),
        api_placeholder: (0, ngx_translate_extract_marker_1.marker)('API Key'),
        api_tooltip: (0, ngx_translate_extract_marker_1.marker)('Enter or paste the API key provided from \
<a href="https://portal.ixsystems.com/portal/login/" target="_blank">iXsystems Account Services</a>. \
Login or signup is required.'),
        enabled_placeholder: (0, ngx_translate_extract_marker_1.marker)('Enable'),
        enabled_tooltip: (0, ngx_translate_extract_marker_1.marker)('Immediately connect to TrueCommand.'),
    },
    tcDialog: {
        title: (0, ngx_translate_extract_marker_1.marker)('Open TrueCommand User Interface'),
        message: (0, ngx_translate_extract_marker_1.marker)('<em>Warning:</em> The WireGuard service must be active on the client system to access the TrueCommand UI.'),
        confirmBtnMsg: (0, ngx_translate_extract_marker_1.marker)('Continue'),
    },
    tcDeregisterBtn: (0, ngx_translate_extract_marker_1.marker)('Deregister'),
    tcDeregisterDialog: {
        title: (0, ngx_translate_extract_marker_1.marker)('Deregister TrueCommand Cloud Service'),
        icon: (0, icon_marker_util_1.iconMarker)('warning'),
        message: (0, ngx_translate_extract_marker_1.marker)('Are you sure you want to deregister TrueCommand Cloud Service?'),
        confirmBtnMsg: (0, ngx_translate_extract_marker_1.marker)('Confirm'),
    },
    deregisterInfoDialog: {
        title: (0, ngx_translate_extract_marker_1.marker)('TrueCommand Cloud Service deregistered'),
        message: (0, ngx_translate_extract_marker_1.marker)('TrueCommand Cloud Service has been deregistered.'),
    },
    stopTCConnectingDialog: {
        title: (0, ngx_translate_extract_marker_1.marker)('Stop TrueCommand Cloud Connection'),
        icon: (0, icon_marker_util_1.iconMarker)('warning'),
        message: (0, ngx_translate_extract_marker_1.marker)('Are you sure you want to stop connecting to the TrueCommand Cloud Service?'),
        confirmBtnMsg: (0, ngx_translate_extract_marker_1.marker)('Confirm'),
    },
    checkEmailInfoDialog: {
        title: (0, ngx_translate_extract_marker_1.marker)('Verify Email Address'),
        message: (0, ngx_translate_extract_marker_1.marker)('A message with verification instructions has been sent to the new email \
address. Please verify the email address before continuing.'),
    },
    changePasswordDialog: {
        pw_new_pw_tooltip: (0, ngx_translate_extract_marker_1.marker)('Passwords cannot contain a <b>?</b>. Passwords should \
be at least eight characters and contain a mix of lower and \
upper case, numbers, and special characters.'),
        pw_invalid_title: (0, ngx_translate_extract_marker_1.marker)('Incorrect Password'),
        pw_updated: (0, ngx_translate_extract_marker_1.marker)('Password updated.'),
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHB0ZXh0L3RvcGJhci50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwwRkFBc0U7QUFDdEUsa0VBQThEO0FBQzlELDJFQUFrRTtBQUVyRCxRQUFBLGNBQWMsR0FBRztJQUM1QixTQUFTLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLFdBQVcsQ0FBQztJQUN6QixzQkFBc0IsRUFBRSxJQUFBLHFDQUFDLEVBQUMsWUFBWSxDQUFDO0lBQ3ZDLGFBQWEsRUFBRSxJQUFBLHFDQUFDLEVBQUMsZUFBZSxDQUFDO0lBQ2pDLHVCQUF1QixFQUFFLElBQUEscUNBQUMsRUFBQyxhQUFhLENBQUM7SUFDekMsb0JBQW9CLEVBQUU7UUFDcEIsS0FBSyxFQUFFLElBQUEscUNBQUMsRUFBQyxvQkFBb0IsQ0FBQztRQUM5QixPQUFPLEVBQUUsZ0NBQWMsQ0FBQyxnQkFBZ0I7UUFDeEMsV0FBVyxFQUFFLE1BQU0sZ0NBQWMsQ0FBQyxtQkFBbUIsTUFBTTtLQUM1RDtJQUVELFlBQVksRUFBRTtRQUNaLGVBQWUsRUFBRSxJQUFBLHFDQUFDLEVBQUMsaUJBQWlCLENBQUM7UUFDckMsVUFBVSxFQUFFLElBQUEscUNBQUMsRUFBQywyQkFBMkIsQ0FBQztRQUMxQyxTQUFTLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLHVCQUF1QixDQUFDO1FBQ3JDLE1BQU0sRUFBRSxJQUFBLHFDQUFDLEVBQUMsb0JBQW9CLENBQUM7UUFDL0IsZUFBZSxFQUFFLElBQUEscUNBQUMsRUFBQywyQkFBMkIsQ0FBQztRQUMvQyx1QkFBdUIsRUFBRSxJQUFBLHFDQUFDLEVBQUMseUJBQXlCLENBQUM7UUFDckQsMEJBQTBCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLDRCQUE0QixDQUFDO1FBQzNELFdBQVcsRUFBRSxJQUFBLHFDQUFDLEVBQUMsYUFBYSxDQUFDO1FBQzdCLFdBQVcsRUFBRSxJQUFBLHFDQUFDLEVBQUMsYUFBYSxDQUFDO1FBQzdCLFlBQVksRUFBRSxJQUFBLHFDQUFDLEVBQUMsY0FBYyxDQUFDO1FBQy9CLE1BQU0sRUFBRSxJQUFBLHFDQUFDLEVBQUMsUUFBUSxDQUFDO1FBQ25CLFFBQVEsRUFBRSxJQUFBLHFDQUFDLEVBQUMsVUFBVSxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsT0FBTyxDQUFDO0tBQ2xCO0lBRUQsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQzs2SEFDOEcsQ0FBQztLQUMzSDtJQUVELFlBQVksRUFBRTtRQUNaLGFBQWEsRUFBRSxJQUFBLHFDQUFDLEVBQUMsOEJBQThCLENBQUM7UUFDaEQsWUFBWSxFQUFFLElBQUEscUNBQUMsRUFBQyw2QkFBNkIsQ0FBQztRQUM5QyxXQUFXLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLFNBQVMsQ0FBQztRQUN6QixRQUFRLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLE1BQU0sQ0FBQztRQUNuQixlQUFlLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLFNBQVMsQ0FBQztRQUM3QixXQUFXLEVBQUUsSUFBQSxxQ0FBQyxFQUFDOzs2QkFFVSxDQUFDO1FBQzFCLG1CQUFtQixFQUFFLElBQUEscUNBQUMsRUFBQyxRQUFRLENBQUM7UUFDaEMsZUFBZSxFQUFFLElBQUEscUNBQUMsRUFBQyxxQ0FBcUMsQ0FBQztLQUMxRDtJQUVELFFBQVEsRUFBRTtRQUNSLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsaUNBQWlDLENBQUM7UUFDM0MsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQywyR0FBMkcsQ0FBQztRQUN2SCxhQUFhLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLFVBQVUsQ0FBQztLQUM3QjtJQUVELGVBQWUsRUFBRSxJQUFBLHFDQUFDLEVBQUMsWUFBWSxDQUFDO0lBQ2hDLGtCQUFrQixFQUFFO1FBQ2xCLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsc0NBQXNDLENBQUM7UUFDaEQsSUFBSSxFQUFFLElBQUEsNkJBQVUsRUFBQyxTQUFTLENBQUM7UUFDM0IsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQyxnRUFBZ0UsQ0FBQztRQUM1RSxhQUFhLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLFNBQVMsQ0FBQztLQUM1QjtJQUVELG9CQUFvQixFQUFFO1FBQ3BCLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsd0NBQXdDLENBQUM7UUFDbEQsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQyxrREFBa0QsQ0FBQztLQUMvRDtJQUVELHNCQUFzQixFQUFFO1FBQ3RCLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsbUNBQW1DLENBQUM7UUFDN0MsSUFBSSxFQUFFLElBQUEsNkJBQVUsRUFBQyxTQUFTLENBQUM7UUFDM0IsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQyw0RUFBNEUsQ0FBQztRQUN4RixhQUFhLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLFNBQVMsQ0FBQztLQUM1QjtJQUVELG9CQUFvQixFQUFFO1FBQ3BCLEtBQUssRUFBRSxJQUFBLHFDQUFDLEVBQUMsc0JBQXNCLENBQUM7UUFDaEMsT0FBTyxFQUFFLElBQUEscUNBQUMsRUFBQzs0REFDNkMsQ0FBQztLQUMxRDtJQUNELG9CQUFvQixFQUFFO1FBQ3BCLGlCQUFpQixFQUFFLElBQUEscUNBQUMsRUFBQzs7NkNBRW9CLENBQUM7UUFDMUMsZ0JBQWdCLEVBQUUsSUFBQSxxQ0FBQyxFQUFDLG9CQUFvQixDQUFDO1FBQ3pDLFVBQVUsRUFBRSxJQUFBLHFDQUFDLEVBQUMsbUJBQW1CLENBQUM7S0FDbkM7Q0FDRixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9oZWxwdGV4dC90b3BiYXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFya2VyIGFzIFQgfSBmcm9tICdAYmllc2JqZXJnL25neC10cmFuc2xhdGUtZXh0cmFjdC1tYXJrZXInO1xuaW1wb3J0IHsgaGVscHRleHRHbG9iYWwgfSBmcm9tICdhcHAvaGVscHRleHQvZ2xvYmFsLWhlbHB0ZXh0JztcbmltcG9ydCB7IGljb25NYXJrZXIgfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2ljb24tbWFya2VyLnV0aWwnO1xuXG5leHBvcnQgY29uc3QgaGVscHRleHRUb3BiYXIgPSB7XG4gIGhhX3N0YXR1czogVCgnSEEgU3RhdHVzJyksXG4gIGhhX3N0YXR1c190ZXh0X2VuYWJsZWQ6IFQoJ0hBIEVuYWJsZWQnKSxcbiAgaGFfaXNfZW5hYmxlZDogVCgnSEEgaXMgZW5hYmxlZCcpLFxuICBoYV9zdGF0dXNfdGV4dF9kaXNhYmxlZDogVCgnSEEgRGlzYWJsZWQnKSxcbiAgdXBkYXRlUnVubmluZ19kaWFsb2c6IHtcbiAgICB0aXRsZTogVCgnVXBkYXRlIGluIFByb2dyZXNzJyksXG4gICAgbWVzc2FnZTogaGVscHRleHRHbG9iYWwuc3lzVXBkYXRlTWVzc2FnZSxcbiAgICBtZXNzYWdlX3B0MjogYDxiPiR7aGVscHRleHRHbG9iYWwuc3lzVXBkYXRlTWVzc2FnZVB0Mn08L2I+YCxcbiAgfSxcblxuICBtYXRfdG9vbHRpcHM6IHtcbiAgICB0b2dnbGVfY29sbGFwc2U6IFQoJ1RvZ2dsZSBDb2xsYXBzZScpLFxuICAgIHRjX2Nvbm5lY3Q6IFQoJ0Nvbm5lY3RpbmcgdG8gVHJ1ZUNvbW1hbmQnKSxcbiAgICB0Y19zdGF0dXM6IFQoJ1N0YXR1cyBvZiBUcnVlQ29tbWFuZCcpLFxuICAgIHVwZGF0ZTogVCgnVXBkYXRlIGluIFByb2dyZXNzJyksXG4gICAgdXBncmFkZV93YWl0aW5nOiBUKCdVcGdyYWRlIFdhaXRpbmcgdG8gRmluaXNoJyksXG4gICAgcGVuZGluZ19uZXR3b3JrX2NoYW5nZXM6IFQoJ1BlbmRpbmcgTmV0d29yayBDaGFuZ2VzJyksXG4gICAgZGlyZWN0b3J5X3NlcnZpY2VzX21vbml0b3I6IFQoJ0RpcmVjdG9yeSBTZXJ2aWNlcyBNb25pdG9yJyksXG4gICAgcmVzaWx2ZXJpbmc6IFQoJ1Jlc2lsdmVyaW5nJyksXG4gICAgcmVwbGljYXRpb246IFQoJ1JlcGxpY2F0aW9uJyksXG4gICAgdGFza19tYW5hZ2VyOiBUKCdSdW5uaW5nIEpvYnMnKSxcbiAgICBhbGVydHM6IFQoJ0FsZXJ0cycpLFxuICAgIHNldHRpbmdzOiBUKCdTZXR0aW5ncycpLFxuICAgIHBvd2VyOiBUKCdQb3dlcicpLFxuICB9LFxuXG4gIHNpZ251cERpYWxvZzoge1xuICAgIGNvbnRlbnQ6IFQoJ1RoaXMgYWxsb3dzIHlvdXIgVHJ1ZU5BUyBzeXN0ZW0gdG8gYmUgbW9uaXRvcmVkIGFuZCBhZG1pbmlzdHJhdGVkIGJ5XFxcbiBUcnVlQ29tbWFuZC4gQ2xpY2sgPGI+U0lHTlVQPC9iPiB0byBjcmVhdGUgYSBuZXcgVHJ1ZUNvbW1hbmQgQ2xvdWQgaW5zdGFuY2Ugb3IgPGI+Q09OTkVDVDwvYj4gdG8gam9pbiBhbiBleGlzdGluZyBpbnN0YW5jZS4nKSxcbiAgfSxcblxuICB1cGRhdGVEaWFsb2c6IHtcbiAgICB0aXRsZV9jb25uZWN0OiBUKCdDb25uZWN0IHRvIFRydWVDb21tYW5kIENsb3VkJyksXG4gICAgdGl0bGVfdXBkYXRlOiBUKCdVcGRhdGUgVHJ1ZUNvbW1hbmQgU2V0dGluZ3MnKSxcbiAgICBjb25uZWN0X2J0bjogVCgnQ29ubmVjdCcpLFxuICAgIHNhdmVfYnRuOiBUKCdTYXZlJyksXG4gICAgYXBpX3BsYWNlaG9sZGVyOiBUKCdBUEkgS2V5JyksXG4gICAgYXBpX3Rvb2x0aXA6IFQoJ0VudGVyIG9yIHBhc3RlIHRoZSBBUEkga2V5IHByb3ZpZGVkIGZyb20gXFxcbjxhIGhyZWY9XCJodHRwczovL3BvcnRhbC5peHN5c3RlbXMuY29tL3BvcnRhbC9sb2dpbi9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5pWHN5c3RlbXMgQWNjb3VudCBTZXJ2aWNlczwvYT4uIFxcXG5Mb2dpbiBvciBzaWdudXAgaXMgcmVxdWlyZWQuJyksXG4gICAgZW5hYmxlZF9wbGFjZWhvbGRlcjogVCgnRW5hYmxlJyksXG4gICAgZW5hYmxlZF90b29sdGlwOiBUKCdJbW1lZGlhdGVseSBjb25uZWN0IHRvIFRydWVDb21tYW5kLicpLFxuICB9LFxuXG4gIHRjRGlhbG9nOiB7XG4gICAgdGl0bGU6IFQoJ09wZW4gVHJ1ZUNvbW1hbmQgVXNlciBJbnRlcmZhY2UnKSxcbiAgICBtZXNzYWdlOiBUKCc8ZW0+V2FybmluZzo8L2VtPiBUaGUgV2lyZUd1YXJkIHNlcnZpY2UgbXVzdCBiZSBhY3RpdmUgb24gdGhlIGNsaWVudCBzeXN0ZW0gdG8gYWNjZXNzIHRoZSBUcnVlQ29tbWFuZCBVSS4nKSxcbiAgICBjb25maXJtQnRuTXNnOiBUKCdDb250aW51ZScpLFxuICB9LFxuXG4gIHRjRGVyZWdpc3RlckJ0bjogVCgnRGVyZWdpc3RlcicpLFxuICB0Y0RlcmVnaXN0ZXJEaWFsb2c6IHtcbiAgICB0aXRsZTogVCgnRGVyZWdpc3RlciBUcnVlQ29tbWFuZCBDbG91ZCBTZXJ2aWNlJyksXG4gICAgaWNvbjogaWNvbk1hcmtlcignd2FybmluZycpLFxuICAgIG1lc3NhZ2U6IFQoJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZXJlZ2lzdGVyIFRydWVDb21tYW5kIENsb3VkIFNlcnZpY2U/JyksXG4gICAgY29uZmlybUJ0bk1zZzogVCgnQ29uZmlybScpLFxuICB9LFxuXG4gIGRlcmVnaXN0ZXJJbmZvRGlhbG9nOiB7XG4gICAgdGl0bGU6IFQoJ1RydWVDb21tYW5kIENsb3VkIFNlcnZpY2UgZGVyZWdpc3RlcmVkJyksXG4gICAgbWVzc2FnZTogVCgnVHJ1ZUNvbW1hbmQgQ2xvdWQgU2VydmljZSBoYXMgYmVlbiBkZXJlZ2lzdGVyZWQuJyksXG4gIH0sXG5cbiAgc3RvcFRDQ29ubmVjdGluZ0RpYWxvZzoge1xuICAgIHRpdGxlOiBUKCdTdG9wIFRydWVDb21tYW5kIENsb3VkIENvbm5lY3Rpb24nKSxcbiAgICBpY29uOiBpY29uTWFya2VyKCd3YXJuaW5nJyksXG4gICAgbWVzc2FnZTogVCgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHN0b3AgY29ubmVjdGluZyB0byB0aGUgVHJ1ZUNvbW1hbmQgQ2xvdWQgU2VydmljZT8nKSxcbiAgICBjb25maXJtQnRuTXNnOiBUKCdDb25maXJtJyksXG4gIH0sXG5cbiAgY2hlY2tFbWFpbEluZm9EaWFsb2c6IHtcbiAgICB0aXRsZTogVCgnVmVyaWZ5IEVtYWlsIEFkZHJlc3MnKSxcbiAgICBtZXNzYWdlOiBUKCdBIG1lc3NhZ2Ugd2l0aCB2ZXJpZmljYXRpb24gaW5zdHJ1Y3Rpb25zIGhhcyBiZWVuIHNlbnQgdG8gdGhlIG5ldyBlbWFpbCBcXFxuYWRkcmVzcy4gUGxlYXNlIHZlcmlmeSB0aGUgZW1haWwgYWRkcmVzcyBiZWZvcmUgY29udGludWluZy4nKSxcbiAgfSxcbiAgY2hhbmdlUGFzc3dvcmREaWFsb2c6IHtcbiAgICBwd19uZXdfcHdfdG9vbHRpcDogVCgnUGFzc3dvcmRzIGNhbm5vdCBjb250YWluIGEgPGI+PzwvYj4uIFBhc3N3b3JkcyBzaG91bGQgXFxcbmJlIGF0IGxlYXN0IGVpZ2h0IGNoYXJhY3RlcnMgYW5kIGNvbnRhaW4gYSBtaXggb2YgbG93ZXIgYW5kIFxcXG51cHBlciBjYXNlLCBudW1iZXJzLCBhbmQgc3BlY2lhbCBjaGFyYWN0ZXJzLicpLFxuICAgIHB3X2ludmFsaWRfdGl0bGU6IFQoJ0luY29ycmVjdCBQYXNzd29yZCcpLFxuICAgIHB3X3VwZGF0ZWQ6IFQoJ1Bhc3N3b3JkIHVwZGF0ZWQuJyksXG4gIH0sXG59O1xuIl0sInZlcnNpb24iOjN9