{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/ngx-webstorage/fesm2022/ngx-webstorage.mjs"],
  "sourcesContent": ["import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, Optional, inject, makeEnvironmentProviders, APP_INITIALIZER } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\n\nvar StorageStrategies;\n(function (StorageStrategies) {\n    StorageStrategies[\"Local\"] = \"local_strategy\";\n    StorageStrategies[\"Session\"] = \"session_strategy\";\n    StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\n\nclass CompatHelper {\n    static isStorageAvailable(storage) {\n        let available = true;\n        try {\n            if (typeof storage === 'object') {\n                storage.setItem('test-storage', 'foobar');\n                storage.removeItem('test-storage');\n            }\n            else\n                available = false;\n        }\n        catch (e) {\n            available = false;\n        }\n        return available;\n    }\n}\n\nfunction noop() { }\n\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\n\nclass StorageKeyManager {\n    static { this.prefix = DefaultPrefix; }\n    static { this.separator = DefaultSeparator; }\n    static { this.isCaseSensitive = DefaultIsCaseSensitive; }\n    static normalize(raw) {\n        raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n        return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n    }\n    static isNormalizedKey(key) {\n        return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n    }\n    static setPrefix(prefix) {\n        StorageKeyManager.prefix = prefix;\n    }\n    static setSeparator(separator) {\n        StorageKeyManager.separator = separator;\n    }\n    static setCaseSensitive(enable) {\n        StorageKeyManager.isCaseSensitive = enable;\n    }\n    static consumeConfiguration(config) {\n        if ('prefix' in config)\n            this.setPrefix(config.prefix);\n        if ('separator' in config)\n            this.setSeparator(config.separator);\n        if ('caseSensitive' in config)\n            this.setCaseSensitive(config.caseSensitive);\n    }\n}\n\nclass SyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        let value;\n        this.strategy.get(StorageKeyManager.normalize(key)).subscribe((result) => value = typeof result === 'undefined' ? null : result);\n        return value;\n    }\n    store(key, value) {\n        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n        return value;\n    }\n    clear(key) {\n        if (key !== undefined)\n            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);\n        else\n            this.strategy.clear().subscribe(noop);\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({ refCount: true, bufferSize: 1 }));\n    }\n}\n\nclass AsyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map((value) => typeof value === 'undefined' ? null : value));\n    }\n    store(key, value) {\n        return this.strategy.set(StorageKeyManager.normalize(key), value);\n    }\n    clear(key) {\n        return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({ refCount: true, bufferSize: 1 }));\n    }\n}\n\nclass StrategyCacheService {\n    constructor() {\n        this.caches = {};\n    }\n    get(strategyName, key) {\n        return this.getCacheStore(strategyName)[key];\n    }\n    set(strategyName, key, value) {\n        this.getCacheStore(strategyName)[key] = value;\n    }\n    del(strategyName, key) {\n        delete this.getCacheStore(strategyName)[key];\n    }\n    clear(strategyName) {\n        this.caches[strategyName] = {};\n    }\n    getCacheStore(strategyName) {\n        if (strategyName in this.caches)\n            return this.caches[strategyName];\n        return this.caches[strategyName] = {};\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: StrategyCacheService, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: StrategyCacheService, providedIn: 'root' }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: StrategyCacheService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\nfunction getLocalStorage() {\n    return (typeof window !== 'undefined') ? window.localStorage : null;\n}\nconst LocalStorageProvider = { provide: LOCAL_STORAGE, useFactory: getLocalStorage };\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\nfunction getSessionStorage() {\n    return (typeof window !== 'undefined') ? window.sessionStorage : null;\n}\nconst SessionStorageProvider = { provide: SESSION_STORAGE, useFactory: getSessionStorage };\n\nclass BaseSyncStorageStrategy {\n    constructor(storage, cache) {\n        this.storage = storage;\n        this.cache = cache;\n        this.keyChanges = new Subject();\n    }\n    get isAvailable() {\n        if (this._isAvailable === undefined)\n            this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n        return this._isAvailable;\n    }\n    get(key) {\n        let data = this.cache.get(this.name, key);\n        if (data !== undefined)\n            return of(data);\n        try {\n            const item = this.storage.getItem(key);\n            if (item !== null) {\n                data = JSON.parse(item);\n                this.cache.set(this.name, key, data);\n            }\n        }\n        catch (err) {\n            console.warn(err);\n        }\n        return of(data);\n    }\n    set(key, value) {\n        const data = JSON.stringify(value);\n        this.storage.setItem(key, data);\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.storage.removeItem(key);\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.storage.clear();\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n    static { this.strategyName = StorageStrategies.Local; }\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = LocalStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: LocalStorageStrategy, deps: [{ token: LOCAL_STORAGE }, { token: StrategyCacheService }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: LocalStorageStrategy }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: LocalStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCAL_STORAGE]\n                }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }] });\n\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n    static { this.strategyName = StorageStrategies.Session; }\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = SessionStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (event.key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: SessionStorageStrategy, deps: [{ token: SESSION_STORAGE }, { token: StrategyCacheService }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: SessionStorageStrategy }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: SessionStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SESSION_STORAGE]\n                }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }] });\n\nclass InMemoryStorageStrategy {\n    static { this.strategyName = StorageStrategies.InMemory; }\n    constructor(cache) {\n        this.cache = cache;\n        this.keyChanges = new Subject();\n        this.isAvailable = true;\n        this.name = InMemoryStorageStrategy.strategyName;\n    }\n    get(key) {\n        return of(this.cache.get(this.name, key));\n    }\n    set(key, value) {\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: InMemoryStorageStrategy, deps: [{ token: StrategyCacheService }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: InMemoryStorageStrategy }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: InMemoryStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: StrategyCacheService, decorators: [{\n                    type: Inject,\n                    args: [StrategyCacheService]\n                }] }] });\n\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [\n    { provide: STORAGE_STRATEGIES, useClass: InMemoryStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: LocalStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: SessionStorageStrategy, multi: true },\n];\nconst [InMemoryStorageStrategyProvider, LocalStorageStrategyProvider, SessionStorageStrategyProvider] = Strategies;\n\nconst StorageStrategyStubName = 'stub_strategy';\nclass StorageStrategyStub {\n    constructor(name) {\n        this.keyChanges = new Subject();\n        this.store = {};\n        this._available = true;\n        this.name = name || StorageStrategyStubName;\n    }\n    get isAvailable() {\n        return this._available;\n    }\n    get(key) {\n        return of(this.store[key]);\n    }\n    set(key, value) {\n        this.store[key] = value;\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        delete this.store[key];\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.store = {};\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass StorageStub {\n    constructor() {\n        this.store = {};\n    }\n    get length() {\n        return Object.keys(this.store).length;\n    }\n    clear() {\n        this.store = {};\n    }\n    getItem(key) {\n        return this.store[key] || null;\n    }\n    key(index) {\n        return Object.keys(this.store)[index];\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\n\nconst InvalidStrategyError = 'invalid_strategy';\nclass StrategyIndex {\n    static { this.index = {}; }\n    constructor(strategies) {\n        this.strategies = strategies;\n        this.registration$ = new Subject();\n        if (!strategies)\n            strategies = [];\n        this.strategies = strategies.reverse()\n            .map((strategy, index, arr) => strategy.name)\n            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)\n            .filter((index) => index !== null)\n            .map((index) => strategies[index]);\n    }\n    static get(name) {\n        if (!this.isStrategyRegistered(name))\n            throw Error(InvalidStrategyError);\n        let strategy = this.index[name];\n        if (!strategy.isAvailable) {\n            strategy = this.index[StorageStrategies.InMemory];\n        }\n        return strategy;\n    }\n    static set(name, strategy) {\n        this.index[name] = strategy;\n    }\n    static clear(name) {\n        if (name !== undefined)\n            delete this.index[name];\n        else\n            this.index = {};\n    }\n    static isStrategyRegistered(name) {\n        return name in this.index;\n    }\n    static hasRegistredStrategies() {\n        return Object.keys(this.index).length > 0;\n    }\n    getStrategy(name) {\n        return StrategyIndex.get(name);\n    }\n    indexStrategies() {\n        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));\n    }\n    indexStrategy(name, overrideIfExists = false) {\n        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)\n            return StrategyIndex.get(name);\n        const strategy = this.strategies.find((strategy) => strategy.name === name);\n        if (!strategy)\n            throw new Error(InvalidStrategyError);\n        this.register(name, strategy, overrideIfExists);\n        return strategy;\n    }\n    register(name, strategy, overrideIfExists = false) {\n        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n            StrategyIndex.set(name, strategy);\n            this.registration$.next(name);\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: StrategyIndex, deps: [{ token: STORAGE_STRATEGIES, optional: true }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: StrategyIndex, providedIn: 'root' }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.2\", ngImport: i0, type: StrategyIndex, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [STORAGE_STRATEGIES]\n                }] }] });\n\nclass LocalStorageService extends SyncStorage {\n}\nfunction buildService$1(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Local);\n    return new SyncStorage(strategy);\n}\nconst LocalStorageServiceProvider = {\n    provide: LocalStorageService,\n    useFactory: buildService$1,\n    deps: [StrategyIndex]\n};\n\nclass SessionStorageService extends SyncStorage {\n}\nfunction buildService(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Session);\n    return new SyncStorage(strategy);\n}\nconst SessionStorageServiceProvider = {\n    provide: SessionStorageService,\n    useFactory: buildService,\n    deps: [StrategyIndex]\n};\n\nclass DecoratorBuilder {\n    static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n        const rawKey = key || propName;\n        let storageKey;\n        Object.defineProperty(prototype, propName, {\n            get: function () {\n                let value;\n                StrategyIndex.get(strategyName).get(getKey()).subscribe((result) => value = result);\n                return value === undefined ? defaultValue : value;\n            },\n            set: function (value) {\n                StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n            }\n        });\n        function getKey() {\n            if (storageKey !== undefined)\n                return storageKey;\n            return storageKey = StorageKeyManager.normalize(rawKey);\n        }\n    }\n}\n\nfunction LocalStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n    };\n}\nfunction SessionStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n    };\n}\n\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\nvar InternalNgxWebstorageFeatureKind;\n(function (InternalNgxWebstorageFeatureKind) {\n    InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"Config\"] = 1] = \"Config\";\n    InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"LocalStorage\"] = 2] = \"LocalStorage\";\n    InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"SessionStorage\"] = 3] = \"SessionStorage\";\n})(InternalNgxWebstorageFeatureKind || (InternalNgxWebstorageFeatureKind = {}));\nfunction appInit() {\n    const config = inject(LIB_CONFIG);\n    const index = inject(StrategyIndex);\n    return () => {\n        StorageKeyManager.consumeConfiguration(config);\n        index.indexStrategies();\n    };\n}\n/**\n * Provide ngx-webstorage basic features.\n *\n * - You can customise the configuration with the `withConfiguration` feature.\n * - You can enable the `LocalStorage` features with the `withLocalStorage` feature.\n * - You can enable the `SessionStorage` features with the `withSessionStorage` feature.\n *\n * @default config { prefix: 'ngx-webstorage', separator: '|', caseSensitive: false }\n */\nfunction provideNgxWebstorage(...features) {\n    const { configProvider, featureProviders } = parseFeatures(features);\n    return makeEnvironmentProviders([\n        configProvider,\n        InMemoryStorageStrategyProvider,\n        { provide: APP_INITIALIZER, useFactory: appInit, multi: true },\n        ...featureProviders,\n    ]);\n}\nfunction parseFeatures(features) {\n    let configProvider;\n    const featureProviders = [];\n    const parsedFeatures = new Set();\n    for (const feature of features) {\n        if (parsedFeatures.has(feature.kind))\n            throw new Error(`Feature ${feature.kind} is already provided.`);\n        if (feature.kind === InternalNgxWebstorageFeatureKind.Config) {\n            configProvider = feature.providers[0];\n        }\n        else\n            featureProviders.push(...feature.providers);\n        parsedFeatures.add(feature.kind);\n    }\n    return {\n        configProvider: configProvider ?? {\n            provide: LIB_CONFIG,\n            useValue: { prefix: DefaultPrefix, separator: DefaultSeparator, caseSensitive: DefaultIsCaseSensitive }\n        },\n        featureProviders\n    };\n}\nfunction makeNgxWebstorageFeature(kind, providers) {\n    return { kind, providers };\n}\nfunction withNgxWebstorageConfig(config) {\n    return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.Config, [{ provide: LIB_CONFIG, useValue: config }]);\n}\n/** Provides everything necessary to use the `LocalStorage` features. */\nfunction withLocalStorage() {\n    return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.LocalStorage, [\n        LocalStorageProvider,\n        LocalStorageServiceProvider,\n        LocalStorageStrategyProvider,\n    ]);\n}\nfunction withSessionStorage() {\n    return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.SessionStorage, [\n        SessionStorageProvider,\n        SessionStorageServiceProvider,\n        SessionStorageStrategyProvider,\n    ]);\n}\n\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InternalNgxWebstorageFeatureKind, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, makeNgxWebstorageFeature, provideNgxWebstorage, withLocalStorage, withNgxWebstorageConfig, withSessionStorage };\n//# sourceMappingURL=ngx-webstorage.mjs.map\n"],
  "mappings": "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",
  "names": ["StorageStrategies", "strategy", "InternalNgxWebstorageFeatureKind"]
}
