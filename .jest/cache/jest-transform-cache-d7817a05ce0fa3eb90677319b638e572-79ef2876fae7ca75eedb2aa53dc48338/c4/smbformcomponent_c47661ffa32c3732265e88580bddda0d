7f2de8085ddecf5039ce073386966bda
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmbFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const dialog_1 = require("@angular/material/dialog");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const dataset_enum_1 = require("app/enums/dataset.enum");
const role_enum_1 = require("app/enums/role.enum");
const service_name_enum_1 = require("app/enums/service-name.enum");
const service_status_enum_1 = require("app/enums/service-status.enum");
const sharing_1 = require("app/helptext/sharing");
const smb_share_interface_1 = require("app/interfaces/smb-share.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_chips_component_1 = require("app/modules/forms/ix-forms/components/ix-chips/ix-chips.component");
const ix_explorer_component_1 = require("app/modules/forms/ix-forms/components/ix-explorer/ix-explorer.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ix_formatter_service_1 = require("app/modules/forms/ix-forms/services/ix-formatter.service");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const restart_smb_dialog_component_1 = require("app/pages/sharing/smb/smb-form/restart-smb-dialog/restart-smb-dialog.component");
const smb_validator_service_1 = require("app/pages/sharing/smb/smb-form/smb-validator.service");
const dataset_service_1 = require("app/services/dataset-service/dataset.service");
const filesystem_service_1 = require("app/services/filesystem.service");
const user_service_1 = require("app/services/user.service");
const ws_service_1 = require("app/services/ws.service");
const services_actions_1 = require("app/store/services/services.actions");
const services_selectors_1 = require("app/store/services/services.selectors");
let SmbFormComponent = class SmbFormComponent {
    get isNew() {
        return !this.existingSmbShare;
    }
    get isAsyncValidatorPending() {
        return this.form.controls.name.status === 'PENDING' && this.form.controls.name.touched;
    }
    get hasAddedAllowDenyHosts() {
        const hostsallow = this.form.controls.hostsallow.value;
        const hostsdeny = this.form.controls.hostsdeny.value;
        return ((this.isNew && hostsallow && hostsallow.length > 0)
            || (this.isNew && hostsdeny && hostsdeny.length > 0)
            || this.hasHostAllowDenyChanged(hostsallow, hostsdeny));
    }
    hasHostAllowDenyChanged(hostsallow, hostsdeny) {
        var _a, _b;
        return (!(0, lodash_es_1.isEqual)((_a = this.existingSmbShare) === null || _a === void 0 ? void 0 : _a.hostsallow, hostsallow)
            || !(0, lodash_es_1.isEqual)((_b = this.existingSmbShare) === null || _b === void 0 ? void 0 : _b.hostsdeny, hostsdeny));
    }
    get isRestartRequired() {
        return (this.isNewTimemachineShare
            || this.isNewHomeShare
            || this.wasPathChanged
            || this.hasAddedAllowDenyHosts);
    }
    get isNewTimemachineShare() {
        var _a;
        const timemachine = this.form.controls.timemachine.value;
        return ((this.isNew && timemachine)
            || timemachine !== ((_a = this.existingSmbShare) === null || _a === void 0 ? void 0 : _a.timemachine));
    }
    get isNewHomeShare() {
        var _a;
        const homeShare = this.form.controls.home.value;
        return ((this.isNew && homeShare) || homeShare !== ((_a = this.existingSmbShare) === null || _a === void 0 ? void 0 : _a.home));
    }
    get wasPathChanged() {
        var _a;
        return (!this.isNew && this.form.controls.path.value !== ((_a = this.existingSmbShare) === null || _a === void 0 ? void 0 : _a.path));
    }
    constructor(formatter, cdr, formBuilder, ws, matDialog, dialogService, datasetService, translate, router, userService, loader, formErrorHandler, filesystemService, snackbar, slideInRef, store$, smbValidationService, data) {
        var _a, _b;
        this.formatter = formatter;
        this.cdr = cdr;
        this.formBuilder = formBuilder;
        this.ws = ws;
        this.matDialog = matDialog;
        this.dialogService = dialogService;
        this.datasetService = datasetService;
        this.translate = translate;
        this.router = router;
        this.userService = userService;
        this.loader = loader;
        this.formErrorHandler = formErrorHandler;
        this.filesystemService = filesystemService;
        this.snackbar = snackbar;
        this.slideInRef = slideInRef;
        this.store$ = store$;
        this.smbValidationService = smbValidationService;
        this.data = data;
        this.isLoading = false;
        this.isAdvancedMode = false;
        this.namesInUse = [];
        this.helptextSharingSmb = sharing_1.helptextSharingSmb;
        this.requiredRoles = [role_enum_1.Role.SharingSmbWrite, role_enum_1.Role.SharingWrite];
        this.wasStripAclWarningShown = false;
        this.groupProvider = (query) => {
            return this.userService.groupQueryDsCache(query).pipe((0, operators_1.map)((groups) => groups.map((group) => group.group)));
        };
        this.title = sharing_1.helptextSharingSmb.formTitleAdd;
        this.createDatasetProps = {
            share_type: dataset_enum_1.DatasetPreset.Smb,
        };
        this.treeNodeProvider = this.filesystemService.getFilesystemNodeProvider({
            directoriesOnly: true,
            includeSnapshots: false,
        });
        this.presetFields = [];
        this.hostsAllowTooltip = this.translate.instant('Enter a list of allowed hostnames or IP addresses.\
    Separate entries by pressing <code>Enter</code>. A more detailed description \
    with examples can be found \
    <a href="{url}" target="_blank">here</a>. <br><br> \
    If neither *Hosts Allow* or *Hosts Deny* contains \
    an entry, then SMB share access is allowed for any host. <br><br> \
    If there is a *Hosts Allow* list but no *Hosts Deny* list, then only allow \
    hosts on the *Hosts Allow* list. <br><br> \
    If there is a *Hosts Deny* list but no *Hosts Allow* list, then allow all \
    hosts that are not on the *Hosts Deny* list. <br><br> \
    If there is both a *Hosts Allow* and *Hosts Deny* list, then allow all hosts \
    that are on the *Hosts Allow* list. <br><br> \
    If there is a host not on the *Hosts Allow* and not on the *Hosts Deny* list, \
    then allow it.', { url: 'https://wiki.samba.org/index.php/1.4_Samba_Security' });
        this.form = this.formBuilder.group({
            path: ['', forms_1.Validators.required],
            name: ['', forms_1.Validators.required],
            purpose: [null],
            comment: [''],
            enabled: [true],
            acl: [false],
            ro: [false],
            browsable: [true],
            guestok: [false],
            abe: [false],
            hostsallow: [[]],
            hostsdeny: [[]],
            home: [false],
            timemachine: [false],
            timemachine_quota: [null],
            afp: [false],
            shadowcopy: [false],
            recyclebin: [false],
            aapl_name_mangling: [false],
            streams: [false],
            durablehandle: [false],
            fsrvp: [false],
            path_suffix: [''],
            auxsmbconf: [''],
            audit: this.formBuilder.group({
                enable: [false],
                watch_list: [[]],
                ignore_list: [[]],
            }),
        });
        this.restartCifsService = () => {
            this.loader.open();
            return this.ws.call('service.restart', [service_name_enum_1.ServiceName.Cifs]).pipe((0, operators_1.tap)(() => {
                this.loader.close();
                this.snackbar.success(this.translate.instant(sharing_1.helptextSharingSmb.restarted_smb_dialog.message));
            }));
        };
        this.existingSmbShare = (_a = this.data) === null || _a === void 0 ? void 0 : _a.existingSmbShare;
        this.defaultSmbShare = (_b = this.data) === null || _b === void 0 ? void 0 : _b.defaultSmbShare;
    }
    ngOnInit() {
        this.setupPurposeControl();
        this.setupAndApplyPurposePresets()
            .pipe((0, operators_1.tap)(() => {
            this.setupAfpWarning();
            this.setupMangleWarning();
            this.setupPathControl();
            this.setupAclControl();
        }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(rxjs_1.noop);
        if (this.defaultSmbShare) {
            this.form.patchValue(this.defaultSmbShare);
            this.setNameFromPath();
        }
        if (this.existingSmbShare) {
            this.setSmbShareForEdit();
        }
    }
    ngAfterViewInit() {
        var _a;
        this.form.controls.name.addAsyncValidators([
            this.smbValidationService.validate((_a = this.existingSmbShare) === null || _a === void 0 ? void 0 : _a.name),
        ]);
    }
    setupAclControl() {
        this.form.controls.acl
            .valueChanges.pipe((0, operators_1.debounceTime)(100), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((acl) => {
            this.checkAndShowStripAclWarning(this.form.controls.path.value, acl);
        });
    }
    setupMangleWarning() {
        this.form.controls.aapl_name_mangling.valueChanges.pipe((0, operators_1.filter)((value) => { var _a; return value !== ((_a = this.existingSmbShare) === null || _a === void 0 ? void 0 : _a.aapl_name_mangling) && !this.isNew; }), (0, operators_1.take)(1), (0, operators_1.switchMap)(() => this.dialogService.confirm({
            title: sharing_1.helptextSharingSmb.manglingDialog.title,
            message: sharing_1.helptextSharingSmb.manglingDialog.message,
            hideCheckbox: true,
            buttonText: sharing_1.helptextSharingSmb.manglingDialog.action,
            hideCancel: true,
        })), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe();
    }
    setupPathControl() {
        this.form.controls.path.valueChanges.pipe((0, operators_1.debounceTime)(50), (0, operators_1.tap)(() => this.setNameFromPath()), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe((path) => {
            this.checkAndShowStripAclWarning(path, this.form.controls.acl.value);
        });
    }
    setupAfpWarning() {
        this.form.controls.afp.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((value) => {
            this.afpConfirmEnable(value);
        });
    }
    setupPurposeControl() {
        this.form.controls.purpose.valueChanges.pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((value) => {
            this.clearPresets();
            this.setValuesFromPreset(value);
        });
    }
    setNameFromPath() {
        const pathControl = this.form.controls.path;
        if (!pathControl.value) {
            return;
        }
        const nameControl = this.form.controls.name;
        if (pathControl.value && (!nameControl.value || !nameControl.dirty)) {
            const name = pathControl.value.split('/').pop();
            nameControl.setValue(name);
            nameControl.markAsTouched();
        }
        this.cdr.markForCheck();
    }
    checkAndShowStripAclWarning(path, aclValue) {
        if (this.wasStripAclWarningShown || !path || aclValue) {
            return;
        }
        this.ws
            .call('filesystem.acl_is_trivial', [path])
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((aclIsTrivial) => {
            if (!aclIsTrivial) {
                this.wasStripAclWarningShown = true;
                this.showStripAclWarning();
            }
        });
    }
    setValuesFromPreset(preset) {
        var _a;
        if (!((_a = this.presets) === null || _a === void 0 ? void 0 : _a[preset])) {
            return;
        }
        Object.keys(this.presets[preset].params).forEach((param) => {
            this.presetFields.push(param);
            // eslint-disable-next-line no-restricted-syntax
            const ctrl = this.form.get(param);
            if (ctrl) {
                ctrl.setValue(this.presets[preset].params[param]);
                ctrl.disable();
            }
        });
    }
    /**
     * @returns Observable<void> to allow setting warnings for values changes once default or previous preset is applied
     */
    setupAndApplyPurposePresets() {
        return this.ws.call('sharing.smb.presets').pipe((0, operators_1.switchMap)((presets) => {
            var _a;
            const nonClusterPresets = Object.entries(presets).reduce((acc, [presetName, preset]) => {
                if (!preset.cluster) {
                    acc[presetName] = preset;
                }
                return acc;
            }, {});
            this.presets = nonClusterPresets;
            const options = Object.entries(nonClusterPresets).map(([presetName, preset]) => ({
                label: preset.verbose_name,
                value: presetName,
            }));
            this.purposeOptions$ = (0, rxjs_1.of)(options);
            this.form.controls.purpose.setValue(this.isNew
                ? smb_share_interface_1.SmbPresetType.DefaultShareParameters
                : (_a = this.existingSmbShare) === null || _a === void 0 ? void 0 : _a.purpose);
            this.cdr.markForCheck();
            return (0, rxjs_1.of)(null);
        }));
    }
    showStripAclWarning() {
        this.dialogService
            .confirm({
            title: sharing_1.helptextSharingSmb.stripACLDialog.title,
            message: sharing_1.helptextSharingSmb.stripACLDialog.message,
            hideCheckbox: true,
            buttonText: sharing_1.helptextSharingSmb.stripACLDialog.button,
            hideCancel: true,
        })
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe();
    }
    clearPresets() {
        for (const item of this.presetFields) {
            // eslint-disable-next-line no-restricted-syntax
            this.form.get(item).enable();
        }
        this.presetFields = [];
    }
    setSmbShareForEdit() {
        this.title = sharing_1.helptextSharingSmb.formTitleEdit;
        const index = this.namesInUse.findIndex((name) => name === this.existingSmbShare.name);
        if (index >= 0) {
            this.namesInUse.splice(index, 1);
        }
        this.form.patchValue(this.existingSmbShare);
    }
    afpConfirmEnable(value) {
        if (!value) {
            return;
        }
        const afpControl = this.form.controls.afp;
        this.dialogService
            .confirm({
            title: sharing_1.helptextSharingSmb.afpDialog_title,
            message: sharing_1.helptextSharingSmb.afpDialog_message,
            hideCheckbox: false,
            buttonText: sharing_1.helptextSharingSmb.afpDialog_button,
            hideCancel: false,
        })
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((dialogResult) => {
            if (!dialogResult) {
                afpControl.setValue(!value);
            }
        });
    }
    submit() {
        const smbShare = this.form.value;
        if (!smbShare.timemachine_quota || !smbShare.timemachine) {
            smbShare.timemachine_quota = 0;
        }
        let request$;
        if (this.isNew) {
            request$ = this.ws.call('sharing.smb.create', [smbShare]);
        }
        else {
            request$ = this.ws.call('sharing.smb.update', [this.existingSmbShare.id, smbShare]);
        }
        this.datasetService.rootLevelDatasetWarning(smbShare.path, this.translate.instant(sharing_1.helptextSharingSmb.root_level_warning), !this.form.controls.path.dirty).pipe((0, operators_1.filter)(Boolean), (0, operators_1.tap)(() => {
            this.isLoading = true;
            this.cdr.markForCheck();
        }), (0, operators_1.switchMap)(() => request$), (0, operators_1.switchMap)((smbShareResponse) => this.restartCifsServiceIfNecessary().pipe((0, operators_1.map)(() => smbShareResponse))), (0, operators_1.switchMap)((smbShareResponse) => this.shouldRedirectToAclEdit().pipe((0, operators_1.map)((shouldRedirect) => ({ smbShareResponse, shouldRedirect })))), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ({ smbShareResponse, shouldRedirect }) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                if (shouldRedirect) {
                    this.dialogService.confirm({
                        title: this.translate.instant('Configure ACL'),
                        message: this.translate.instant('Do you want to configure the ACL?'),
                        buttonText: this.translate.instant('Configure'),
                        cancelText: this.translate.instant('No'),
                        hideCheckbox: true,
                    }).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((isConfigure) => {
                        if (isConfigure) {
                            const homeShare = this.form.controls.home.value;
                            this.router.navigate(['/', 'datasets', 'acl', 'edit'], { queryParams: { homeShare, path: smbShareResponse.path_local } });
                        }
                        this.store$.dispatch((0, services_actions_1.checkIfServiceIsEnabled)({ serviceName: service_name_enum_1.ServiceName.Cifs }));
                        this.slideInRef.close(true);
                    });
                }
                else {
                    this.store$.dispatch((0, services_actions_1.checkIfServiceIsEnabled)({ serviceName: service_name_enum_1.ServiceName.Cifs }));
                    this.slideInRef.close(true);
                }
            },
            error: (error) => {
                var _a, _b;
                if (((_a = error === null || error === void 0 ? void 0 : error.reason) === null || _a === void 0 ? void 0 : _a.includes('[ENOENT]')) || ((_b = error === null || error === void 0 ? void 0 : error.reason) === null || _b === void 0 ? void 0 : _b.includes('[EXDEV]'))) {
                    this.dialogService.closeAllDialogs();
                }
                this.isLoading = false;
                this.cdr.markForCheck();
                this.formErrorHandler.handleWsFormError(error, this.form, {}, 'smb-form-toggle-advanced-options');
            },
        });
    }
    restartCifsServiceIfNecessary() {
        return this.promptIfRestartRequired().pipe((0, operators_1.switchMap)((shouldRestart) => {
            if (shouldRestart) {
                return this.restartCifsService();
            }
            return (0, rxjs_1.of)(false);
        }));
    }
    promptIfRestartRequired() {
        return this.store$.select((0, services_selectors_1.selectService)(service_name_enum_1.ServiceName.Cifs)).pipe((0, operators_1.map)((service) => service.state === service_status_enum_1.ServiceStatus.Running), (0, operators_1.switchMap)((isRunning) => {
            if (isRunning && this.isRestartRequired) {
                return this.matDialog.open(restart_smb_dialog_component_1.RestartSmbDialogComponent, {
                    data: {
                        timemachine: this.isNewTimemachineShare,
                        homeshare: this.isNewHomeShare,
                        path: this.wasPathChanged,
                        hosts: this.hasAddedAllowDenyHosts,
                        isNew: this.isNew,
                    },
                }).afterClosed();
            }
            return (0, rxjs_1.of)(false);
        }), (0, operators_1.take)(1));
    }
    shouldRedirectToAclEdit() {
        const sharePath = this.form.controls.path.value;
        const datasetId = sharePath.replace('/mnt/', '');
        return this.ws.call('filesystem.stat', [sharePath]).pipe((0, operators_1.switchMap)((stat) => {
            return (0, rxjs_1.of)(stat.acl !== this.form.controls.acl.value && datasetId.includes('/'));
        }));
    }
};
exports.SmbFormComponent = SmbFormComponent;
SmbFormComponent.ctorParameters = () => [
    { type: ix_formatter_service_1.IxFormatterService },
    { type: core_1.ChangeDetectorRef },
    { type: forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: dialog_1.MatDialog },
    { type: dialog_service_1.DialogService },
    { type: dataset_service_1.DatasetService },
    { type: core_2.TranslateService },
    { type: router_1.Router },
    { type: user_service_1.UserService },
    { type: app_loader_service_1.AppLoaderService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: filesystem_service_1.FilesystemService },
    { type: snackbar_service_1.SnackbarService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: store_1.Store },
    { type: smb_validator_service_1.SmbValidationService },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.SmbFormComponent = SmbFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-smb-form',
        template: require("./smb-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header_component_1.IxModalHeaderComponent,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_explorer_component_1.IxExplorerComponent,
            ix_input_component_1.IxInputComponent,
            ix_select_component_1.IxSelectComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            ix_chips_component_1.IxChipsComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
        ],
    })
], SmbFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,