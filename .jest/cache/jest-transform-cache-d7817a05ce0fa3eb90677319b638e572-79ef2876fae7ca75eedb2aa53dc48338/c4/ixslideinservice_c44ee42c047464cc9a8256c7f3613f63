dc54ea46c43da1f2a7c8c6b0f3e466c3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxSlideInService = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const focus_service_1 = require("app/services/focus.service");
let IxSlideInService = class IxSlideInService {
    constructor(location, router, focusService) {
        this.location = location;
        this.router = router;
        this.focusService = focusService;
        this.slideInRefMap = new Map();
        /**
         * Emits when any slide in has been closed.
         * Prefer to use slideInClosed$ in slideInRef to tell when an individual slide in is closed.
         */
        this.onClose$ = new rxjs_1.Subject();
        this.closeOnNavigation();
    }
    get isSlideInOpen() {
        var _a;
        return (_a = this.slideInComponent) === null || _a === void 0 ? void 0 : _a.isSlideInOpen;
    }
    // TODO: Rework via cdk overlays or something else that would make it easier to use in tests.
    setSlideComponent(slideComponent) {
        this.slideInComponent = slideComponent;
    }
    open(component, params) {
        this.slideInRefMap.forEach((ref) => ref.close());
        const slideInRef = this.slideInComponent.openSlideIn(component, params);
        this.slideInRefMap.set(slideInRef.id, slideInRef);
        slideInRef.slideInClosed$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((response) => {
            this.deleteRef(slideInRef.id);
            if (response === undefined) {
                response = null;
            }
            this.onClose$.next(null);
        });
        this.focusService.captureCurrentFocus();
        this.focusOnTheCloseButton();
        return slideInRef;
    }
    closeLast() {
        if (!this.isSlideInOpen) {
            return;
        }
        const lastSlideInRef = Array.from(this.slideInRefMap.values()).pop();
        lastSlideInRef.close();
    }
    closeAll() {
        if (!this.isSlideInOpen) {
            return;
        }
        this.slideInRefMap.forEach((ref) => ref.close());
    }
    deleteRef(id) {
        this.slideInRefMap.delete(id);
        if (this.isSlideInOpen) {
            this.slideInComponent.closeSlideIn();
        }
        this.focusService.restoreFocus();
    }
    closeOnNavigation() {
        (0, rxjs_1.merge)(new rxjs_1.Observable((observer) => {
            this.location.subscribe((event) => {
                observer.next(event);
            });
        }), this.router.events.pipe((0, operators_1.filter)((event) => event instanceof router_1.NavigationEnd)))
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.closeAll();
        });
    }
    focusOnTheCloseButton() {
        (0, rxjs_1.timer)(100).pipe((0, operators_1.take)(1)).subscribe(() => this.focusService.focusElementById('ix-close-icon'));
    }
};
exports.IxSlideInService = IxSlideInService;
IxSlideInService.ctorParameters = () => [
    { type: common_1.Location },
    { type: router_1.Router },
    { type: focus_service_1.FocusService }
];
exports.IxSlideInService = IxSlideInService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], IxSlideInService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,