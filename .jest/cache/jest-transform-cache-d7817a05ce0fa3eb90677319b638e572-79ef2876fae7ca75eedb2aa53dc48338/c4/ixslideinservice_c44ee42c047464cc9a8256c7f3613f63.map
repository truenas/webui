{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ix-slide-in.service.ts","mappings":";;;;;;;;;AAAA,4CAA2C;AAC3C,wCAA2D;AAC3D,4CAAwD;AACxD,yDAAqE;AACrE,+BAEc;AACd,8CAA8C;AAG9C,8DAA0D;AAMnD,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAS3B,YACU,QAAkB,EAClB,MAAc,EACd,YAA0B;QAF1B,aAAQ,GAAR,QAAQ,CAAU;QAClB,WAAM,GAAN,MAAM,CAAQ;QACd,iBAAY,GAAZ,YAAY,CAAc;QAVpC,kBAAa,GAAG,IAAI,GAAG,EAAiC,CAAC;QACzD;;;WAGG;QACM,aAAQ,GAAG,IAAI,cAAO,EAAQ,CAAC;QAOtC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,IAAI,aAAa;;QACf,OAAO,MAAA,IAAI,CAAC,gBAAgB,0CAAE,aAAa,CAAC;IAC9C,CAAC;IAED,6FAA6F;IAC7F,iBAAiB,CAAC,cAAkC;QAClD,IAAI,CAAC,gBAAgB,GAAG,cAAc,CAAC;IACzC,CAAC;IAED,IAAI,CACF,SAAkB,EAClB,MAA0D;QAE1D,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QAEjD,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAO,SAAS,EAAE,MAAM,CAAC,CAAC;QAC9E,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QAClD,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,QAAY,EAAE,EAAE;YAC9E,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC9B,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;gBAC3B,QAAQ,GAAG,IAAI,CAAC;YAClB,CAAC;YACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC;QACxC,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE7B,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,OAAO;QACT,CAAC;QAED,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;QACrE,cAAc,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,SAAS,CAAC,EAAU;QAClB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAE9B,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;QACvC,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IACnC,CAAC;IAEO,iBAAiB;QACvB,IAAA,YAAK,EACH,IAAI,iBAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC1B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;gBAChC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,EACF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAA,kBAAM,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,YAAY,sBAAa,CAAC,CAAC,CAC3E;aACE,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC;aAC1B,SAAS,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,QAAQ,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,qBAAqB;QAC3B,IAAA,YAAK,EAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAA,gBAAI,EAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC;IAChG,CAAC;;AA5FU,4CAAgB;;;;;;2BAAhB,gBAAgB;IAJ5B,IAAA,4BAAY,GAAE;IACd,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,gBAAgB,CA6F5B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ix-slide-in.service.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport { Injectable, Injector, Type } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  merge, Observable, Subject, timer,\n} from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { IxSlideInRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref';\nimport { IxSlideInComponent } from 'app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.component';\nimport { FocusService } from 'app/services/focus.service';\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxSlideInService {\n  slideInComponent: IxSlideInComponent;\n  slideInRefMap = new Map<string, IxSlideInRef<unknown>>();\n  /**\n   * Emits when any slide in has been closed.\n   * Prefer to use slideInClosed$ in slideInRef to tell when an individual slide in is closed.\n   */\n  readonly onClose$ = new Subject<void>();\n\n  constructor(\n    private location: Location,\n    private router: Router,\n    private focusService: FocusService,\n  ) {\n    this.closeOnNavigation();\n  }\n\n  get isSlideInOpen(): boolean {\n    return this.slideInComponent?.isSlideInOpen;\n  }\n\n  // TODO: Rework via cdk overlays or something else that would make it easier to use in tests.\n  setSlideComponent(slideComponent: IxSlideInComponent): void {\n    this.slideInComponent = slideComponent;\n  }\n\n  open<T, D>(\n    component: Type<T>,\n    params?: { wide?: boolean; data?: D; injector?: Injector },\n  ): IxSlideInRef<T, D> {\n    this.slideInRefMap.forEach((ref) => ref.close());\n\n    const slideInRef = this.slideInComponent.openSlideIn<T, D>(component, params);\n    this.slideInRefMap.set(slideInRef.id, slideInRef);\n    slideInRef.slideInClosed$.pipe(untilDestroyed(this)).subscribe((response?: D) => {\n      this.deleteRef(slideInRef.id);\n      if (response === undefined) {\n        response = null;\n      }\n      this.onClose$.next(null);\n    });\n\n    this.focusService.captureCurrentFocus();\n    this.focusOnTheCloseButton();\n\n    return slideInRef;\n  }\n\n  closeLast(): void {\n    if (!this.isSlideInOpen) {\n      return;\n    }\n\n    const lastSlideInRef = Array.from(this.slideInRefMap.values()).pop();\n    lastSlideInRef.close();\n  }\n\n  closeAll(): void {\n    if (!this.isSlideInOpen) {\n      return;\n    }\n\n    this.slideInRefMap.forEach((ref) => ref.close());\n  }\n\n  deleteRef(id: string): void {\n    this.slideInRefMap.delete(id);\n\n    if (this.isSlideInOpen) {\n      this.slideInComponent.closeSlideIn();\n    }\n\n    this.focusService.restoreFocus();\n  }\n\n  private closeOnNavigation(): void {\n    merge(\n      new Observable((observer) => {\n        this.location.subscribe((event) => {\n          observer.next(event);\n        });\n      }),\n      this.router.events.pipe(filter((event) => event instanceof NavigationEnd)),\n    )\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.closeAll();\n      });\n  }\n\n  private focusOnTheCloseButton(): void {\n    timer(100).pipe(take(1)).subscribe(() => this.focusService.focusElementById('ix-close-icon'));\n  }\n}\n"],"version":3}