61f8d888750c0c6af58e941531ccbfc8
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var platform_browser_dynamic_exports = {};
__export(platform_browser_dynamic_exports, {
  JitCompilerFactory: () => JitCompilerFactory,
  VERSION: () => VERSION,
  platformBrowserDynamic: () => platformBrowserDynamic,
  \u0275INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: () => INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
  \u0275platformCoreDynamic: () => platformCoreDynamic
});
module.exports = __toCommonJS(platform_browser_dynamic_exports);
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_compiler = require("@angular/compiler");
var import_common = require("@angular/common");
var import_platform_browser = require("@angular/platform-browser");
/**
 * @license Angular v18.2.4
 * (c) 2010-2024 Google LLC. https://angular.io/
 * License: MIT
 */
const COMPILER_PROVIDERS = [
  { provide: import_core.Compiler, useFactory: () => new import_core.Compiler() }
];
class JitCompilerFactory {
  /** @internal */
  constructor(defaultOptions) {
    const compilerOptions = {
      defaultEncapsulation: import_core.ViewEncapsulation.Emulated
    };
    this._defaultOptions = [compilerOptions, ...defaultOptions];
  }
  createCompiler(options = []) {
    const opts = _mergeOptions(this._defaultOptions.concat(options));
    const injector = import_core.Injector.create({
      providers: [
        COMPILER_PROVIDERS,
        {
          provide: import_compiler.CompilerConfig,
          useFactory: () => {
            return new import_compiler.CompilerConfig({
              defaultEncapsulation: opts.defaultEncapsulation,
              preserveWhitespaces: opts.preserveWhitespaces
            });
          },
          deps: []
        },
        opts.providers
      ]
    });
    return injector.get(import_core.Compiler);
  }
}
function _mergeOptions(optionsArr) {
  return {
    defaultEncapsulation: _lastDefined(optionsArr.map((options) => options.defaultEncapsulation)),
    providers: _mergeArrays(optionsArr.map((options) => options.providers)),
    preserveWhitespaces: _lastDefined(optionsArr.map((options) => options.preserveWhitespaces))
  };
}
function _lastDefined(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    if (args[i] !== void 0) {
      return args[i];
    }
  }
  return void 0;
}
function _mergeArrays(parts) {
  const result = [];
  parts.forEach((part) => part && result.push(...part));
  return result;
}
const platformCoreDynamic = (0, import_core.createPlatformFactory)(import_core.platformCore, "coreDynamic", [
  { provide: import_core.COMPILER_OPTIONS, useValue: {}, multi: true },
  { provide: import_core.CompilerFactory, useClass: JitCompilerFactory, deps: [import_core.COMPILER_OPTIONS] }
]);
const _ResourceLoaderImpl = class _ResourceLoaderImpl extends import_compiler.ResourceLoader {
  get(url) {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.responseType = "text";
    xhr.onload = function() {
      const response = xhr.response;
      let status = xhr.status;
      if (status === 0) {
        status = response ? 200 : 0;
      }
      if (200 <= status && status <= 300) {
        resolve(response);
      } else {
        reject(`Failed to load ${url}`);
      }
    };
    xhr.onerror = function() {
      reject(`Failed to load ${url}`);
    };
    xhr.send();
    return promise;
  }
};
_ResourceLoaderImpl.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _ResourceLoaderImpl, deps: null, target: i0.\u0275\u0275FactoryTarget.Injectable });
_ResourceLoaderImpl.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _ResourceLoaderImpl });
let ResourceLoaderImpl = _ResourceLoaderImpl;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: ResourceLoaderImpl, decorators: [{
  type: import_core.Injectable
}] });
const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
  import_platform_browser.\u0275INTERNAL_BROWSER_PLATFORM_PROVIDERS,
  {
    provide: import_core.COMPILER_OPTIONS,
    useValue: { providers: [{ provide: import_compiler.ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] },
    multi: true
  },
  { provide: import_core.PLATFORM_ID, useValue: import_common.\u0275PLATFORM_BROWSER_ID }
];
const VERSION = new import_core.Version("18.2.4");
const platformBrowserDynamic = (0, import_core.createPlatformFactory)(platformCoreDynamic, "browserDynamic", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
