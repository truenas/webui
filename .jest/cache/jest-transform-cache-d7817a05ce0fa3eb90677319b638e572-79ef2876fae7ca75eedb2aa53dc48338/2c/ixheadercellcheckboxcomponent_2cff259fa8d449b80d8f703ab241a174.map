{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/components/ix-table-head/head-cells/ix-header-cell-checkbox/ix-header-cell-checkbox.component.ts","mappings":";;;;;;;;;AAAA,4CAA4C;AAC5C,wCAAmE;AACnE,yDAA4E;AAC5E,yDAAqE;AACrE,8CAAsD;AACtD,+BAAuC;AACvC,mGAAyF;AACzF,uEAAmE;AAe5D,IAAM,6BAA6B,GAAnC,MAAM,6BAAiC,SAAQ,wCAAkB;IAGtE,gBAAgB,CAAC,KAAwB;QACvC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CACxC,IAAA,UAAG,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAC1D,IAAA,8BAAc,EAAC,IAAI,CAAC,CACrB,CAAC;IACJ,CAAC;CACF,CAAA;AAbY,sEAA6B;wCAA7B,6BAA6B;IAbzC,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,yBAAyB;QACnC,6DAAuD;QACvD,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE;YACP,sBAAW;YACX,sBAAe;YACf,kBAAS;YACT,8BAAa;SACd;KACF,CAAC;GACW,6BAA6B,CAazC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/components/ix-table-head/head-cells/ix-header-cell-checkbox/ix-header-cell-checkbox.component.ts"],"sourcesContent":["import { AsyncPipe } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { MatCheckboxChange, MatCheckbox } from '@angular/material/checkbox';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { map, Observable } from 'rxjs';\nimport { ColumnComponent } from 'app/modules/ix-table/interfaces/column-component.class';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-header-cell-checkbox',\n  templateUrl: './ix-header-cell-checkbox.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatCheckbox,\n    TranslateModule,\n    AsyncPipe,\n    TestDirective,\n  ],\n})\nexport class IxHeaderCellCheckboxComponent<T> extends ColumnComponent<T> {\n  onColumnCheck: (checked: boolean) => void;\n\n  onCheckboxChange(event: MatCheckboxChange): void {\n    this.onColumnCheck(event.checked);\n  }\n\n  get allChecked$(): Observable<boolean> {\n    return this.dataProvider.currentPage$.pipe(\n      map((rows) => rows.every((row) => row[this.propertyName])),\n      untilDestroyed(this),\n    );\n  }\n}\n"],"version":3}