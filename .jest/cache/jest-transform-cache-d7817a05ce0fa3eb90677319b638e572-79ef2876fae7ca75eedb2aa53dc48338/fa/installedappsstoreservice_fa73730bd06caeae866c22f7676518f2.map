{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/store/installed-apps-store.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/store/installed-apps-store.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { ComponentStore } from '@ngrx/component-store';\nimport {\n  EMPTY,\n  Observable, Subscription, catchError, delay, filter, of, repeat, switchMap, tap,\n  withLatestFrom,\n} from 'rxjs';\nimport { IncomingApiMessageType } from 'app/enums/api-message-type.enum';\nimport { tapOnce } from 'app/helpers/operators/tap-once.operator';\nimport { ApiEvent } from 'app/interfaces/api-message.interface';\nimport { App } from 'app/interfaces/app.interface';\nimport { AvailableApp } from 'app/interfaces/available-app.interface';\nimport { ApplicationsService } from 'app/pages/apps/services/applications.service';\nimport { AppsStatsService } from 'app/pages/apps/store/apps-stats.service';\nimport { AppsStore } from 'app/pages/apps/store/apps-store.service';\nimport { DockerStore } from 'app/pages/apps/store/docker.store';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\n\nexport interface InstalledAppsState {\n  installedApps: App[];\n  isLoading: boolean;\n}\n\nconst initialState: InstalledAppsState = {\n  installedApps: [],\n  isLoading: false,\n};\n\n@UntilDestroy()\n@Injectable()\nexport class InstalledAppsStore extends ComponentStore<InstalledAppsState> implements OnDestroy {\n  readonly installedApps$ = this.select((state) => state.installedApps);\n  readonly isLoading$ = this.select((state) => state.isLoading);\n  private installedAppsSubscription: Subscription;\n\n  constructor(\n    private appsService: ApplicationsService,\n    private appsStore: AppsStore,\n    private appsStats: AppsStatsService,\n    private dockerStore: DockerStore,\n    private errorHandler: ErrorHandlerService,\n  ) {\n    super(initialState);\n    this.initialize();\n    this.getStats();\n  }\n\n  readonly initialize = this.effect((triggers$: Observable<void>) => {\n    return triggers$.pipe(\n      tap(() => {\n        this.setState({\n          ...initialState,\n          isLoading: true,\n        });\n      }),\n      switchMap(() => this.loadInstalledApps()),\n      catchError((error: unknown) => {\n        this.handleError(error);\n        return EMPTY;\n      }),\n      untilDestroyed(this),\n    );\n  });\n\n  readonly getStats = this.effect(() => {\n    return this.installedApps$.pipe(\n      filter((apps) => apps.length > 0),\n      tapOnce(() => this.appsStats.subscribeToUpdates()),\n      catchError((error: unknown) => {\n        this.handleError(error);\n        return EMPTY;\n      }),\n      untilDestroyed(this),\n    );\n  });\n\n  private handleError(error: unknown): void {\n    this.errorHandler.showErrorModal(error);\n    this.patchState({\n      isLoading: false,\n    });\n  }\n\n  private loadInstalledApps(): Observable<App[]> {\n    return this.dockerStore.isLoading$.pipe(\n      withLatestFrom(this.dockerStore.isDockerStarted$),\n      filter(([isLoading, isDockerStarted]) => !isLoading && isDockerStarted !== null),\n      switchMap(([, isDockerStarted]) => {\n        this.subscribeToInstalledAppsUpdates();\n\n        if (!isDockerStarted) {\n          return of([]);\n        }\n\n        return this.appsService.getAllApps().pipe(\n          tap((installedApps) => this.patchState({ installedApps })),\n          repeat({\n            // TODO: NAS-131676. Remove this workaround after the bug is fixed.\n            delay: () => this.appsService.getInstalledAppsUpdates().pipe(\n              filter((event) => {\n                return (event.msg === IncomingApiMessageType.Added && !('fields' in event))\n                 || (event.msg === IncomingApiMessageType.Changed && event.fields.custom_app);\n              }),\n              tap(() => this.patchState({ isLoading: true })),\n              delay(2000),\n            ),\n          }),\n        );\n      }),\n      tap(() => this.patchState({ isLoading: false })),\n      untilDestroyed(this),\n    );\n  }\n\n  private subscribeToInstalledAppsUpdates(): void {\n    if (this.installedAppsSubscription) {\n      return;\n    }\n\n    this.installedAppsSubscription = this.appsService.getInstalledAppsUpdates().pipe(\n      tap((apiEvent: ApiEvent<App>) => {\n        this.handleApiEvent(apiEvent);\n        this.patchState({ isLoading: false });\n      }),\n      untilDestroyed(this),\n    ).subscribe();\n  }\n\n  private handleApiEvent(apiEvent: ApiEvent<App>): void {\n    switch (apiEvent.msg) {\n      case IncomingApiMessageType.Removed:\n        this.handleRemovedEvent(apiEvent);\n        break;\n      case IncomingApiMessageType.Added:\n      case IncomingApiMessageType.Changed:\n        this.handleAddedOrUpdatedEvent(apiEvent);\n        break;\n      default:\n        console.error('Unknown API event type');\n        break;\n    }\n  }\n\n  private handleRemovedEvent(apiEvent: ApiEvent<App>): void {\n    const appId = apiEvent.id.toString();\n\n    this.patchState((state: InstalledAppsState): InstalledAppsState => ({\n      ...state,\n      installedApps: state.installedApps.filter((app) => app.name !== appId),\n    }));\n\n    const updateApps = (updatedAppName: string, allApps: AvailableApp[]): AvailableApp[] => {\n      return allApps.map((app) => {\n        if (app.name === updatedAppName) {\n          return { ...app, installed: false };\n        }\n        return app;\n      });\n    };\n\n    this.appsStore.patchState((state) => ({\n      ...state,\n      availableApps: updateApps(appId, state.availableApps),\n      recommendedApps: updateApps(appId, state.recommendedApps),\n      latestApps: updateApps(appId, state.latestApps),\n    }));\n  }\n\n  private handleAddedOrUpdatedEvent(apiEvent: ApiEvent<App>): void {\n    const app = apiEvent.fields;\n    if (!app) {\n      console.error('No app data in API event');\n      return;\n    }\n\n    this.patchState((state: InstalledAppsState): InstalledAppsState => {\n      if (apiEvent.msg === IncomingApiMessageType.Added) {\n        return { ...state, installedApps: [...state.installedApps, app] };\n      }\n\n      return {\n        ...state,\n        installedApps: state.installedApps.map(\n          (installedApp) => (installedApp.name === apiEvent.id ? { ...installedApp, ...app } : installedApp),\n        ),\n      };\n    });\n\n    const updateApps = (apps: AvailableApp[]): AvailableApp[] => apps.map(\n      (availableApp) => (availableApp.name === app.id ? { ...availableApp, installed: true } : availableApp),\n    );\n\n    this.appsStore.patchState((state) => ({\n      ...state,\n      availableApps: updateApps(state.availableApps),\n      recommendedApps: updateApps(state.recommendedApps),\n      latestApps: updateApps(state.latestApps),\n    }));\n  }\n}\n"],"version":3}