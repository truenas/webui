2dafa6e9423ca6446674d37941a42ad4
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var testing_exports = {};
__export(testing_exports, {
  RouterTestingHarness: () => RouterTestingHarness,
  RouterTestingModule: () => RouterTestingModule
});
module.exports = __toCommonJS(testing_exports);
var import_testing = require("@angular/common/testing");
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_router = require("@angular/router");
var import_testing2 = require("@angular/core/testing");
/**
 * @license Angular v18.2.4
 * (c) 2010-2024 Google LLC. https://angular.io/
 * License: MIT
 */
function isUrlHandlingStrategy(opts) {
  return "shouldProcessUrl" in opts;
}
function throwInvalidConfigError(parameter) {
  throw new Error(`Parameter ${parameter} does not match the one available in the injector. \`setupTestingRouter\` is meant to be used as a factory function with dependencies coming from DI.`);
}
const _RouterTestingModule = class _RouterTestingModule {
  static withRoutes(routes, config) {
    return {
      ngModule: _RouterTestingModule,
      providers: [
        { provide: import_router.ROUTES, multi: true, useValue: routes },
        { provide: import_router.ROUTER_CONFIGURATION, useValue: config ? config : {} }
      ]
    };
  }
};
_RouterTestingModule.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _RouterTestingModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule });
_RouterTestingModule.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "18.2.4", ngImport: i0, type: _RouterTestingModule, exports: [import_router.RouterModule] });
_RouterTestingModule.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _RouterTestingModule, providers: [
  import_router.\u0275ROUTER_PROVIDERS,
  (0, import_testing.provideLocationMocks)(),
  (0, import_router.withPreloading)(import_router.NoPreloading).\u0275providers,
  { provide: import_router.ROUTES, multi: true, useValue: [] }
], imports: [import_router.RouterModule] });
let RouterTestingModule = _RouterTestingModule;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: RouterTestingModule, decorators: [{
  type: import_core.NgModule,
  args: [{
    exports: [import_router.RouterModule],
    providers: [
      import_router.\u0275ROUTER_PROVIDERS,
      (0, import_testing.provideLocationMocks)(),
      (0, import_router.withPreloading)(import_router.NoPreloading).\u0275providers,
      { provide: import_router.ROUTES, multi: true, useValue: [] }
    ]
  }]
}] });
const _RootFixtureService = class _RootFixtureService {
  createHarness() {
    if (this.harness) {
      throw new Error("Only one harness should be created per test.");
    }
    this.harness = new RouterTestingHarness(this.getRootFixture());
    return this.harness;
  }
  getRootFixture() {
    if (this.fixture !== void 0) {
      return this.fixture;
    }
    this.fixture = import_testing2.TestBed.createComponent(RootCmp);
    this.fixture.detectChanges();
    return this.fixture;
  }
};
_RootFixtureService.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _RootFixtureService, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable });
_RootFixtureService.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _RootFixtureService, providedIn: "root" });
let RootFixtureService = _RootFixtureService;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: RootFixtureService, decorators: [{
  type: import_core.Injectable,
  args: [{ providedIn: "root" }]
}] });
const _RootCmp = class _RootCmp {
};
_RootCmp.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: _RootCmp, deps: [], target: i0.\u0275\u0275FactoryTarget.Component });
_RootCmp.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: _RootCmp, isStandalone: true, selector: "ng-component", viewQueries: [{ propertyName: "outlet", first: true, predicate: import_router.RouterOutlet, descendants: true }], ngImport: i0, template: "<router-outlet></router-outlet>", isInline: true, dependencies: [{ kind: "directive", type: import_router.RouterOutlet, selector: "router-outlet", inputs: ["name"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }] });
let RootCmp = _RootCmp;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: RootCmp, decorators: [{
  type: import_core.Component,
  args: [{
    standalone: true,
    template: "<router-outlet></router-outlet>",
    imports: [import_router.RouterOutlet]
  }]
}], propDecorators: { outlet: [{
  type: import_core.ViewChild,
  args: [import_router.RouterOutlet]
}] } });
class RouterTestingHarness {
  /**
   * Creates a `RouterTestingHarness` instance.
   *
   * The `RouterTestingHarness` also creates its own root component with a `RouterOutlet` for the
   * purposes of rendering route components.
   *
   * Throws an error if an instance has already been created.
   * Use of this harness also requires `destroyAfterEach: true` in the `ModuleTeardownOptions`
   *
   * @param initialUrl The target of navigation to trigger before returning the harness.
   */
  static create(initialUrl) {
    return __async(this, null, function* () {
      const harness = import_testing2.TestBed.inject(RootFixtureService).createHarness();
      if (initialUrl !== void 0) {
        yield harness.navigateByUrl(initialUrl);
      }
      return harness;
    });
  }
  /** @internal */
  constructor(fixture) {
    this.fixture = fixture;
  }
  /** Instructs the root fixture to run change detection. */
  detectChanges() {
    this.fixture.detectChanges();
  }
  /** The `DebugElement` of the `RouterOutlet` component. `null` if the outlet is not activated. */
  get routeDebugElement() {
    const outlet = this.fixture.componentInstance.outlet;
    if (!outlet || !outlet.isActivated) {
      return null;
    }
    return this.fixture.debugElement.query((v) => v.componentInstance === outlet.component);
  }
  /** The native element of the `RouterOutlet` component. `null` if the outlet is not activated. */
  get routeNativeElement() {
    var _a, _b;
    return (_b = (_a = this.routeDebugElement) == null ? void 0 : _a.nativeElement) != null ? _b : null;
  }
  navigateByUrl(url, requiredRoutedComponentType) {
    return __async(this, null, function* () {
      const router = import_testing2.TestBed.inject(import_router.Router);
      let resolveFn;
      const redirectTrackingPromise = new Promise((resolve) => {
        resolveFn = resolve;
      });
      (0, import_router.\u0275afterNextNavigation)(import_testing2.TestBed.inject(import_router.Router), resolveFn);
      yield router.navigateByUrl(url);
      yield redirectTrackingPromise;
      this.fixture.detectChanges();
      const outlet = this.fixture.componentInstance.outlet;
      if (outlet && outlet.isActivated && outlet.activatedRoute.component) {
        const activatedComponent = outlet.component;
        if (requiredRoutedComponentType !== void 0 && !(activatedComponent instanceof requiredRoutedComponentType)) {
          throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but got ${activatedComponent.constructor.name}`);
        }
        return activatedComponent;
      } else {
        if (requiredRoutedComponentType !== void 0) {
          throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but the navigation did not activate any component.`);
        }
        return null;
      }
    });
  }
}
