{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/components/dataset-form/sections/encryption-section/encryption-section.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/components/dataset-form/sections/encryption-section/encryption-section.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, output,\n} from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { marker as T } from '@biesbjerg/ngx-translate-extract-marker';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService } from '@ngx-translate/core';\nimport { of } from 'rxjs';\nimport { DatasetEncryptionType } from 'app/enums/dataset.enum';\nimport { EncryptionKeyFormat } from 'app/enums/encryption-key-format.enum';\nimport { choicesToOptions } from 'app/helpers/operators/options.operators';\nimport { helptextDatasetForm } from 'app/helptext/storage/volumes/datasets/dataset-form';\nimport { Dataset, DatasetCreate } from 'app/interfaces/dataset.interface';\nimport { matchOthersFgValidator } from 'app/modules/forms/ix-forms/validators/password-validation/password-validation';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-encryption-section',\n  templateUrl: './encryption-section.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EncryptionSectionComponent implements OnChanges, OnInit {\n  @Input() parent: Dataset;\n  @Input() advancedMode: boolean;\n\n  readonly formValidityChange = output<boolean>();\n\n  get inheritEncryptionLabel(): string {\n    return this.parent.encrypted\n      ? this.translate.instant('Inherit (encrypted)')\n      : this.translate.instant('Inherit (non-encrypted)');\n  }\n\n  // TODO: Add conditional validators\n  readonly form = this.formBuilder.group({\n    inherit_encryption: [true],\n    encryption: [true],\n    encryption_type: [DatasetEncryptionType.Default],\n    generate_key: [true],\n    key: ['', [Validators.minLength(64), Validators.maxLength(64)]],\n    passphrase: ['', Validators.minLength(8)],\n    confirm_passphrase: [''],\n    pbkdf2iters: [350000, Validators.min(100000)],\n    algorithm: ['AES-256-GCM'],\n  }, {\n    validators: [\n      matchOthersFgValidator(\n        'confirm_passphrase',\n        ['passphrase'],\n        this.translate.instant('Confirm Passphrase value must match Passphrase'),\n      ),\n    ],\n  });\n\n  readonly helptext = helptextDatasetForm;\n\n  encryptionTypeOptions$ = of([\n    { label: T('Key'), value: DatasetEncryptionType.Default },\n    { label: T('Passphrase'), value: DatasetEncryptionType.Passphrase },\n  ]);\n  algorithmOptions$ = this.ws.call('pool.dataset.encryption_algorithm_choices').pipe(choicesToOptions());\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private translate: TranslateService,\n    private ws: WebSocketService,\n  ) {}\n\n  get hasEncryption(): boolean {\n    return this.form.controls.encryption.value;\n  }\n\n  get isInheritingEncryption(): boolean {\n    return this.form.controls.inherit_encryption.value;\n  }\n\n  get isPassphrase(): boolean {\n    return this.form.controls.encryption_type.value === DatasetEncryptionType.Passphrase;\n  }\n\n  get parentHasPassphrase(): boolean {\n    return this.parent\n      && this.parent.encrypted\n      && this.parent.key_format.value === EncryptionKeyFormat.Passphrase;\n  }\n\n  ngOnChanges(): void {\n    if (this.parent) {\n      this.setInheritValues();\n      this.disableEncryptionIfParentEncrypted();\n    }\n  }\n\n  ngOnInit(): void {\n    this.form.statusChanges.pipe(untilDestroyed(this)).subscribe((status) => {\n      this.formValidityChange.emit(status === 'VALID');\n    });\n  }\n\n  getPayload(): Partial<DatasetCreate> {\n    if (this.isInheritingEncryption) {\n      return {};\n    }\n\n    if (!this.hasEncryption) {\n      return { encryption: false };\n    }\n\n    const values = this.form.value;\n    const encryptionOptions: DatasetCreate['encryption_options'] = {\n      algorithm: values.algorithm,\n    };\n\n    if (this.isPassphrase) {\n      encryptionOptions.pbkdf2iters = values.pbkdf2iters;\n      encryptionOptions.passphrase = values.passphrase;\n    } else if (values.generate_key) {\n      encryptionOptions.generate_key = true;\n    } else {\n      encryptionOptions.key = values.key;\n    }\n\n    return {\n      encryption: true,\n      encryption_options: encryptionOptions,\n      inherit_encryption: false,\n    };\n  }\n\n  private setInheritValues(): void {\n    if (this.parentHasPassphrase) {\n      this.form.controls.encryption_type.setValue(DatasetEncryptionType.Passphrase);\n    }\n\n    if (this.parent.encrypted && this.parent.encryption_algorithm?.value) {\n      this.form.controls.algorithm.setValue(this.parent.encryption_algorithm.value);\n    }\n  }\n\n  private disableEncryptionIfParentEncrypted(): void {\n    if (!this.parent?.encrypted) {\n      return;\n    }\n    this.form.controls.encryption.disable();\n  }\n}\n"],"version":3}