fe5ac491f33b927b8a10ea62936680ed
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionSectionComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const ngx_translate_extract_marker_1 = require("@biesbjerg/ngx-translate-extract-marker");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const dataset_enum_1 = require("app/enums/dataset.enum");
const encryption_key_format_enum_1 = require("app/enums/encryption-key-format.enum");
const options_operators_1 = require("app/helpers/operators/options.operators");
const dataset_form_1 = require("app/helptext/storage/volumes/datasets/dataset-form");
const password_validation_1 = require("app/modules/forms/ix-forms/validators/password-validation/password-validation");
const ws_service_1 = require("app/services/ws.service");
const i0 = __importStar(require("@angular/core"));
let EncryptionSectionComponent = class EncryptionSectionComponent {
    get inheritEncryptionLabel() {
        return this.parent.encrypted
            ? this.translate.instant('Inherit (encrypted)')
            : this.translate.instant('Inherit (non-encrypted)');
    }
    constructor(formBuilder, translate, ws) {
        this.formBuilder = formBuilder;
        this.translate = translate;
        this.ws = ws;
        this.formValidityChange = (0, core_1.output)();
        // TODO: Add conditional validators
        this.form = this.formBuilder.group({
            inherit_encryption: [true],
            encryption: [true],
            encryption_type: [dataset_enum_1.DatasetEncryptionType.Default],
            generate_key: [true],
            key: ['', [forms_1.Validators.minLength(64), forms_1.Validators.maxLength(64)]],
            passphrase: ['', forms_1.Validators.minLength(8)],
            confirm_passphrase: [''],
            pbkdf2iters: [350000, forms_1.Validators.min(100000)],
            algorithm: ['AES-256-GCM'],
        }, {
            validators: [
                (0, password_validation_1.matchOthersFgValidator)('confirm_passphrase', ['passphrase'], this.translate.instant('Confirm Passphrase value must match Passphrase')),
            ],
        });
        this.helptext = dataset_form_1.helptextDatasetForm;
        this.encryptionTypeOptions$ = (0, rxjs_1.of)([
            { label: (0, ngx_translate_extract_marker_1.marker)('Key'), value: dataset_enum_1.DatasetEncryptionType.Default },
            { label: (0, ngx_translate_extract_marker_1.marker)('Passphrase'), value: dataset_enum_1.DatasetEncryptionType.Passphrase },
        ]);
        this.algorithmOptions$ = this.ws.call('pool.dataset.encryption_algorithm_choices').pipe((0, options_operators_1.choicesToOptions)());
    }
    get hasEncryption() {
        return this.form.controls.encryption.value;
    }
    get isInheritingEncryption() {
        return this.form.controls.inherit_encryption.value;
    }
    get isPassphrase() {
        return this.form.controls.encryption_type.value === dataset_enum_1.DatasetEncryptionType.Passphrase;
    }
    get parentHasPassphrase() {
        return this.parent
            && this.parent.encrypted
            && this.parent.key_format.value === encryption_key_format_enum_1.EncryptionKeyFormat.Passphrase;
    }
    ngOnChanges() {
        if (this.parent) {
            this.setInheritValues();
            this.disableEncryptionIfParentEncrypted();
        }
    }
    ngOnInit() {
        this.form.statusChanges.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((status) => {
            this.formValidityChange.emit(status === 'VALID');
        });
    }
    getPayload() {
        if (this.isInheritingEncryption) {
            return {};
        }
        if (!this.hasEncryption) {
            return { encryption: false };
        }
        const values = this.form.value;
        const encryptionOptions = {
            algorithm: values.algorithm,
        };
        if (this.isPassphrase) {
            encryptionOptions.pbkdf2iters = values.pbkdf2iters;
            encryptionOptions.passphrase = values.passphrase;
        }
        else if (values.generate_key) {
            encryptionOptions.generate_key = true;
        }
        else {
            encryptionOptions.key = values.key;
        }
        return {
            encryption: true,
            encryption_options: encryptionOptions,
            inherit_encryption: false,
        };
    }
    setInheritValues() {
        var _a;
        if (this.parentHasPassphrase) {
            this.form.controls.encryption_type.setValue(dataset_enum_1.DatasetEncryptionType.Passphrase);
        }
        if (this.parent.encrypted && ((_a = this.parent.encryption_algorithm) === null || _a === void 0 ? void 0 : _a.value)) {
            this.form.controls.algorithm.setValue(this.parent.encryption_algorithm.value);
        }
    }
    disableEncryptionIfParentEncrypted() {
        var _a;
        if (!((_a = this.parent) === null || _a === void 0 ? void 0 : _a.encrypted)) {
            return;
        }
        this.form.controls.encryption.disable();
    }
};
exports.EncryptionSectionComponent = EncryptionSectionComponent;
EncryptionSectionComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: core_2.TranslateService },
    { type: ws_service_1.WebSocketService }
];
EncryptionSectionComponent.propDecorators = {
    parent: [{ type: core_1.Input }],
    advancedMode: [{ type: core_1.Input }],
    formValidityChange: [{ type: i0.Output, args: ["formValidityChange",] }]
};
exports.EncryptionSectionComponent = EncryptionSectionComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-encryption-section',
        template: require("./encryption-section.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], EncryptionSectionComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,