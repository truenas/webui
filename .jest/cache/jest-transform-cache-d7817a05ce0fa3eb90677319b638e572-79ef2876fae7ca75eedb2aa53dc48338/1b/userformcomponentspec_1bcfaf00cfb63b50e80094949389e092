f0fb414a2196c6cceb6ee32e9649bd88
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const testing_2 = require("@ngrx/store/testing");
const rxjs_1 = require("rxjs");
const all_commands_constant_1 = require("app/constants/all-commands.constant");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_explorer_harness_1 = require("app/modules/forms/ix-forms/components/ix-explorer/ix-explorer.harness");
const ix_input_harness_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.harness");
const ix_permissions_component_1 = require("app/modules/forms/ix-forms/components/ix-permissions/ix-permissions.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const user_selectors_1 = require("app/pages/credentials/users/store/user.selectors");
const download_service_1 = require("app/services/download.service");
const filesystem_service_1 = require("app/services/filesystem.service");
const storage_service_1 = require("app/services/storage.service");
const user_service_1 = require("app/services/user.service");
const ws_service_1 = require("app/services/ws.service");
const user_form_component_1 = require("./user-form.component");
describe('UserFormComponent', () => {
    const mockGroups = [{
            id: 101,
            group: 'test-group',
        }, {
            id: 102,
            group: 'mock-group',
        }];
    const mockUser = {
        id: 69,
        uid: 1004,
        username: 'test',
        home: '/home/test',
        shell: '/usr/bin/bash',
        full_name: 'test',
        builtin: false,
        smb: true,
        ssh_password_enabled: true,
        password_disabled: false,
        locked: false,
        sudo_commands_nopasswd: ['rm -rf /'],
        sudo_commands: [all_commands_constant_1.allCommands],
        email: null,
        sshpubkey: null,
        group: {
            id: 101,
        },
        groups: [101],
        immutable: false,
    };
    const builtinUser = Object.assign(Object.assign({}, mockUser), { builtin: true, immutable: true });
    let spectator;
    let loader;
    let ws;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: user_form_component_1.UserFormComponent,
        imports: [
            forms_1.ReactiveFormsModule,
            ix_permissions_component_1.IxPermissionsComponent,
        ],
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('user.query'),
                (0, mock_websocket_utils_1.mockCall)('user.create'),
                (0, mock_websocket_utils_1.mockCall)('user.update'),
                (0, mock_websocket_utils_1.mockCall)('user.shell_choices', {
                    '/usr/bin/bash': 'bash',
                    '/usr/bin/zsh': 'zsh',
                }),
                (0, mock_websocket_utils_1.mockCall)('user.get_next_uid', 1234),
                (0, mock_websocket_utils_1.mockCall)('group.query', mockGroups),
                (0, mock_websocket_utils_1.mockCall)('sharing.smb.query', [{ path: '/mnt/users' }]),
            ]),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(ix_slide_in_ref_1.IxSlideInRef),
            (0, jest_1.mockProvider)(storage_service_1.StorageService, {
                filesystemStat: jest.fn(() => (0, rxjs_1.of)({ mode: 16832 })),
            }),
            (0, jest_1.mockProvider)(download_service_1.DownloadService, {
                downloadBlob: jest.fn(),
            }),
            (0, jest_1.mockProvider)(form_error_handler_service_1.FormErrorHandlerService),
            (0, jest_1.mockProvider)(user_service_1.UserService, {
                groupQueryDsCache: jest.fn(() => (0, rxjs_1.of)(mockGroups)),
            }),
            (0, jest_1.mockProvider)(filesystem_service_1.FilesystemService, {
                getFilesystemNodeProvider: jest.fn(() => (0, rxjs_1.of)()),
            }),
            (0, testing_2.provideMockStore)({
                selectors: [{
                        selector: user_selectors_1.selectUsers,
                        value: [mockUser],
                    }],
            }),
            (0, mock_auth_utils_1.mockAuth)(),
            { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: undefined },
        ],
    });
    describe('adding a user', () => {
        beforeEach(() => {
            spectator = createComponent();
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
            ws = spectator.inject(ws_service_1.WebSocketService);
            spectator.component.setupForm();
        });
        it('loads next uid and puts it in uid field', () => __awaiter(void 0, void 0, void 0, function* () {
            const uidInput = yield loader.getHarness(ix_input_harness_1.IxInputHarness.with({ label: 'UID' }));
            const value = yield uidInput.getValue();
            expect(ws.call).toHaveBeenCalledWith('user.get_next_uid');
            expect(value).toBe('1234');
        }));
        it('loads home share path and puts it in home field', () => __awaiter(void 0, void 0, void 0, function* () {
            const homeInput = yield loader.getHarness(ix_explorer_harness_1.IxExplorerHarness.with({ label: 'Home Directory' }));
            expect(ws.call).toHaveBeenCalledWith('sharing.smb.query', [[['enabled', '=', true], ['home', '=', true]]]);
            expect(yield homeInput.getValue()).toBe('/mnt/users');
            const usernameInput = yield loader.getHarness(ix_input_harness_1.IxInputHarness.with({ label: 'Username' }));
            yield usernameInput.setValue('test');
            expect(yield homeInput.getValue()).toBe('/mnt/users');
        }));
        it('checks download ssh key button is hidden', () => __awaiter(void 0, void 0, void 0, function* () {
            const downloadButtons = yield loader.getAllHarnesses(testing_1.MatButtonHarness.with({ text: 'Download Authorized Keys' }));
            expect(downloadButtons).toHaveLength(0);
        }));
        it('sends a create payload to websocket and closes modal when save is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                'Full Name': 'John Smith',
                Password: 'test-pass',
                'Confirm Password': 'test-pass',
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(ws.call).toHaveBeenCalledWith('user.create', [expect.objectContaining({
                    full_name: 'John Smith',
                    group_create: true,
                    password: 'test-pass',
                    uid: 1234,
                    username: 'jsmith',
                })]);
        }));
        it('set disable password is true and check inputs', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            form.fillForm({
                'Disable Password': true,
            });
            const disabled = yield form.getDisabledState();
            expect(disabled).toEqual(expect.objectContaining({
                'Confirm Password': true,
                'Lock User': true,
                Password: true,
            }));
        }));
    });
    describe('editing a user', () => {
        beforeEach(() => {
            spectator = createComponent({
                providers: [
                    { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: mockUser },
                ],
            });
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
            ws = spectator.inject(ws_service_1.WebSocketService);
            spectator.component.setupForm();
        });
        it('check uid field is disabled', () => __awaiter(void 0, void 0, void 0, function* () {
            const uidInput = yield loader.getHarness(ix_input_harness_1.IxInputHarness.with({ label: 'UID' }));
            expect(yield uidInput.isDisabled()).toBeTruthy();
        }));
        it('check change password', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                'New Password': 'changepwd',
                'Confirm New Password': 'changepwd',
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(ws.call).toHaveBeenCalledWith('user.update', [69, expect.objectContaining({
                    password: 'changepwd',
                })]);
        }));
        it('shows download ssh key button', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                'Authorized Keys': 'test-key',
                Username: 'test-user',
            });
            const downloadButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Download Authorized Keys' }));
            yield downloadButton.click();
            expect(spectator.inject(download_service_1.DownloadService).downloadBlob).toHaveBeenCalledWith(new Blob(), 'test-user_public_key_rsa');
        }));
        it('shows current group values when form is being edited', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            const values = yield form.getValues();
            expect(values).toEqual({
                'Auxiliary Groups': ['test-group'],
                'SSH password login enabled': true,
                'Confirm New Password': '',
                'Create New Primary Group': false,
                'Disable Password': false,
                'Full Name': 'test',
                'Home Directory Permissions': '700',
                'Home Directory': '/home/test',
                'Lock User': false,
                'Primary Group': 'test-group',
                'SMB User': true,
                'Authorized Keys': '',
                'Upload SSH Key': [],
                'Create Home Directory': false,
                UID: '1004',
                Email: '',
                'New Password': '',
                Shell: 'bash',
                Username: 'test',
                'Allowed sudo commands': [],
                'Allow all sudo commands': true,
                'Allowed sudo commands with no password': ['rm -rf /'],
                'Allow all sudo commands with no password': false,
            });
        }));
        it('sends an update payload to websocket and closes modal when save is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                'Auxiliary Groups': ['mock-group', 'test-group'],
                'Full Name': 'updated',
                'Home Directory': '/home/updated',
                'Primary Group': 'mock-group',
                'Create Home Directory': true,
                'SMB User': false,
                'Lock User': true,
                Shell: 'zsh',
                Username: 'updated',
                'Allow all sudo commands': false,
                'Allowed sudo commands': ['pwd'],
                'Allowed sudo commands with no password': [],
                'Allow all sudo commands with no password': true,
                'Home Directory Permissions': '755',
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(ws.call).toHaveBeenCalledWith('user.update', [
                69, { home: '/home/updated', home_create: true },
            ]);
            expect(ws.call).toHaveBeenLastCalledWith('user.update', [
                69,
                {
                    email: null,
                    full_name: 'updated',
                    group: 102,
                    groups: [102, 101],
                    home_mode: '755',
                    locked: true,
                    password_disabled: false,
                    shell: '/usr/bin/zsh',
                    smb: false,
                    ssh_password_enabled: true,
                    sshpubkey: null,
                    sudo_commands: ['pwd'],
                    sudo_commands_nopasswd: [all_commands_constant_1.allCommands],
                    username: 'updated',
                },
            ]);
        }));
    });
    describe('checks form states', () => {
        beforeEach(() => {
            spectator = createComponent({
                providers: [
                    { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: builtinUser },
                ],
            });
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
            ws = spectator.inject(ws_service_1.WebSocketService);
            spectator.component.setupForm();
        });
        it('check form inputs when user is builtin', () => __awaiter(void 0, void 0, void 0, function* () {
            spectator.component.setupForm();
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            const disabled = yield form.getDisabledState();
            expect(disabled).toEqual(expect.objectContaining({
                'Home Directory': true,
                'Primary Group': true,
                Username: true,
                'SMB User': true,
            }));
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,