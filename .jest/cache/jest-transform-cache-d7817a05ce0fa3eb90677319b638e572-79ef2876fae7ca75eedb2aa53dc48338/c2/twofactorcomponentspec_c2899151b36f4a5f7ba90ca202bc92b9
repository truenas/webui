584f61e63588f055f9509e0516bf85b0
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const ng_mocks_1 = require("ng-mocks");
const rxjs_1 = require("rxjs");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const _2fa_1 = require("app/helptext/system/2fa");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_warning_component_1 = require("app/modules/forms/ix-forms/components/ix-warning/ix-warning.component");
const qr_viewer_component_1 = require("app/pages/two-factor-auth/components/two-factor/qr-viewer/qr-viewer.component");
const two_factor_component_1 = require("app/pages/two-factor-auth/components/two-factor/two-factor.component");
const auth_service_1 = require("app/services/auth/auth.service");
const ws_service_1 = require("app/services/ws.service");
describe('TwoFactorComponent', () => {
    let spectator;
    let loader;
    let ws;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: two_factor_component_1.TwoFactorComponent,
        declarations: [
            (0, ng_mocks_1.MockComponent)(ix_warning_component_1.IxWarningComponent),
            (0, ng_mocks_1.MockComponent)(qr_viewer_component_1.QrViewerComponent),
        ],
        providers: [
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('user.renew_2fa_secret'),
            ]),
            (0, jest_1.mockProvider)(auth_service_1.AuthService, {
                user$: (0, rxjs_1.of)({
                    pw_name: 'dummy',
                    two_factor_config: {
                        secret_configured: true,
                    },
                }),
                userTwoFactorConfig$: (0, rxjs_1.of)({
                    provisioning_uri: 'somepath://here/iXsystems:first-test?secret=KYC',
                    interval: 30,
                    otp_digits: 6,
                    secret_configured: true,
                }),
                getGlobalTwoFactorConfig: jest.fn(() => (0, rxjs_1.of)({ enabled: false })),
            }),
        ],
    });
    beforeEach(() => {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        ws = spectator.inject(ws_service_1.WebSocketService);
    });
    it('shows warning when global setting is disabled', () => {
        jest.spyOn(spectator.inject(auth_service_1.AuthService), 'getGlobalTwoFactorConfig').mockImplementation(() => (0, rxjs_1.of)({
            enabled: true,
        }));
        const warning = spectator.query(ix_warning_component_1.IxWarningComponent);
        expect(warning).toBeTruthy();
        expect(warning).toHaveAttribute('message', _2fa_1.helptext2fa.two_factor.global_disabled);
    });
    it('shows warning when global setting is enabled but user disabled', () => {
        spectator.component.ngOnInit();
        spectator.component.userTwoFactorAuthConfigured = false;
        spectator.detectChanges();
        const warning = spectator.query(ix_warning_component_1.IxWarningComponent);
        expect(warning).toBeTruthy();
        expect(warning).toHaveAttribute('message', _2fa_1.helptext2fa.two_factor.global_enabled_user_disabled);
    });
    it('shows warning when global setting is enabled and user enabled', () => {
        spectator.component.ngOnInit();
        spectator.detectChanges();
        const warning = spectator.query(ix_warning_component_1.IxWarningComponent);
        expect(warning).toBeTruthy();
        expect(warning).toHaveAttribute('message', _2fa_1.helptext2fa.two_factor.global_enabled_user_enabled);
    });
    it('renews secret when button is clicked', () => __awaiter(void 0, void 0, void 0, function* () {
        const renewBtn = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Renew 2FA Secret' }));
        yield renewBtn.click();
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith({
            title: _2fa_1.helptext2fa.two_factor.renewSecret.title,
            message: _2fa_1.helptext2fa.two_factor.renewSecret.message,
            hideCheckbox: true,
            buttonText: _2fa_1.helptext2fa.two_factor.renewSecret.btn,
        });
        expect(ws.call).toHaveBeenCalledWith('user.renew_2fa_secret', ['dummy', {
                interval: 30,
                otp_digits: 6,
            }]);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,