{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/interfaces/app.interface.ts","mappings":";;;AAAA,0FAAsE;AA2BtE,IAAY,iBAIX;AAJD,WAAY,iBAAiB;IAC3B,wCAAmB,CAAA;IACnB,0CAAqB,CAAA;IACrB,sCAAiB,CAAA;AACnB,CAAC,EAJW,iBAAiB,iCAAjB,iBAAiB,QAI5B;AAEY,QAAA,uBAAuB,GAAG,IAAI,GAAG,CAA4B;IACxE,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAA,qCAAC,EAAC,SAAS,CAAC,CAAC;IACzC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAA,qCAAC,EAAC,UAAU,CAAC,CAAC;IAC3C,CAAC,iBAAiB,CAAC,MAAM,EAAE,IAAA,qCAAC,EAAC,QAAQ,CAAC,CAAC;CACxC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/interfaces/app.interface.ts"],"sourcesContent":["import { marker as T } from '@biesbjerg/ngx-translate-extract-marker';\nimport { AppState } from 'app/enums/app-state.enum';\nimport { ChartSchemaType } from 'app/enums/chart-schema-type.enum';\nimport { CodeEditorLanguage } from 'app/enums/code-editor-language.enum';\nimport { AppMaintainer } from 'app/interfaces/available-app.interface';\nimport { ChartMetadata } from 'app/interfaces/catalog.interface';\nimport { HierarchicalObjectMap } from 'app/interfaces/hierarhical-object-map.interface';\nimport { QueryParams } from 'app/interfaces/query-api.interface';\n\nexport type ChartFormValue = string | number | boolean | Record<string, unknown> | ChartFormValue[];\n\nexport interface ChartFormValues extends HierarchicalObjectMap<ChartFormValue> {\n  release_name: string;\n  version?: string;\n}\n\nexport interface AppHostPort {\n  host_port: string;\n  host_ip: string;\n}\n\nexport interface AppUsedPort {\n  container_port: string;\n  protocol: string;\n  host_ports?: AppHostPort[];\n}\n\nexport enum AppContainerState {\n  Running = 'running',\n  Starting = 'starting',\n  Exited = 'exited',\n}\n\nexport const appContainerStateLabels = new Map<AppContainerState, string>([\n  [AppContainerState.Running, T('Running')],\n  [AppContainerState.Starting, T('Starting')],\n  [AppContainerState.Exited, T('Exited')],\n]);\n\nexport interface AppContainerDetails {\n  id: string;\n  image: string;\n  service_name: string;\n  state: AppContainerState;\n  port_config: AppUsedPort[];\n  volume_mounts: AppContainerVolumes[];\n}\n\nexport interface AppContainerVolumes {\n  source: string;\n  destination: string;\n  mode: string;\n  type: 'bind' | 'volume';\n}\n\nexport interface AppActiveWorkloads {\n  containers: number;\n  used_ports: AppUsedPort[];\n  container_details: AppContainerDetails[];\n  volumes: AppContainerVolumes[];\n  images: string[];\n}\n\nexport interface App {\n  name: string;\n  id: string;\n  active_workloads: AppActiveWorkloads;\n  state: AppState;\n  upgrade_available: boolean;\n  human_version: string;\n  metadata: AppMetadata;\n  notes: string;\n  portals: Record<string, string>;\n  version: string;\n  migrated: boolean;\n  custom_app: boolean;\n  /**\n   * Present with `retrieve_config` query param.\n   */\n  config?: Record<string, ChartFormValue>;\n  /**\n   * Presents with `include_app_schema` query param.\n   */\n  version_details?: ChartSchema;\n}\n\nexport interface AppStats {\n  app_name: string;\n  /**\n   * Percentage of cpu used by an app\n   */\n  cpu_usage: number;\n  /**\n   * Current memory(in bytes) used by an app\n   */\n  memory: number;\n  networks: AppNetworkStats[];\n  blkio: {\n    /**\n     * Blkio read bytes\n     */\n    read: number;\n    /**\n     * Blkio write bytes\n     */\n    write: number;\n  };\n}\n\ninterface AppNetworkStats {\n  /**\n   * Name of the interface use by the app\n   */\n  interface_name: string;\n  /**\n   * Received bytes/s by an interface\n   */\n  rx_bytes: number;\n  /**\n   * Transmitted bytes/s by an interface\n   */\n  tx_bytes: number;\n}\n\nexport interface AppCreate {\n  values?: Record<string, ChartFormValue>;\n  app_name: string;\n  catalog_app: string;\n  train: string;\n  version?: string;\n  custom_compose_config_string?: string;\n  custom_app?: boolean;\n}\n\nexport interface AppUpdate {\n  /**\n   * Required when `custom_app = false`\n   */\n  values?: Record<string, ChartFormValue>;\n  /**\n   * Required attr when `custom_app = true`\n   */\n  custom_compose_config?: Record<string, unknown>;\n  /**\n   * Optional attr when `custom_app = true`\n   */\n  custom_compose_config_string?: string;\n}\n\nexport interface AppUpgrade {\n  app_version?: string;\n  values?: Record<string, ChartFormValue>;\n}\n\nexport type AppQueryParams = QueryParams<App, {\n  extra?: {\n    /**\n     * host_ip is a string which can be provided to override portal IP address if it is a wildcard.\n     */\n    host_ip?: string;\n\n    /**\n     * include_app_schema is a boolean which can be set to include app schema in the response.\n     */\n    include_app_schema?: boolean;\n\n    /**\n     * is a boolean which can be set to retrieve app configuration used to install/manage app.\n     */\n    retrieve_config?: boolean;\n  };\n}>;\n\nexport type AppUpgradeParams = [\n  name: string,\n  params?: AppUpgrade,\n];\n\nexport interface ChartContainerImage {\n  id: string;\n  update_available: boolean;\n}\n\nexport interface ChartSchemaEnum {\n  value: string;\n  description: string;\n}\n\nexport interface ChartSchemaNodeConf {\n  type: ChartSchemaType;\n  language?: CodeEditorLanguage;\n  attrs?: ChartSchemaNode[];\n  null?: boolean;\n  items?: ChartSchemaNode[];\n  default?: unknown;\n  enum?: ChartSchemaEnum[];\n  required?: boolean;\n  empty?: boolean;\n  value?: string;\n  max_length?: number;\n  min_length?: number;\n  min?: number;\n  max?: number;\n  cidr?: boolean;\n  private?: boolean;\n  hidden?: boolean;\n  show_if?: string[][];\n  show_subquestions_if?: ChartFormValue;\n  editable?: boolean;\n  immutable?: boolean;\n  subquestions?: ChartSchemaNode[];\n}\n\nexport interface ChartSchemaGroup {\n  name: string;\n  description: string;\n}\n\nexport interface ChartSchemaNode {\n  group?: string;\n  label: string;\n  schema: ChartSchemaNodeConf;\n  variable: string;\n  description?: string;\n}\n\nexport interface ChartSchema {\n  app_metadata: ChartMetadata;\n  readme: string;\n  changelog: string;\n  detailed_readme: string;\n  human_version: string;\n  location: string;\n  required_features: string[];\n  schema: {\n    groups: ChartSchemaGroup[];\n    questions: ChartSchemaNode[];\n    portals?: Record<string, {\n      host: string[];\n      ports: string[];\n      protocols: string[];\n    }>;\n  };\n  supported: boolean;\n  values: Record<string, ChartFormValue>;\n}\n\ninterface HostMount {\n  description: string;\n  hostPath: string;\n}\n\nexport interface Capability {\n  name: string;\n  description: string;\n}\n\nexport interface AppRunAsContext {\n  description: string;\n  gid: number;\n  group_name: string;\n  uid: number;\n  user_name: string;\n}\n\nexport interface AppMetadata {\n  app_version: string;\n  capabilities: Capability[];\n  categories: string[];\n  description: string;\n  home: string;\n  host_mounts: HostMount[];\n  icon: string;\n  keywords: string[];\n  last_update: string;\n  lib_version: string;\n  lib_version_hash: string;\n  maintainers: AppMaintainer[];\n  name: string;\n  run_as_context: AppRunAsContext[];\n  screenshots: string[];\n  sources: string[];\n  title: string;\n  train: string;\n  version: string;\n}\n\nexport type AppStartQueryParams = [\n  name: string,\n];\nexport type AppDeleteParams = [\n  string,\n  {\n    remove_images?: boolean;\n    remove_ix_volumes?: boolean;\n  },\n];\n\nexport type AppRollbackParams = [app_name: string, { app_version: string; rollback_snapshot: boolean }];\n"],"version":3}