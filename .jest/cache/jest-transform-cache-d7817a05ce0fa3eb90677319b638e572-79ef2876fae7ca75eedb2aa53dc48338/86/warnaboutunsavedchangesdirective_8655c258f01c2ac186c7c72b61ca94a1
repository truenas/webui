9f0a828ddb1dec0402ecd54eeeaacfd0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WarnAboutUnsavedChangesDirective = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
let WarnAboutUnsavedChangesDirective = class WarnAboutUnsavedChangesDirective {
    constructor(translate, dialogService, slideInRef) {
        this.translate = translate;
        this.dialogService = dialogService;
        this.slideInRef = slideInRef;
        this.formSubmitted = false;
    }
    ngOnInit() {
        this.overrideSlideInClose();
        this.trackFormChanges();
    }
    onFormSubmit() {
        this.formSubmitted = true;
    }
    closeWithConfirmation(response) {
        if (this.formGroup.pristine || (this.formSubmitted && !this.formGroup.invalid)) {
            this.emitClose(response);
            return (0, rxjs_1.of)(true);
        }
        return this.showConfirmDialog().pipe((0, operators_1.switchMap)((shouldClose) => {
            if (shouldClose) {
                this.emitClose(response);
            }
            return (0, rxjs_1.of)(shouldClose);
        }));
    }
    trackFormChanges() {
        this.formGroup.valueChanges.pipe((0, operators_1.filter)(() => !this.formGroup.pristine && this.formSubmitted), (0, operators_1.tap)(() => this.formSubmitted = false), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
    }
    overrideSlideInClose() {
        this.slideInRef.close = (response) => this.closeWithConfirmation(response)
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe();
    }
    showConfirmDialog() {
        return this.dialogService.confirm({
            title: this.translate.instant('Unsaved Changes'),
            message: this.translate.instant('You have unsaved changes. Are you sure you want to close?'),
            cancelText: this.translate.instant('No'),
            buttonText: this.translate.instant('Yes'),
            buttonColor: 'red',
            hideCheckbox: true,
        });
    }
    emitClose(response) {
        var _a, _b;
        (_a = this.slideInRef.slideInClosed$) === null || _a === void 0 ? void 0 : _a.next(response);
        (_b = this.slideInRef.slideInClosed$) === null || _b === void 0 ? void 0 : _b.complete();
    }
};
exports.WarnAboutUnsavedChangesDirective = WarnAboutUnsavedChangesDirective;
WarnAboutUnsavedChangesDirective.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: dialog_service_1.DialogService },
    { type: ix_slide_in_ref_1.IxSlideInRef }
];
WarnAboutUnsavedChangesDirective.propDecorators = {
    formGroup: [{ type: core_1.Input }],
    onFormSubmit: [{ type: core_1.HostListener, args: ['ngSubmit',] }]
};
exports.WarnAboutUnsavedChangesDirective = WarnAboutUnsavedChangesDirective = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Directive)({
        selector: '[warnAboutUnsavedChanges]',
        standalone: true,
    })
], WarnAboutUnsavedChangesDirective);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMuZGlyZWN0aXZlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUV1QjtBQUV2Qix5REFBcUU7QUFDckUsOENBQXVEO0FBQ3ZELCtCQUFzQztBQUN0Qyw4Q0FBd0Q7QUFDeEQsc0VBQWtFO0FBQ2xFLHVHQUFpRztBQU8xRixJQUFNLGdDQUFnQyxHQUF0QyxNQUFNLGdDQUFnQztJQUszQyxZQUNVLFNBQTJCLEVBQzNCLGFBQTRCLEVBQzVCLFVBQTJCO1FBRjNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGVBQVUsR0FBVixVQUFVLENBQWlCO1FBTDdCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0lBTTNCLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUdELFlBQVk7UUFDVixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRUQscUJBQXFCLENBQUMsUUFBWTtRQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMvRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sSUFBQSxTQUFFLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUNsQyxJQUFBLHFCQUFTLEVBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN4QixJQUFJLFdBQVcsRUFBRSxDQUFDO2dCQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFDRCxPQUFPLElBQUEsU0FBRSxFQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBR08sZ0JBQWdCO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDOUIsSUFBQSxrQkFBTSxFQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUM1RCxJQUFBLGVBQUcsRUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxFQUNyQyxJQUFBLDhCQUFjLEVBQUMsSUFBSSxDQUFDLENBQ3JCLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVPLG9CQUFvQjtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLFFBQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQzthQUMzRSxJQUFJLENBQUMsSUFBQSw4QkFBYyxFQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFCLFNBQVMsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7WUFDaEQsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLDJEQUEyRCxDQUFDO1lBQzVGLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDeEMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUN6QyxXQUFXLEVBQUUsS0FBSztZQUNsQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sU0FBUyxDQUFDLFFBQVk7O1FBQzVCLE1BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLDBDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQyxNQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYywwQ0FBRSxRQUFRLEVBQUUsQ0FBQztJQUM3QyxDQUFDOztBQWxFVSw0RUFBZ0M7Ozs7Ozs7d0JBQzFDLFlBQUs7MkJBZUwsbUJBQVksU0FBQyxVQUFVOzsyQ0FoQmIsZ0NBQWdDO0lBTDVDLElBQUEsNEJBQVksR0FBRTtJQUNkLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSwyQkFBMkI7UUFDckMsVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQztHQUNXLGdDQUFnQyxDQW1FNUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMvd2Fybi1hYm91dC11bnNhdmVkLWNoYW5nZXMuZGlyZWN0aXZlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCwgSG9zdExpc3RlbmVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IEl4U2xpZGVJblJlZiB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc2xpZGUtaW4vaXgtc2xpZGUtaW4tcmVmJztcblxuQFVudGlsRGVzdHJveSgpXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbd2FybkFib3V0VW5zYXZlZENoYW5nZXNdJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgV2FybkFib3V0VW5zYXZlZENoYW5nZXNEaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBmb3JtR3JvdXA6IEZvcm1Hcm91cDtcblxuICBwcml2YXRlIGZvcm1TdWJtaXR0ZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcml2YXRlIGRpYWxvZ1NlcnZpY2U6IERpYWxvZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBzbGlkZUluUmVmOiBJeFNsaWRlSW5SZWY8VD4sXG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm92ZXJyaWRlU2xpZGVJbkNsb3NlKCk7XG4gICAgdGhpcy50cmFja0Zvcm1DaGFuZ2VzKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCduZ1N1Ym1pdCcpXG4gIG9uRm9ybVN1Ym1pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmZvcm1TdWJtaXR0ZWQgPSB0cnVlO1xuICB9XG5cbiAgY2xvc2VXaXRoQ29uZmlybWF0aW9uKHJlc3BvbnNlPzogVCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGlmICh0aGlzLmZvcm1Hcm91cC5wcmlzdGluZSB8fCAodGhpcy5mb3JtU3VibWl0dGVkICYmICF0aGlzLmZvcm1Hcm91cC5pbnZhbGlkKSkge1xuICAgICAgdGhpcy5lbWl0Q2xvc2UocmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIG9mKHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNob3dDb25maXJtRGlhbG9nKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc2hvdWxkQ2xvc2UpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZENsb3NlKSB7XG4gICAgICAgICAgdGhpcy5lbWl0Q2xvc2UocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZihzaG91bGRDbG9zZSk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cblxuICBwcml2YXRlIHRyYWNrRm9ybUNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy5mb3JtR3JvdXAudmFsdWVDaGFuZ2VzLnBpcGUoXG4gICAgICBmaWx0ZXIoKCkgPT4gIXRoaXMuZm9ybUdyb3VwLnByaXN0aW5lICYmIHRoaXMuZm9ybVN1Ym1pdHRlZCksXG4gICAgICB0YXAoKCkgPT4gdGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2UpLFxuICAgICAgdW50aWxEZXN0cm95ZWQodGhpcyksXG4gICAgKS5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgb3ZlcnJpZGVTbGlkZUluQ2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zbGlkZUluUmVmLmNsb3NlID0gKHJlc3BvbnNlPzogVCkgPT4gdGhpcy5jbG9zZVdpdGhDb25maXJtYXRpb24ocmVzcG9uc2UpXG4gICAgICAucGlwZSh1bnRpbERlc3Ryb3llZCh0aGlzKSlcbiAgICAgIC5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvd0NvbmZpcm1EaWFsb2coKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuZGlhbG9nU2VydmljZS5jb25maXJtKHtcbiAgICAgIHRpdGxlOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdVbnNhdmVkIENoYW5nZXMnKSxcbiAgICAgIG1lc3NhZ2U6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1lvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcy4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNsb3NlPycpLFxuICAgICAgY2FuY2VsVGV4dDogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnTm8nKSxcbiAgICAgIGJ1dHRvblRleHQ6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1llcycpLFxuICAgICAgYnV0dG9uQ29sb3I6ICdyZWQnLFxuICAgICAgaGlkZUNoZWNrYm94OiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBlbWl0Q2xvc2UocmVzcG9uc2U/OiBUKTogdm9pZCB7XG4gICAgdGhpcy5zbGlkZUluUmVmLnNsaWRlSW5DbG9zZWQkPy5uZXh0KHJlc3BvbnNlKTtcbiAgICB0aGlzLnNsaWRlSW5SZWYuc2xpZGVJbkNsb3NlZCQ/LmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==