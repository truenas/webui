bf905aa17dd5dd8172ba647da0f707ff
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const jest_1 = require("@ngneat/spectator/jest");
const core_1 = require("@ngx-translate/core");
const angular2_uuid_1 = require("angular2-uuid");
const rxjs_1 = require("rxjs");
const api_message_type_enum_1 = require("app/enums/api-message-type.enum");
const job_state_enum_1 = require("app/enums/job-state.enum");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const ws_service_1 = require("app/services/ws.service");
const mockWebSocketConnectionService = {
    send: jest.fn(),
    buildSubscriber: jest.fn().mockReturnValue(new rxjs_1.Subject()),
    websocket$: new rxjs_1.BehaviorSubject(null),
};
const apiEventSubscription1$ = new rxjs_1.BehaviorSubject(null);
const apiEventSubscription2$ = new rxjs_1.BehaviorSubject(null);
const mockEventSubscriptions = new Map([
    ['event1', apiEventSubscription1$],
    ['event2', apiEventSubscription2$],
]);
describe('WebSocketService', () => {
    let service;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            providers: [
                ws_service_1.WebSocketService,
                (0, jest_1.mockProvider)(core_1.TranslateService),
                { provide: websocket_connection_service_1.WebSocketConnectionService, useValue: mockWebSocketConnectionService },
            ],
        });
        service = testing_1.TestBed.inject(ws_service_1.WebSocketService);
        jest.spyOn(service.clearSubscriptions$, 'next');
        service.eventSubscribers = mockEventSubscriptions;
        jest.clearAllMocks();
    });
    describe('call', () => {
        it('should make a WS call and get a response', () => {
            const uuid = 'fakeUUID';
            jest.spyOn(angular2_uuid_1.UUID, 'UUID').mockReturnValue(uuid);
            mockWebSocketConnectionService.websocket$.next({
                id: uuid,
                msg: api_message_type_enum_1.IncomingApiMessageType.Result,
                result: {},
            });
            service.call('cloudsync.providers').subscribe((result) => {
                // TODO: Actually do nothing
                expect(result).toEqual({});
            });
            expect(mockWebSocketConnectionService.send).toHaveBeenCalled();
        });
        it('should handle WS call errors', () => {
            jest.spyOn(console, 'error').mockImplementation();
            const uuid = 'fakeUUID';
            jest.spyOn(angular2_uuid_1.UUID, 'UUID').mockReturnValue(uuid);
            mockWebSocketConnectionService.websocket$.next({
                id: uuid,
                msg: api_message_type_enum_1.IncomingApiMessageType.Result,
                error: 'Test Error',
            });
            service.call('cloudsync.providers').subscribe({
                next: () => { },
                error: (error) => {
                    expect(error).toBe('Test Error');
                },
            });
        });
    });
    describe('callAndSubscribe', () => {
        it('should call and subscribe to updates', () => __awaiter(void 0, void 0, void 0, function* () {
            const pools = [{ name: 'pool1' }, { name: 'pool2' }];
            const uuid = 'fakeUUID';
            jest.spyOn(angular2_uuid_1.UUID, 'UUID').mockReturnValue(uuid);
            mockWebSocketConnectionService.websocket$.next({
                id: uuid,
                msg: api_message_type_enum_1.IncomingApiMessageType.Result,
                result: pools,
            });
            expect(yield (0, rxjs_1.firstValueFrom)(service.callAndSubscribe('pool.query'))).toEqual([
                { name: 'pool1' }, { name: 'pool2' },
            ]);
        }));
    });
    describe('job', () => {
        it('should start a job successfully', () => {
            const uuid = 'fakeUUID';
            const mockJobId = 1234;
            jest.spyOn(angular2_uuid_1.UUID, 'UUID').mockReturnValue(uuid);
            mockWebSocketConnectionService.websocket$.next({
                id: uuid,
                msg: api_message_type_enum_1.IncomingApiMessageType.Result,
                result: mockJobId,
            });
            service.startJob('boot.attach').subscribe((response) => {
                expect(response).toEqual(mockJobId);
            });
        });
        it('should handle a successful job', () => {
            service.job('boot.attach').subscribe((result) => {
                expect(result.state).toEqual(job_state_enum_1.JobState.Failed);
            });
        });
    });
    describe('subscribe', () => {
        it('should successfully subscribe', () => {
            const eventData = { data: 'test' };
            mockWebSocketConnectionService.buildSubscriber().next(eventData);
            service.subscribe('alert.list').subscribe((data) => {
                // TODO: Actually do nothing
                expect(data).toEqual({});
            });
            expect(mockWebSocketConnectionService.buildSubscriber).toHaveBeenCalled();
        });
    });
    describe('subscribeToLogs', () => {
        it('should successfully subscribe to logs', () => {
            const logData = { data: 'log test' };
            mockWebSocketConnectionService.buildSubscriber().next(logData);
            service.subscribeToLogs('logName').subscribe((data) => {
                // TODO: Actually do nothing
                expect(data).toEqual({});
            });
        });
    });
    describe('clearSubscriptions', () => {
        it('should clear all event subscriptions', () => {
            service.clearSubscriptions();
            expect(service.clearSubscriptions$.next).toHaveBeenCalled();
            expect(mockEventSubscriptions.size).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,