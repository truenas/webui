{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ws.service.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/ws.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { mockProvider } from '@ngneat/spectator/jest';\nimport { TranslateService } from '@ngx-translate/core';\nimport { UUID } from 'angular2-uuid';\nimport {\n  BehaviorSubject, Observable,\n  Subject,\n  firstValueFrom,\n} from 'rxjs';\nimport { IncomingApiMessageType } from 'app/enums/api-message-type.enum';\nimport { JobState } from 'app/enums/job-state.enum';\nimport { ApiEvent } from 'app/interfaces/api-message.interface';\nimport { Pool } from 'app/interfaces/pool.interface';\nimport { WebSocketConnectionService } from 'app/services/websocket-connection.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\nconst mockWebSocketConnectionService = {\n  send: jest.fn(),\n  buildSubscriber: jest.fn().mockReturnValue(new Subject<unknown>()),\n  websocket$: new BehaviorSubject<unknown>(null),\n};\n\nconst apiEventSubscription1$ = new BehaviorSubject(null);\nconst apiEventSubscription2$ = new BehaviorSubject(null);\n\nconst mockEventSubscriptions = new Map<string, Observable<ApiEvent>>([\n  ['event1', apiEventSubscription1$],\n  ['event2', apiEventSubscription2$],\n]);\n\ndescribe('WebSocketService', () => {\n  let service: WebSocketService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        WebSocketService,\n        mockProvider(TranslateService),\n        { provide: WebSocketConnectionService, useValue: mockWebSocketConnectionService },\n      ],\n    });\n\n    service = TestBed.inject(WebSocketService);\n\n    jest.spyOn(service.clearSubscriptions$, 'next');\n\n    (service as unknown as {\n      eventSubscribers: Map<string, Observable<ApiEvent>>;\n    }).eventSubscribers = mockEventSubscriptions;\n\n    jest.clearAllMocks();\n  });\n\n  describe('call', () => {\n    it('should make a WS call and get a response', () => {\n      const uuid = 'fakeUUID';\n      jest.spyOn(UUID, 'UUID').mockReturnValue(uuid);\n      mockWebSocketConnectionService.websocket$.next({\n        id: uuid,\n        msg: IncomingApiMessageType.Result,\n        result: {},\n      });\n\n      service.call('cloudsync.providers').subscribe((result) => {\n        // TODO: Actually do nothing\n        expect(result).toEqual({});\n      });\n\n      expect(mockWebSocketConnectionService.send).toHaveBeenCalled();\n    });\n\n    it('should handle WS call errors', () => {\n      jest.spyOn(console, 'error').mockImplementation();\n      const uuid = 'fakeUUID';\n      jest.spyOn(UUID, 'UUID').mockReturnValue(uuid);\n      mockWebSocketConnectionService.websocket$.next({\n        id: uuid,\n        msg: IncomingApiMessageType.Result,\n        error: 'Test Error',\n      });\n\n      service.call('cloudsync.providers').subscribe(\n        {\n          next: () => {},\n          error: (error) => {\n            expect(error).toBe('Test Error');\n          },\n        },\n      );\n    });\n  });\n\n  describe('callAndSubscribe', () => {\n    it('should call and subscribe to updates', async () => {\n      const pools = [{ name: 'pool1' }, { name: 'pool2' }] as Pool[];\n      const uuid = 'fakeUUID';\n      jest.spyOn(UUID, 'UUID').mockReturnValue(uuid);\n      mockWebSocketConnectionService.websocket$.next({\n        id: uuid,\n        msg: IncomingApiMessageType.Result,\n        result: pools,\n      });\n\n      expect(await firstValueFrom(service.callAndSubscribe('pool.query'))).toEqual([\n        { name: 'pool1' }, { name: 'pool2' },\n      ]);\n    });\n  });\n\n  describe('job', () => {\n    it('should start a job successfully', () => {\n      const uuid = 'fakeUUID';\n      const mockJobId = 1234;\n      jest.spyOn(UUID, 'UUID').mockReturnValue(uuid);\n      mockWebSocketConnectionService.websocket$.next({\n        id: uuid,\n        msg: IncomingApiMessageType.Result,\n        result: mockJobId,\n      });\n\n      service.startJob('boot.attach').subscribe((response) => {\n        expect(response).toEqual(mockJobId);\n      });\n    });\n\n    it('should handle a successful job', () => {\n      service.job('boot.attach').subscribe((result) => {\n        expect(result.state).toEqual(JobState.Failed);\n      });\n    });\n  });\n\n  describe('subscribe', () => {\n    it('should successfully subscribe', () => {\n      const eventData = { data: 'test' };\n      (mockWebSocketConnectionService.buildSubscriber() as Subject<unknown>).next(eventData);\n\n      service.subscribe('alert.list').subscribe((data) => {\n        // TODO: Actually do nothing\n        expect(data).toEqual({});\n      });\n\n      expect(mockWebSocketConnectionService.buildSubscriber).toHaveBeenCalled();\n    });\n  });\n\n  describe('subscribeToLogs', () => {\n    it('should successfully subscribe to logs', () => {\n      const logData = { data: 'log test' };\n      (mockWebSocketConnectionService.buildSubscriber() as Subject<unknown>).next(logData);\n\n      service.subscribeToLogs('logName').subscribe((data) => {\n        // TODO: Actually do nothing\n        expect(data).toEqual({});\n      });\n    });\n  });\n\n  describe('clearSubscriptions', () => {\n    it('should clear all event subscriptions', () => {\n      service.clearSubscriptions();\n\n      expect(service.clearSubscriptions$.next).toHaveBeenCalled();\n      expect(mockEventSubscriptions.size).toBe(0);\n    });\n  });\n});\n"],"version":3}