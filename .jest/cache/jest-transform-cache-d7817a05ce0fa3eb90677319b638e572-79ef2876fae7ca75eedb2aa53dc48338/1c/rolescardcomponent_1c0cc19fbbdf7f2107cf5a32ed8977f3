71100a1eba867bf78b8d18dfc62d37ef
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolesCardComponent = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const role_enum_1 = require("app/enums/role.enum");
const dataset_store_service_1 = require("app/pages/datasets/store/dataset-store.service");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
const nfs_form_component_1 = require("app/pages/sharing/nfs/nfs-form/nfs-form.component");
const smb_form_component_1 = require("app/pages/sharing/smb/smb-form/smb-form.component");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const i0 = __importStar(require("@angular/core"));
let RolesCardComponent = class RolesCardComponent {
    constructor(slideInService, datasetStore) {
        this.slideInService = slideInService;
        this.datasetStore = datasetStore;
        this.dataset = core_1.input.required();
        this.systemDataset = core_1.input.required();
        this.hasChildrenWithShares = (0, core_1.input)(false);
        this.nfsRequiredRoles = [role_enum_1.Role.SharingNfsWrite, role_enum_1.Role.SharingWrite];
        this.smbRequiredRoles = [role_enum_1.Role.SharingSmbWrite, role_enum_1.Role.SharingWrite];
        this.isApplications = (0, core_1.computed)(() => {
            return this.dataset().name && this.dataset().name.endsWith(dataset_utils_1.ixAppsDataset);
        });
        this.appNames = (0, core_1.computed)(() => {
            return (0, lodash_es_1.uniq)(this.dataset().apps.map((app) => app.name)).join(', ');
        });
        this.vmNames = (0, core_1.computed)(() => {
            return (0, lodash_es_1.uniq)(this.dataset().vms.map((app) => app.name)).join(', ');
        });
        this.isSystemDataset = (0, core_1.computed)(() => {
            return this.dataset().name === this.systemDataset();
        });
        this.smbShareNames = (0, core_1.computed)(() => {
            var _a;
            if (!((_a = this.dataset().smb_shares) === null || _a === void 0 ? void 0 : _a.length)) {
                return '';
            }
            const shareNames = this.dataset().smb_shares.map((item) => item.share_name);
            if (shareNames.length === 1) {
                return "'" + shareNames[0] + "'";
            }
            let shareNamesPretty = "'";
            for (let i = 0; i < shareNames.length - 1; i++) {
                if (i + 1 >= shareNames.length - 1) {
                    shareNamesPretty += shareNames[i] + "', and '" + shareNames[shareNames.length - 1] + "'";
                }
                else {
                    shareNamesPretty += shareNames[i] + "', '";
                }
            }
            return shareNamesPretty;
        });
        this.canCreateShare = (0, core_1.computed)(() => {
            var _a, _b, _c, _d, _e;
            return !this.hasChildrenWithShares()
                && !this.isSystemDataset()
                && !this.isApplications()
                && !((_a = this.dataset().apps) === null || _a === void 0 ? void 0 : _a.length)
                && !((_b = this.dataset().vms) === null || _b === void 0 ? void 0 : _b.length)
                && !((_c = this.dataset().smb_shares) === null || _c === void 0 ? void 0 : _c.length)
                && !((_d = this.dataset().nfs_shares) === null || _d === void 0 ? void 0 : _d.length)
                && !((_e = this.dataset().iscsi_shares) === null || _e === void 0 ? void 0 : _e.length);
        });
    }
    createSmbShare() {
        const slideInRef = this.slideInService.open(smb_form_component_1.SmbFormComponent, {
            data: { defaultSmbShare: { path: this.dataset().mountpoint } },
        });
        slideInRef.slideInClosed$.pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.datasetStore.datasetUpdated();
        });
    }
    createNfsShare() {
        const slideInRef = this.slideInService.open(nfs_form_component_1.NfsFormComponent, {
            data: { defaultNfsShare: { path: this.dataset().mountpoint } },
        });
        slideInRef.slideInClosed$.pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.datasetStore.datasetUpdated();
        });
    }
};
exports.RolesCardComponent = RolesCardComponent;
RolesCardComponent.ctorParameters = () => [
    { type: ix_slide_in_service_1.IxSlideInService },
    { type: dataset_store_service_1.DatasetTreeStore }
];
RolesCardComponent.propDecorators = {
    dataset: [{ type: i0.Input, args: [{ isSignal: true, alias: "dataset", required: true, transform: undefined },] }],
    systemDataset: [{ type: i0.Input, args: [{ isSignal: true, alias: "systemDataset", required: true, transform: undefined },] }],
    hasChildrenWithShares: [{ type: i0.Input, args: [{ isSignal: true, alias: "hasChildrenWithShares", required: false, transform: undefined },] }]
};
exports.RolesCardComponent = RolesCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-roles-card',
        template: require("./roles-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], RolesCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,