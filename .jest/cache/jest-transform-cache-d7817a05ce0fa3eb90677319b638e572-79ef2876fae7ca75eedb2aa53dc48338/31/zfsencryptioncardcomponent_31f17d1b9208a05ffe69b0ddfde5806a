dc07b80493ea360b5d48a45e1b8a2f08
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZfsEncryptionCardComponent = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const role_enum_1 = require("app/enums/role.enum");
const encryption_options_dialog_component_1 = require("app/pages/datasets/modules/encryption/components/encryption-options-dialog/encryption-options-dialog.component");
const export_all_keys_dialog_component_1 = require("app/pages/datasets/modules/encryption/components/export-all-keys-dialog/export-all-keys-dialog.component");
const export_dataset_key_dialog_component_1 = require("app/pages/datasets/modules/encryption/components/export-dataset-key-dialog/export-dataset-key-dialog.component");
const lock_dataset_dialog_component_1 = require("app/pages/datasets/modules/encryption/components/lock-dataset-dialog/lock-dataset-dialog.component");
const dataset_store_service_1 = require("app/pages/datasets/store/dataset-store.service");
const dataset_utils_1 = require("app/pages/datasets/utils/dataset.utils");
// TODO: Add support for exporting all keys on root dataset.
// TODO: Bug with spaces in dataset name
let ZfsEncryptionCardComponent = class ZfsEncryptionCardComponent {
    constructor(matDialog, translate, datasetStore) {
        this.matDialog = matDialog;
        this.translate = translate;
        this.datasetStore = datasetStore;
        this.Role = role_enum_1.Role;
    }
    get hasPassphrase() {
        return (0, dataset_utils_1.isPasswordEncrypted)(this.dataset);
    }
    get isEncryptionRoot() {
        return (0, dataset_utils_1.isEncryptionRoot)(this.dataset);
    }
    get currentStateLabel() {
        if (!this.dataset.encrypted) {
            return this.translate.instant('Unencrypted');
        }
        if (this.dataset.locked) {
            if (!this.isEncryptionRoot) {
                return this.translate.instant('Locked by ancestor');
            }
            return this.translate.instant('Locked');
        }
        return this.translate.instant('Unlocked');
    }
    get canExportKey() {
        return !this.hasPassphrase && this.dataset.key_loaded;
    }
    get canEdit() {
        return this.dataset.encrypted && !this.dataset.locked;
    }
    get canUnlock() {
        var _a;
        return this.isEncryptionRoot && this.dataset.locked && !((_a = this.parentDataset) === null || _a === void 0 ? void 0 : _a.locked);
    }
    onEditPressed() {
        const dialog = this.matDialog.open(encryption_options_dialog_component_1.EncryptionOptionsDialogComponent, {
            data: {
                dataset: this.dataset,
                parent: this.parentDataset,
            },
        });
        dialog
            .afterClosed()
            .pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => this.datasetStore.datasetUpdated());
    }
    onLock() {
        this.matDialog.open(lock_dataset_dialog_component_1.LockDatasetDialogComponent, {
            data: this.dataset,
        })
            .afterClosed()
            .pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => this.datasetStore.datasetUpdated());
    }
    onExportKey() {
        this.matDialog.open(export_dataset_key_dialog_component_1.ExportDatasetKeyDialogComponent, {
            data: this.dataset,
        });
    }
    onExportAllKeys() {
        this.matDialog.open(export_all_keys_dialog_component_1.ExportAllKeysDialogComponent, {
            data: this.dataset,
        });
    }
    get isRoot() {
        return (0, dataset_utils_1.isRootDataset)(this.dataset);
    }
};
exports.ZfsEncryptionCardComponent = ZfsEncryptionCardComponent;
ZfsEncryptionCardComponent.ctorParameters = () => [
    { type: dialog_1.MatDialog },
    { type: core_2.TranslateService },
    { type: dataset_store_service_1.DatasetTreeStore }
];
ZfsEncryptionCardComponent.propDecorators = {
    dataset: [{ type: core_1.Input }],
    parentDataset: [{ type: core_1.Input }]
};
exports.ZfsEncryptionCardComponent = ZfsEncryptionCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-zfs-encryption-card',
        template: require("./zfs-encryption-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], ZfsEncryptionCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,