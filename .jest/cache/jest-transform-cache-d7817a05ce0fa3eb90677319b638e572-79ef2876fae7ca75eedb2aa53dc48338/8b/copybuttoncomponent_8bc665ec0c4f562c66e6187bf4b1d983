03a53b1e8289db6487f419b7a3c19987
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyButtonComponent = void 0;
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const menu_1 = require("@angular/material/menu");
const tooltip_1 = require("@angular/material/tooltip");
const core_2 = require("@ngx-translate/core");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const i0 = __importStar(require("@angular/core"));
let CopyButtonComponent = class CopyButtonComponent {
    constructor(snackbar, translate) {
        this.snackbar = snackbar;
        this.translate = translate;
        this.text = core_1.input.required();
        this.jsonText = (0, core_1.input)();
        this.isValidJson = (0, core_1.computed)(() => typeof this.jsonText() === 'object');
    }
    showSuccessMessage() {
        this.snackbar.success(this.translate.instant('Copied to clipboard'));
    }
    copyViaDeprecatedExecCommand(text) {
        return new Promise((resolve) => {
            const textArea = document.createElement('textarea');
            Object.assign(textArea.style, { position: 'fixed', left: '-9999px', top: '-9999px' });
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            textArea.remove();
            resolve();
        });
    }
    handleCopyToClipboard(text) {
        if (navigator.clipboard) {
            return navigator.clipboard.writeText(text);
        }
        return this.copyViaDeprecatedExecCommand(text);
    }
    copyToClipboard() {
        this.handleCopyToClipboard(this.text()).then(() => this.showSuccessMessage());
    }
    copyJsonToClipboard() {
        this.handleCopyToClipboard(JSON.stringify(this.jsonText(), null, 2)).then(() => this.showSuccessMessage());
    }
};
exports.CopyButtonComponent = CopyButtonComponent;
CopyButtonComponent.ctorParameters = () => [
    { type: snackbar_service_1.SnackbarService },
    { type: core_2.TranslateService }
];
CopyButtonComponent.propDecorators = {
    text: [{ type: i0.Input, args: [{ isSignal: true, alias: "text", required: true, transform: undefined },] }],
    jsonText: [{ type: i0.Input, args: [{ isSignal: true, alias: "jsonText", required: false, transform: undefined },] }]
};
exports.CopyButtonComponent = CopyButtonComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-copy-button',
        template: require("./copy-button.component.html"),
        standalone: true,
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        imports: [
            button_1.MatIconButton,
            tooltip_1.MatTooltip,
            core_2.TranslateModule,
            ix_icon_component_1.IxIconComponent,
            menu_1.MatMenuTrigger,
            menu_1.MatMenu,
            menu_1.MatMenuItem,
            test_directive_1.TestDirective,
        ],
    })
], CopyButtonComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvYnV0dG9ucy9jb3B5LWJ1dHRvbi9jb3B5LWJ1dHRvbi5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FFdUI7QUFDdkIscURBQXlEO0FBQ3pELGlEQUE4RTtBQUM5RSx1REFBdUQ7QUFDdkQsOENBQXdFO0FBQ3hFLDZFQUF3RTtBQUN4RSxxRkFBaUY7QUFDakYsdUVBQW1FOztBQW1CNUQsSUFBTSxtQkFBbUIsR0FBekIsTUFBTSxtQkFBbUI7SUFNOUIsWUFDVSxRQUF5QixFQUN6QixTQUEyQjtRQUQzQixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixjQUFTLEdBQVQsU0FBUyxDQUFrQjtvQkFQckIsWUFBSyxDQUFDLFFBQVEsRUFBVTt3QkFDcEIsSUFBQSxZQUFLLEdBQVc7UUFFM0IsZ0JBQVcsR0FBRyxJQUFBLGVBQVEsRUFBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxRQUFRLENBQUMsQ0FBQztJQUt4RSxDQUFDO0lBRUksa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU8sNEJBQTRCLENBQUMsSUFBWTtRQUMvQyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDN0IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFDdEYsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2xCLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0IsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8scUJBQXFCLENBQUMsSUFBWTtRQUN4QyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN4QixPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUM3RyxDQUFDOztBQTFDVSxrREFBbUI7Ozs7Ozs7Ozs4QkFBbkIsbUJBQW1CO0lBakIvQixJQUFBLGdCQUFTLEVBQUM7UUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1FBQzFCLGlEQUEyQztRQUUzQyxVQUFVLEVBQUUsSUFBSTtRQUNoQixlQUFlLEVBQUUsOEJBQXVCLENBQUMsTUFBTTtRQUMvQyxPQUFPLEVBQUU7WUFDUCxzQkFBYTtZQUNiLG9CQUFVO1lBQ1Ysc0JBQWU7WUFDZixtQ0FBZTtZQUNmLHFCQUFjO1lBQ2QsY0FBTztZQUNQLGtCQUFXO1lBQ1gsOEJBQWE7U0FDZDtLQUNGLENBQUM7R0FDVyxtQkFBbUIsQ0EyQy9CIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2J1dHRvbnMvY29weS1idXR0b24vY29weS1idXR0b24uY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGNvbXB1dGVkLCBpbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRJY29uQnV0dG9uIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYnV0dG9uJztcbmltcG9ydCB7IE1hdE1lbnUsIE1hdE1lbnVJdGVtLCBNYXRNZW51VHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL21lbnUnO1xuaW1wb3J0IHsgTWF0VG9vbHRpcCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Rvb2x0aXAnO1xuaW1wb3J0IHsgVHJhbnNsYXRlTW9kdWxlLCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBJeEljb25Db21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2l4LWljb24uY29tcG9uZW50JztcbmltcG9ydCB7IFNuYWNrYmFyU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL3NuYWNrYmFyL3NlcnZpY2VzL3NuYWNrYmFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGVzdERpcmVjdGl2ZSB9IGZyb20gJ2FwcC9tb2R1bGVzL3Rlc3QtaWQvdGVzdC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpeC1jb3B5LWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb3B5LWJ1dHRvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2NvcHktYnV0dG9uLmNvbXBvbmVudC5zY3NzJ10sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBpbXBvcnRzOiBbXG4gICAgTWF0SWNvbkJ1dHRvbixcbiAgICBNYXRUb29sdGlwLFxuICAgIFRyYW5zbGF0ZU1vZHVsZSxcbiAgICBJeEljb25Db21wb25lbnQsXG4gICAgTWF0TWVudVRyaWdnZXIsXG4gICAgTWF0TWVudSxcbiAgICBNYXRNZW51SXRlbSxcbiAgICBUZXN0RGlyZWN0aXZlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBDb3B5QnV0dG9uQ29tcG9uZW50IHtcbiAgcmVhZG9ubHkgdGV4dCA9IGlucHV0LnJlcXVpcmVkPHN0cmluZz4oKTtcbiAgcmVhZG9ubHkganNvblRleHQgPSBpbnB1dDx1bmtub3duPigpO1xuXG4gIHJlYWRvbmx5IGlzVmFsaWRKc29uID0gY29tcHV0ZWQoKCkgPT4gdHlwZW9mIHRoaXMuanNvblRleHQoKSA9PT0gJ29iamVjdCcpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc25hY2tiYXI6IFNuYWNrYmFyU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgKSB7fVxuXG4gIHByaXZhdGUgc2hvd1N1Y2Nlc3NNZXNzYWdlKCk6IHZvaWQge1xuICAgIHRoaXMuc25hY2tiYXIuc3VjY2Vzcyh0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdDb3BpZWQgdG8gY2xpcGJvYXJkJykpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb3B5VmlhRGVwcmVjYXRlZEV4ZWNDb21tYW5kKHRleHQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgdGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgT2JqZWN0LmFzc2lnbih0ZXh0QXJlYS5zdHlsZSwgeyBwb3NpdGlvbjogJ2ZpeGVkJywgbGVmdDogJy05OTk5cHgnLCB0b3A6ICctOTk5OXB4JyB9KTtcbiAgICAgIHRleHRBcmVhLnZhbHVlID0gdGV4dDtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGV4dEFyZWEpO1xuICAgICAgdGV4dEFyZWEuc2VsZWN0KCk7XG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1xuICAgICAgdGV4dEFyZWEucmVtb3ZlKCk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNvcHlUb0NsaXBib2FyZCh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAobmF2aWdhdG9yLmNsaXBib2FyZCkge1xuICAgICAgcmV0dXJuIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRleHQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvcHlWaWFEZXByZWNhdGVkRXhlY0NvbW1hbmQodGV4dCk7XG4gIH1cblxuICBjb3B5VG9DbGlwYm9hcmQoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVDb3B5VG9DbGlwYm9hcmQodGhpcy50ZXh0KCkpLnRoZW4oKCkgPT4gdGhpcy5zaG93U3VjY2Vzc01lc3NhZ2UoKSk7XG4gIH1cblxuICBjb3B5SnNvblRvQ2xpcGJvYXJkKCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlQ29weVRvQ2xpcGJvYXJkKEpTT04uc3RyaW5naWZ5KHRoaXMuanNvblRleHQoKSwgbnVsbCwgMikpLnRoZW4oKCkgPT4gdGhpcy5zaG93U3VjY2Vzc01lc3NhZ2UoKSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==