{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/router/fesm2022/testing.mjs"],
  "sourcesContent": ["/**\n * @license Angular v18.2.4\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { provideLocationMocks } from '@angular/common/testing';\nimport * as i0 from '@angular/core';\nimport { NgModule, Injectable, Component, ViewChild } from '@angular/core';\nimport { ROUTES, ROUTER_CONFIGURATION, RouterModule, \u0275ROUTER_PROVIDERS, withPreloading, NoPreloading, RouterOutlet, Router, \u0275afterNextNavigation } from '@angular/router';\nimport { TestBed } from '@angular/core/testing';\n\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\nfunction throwInvalidConfigError(parameter) {\n    throw new Error(`Parameter ${parameter} does not match the one available in the injector. ` +\n        '`setupTestingRouter` is meant to be used as a factory function with dependencies coming from DI.');\n}\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location` and `LocationStrategy`.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterModule.forRoot(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n * @deprecated Use `provideRouter` or `RouterModule`/`RouterModule.forRoot` instead.\n * This module was previously used to provide a helpful collection of test fakes,\n * most notably those for `Location` and `LocationStrategy`.  These are generally not\n * required anymore, as `MockPlatformLocation` is provided in `TestBed` by default.\n * However, you can use them directly with `provideLocationMocks`.\n */\nclass RouterTestingModule {\n    static withRoutes(routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                { provide: ROUTES, multi: true, useValue: routes },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ],\n        };\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RouterTestingModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.4\", ngImport: i0, type: RouterTestingModule, exports: [RouterModule] }); }\n    static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RouterTestingModule, providers: [\n            \u0275ROUTER_PROVIDERS,\n            provideLocationMocks(),\n            withPreloading(NoPreloading).\u0275providers,\n            { provide: ROUTES, multi: true, useValue: [] },\n        ], imports: [RouterModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RouterTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [RouterModule],\n                    providers: [\n                        \u0275ROUTER_PROVIDERS,\n                        provideLocationMocks(),\n                        withPreloading(NoPreloading).\u0275providers,\n                        { provide: ROUTES, multi: true, useValue: [] },\n                    ],\n                }]\n        }] });\n\nclass RootFixtureService {\n    createHarness() {\n        if (this.harness) {\n            throw new Error('Only one harness should be created per test.');\n        }\n        this.harness = new RouterTestingHarness(this.getRootFixture());\n        return this.harness;\n    }\n    getRootFixture() {\n        if (this.fixture !== undefined) {\n            return this.fixture;\n        }\n        this.fixture = TestBed.createComponent(RootCmp);\n        this.fixture.detectChanges();\n        return this.fixture;\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RootFixtureService, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RootFixtureService, providedIn: 'root' }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RootFixtureService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nclass RootCmp {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RootCmp, deps: [], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.4\", type: RootCmp, isStandalone: true, selector: \"ng-component\", viewQueries: [{ propertyName: \"outlet\", first: true, predicate: RouterOutlet, descendants: true }], ngImport: i0, template: '<router-outlet></router-outlet>', isInline: true, dependencies: [{ kind: \"directive\", type: RouterOutlet, selector: \"router-outlet\", inputs: [\"name\"], outputs: [\"activate\", \"deactivate\", \"attach\", \"detach\"], exportAs: [\"outlet\"] }] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: RootCmp, decorators: [{\n            type: Component,\n            args: [{\n                    standalone: true,\n                    template: '<router-outlet></router-outlet>',\n                    imports: [RouterOutlet],\n                }]\n        }], propDecorators: { outlet: [{\n                type: ViewChild,\n                args: [RouterOutlet]\n            }] } });\n/**\n * A testing harness for the `Router` to reduce the boilerplate needed to test routes and routed\n * components.\n *\n * @publicApi\n */\nclass RouterTestingHarness {\n    /**\n     * Creates a `RouterTestingHarness` instance.\n     *\n     * The `RouterTestingHarness` also creates its own root component with a `RouterOutlet` for the\n     * purposes of rendering route components.\n     *\n     * Throws an error if an instance has already been created.\n     * Use of this harness also requires `destroyAfterEach: true` in the `ModuleTeardownOptions`\n     *\n     * @param initialUrl The target of navigation to trigger before returning the harness.\n     */\n    static async create(initialUrl) {\n        const harness = TestBed.inject(RootFixtureService).createHarness();\n        if (initialUrl !== undefined) {\n            await harness.navigateByUrl(initialUrl);\n        }\n        return harness;\n    }\n    /** @internal */\n    constructor(fixture) {\n        this.fixture = fixture;\n    }\n    /** Instructs the root fixture to run change detection. */\n    detectChanges() {\n        this.fixture.detectChanges();\n    }\n    /** The `DebugElement` of the `RouterOutlet` component. `null` if the outlet is not activated. */\n    get routeDebugElement() {\n        const outlet = this.fixture.componentInstance.outlet;\n        if (!outlet || !outlet.isActivated) {\n            return null;\n        }\n        return this.fixture.debugElement.query((v) => v.componentInstance === outlet.component);\n    }\n    /** The native element of the `RouterOutlet` component. `null` if the outlet is not activated. */\n    get routeNativeElement() {\n        return this.routeDebugElement?.nativeElement ?? null;\n    }\n    async navigateByUrl(url, requiredRoutedComponentType) {\n        const router = TestBed.inject(Router);\n        let resolveFn;\n        const redirectTrackingPromise = new Promise((resolve) => {\n            resolveFn = resolve;\n        });\n        \u0275afterNextNavigation(TestBed.inject(Router), resolveFn);\n        await router.navigateByUrl(url);\n        await redirectTrackingPromise;\n        this.fixture.detectChanges();\n        const outlet = this.fixture.componentInstance.outlet;\n        // The outlet might not be activated if the user is testing a navigation for a guard that\n        // rejects\n        if (outlet && outlet.isActivated && outlet.activatedRoute.component) {\n            const activatedComponent = outlet.component;\n            if (requiredRoutedComponentType !== undefined &&\n                !(activatedComponent instanceof requiredRoutedComponentType)) {\n                throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but got ${activatedComponent.constructor.name}`);\n            }\n            return activatedComponent;\n        }\n        else {\n            if (requiredRoutedComponentType !== undefined) {\n                throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but the navigation did not activate any component.`);\n            }\n            return null;\n        }\n    }\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router/testing package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RouterTestingHarness, RouterTestingModule };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": "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",
  "names": ["import_testing"]
}
