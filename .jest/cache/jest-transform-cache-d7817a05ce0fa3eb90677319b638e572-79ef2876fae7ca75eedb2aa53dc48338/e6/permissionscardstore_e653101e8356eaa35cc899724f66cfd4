07553e9fe278ab90e96e686ebb879496
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsCardStore = void 0;
const core_1 = require("@angular/core");
const component_store_1 = require("@ngrx/component-store");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
const initialState = {
    isLoading: false,
    acl: null,
    stat: null,
};
let PermissionsCardStore = class PermissionsCardStore extends component_store_1.ComponentStore {
    constructor(ws, errorHandler, dialogService) {
        super(initialState);
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.dialogService = dialogService;
        this.loadPermissions = this.effect((mountpoints$) => {
            return mountpoints$.pipe((0, operators_1.tap)(() => {
                this.setState(Object.assign(Object.assign({}, initialState), { isLoading: true }));
            }), (0, operators_1.switchMap)((mountpoint) => {
                return (0, rxjs_1.forkJoin)([
                    this.ws.call('filesystem.stat', [mountpoint]),
                    this.ws.call('filesystem.getacl', [mountpoint, true, true]),
                ]).pipe((0, operators_1.tap)(([stat, acl]) => {
                    this.patchState({
                        stat,
                        acl,
                        isLoading: false,
                    });
                }), (0, operators_1.catchError)((error) => {
                    this.dialogService.error(this.errorHandler.parseError(error));
                    this.patchState({
                        isLoading: false,
                    });
                    return rxjs_1.EMPTY;
                }));
            }));
        });
    }
};
exports.PermissionsCardStore = PermissionsCardStore;
PermissionsCardStore.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_service_1.DialogService }
];
exports.PermissionsCardStore = PermissionsCardStore = __decorate([
    (0, core_1.Injectable)()
], PermissionsCardStore);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvcGVybWlzc2lvbnMvc3RvcmVzL3Blcm1pc3Npb25zLWNhcmQuc3RvcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBQTJDO0FBQzNDLDJEQUF1RDtBQUN2RCwrQkFBbUQ7QUFDbkQsOENBRXdCO0FBQ3hCLHNFQUFrRTtBQUlsRSw4RUFBeUU7QUFDekUsd0RBQTJEO0FBRTNELE1BQU0sWUFBWSxHQUF5QjtJQUN6QyxTQUFTLEVBQUUsS0FBSztJQUNoQixHQUFHLEVBQUUsSUFBSTtJQUNULElBQUksRUFBRSxJQUFJO0NBQ1gsQ0FBQztBQUdLLElBQU0sb0JBQW9CLEdBQTFCLE1BQU0sb0JBQXFCLFNBQVEsZ0NBQW9DO0lBQzVFLFlBQ1UsRUFBb0IsRUFDcEIsWUFBaUMsRUFDakMsYUFBNEI7UUFFcEMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBSlosT0FBRSxHQUFGLEVBQUUsQ0FBa0I7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBSzdCLG9CQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQWdDLEVBQUUsRUFBRTtZQUMxRSxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQ3RCLElBQUEsZUFBRyxFQUFDLEdBQUcsRUFBRTtnQkFDUCxJQUFJLENBQUMsUUFBUSxpQ0FDUixZQUFZLEtBQ2YsU0FBUyxFQUFFLElBQUksSUFDZixDQUFDO1lBQ0wsQ0FBQyxDQUFDLEVBQ0YsSUFBQSxxQkFBUyxFQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7Z0JBQ3ZCLE9BQU8sSUFBQSxlQUFRLEVBQUM7b0JBQ2QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDN0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2lCQUM1RCxDQUFDLENBQUMsSUFBSSxDQUNMLElBQUEsZUFBRyxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRTtvQkFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQzt3QkFDZCxJQUFJO3dCQUNKLEdBQUc7d0JBQ0gsU0FBUyxFQUFFLEtBQUs7cUJBQ2pCLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsRUFDRixJQUFBLHNCQUFVLEVBQUMsQ0FBQyxLQUFjLEVBQUUsRUFBRTtvQkFDNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFFOUQsSUFBSSxDQUFDLFVBQVUsQ0FBQzt3QkFDZCxTQUFTLEVBQUUsS0FBSztxQkFDakIsQ0FBQyxDQUFDO29CQUVILE9BQU8sWUFBSyxDQUFDO2dCQUNmLENBQUMsQ0FBQyxDQUNILENBQUM7WUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFsQ0gsQ0FBQzs7QUFQVSxvREFBb0I7Ozs7OzsrQkFBcEIsb0JBQW9CO0lBRGhDLElBQUEsaUJBQVUsR0FBRTtHQUNBLG9CQUFvQixDQTBDaEMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvcGVybWlzc2lvbnMvc3RvcmVzL3Blcm1pc3Npb25zLWNhcmQuc3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50U3RvcmUgfSBmcm9tICdAbmdyeC9jb21wb25lbnQtc3RvcmUnO1xuaW1wb3J0IHsgRU1QVFksIGZvcmtKb2luLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBjYXRjaEVycm9yLCBzd2l0Y2hNYXAsIHRhcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJ2FwcC9tb2R1bGVzL2RpYWxvZy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQge1xuICBQZXJtaXNzaW9uc0NhcmRTdGF0ZSxcbn0gZnJvbSAnYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvcGVybWlzc2lvbnMvaW50ZXJmYWNlcy9wZXJtaXNzaW9ucy1zaWRlYmFyLXN0YXRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL2Vycm9yLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dzLnNlcnZpY2UnO1xuXG5jb25zdCBpbml0aWFsU3RhdGU6IFBlcm1pc3Npb25zQ2FyZFN0YXRlID0ge1xuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBhY2w6IG51bGwsXG4gIHN0YXQ6IG51bGwsXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbnNDYXJkU3RvcmUgZXh0ZW5kcyBDb21wb25lbnRTdG9yZTxQZXJtaXNzaW9uc0NhcmRTdGF0ZT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHdzOiBXZWJTb2NrZXRTZXJ2aWNlLFxuICAgIHByaXZhdGUgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcbiAgKSB7XG4gICAgc3VwZXIoaW5pdGlhbFN0YXRlKTtcbiAgfVxuXG4gIHJlYWRvbmx5IGxvYWRQZXJtaXNzaW9ucyA9IHRoaXMuZWZmZWN0KChtb3VudHBvaW50cyQ6IE9ic2VydmFibGU8c3RyaW5nPikgPT4ge1xuICAgIHJldHVybiBtb3VudHBvaW50cyQucGlwZShcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIC4uLmluaXRpYWxTdGF0ZSxcbiAgICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBzd2l0Y2hNYXAoKG1vdW50cG9pbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIGZvcmtKb2luKFtcbiAgICAgICAgICB0aGlzLndzLmNhbGwoJ2ZpbGVzeXN0ZW0uc3RhdCcsIFttb3VudHBvaW50XSksXG4gICAgICAgICAgdGhpcy53cy5jYWxsKCdmaWxlc3lzdGVtLmdldGFjbCcsIFttb3VudHBvaW50LCB0cnVlLCB0cnVlXSksXG4gICAgICAgIF0pLnBpcGUoXG4gICAgICAgICAgdGFwKChbc3RhdCwgYWNsXSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYXRjaFN0YXRlKHtcbiAgICAgICAgICAgICAgc3RhdCxcbiAgICAgICAgICAgICAgYWNsLFxuICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5lcnJvcih0aGlzLmVycm9ySGFuZGxlci5wYXJzZUVycm9yKGVycm9yKSk7XG5cbiAgICAgICAgICAgIHRoaXMucGF0Y2hTdGF0ZSh7XG4gICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgKTtcbiAgfSk7XG59XG4iXSwidmVyc2lvbiI6M30=