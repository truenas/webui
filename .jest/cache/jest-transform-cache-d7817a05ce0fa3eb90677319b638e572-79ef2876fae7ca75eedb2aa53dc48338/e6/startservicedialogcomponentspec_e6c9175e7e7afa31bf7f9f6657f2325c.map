{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/components/start-service-dialog/start-service-dialog.component.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/dialog/components/start-service-dialog/start-service-dialog.component.spec.ts"],"sourcesContent":["import { HarnessLoader } from '@angular/cdk/testing';\nimport { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonHarness } from '@angular/material/button/testing';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { createComponentFactory, mockProvider, Spectator } from '@ngneat/spectator/jest';\nimport { MockStore, provideMockStore } from '@ngrx/store/testing';\nimport { Subject } from 'rxjs';\nimport { mockAuth } from 'app/core/testing/utils/mock-auth.utils';\nimport { mockCall, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { ServiceName } from 'app/enums/service-name.enum';\nimport { ServiceStatus } from 'app/enums/service-status.enum';\nimport { Service } from 'app/interfaces/service.interface';\nimport { StartServiceDialogComponent, StartServiceDialogResult } from 'app/modules/dialog/components/start-service-dialog/start-service-dialog.component';\nimport { IxSlideToggleHarness } from 'app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.harness';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { ServicesState } from 'app/store/services/services.reducer';\nimport { selectServices } from 'app/store/services/services.selectors';\n\nconst cifsService = {\n  id: 4,\n  service: ServiceName.Cifs,\n  state: ServiceStatus.Stopped,\n  enable: false,\n} as Service;\n\ndescribe('StartServiceDialogComponent', () => {\n  let spectator: Spectator<StartServiceDialogComponent>;\n  let loader: HarnessLoader;\n  let store$: MockStore<ServicesState>;\n  const afterClosed$ = new Subject<StartServiceDialogResult>();\n\n  const createComponent = createComponentFactory({\n    component: StartServiceDialogComponent,\n    imports: [\n      ReactiveFormsModule,\n    ],\n    providers: [\n      mockAuth(),\n      mockWebSocket([\n        mockCall('service.update'),\n        mockCall('service.start'),\n      ]),\n      {\n        provide: MAT_DIALOG_DATA,\n        useValue: ServiceName.Cifs,\n      },\n      mockProvider(MatDialogRef, {\n        afterClosed: () => afterClosed$,\n      }),\n      mockProvider(MatDialog, {\n        open: jest.fn(() => ({\n          afterClosed: () => afterClosed$,\n        })),\n      }),\n      provideMockStore({\n        selectors: [{\n          selector: selectServices,\n          value: [cifsService],\n        }],\n      }),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createComponent();\n    loader = TestbedHarnessEnvironment.loader(spectator.fixture);\n    store$ = spectator.inject(MockStore);\n  });\n\n  it('cifs: shows a dialog and submit with Enable automatically checkbox.', async () => {\n    store$.overrideSelector(selectServices, [cifsService]);\n    store$.refreshState();\n    spectator.fixture.detectChanges();\n\n    expect(spectator.query('h1')).toHaveText('Start SMB Service');\n    expect(spectator.query('.description')).toHaveText(\n      'SMB Service is not currently running. Start the service now?',\n    );\n\n    const enableAutomaticallyCheckbox = await loader.getHarness(\n      IxSlideToggleHarness.with({ label: 'Enable this service to start automatically.' }),\n    );\n\n    expect(await enableAutomaticallyCheckbox.getValue()).toBe(true);\n\n    const startButton = await loader.getHarness(MatButtonHarness.with({ text: 'Start' }));\n    await startButton.click();\n\n    expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith('service.update', [4, { enable: true }]);\n    expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith('service.start', ['cifs', { silent: false }]);\n    expect(spectator.inject(MatDialogRef).close).toHaveBeenCalledWith({\n      start: true,\n      startAutomatically: true,\n    });\n  });\n\n  it('cifs: shows a dialog and submit without Enable automatically checkbox.', async () => {\n    store$.overrideSelector(selectServices, [cifsService]);\n    store$.refreshState();\n    spectator.fixture.detectChanges();\n\n    expect(spectator.query('h1')).toHaveText('Start SMB Service');\n    expect(spectator.query('.description')).toHaveText(\n      'SMB Service is not currently running. Start the service now?',\n    );\n\n    const enableAutomaticallyCheckbox = await loader.getHarness(\n      IxSlideToggleHarness.with({ label: 'Enable this service to start automatically.' }),\n    );\n    await enableAutomaticallyCheckbox.setValue(false);\n\n    const startButton = await loader.getHarness(MatButtonHarness.with({ text: 'Start' }));\n    await startButton.click();\n\n    expect(spectator.inject(WebSocketService).call).not.toHaveBeenCalledWith('service.update', [4, { enable: true }]);\n    expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith('service.start', ['cifs', { silent: false }]);\n    expect(spectator.inject(MatDialogRef).close).toHaveBeenCalledWith({\n      start: true,\n      startAutomatically: false,\n    });\n  });\n\n  it('returns false result when No is pressed', async () => {\n    const noButton = await loader.getHarness(MatButtonHarness.with({ text: 'No' }));\n    await noButton.click();\n\n    expect(spectator.inject(WebSocketService).call).not.toHaveBeenCalled();\n    expect(spectator.inject(MatDialogRef).close).toHaveBeenCalledWith({\n      start: false,\n      startAutomatically: false,\n    });\n  });\n});\n"],"version":3}