159f08eec99d2aca752a885dd46acfa1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorDialogComponent = void 0;
const scrolling_1 = require("@angular/cdk/scrolling");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const copy_button_component_1 = require("app/modules/buttons/copy-button/copy-button.component");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
const download_service_1 = require("app/services/download.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let ErrorDialogComponent = class ErrorDialogComponent {
    constructor(dialogRef, ws, download, errorHandler, dialogService) {
        this.dialogRef = dialogRef;
        this.ws = ws;
        this.download = download;
        this.errorHandler = errorHandler;
        this.dialogService = dialogService;
        this.isCloseMoreInfo = true;
    }
    toggleOpen() {
        this.isCloseMoreInfo = !this.isCloseMoreInfo;
    }
    downloadLogs() {
        this.ws.call('core.job_download_logs', [this.logs.id, `${this.logs.id}.log`]).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (url) => {
                const mimetype = 'text/plain';
                this.download.streamDownloadFile(url, `${this.logs.id}.log`, mimetype).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
                    next: (file) => {
                        this.download.downloadBlob(file, `${this.logs.id}.log`);
                        if (this.dialogRef) {
                            this.dialogRef.close();
                        }
                    },
                    error: (err) => {
                        if (this.dialogRef) {
                            this.dialogRef.close();
                        }
                        this.dialogService.error(this.errorHandler.parseHttpError(err));
                    },
                });
            },
            error: (err) => {
                this.dialogService.error(this.errorHandler.parseError(err));
            },
        });
    }
};
exports.ErrorDialogComponent = ErrorDialogComponent;
ErrorDialogComponent.ctorParameters = () => [
    { type: dialog_1.MatDialogRef },
    { type: ws_service_1.WebSocketService },
    { type: download_service_1.DownloadService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_service_1.DialogService }
];
ErrorDialogComponent.propDecorators = {
    errorMessageWrapper: [{ type: core_1.ViewChild, args: ['errorMessageWrapper',] }],
    errorTitle: [{ type: core_1.ViewChild, args: ['errorTitle',] }],
    errorMdContent: [{ type: core_1.ViewChild, args: ['errorMdContent',] }],
    errorBtPanel: [{ type: core_1.ViewChild, args: ['errorBtPanel',] }],
    errorBtText: [{ type: core_1.ViewChild, args: ['errorBtText',] }]
};
exports.ErrorDialogComponent = ErrorDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-error-dialog',
        template: require("./error-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            ix_icon_component_1.IxIconComponent,
            scrolling_1.CdkScrollable,
            dialog_1.MatDialogContent,
            copy_button_component_1.CopyButtonComponent,
            dialog_1.MatDialogActions,
            button_1.MatButton,
            core_2.TranslateModule,
            test_directive_1.TestDirective,
        ],
    })
], ErrorDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZGlhbG9nL2NvbXBvbmVudHMvZXJyb3ItZGlhbG9nL2Vycm9yLWRpYWxvZy5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsc0RBQXVEO0FBRXZELHdDQUV1QjtBQUN2QixxREFBcUQ7QUFDckQscURBRWtDO0FBQ2xDLHlEQUFxRTtBQUNyRSw4Q0FBc0Q7QUFFdEQsaUdBQTRGO0FBQzVGLHNFQUFrRTtBQUNsRSw2RUFBd0U7QUFDeEUsdUVBQW1FO0FBQ25FLG9FQUFnRTtBQUNoRSw4RUFBeUU7QUFDekUsd0RBQTJEO0FBcUJwRCxJQUFNLG9CQUFvQixHQUExQixNQUFNLG9CQUFvQjtJQWEvQixZQUNTLFNBQTZDLEVBQzVDLEVBQW9CLEVBQ3BCLFFBQXlCLEVBQ3pCLFlBQWlDLEVBQ2pDLGFBQTRCO1FBSjdCLGNBQVMsR0FBVCxTQUFTLENBQW9DO1FBQzVDLE9BQUUsR0FBRixFQUFFLENBQWtCO1FBQ3BCLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3pCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNqQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVJ0QyxvQkFBZSxHQUFHLElBQUksQ0FBQztJQVNwQixDQUFDO0lBRUosVUFBVTtRQUNSLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQy9DLENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFBLDhCQUFjLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDakgsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ1osTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDO2dCQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUEsOEJBQWMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztvQkFDMUcsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7d0JBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO3dCQUN4RCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs0QkFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDekIsQ0FBQztvQkFDSCxDQUFDO29CQUNELEtBQUssRUFBRSxDQUFDLEdBQXNCLEVBQUUsRUFBRTt3QkFDaEMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7NEJBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQ3pCLENBQUM7d0JBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDbEUsQ0FBQztpQkFDRixDQUFDLENBQUM7WUFDTCxDQUFDO1lBQ0QsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM5RCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFoRFUsb0RBQW9COzs7Ozs7Ozs7a0NBQzlCLGdCQUFTLFNBQUMscUJBQXFCO3lCQUMvQixnQkFBUyxTQUFDLFlBQVk7NkJBQ3RCLGdCQUFTLFNBQUMsZ0JBQWdCOzJCQUMxQixnQkFBUyxTQUFDLGNBQWM7MEJBQ3hCLGdCQUFTLFNBQUMsYUFBYTs7K0JBTGIsb0JBQW9CO0lBbkJoQyxJQUFBLDRCQUFZLEdBQUU7SUFDZCxJQUFBLGdCQUFTLEVBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLGtEQUE0QztRQUU1QyxlQUFlLEVBQUUsOEJBQXVCLENBQUMsTUFBTTtRQUMvQyxVQUFVLEVBQUUsSUFBSTtRQUNoQixPQUFPLEVBQUU7WUFDUCx1QkFBYztZQUNkLG1DQUFlO1lBQ2YseUJBQWE7WUFDYix5QkFBZ0I7WUFDaEIsMkNBQW1CO1lBQ25CLHlCQUFnQjtZQUNoQixrQkFBUztZQUNULHNCQUFlO1lBQ2YsOEJBQWE7U0FDZDtLQUNGLENBQUM7R0FDVyxvQkFBb0IsQ0FpRGhDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2RpYWxvZy9jb21wb25lbnRzL2Vycm9yLWRpYWxvZy9lcnJvci1kaWFsb2cuY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENka1Njcm9sbGFibGUgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdEJ1dHRvbiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQge1xuICBNYXREaWFsb2dSZWYsIE1hdERpYWxvZ1RpdGxlLCBNYXREaWFsb2dDb250ZW50LCBNYXREaWFsb2dBY3Rpb25zLFxufSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IEpvYiB9IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2pvYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29weUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJ2FwcC9tb2R1bGVzL2J1dHRvbnMvY29weS1idXR0b24vY29weS1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdhcHAvbW9kdWxlcy9kaWFsb2cvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgSXhJY29uQ29tcG9uZW50IH0gZnJvbSAnYXBwL21vZHVsZXMvaXgtaWNvbi9peC1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUZXN0RGlyZWN0aXZlIH0gZnJvbSAnYXBwL21vZHVsZXMvdGVzdC1pZC90ZXN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEb3dubG9hZFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvZG93bmxvYWQuc2VydmljZSc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL2Vycm9yLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dzLnNlcnZpY2UnO1xuXG5AVW50aWxEZXN0cm95KClcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LWVycm9yLWRpYWxvZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9lcnJvci1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9lcnJvci1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBNYXREaWFsb2dUaXRsZSxcbiAgICBJeEljb25Db21wb25lbnQsXG4gICAgQ2RrU2Nyb2xsYWJsZSxcbiAgICBNYXREaWFsb2dDb250ZW50LFxuICAgIENvcHlCdXR0b25Db21wb25lbnQsXG4gICAgTWF0RGlhbG9nQWN0aW9ucyxcbiAgICBNYXRCdXR0b24sXG4gICAgVHJhbnNsYXRlTW9kdWxlLFxuICAgIFRlc3REaXJlY3RpdmUsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEVycm9yRGlhbG9nQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgnZXJyb3JNZXNzYWdlV3JhcHBlcicpIGVycm9yTWVzc2FnZVdyYXBwZXI6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2Vycm9yVGl0bGUnKSBlcnJvclRpdGxlOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdlcnJvck1kQ29udGVudCcpIGVycm9yTWRDb250ZW50OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdlcnJvckJ0UGFuZWwnKSBlcnJvckJ0UGFuZWw6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2Vycm9yQnRUZXh0JykgZXJyb3JCdFRleHQ6IEVsZW1lbnRSZWY7XG5cbiAgdGl0bGU6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBiYWNrdHJhY2U6IHN0cmluZztcbiAgaXNDbG9zZU1vcmVJbmZvID0gdHJ1ZTtcbiAgbG9nczogSm9iO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxFcnJvckRpYWxvZ0NvbXBvbmVudD4sXG4gICAgcHJpdmF0ZSB3czogV2ViU29ja2V0U2VydmljZSxcbiAgICBwcml2YXRlIGRvd25sb2FkOiBEb3dubG9hZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlLFxuICApIHt9XG5cbiAgdG9nZ2xlT3BlbigpOiB2b2lkIHtcbiAgICB0aGlzLmlzQ2xvc2VNb3JlSW5mbyA9ICF0aGlzLmlzQ2xvc2VNb3JlSW5mbztcbiAgfVxuXG4gIGRvd25sb2FkTG9ncygpOiB2b2lkIHtcbiAgICB0aGlzLndzLmNhbGwoJ2NvcmUuam9iX2Rvd25sb2FkX2xvZ3MnLCBbdGhpcy5sb2dzLmlkLCBgJHt0aGlzLmxvZ3MuaWR9LmxvZ2BdKS5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKHVybCkgPT4ge1xuICAgICAgICBjb25zdCBtaW1ldHlwZSA9ICd0ZXh0L3BsYWluJztcbiAgICAgICAgdGhpcy5kb3dubG9hZC5zdHJlYW1Eb3dubG9hZEZpbGUodXJsLCBgJHt0aGlzLmxvZ3MuaWR9LmxvZ2AsIG1pbWV0eXBlKS5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IChmaWxlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvd25sb2FkLmRvd25sb2FkQmxvYihmaWxlLCBgJHt0aGlzLmxvZ3MuaWR9LmxvZ2ApO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlhbG9nUmVmKSB7XG4gICAgICAgICAgICAgIHRoaXMuZGlhbG9nUmVmLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogKGVycjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpYWxvZ1JlZikge1xuICAgICAgICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaWFsb2dTZXJ2aWNlLmVycm9yKHRoaXMuZXJyb3JIYW5kbGVyLnBhcnNlSHR0cEVycm9yKGVycikpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiAoZXJyKSA9PiB7XG4gICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5lcnJvcih0aGlzLmVycm9ySGFuZGxlci5wYXJzZUVycm9yKGVycikpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9