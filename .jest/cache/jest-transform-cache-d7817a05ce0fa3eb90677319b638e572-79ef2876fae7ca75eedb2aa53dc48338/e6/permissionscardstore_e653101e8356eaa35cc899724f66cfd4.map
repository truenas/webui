{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/modules/permissions/stores/permissions-card.store.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,2DAAuD;AACvD,+BAAmD;AACnD,8CAEwB;AACxB,sEAAkE;AAIlE,8EAAyE;AACzE,wDAA2D;AAE3D,MAAM,YAAY,GAAyB;IACzC,SAAS,EAAE,KAAK;IAChB,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,IAAI;CACX,CAAC;AAGK,IAAM,oBAAoB,GAA1B,MAAM,oBAAqB,SAAQ,gCAAoC;IAC5E,YACU,EAAoB,EACpB,YAAiC,EACjC,aAA4B;QAEpC,KAAK,CAAC,YAAY,CAAC,CAAC;QAJZ,OAAE,GAAF,EAAE,CAAkB;QACpB,iBAAY,GAAZ,YAAY,CAAqB;QACjC,kBAAa,GAAb,aAAa,CAAe;QAK7B,oBAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,YAAgC,EAAE,EAAE;YAC1E,OAAO,YAAY,CAAC,IAAI,CACtB,IAAA,eAAG,EAAC,GAAG,EAAE;gBACP,IAAI,CAAC,QAAQ,iCACR,YAAY,KACf,SAAS,EAAE,IAAI,IACf,CAAC;YACL,CAAC,CAAC,EACF,IAAA,qBAAS,EAAC,CAAC,UAAU,EAAE,EAAE;gBACvB,OAAO,IAAA,eAAQ,EAAC;oBACd,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,UAAU,CAAC,CAAC;oBAC7C,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;iBAC5D,CAAC,CAAC,IAAI,CACL,IAAA,eAAG,EAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE;oBAClB,IAAI,CAAC,UAAU,CAAC;wBACd,IAAI;wBACJ,GAAG;wBACH,SAAS,EAAE,KAAK;qBACjB,CAAC,CAAC;gBACL,CAAC,CAAC,EACF,IAAA,sBAAU,EAAC,CAAC,KAAc,EAAE,EAAE;oBAC5B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBAE9D,IAAI,CAAC,UAAU,CAAC;wBACd,SAAS,EAAE,KAAK;qBACjB,CAAC,CAAC;oBAEH,OAAO,YAAK,CAAC;gBACf,CAAC,CAAC,CACH,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IAlCH,CAAC;;AAPU,oDAAoB;;;;;;+BAApB,oBAAoB;IADhC,IAAA,iBAAU,GAAE;GACA,oBAAoB,CA0ChC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/modules/permissions/stores/permissions-card.store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { EMPTY, forkJoin, Observable } from 'rxjs';\nimport {\n  catchError, switchMap, tap,\n} from 'rxjs/operators';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport {\n  PermissionsCardState,\n} from 'app/pages/datasets/modules/permissions/interfaces/permissions-sidebar-state.interface';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\nconst initialState: PermissionsCardState = {\n  isLoading: false,\n  acl: null,\n  stat: null,\n};\n\n@Injectable()\nexport class PermissionsCardStore extends ComponentStore<PermissionsCardState> {\n  constructor(\n    private ws: WebSocketService,\n    private errorHandler: ErrorHandlerService,\n    private dialogService: DialogService,\n  ) {\n    super(initialState);\n  }\n\n  readonly loadPermissions = this.effect((mountpoints$: Observable<string>) => {\n    return mountpoints$.pipe(\n      tap(() => {\n        this.setState({\n          ...initialState,\n          isLoading: true,\n        });\n      }),\n      switchMap((mountpoint) => {\n        return forkJoin([\n          this.ws.call('filesystem.stat', [mountpoint]),\n          this.ws.call('filesystem.getacl', [mountpoint, true, true]),\n        ]).pipe(\n          tap(([stat, acl]) => {\n            this.patchState({\n              stat,\n              acl,\n              isLoading: false,\n            });\n          }),\n          catchError((error: unknown) => {\n            this.dialogService.error(this.errorHandler.parseError(error));\n\n            this.patchState({\n              isLoading: false,\n            });\n\n            return EMPTY;\n          }),\n        );\n      }),\n    );\n  });\n}\n"],"version":3}