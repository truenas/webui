a36a2f7c1dd3da861058a57ddfc93136
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const dialog_1 = require("@angular/material/dialog");
const jest_1 = require("@ngneat/spectator/jest");
const testing_2 = require("@ngrx/store/testing");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const service_name_enum_1 = require("app/enums/service-name.enum");
const service_status_enum_1 = require("app/enums/service-status.enum");
const start_service_dialog_component_1 = require("app/modules/dialog/components/start-service-dialog/start-service-dialog.component");
const ix_slide_toggle_harness_1 = require("app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.harness");
const ws_service_1 = require("app/services/ws.service");
const services_selectors_1 = require("app/store/services/services.selectors");
const cifsService = {
    id: 4,
    service: service_name_enum_1.ServiceName.Cifs,
    state: service_status_enum_1.ServiceStatus.Stopped,
    enable: false,
};
describe('StartServiceDialogComponent', () => {
    let spectator;
    let loader;
    let store$;
    const afterClosed$ = new rxjs_1.Subject();
    const createComponent = (0, jest_1.createComponentFactory)({
        component: start_service_dialog_component_1.StartServiceDialogComponent,
        imports: [
            forms_1.ReactiveFormsModule,
        ],
        providers: [
            (0, mock_auth_utils_1.mockAuth)(),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('service.update'),
                (0, mock_websocket_utils_1.mockCall)('service.start'),
            ]),
            {
                provide: dialog_1.MAT_DIALOG_DATA,
                useValue: service_name_enum_1.ServiceName.Cifs,
            },
            (0, jest_1.mockProvider)(dialog_1.MatDialogRef, {
                afterClosed: () => afterClosed$,
            }),
            (0, jest_1.mockProvider)(dialog_1.MatDialog, {
                open: jest.fn(() => ({
                    afterClosed: () => afterClosed$,
                })),
            }),
            (0, testing_2.provideMockStore)({
                selectors: [{
                        selector: services_selectors_1.selectServices,
                        value: [cifsService],
                    }],
            }),
        ],
    });
    beforeEach(() => {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        store$ = spectator.inject(testing_2.MockStore);
    });
    it('cifs: shows a dialog and submit with Enable automatically checkbox.', () => __awaiter(void 0, void 0, void 0, function* () {
        store$.overrideSelector(services_selectors_1.selectServices, [cifsService]);
        store$.refreshState();
        spectator.fixture.detectChanges();
        expect(spectator.query('h1')).toHaveText('Start SMB Service');
        expect(spectator.query('.description')).toHaveText('SMB Service is not currently running. Start the service now?');
        const enableAutomaticallyCheckbox = yield loader.getHarness(ix_slide_toggle_harness_1.IxSlideToggleHarness.with({ label: 'Enable this service to start automatically.' }));
        expect(yield enableAutomaticallyCheckbox.getValue()).toBe(true);
        const startButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Start' }));
        yield startButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('service.update', [4, { enable: true }]);
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('service.start', ['cifs', { silent: false }]);
        expect(spectator.inject(dialog_1.MatDialogRef).close).toHaveBeenCalledWith({
            start: true,
            startAutomatically: true,
        });
    }));
    it('cifs: shows a dialog and submit without Enable automatically checkbox.', () => __awaiter(void 0, void 0, void 0, function* () {
        store$.overrideSelector(services_selectors_1.selectServices, [cifsService]);
        store$.refreshState();
        spectator.fixture.detectChanges();
        expect(spectator.query('h1')).toHaveText('Start SMB Service');
        expect(spectator.query('.description')).toHaveText('SMB Service is not currently running. Start the service now?');
        const enableAutomaticallyCheckbox = yield loader.getHarness(ix_slide_toggle_harness_1.IxSlideToggleHarness.with({ label: 'Enable this service to start automatically.' }));
        yield enableAutomaticallyCheckbox.setValue(false);
        const startButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Start' }));
        yield startButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).call).not.toHaveBeenCalledWith('service.update', [4, { enable: true }]);
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('service.start', ['cifs', { silent: false }]);
        expect(spectator.inject(dialog_1.MatDialogRef).close).toHaveBeenCalledWith({
            start: true,
            startAutomatically: false,
        });
    }));
    it('returns false result when No is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const noButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'No' }));
        yield noButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).call).not.toHaveBeenCalled();
        expect(spectator.inject(dialog_1.MatDialogRef).close).toHaveBeenCalledWith({
            start: false,
            startAutomatically: false,
        });
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,