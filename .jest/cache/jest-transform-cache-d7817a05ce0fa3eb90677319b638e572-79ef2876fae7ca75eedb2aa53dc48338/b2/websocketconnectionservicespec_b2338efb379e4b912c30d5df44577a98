e1fefae5c5dc6213c47969af3ae85d83
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const jest_1 = require("@ngneat/spectator/jest");
const angular2_uuid_1 = require("angular2-uuid");
const webSocket_1 = require("rxjs/webSocket");
const api_message_type_enum_1 = require("app/enums/api-message-type.enum");
const websocket_helper_1 = require("app/helpers/websocket.helper");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const fakeSocketUrl = 'ws://localhost:1234';
let fakeSocketConfig;
let fakeSocketsList;
function fakeSocket(urlConfigOrSource) {
    urlConfigOrSource.url = fakeSocketUrl;
    fakeSocketConfig = urlConfigOrSource;
    const fakeSocket$ = new webSocket_1.WebSocketSubject(urlConfigOrSource);
    fakeSocketsList.push(fakeSocket$);
    return fakeSocket$;
}
describe('WebSocketConnectionService', () => {
    let spectator;
    let nextFakeSocket$;
    const createService = (0, jest_1.createServiceFactory)({
        service: websocket_connection_service_1.WebSocketConnectionService,
        providers: [
            {
                provide: websocket_helper_1.WEBSOCKET,
                useFactory: () => fakeSocket,
            },
        ],
    });
    beforeEach(() => {
        fakeSocketsList = [];
        spectator = createService();
        if (fakeSocketsList.length) {
            nextFakeSocket$ = fakeSocketsList[fakeSocketsList.length - 1];
        }
    });
    it('checks socket config params', () => {
        expect(fakeSocketConfig.url).toBe(fakeSocketUrl);
        expect(typeof fakeSocketConfig.openObserver.next).toBe('function');
        expect(fakeSocketConfig.openObserver.next.name).toContain('onOpen');
        expect(typeof fakeSocketConfig.closeObserver.next).toBe('function');
        expect(fakeSocketConfig.closeObserver.next.name).toContain('onClose');
    });
    it('sets shutDownInProgress to false when open connection', () => {
        spectator.service.shutDownInProgress = true;
        expect(spectator.service.shutDownInProgress).toBe(true);
        fakeSocketConfig.openObserver.next({});
        expect(spectator.service.shutDownInProgress).toBe(false);
    });
    it('sends connect message', () => {
        jest.spyOn(nextFakeSocket$, 'next');
        fakeSocketConfig.openObserver.next({});
        expect(nextFakeSocket$.next).toHaveBeenCalledWith({ support: ['1'], version: '1', msg: api_message_type_enum_1.OutgoingApiMessageType.Connect });
    });
    it('closes connection when isTryingReconnect is true', () => {
        jest.spyOn(nextFakeSocket$, 'next');
        jest.spyOn(nextFakeSocket$, 'complete');
        spectator.service.isTryingReconnect = true;
        spectator.service.shutDownInProgress = true;
        fakeSocketConfig.openObserver.next({});
        expect(spectator.service.shutDownInProgress).toBe(true);
        expect(nextFakeSocket$.next).not.toHaveBeenCalled();
        expect(nextFakeSocket$.complete).toHaveBeenCalled();
    });
    it('sends pings', (0, testing_1.fakeAsync)(() => {
        jest.spyOn(nextFakeSocket$, 'next');
        jest.spyOn(angular2_uuid_1.UUID, 'UUID')
            .mockReturnValueOnce('ping-pong-uuid-1')
            .mockReturnValueOnce('ping-pong-uuid-2')
            .mockReturnValueOnce('ping-pong-uuid-3');
        spectator.service.isConnected$.next(true);
        (0, testing_1.tick)(20 * 1000);
        expect(nextFakeSocket$.next).toHaveBeenNthCalledWith(1, { id: 'ping-pong-uuid-1', msg: api_message_type_enum_1.OutgoingApiMessageType.Ping });
        expect(nextFakeSocket$.next).toHaveBeenCalledTimes(1);
        (0, testing_1.tick)(20 * 1000);
        expect(nextFakeSocket$.next).toHaveBeenNthCalledWith(2, { id: 'ping-pong-uuid-2', msg: api_message_type_enum_1.OutgoingApiMessageType.Ping });
        expect(nextFakeSocket$.next).toHaveBeenCalledTimes(2);
        (0, testing_1.tick)(20 * 1000);
        expect(nextFakeSocket$.next).toHaveBeenNthCalledWith(3, { id: 'ping-pong-uuid-3', msg: api_message_type_enum_1.OutgoingApiMessageType.Ping });
        expect(nextFakeSocket$.next).toHaveBeenCalledTimes(3);
        spectator.service.isConnected$.next(false);
        (0, testing_1.tick)(20 * 1000);
        expect(nextFakeSocket$.next).toHaveBeenCalledTimes(3);
        (0, testing_1.discardPeriodicTasks)();
    }));
    it('resumes calls that were paused because of broken connection', () => {
        jest.spyOn(nextFakeSocket$, 'next');
        spectator.service.isConnected$.next(true);
        spectator.service.send('message-1');
        spectator.service.isConnected$.next(false);
        spectator.service.send('message-2');
        spectator.service.send('message-3');
        expect(nextFakeSocket$.next).toHaveBeenCalledWith('message-1');
        expect(nextFakeSocket$.next).not.toHaveBeenCalledWith('message-2');
        expect(nextFakeSocket$.next).not.toHaveBeenCalledWith('message-3');
        spectator.service.isConnected$.next(true);
        expect(nextFakeSocket$.next).toHaveBeenCalledWith('message-2');
        expect(nextFakeSocket$.next).toHaveBeenCalledWith('message-3');
    });
    it('sets isClosed when close connection and isTryingReconnect is false', () => {
        fakeSocketConfig.openObserver.next({});
        spectator.service.isConnected$.next(true);
        fakeSocketConfig.closeObserver.next({ code: 1006 });
        let isClosed;
        spectator.service.isClosed$.subscribe((value) => isClosed = value);
        expect(isClosed).toBe(true);
    });
    it('sets isAccessRestricted when close connection with code 1008', () => {
        fakeSocketConfig.openObserver.next({});
        spectator.service.isConnected$.next(true);
        fakeSocketConfig.closeObserver.next({ code: 1008 });
        let isAccessRestricted;
        spectator.service.isAccessRestricted$.subscribe((value) => isAccessRestricted = value);
        expect(isAccessRestricted).toBe(true);
    });
    it('trying to reconnect when close connection and isTryingReconnect is false', (0, testing_1.fakeAsync)(() => {
        jest.spyOn(fakeSocketsList[0], 'complete');
        fakeSocketConfig.openObserver.next({});
        spectator.service.isConnected$.next(true);
        fakeSocketConfig.closeObserver.next({ code: 1006 });
        expect(spectator.service.isTryingReconnect).toBe(true);
        expect(fakeSocketsList).toHaveLength(1);
        (0, testing_1.tick)(5 * 1000);
        expect(spectator.service.isTryingReconnect).toBe(false);
        expect(fakeSocketsList).toHaveLength(2);
        expect(fakeSocketsList[0].complete).toHaveBeenCalled();
        (0, testing_1.discardPeriodicTasks)();
    }));
    it('ignores closing when close connection and isTryingReconnect is true', (0, testing_1.fakeAsync)(() => {
        jest.spyOn(fakeSocketsList[0], 'complete');
        fakeSocketConfig.openObserver.next({});
        spectator.service.isConnected$.next(true);
        spectator.service.isTryingReconnect = true;
        fakeSocketConfig.closeObserver.next({ code: 1006 });
        (0, testing_1.tick)(5 * 1000);
        expect(fakeSocketsList).toHaveLength(1);
        expect(fakeSocketsList[0].complete).not.toHaveBeenCalled();
        let isClosed;
        spectator.service.isClosed$.subscribe((value) => isClosed = value);
        expect(isClosed).toBe(false);
        (0, testing_1.discardPeriodicTasks)();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,