94ed921b85c2b3153c8c560ee60de3fe
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxButtonGroupHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/button-toggle/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxButtonGroupHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getButtonToggleGroupHarness = this.locatorFor(testing_2.MatButtonToggleGroupHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxButtonGroupHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const buttons = yield (yield this.getButtonToggleGroupHarness()).getToggles({ checked: true });
            return (_a = buttons[0]) === null || _a === void 0 ? void 0 : _a.getText();
        });
    }
    setValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const buttons = yield (yield this.getButtonToggleGroupHarness()).getToggles({ text: value });
            if (!buttons.length) {
                throw new Error(`No button with text "${value}" found`);
            }
            return buttons[0].check();
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getButtonToggleGroupHarness()).isDisabled();
        });
    }
    getOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const buttons = yield (yield this.getButtonToggleGroupHarness()).getToggles();
            return Promise.all(buttons.map((button) => button.getText()));
        });
    }
}
exports.IxButtonGroupHarness = IxButtonGroupHarness;
IxButtonGroupHarness.hostSelector = 'ix-button-group';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1idXR0b24tZ3JvdXAvaXgtYnV0dG9uLWdyb3VwLmhhcm5lc3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsa0RBRThCO0FBQzlCLHFFQUFzRjtBQUN0RixzR0FBaUc7QUFFakcsa0ZBQThFO0FBTTlFLE1BQWEsb0JBQXFCLFNBQVEsMEJBQWdCO0lBQTFEOztRQVlFLGdDQUEyQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMscUNBQTJCLENBQUMsQ0FBQztRQUMzRSxpQkFBWSxHQUFHLDRCQUFZLENBQUM7SUFnQzlCLENBQUM7SUExQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFvQztRQUM5QyxPQUFPLElBQUksMEJBQWdCLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDO2FBQ3ZELFNBQVMsQ0FDUixPQUFPLEVBQ1AsT0FBTyxDQUFDLEtBQUssRUFDYixDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLDBCQUFnQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQ2xGLENBQUM7SUFDTixDQUFDO0lBS0ssWUFBWTs7WUFDaEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUNBQWMsQ0FBQyxFQUFFLENBQUM7WUFDOUQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNYLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQztZQUNELE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFCLENBQUM7S0FBQTtJQUVLLFFBQVE7OztZQUNaLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDL0YsT0FBTyxNQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsMENBQUUsT0FBTyxFQUFFLENBQUM7UUFDL0IsQ0FBQztLQUFBO0lBRUssUUFBUSxDQUFDLEtBQWE7O1lBQzFCLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDN0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsS0FBSyxTQUFTLENBQUMsQ0FBQztZQUMxRCxDQUFDO1lBRUQsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUIsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2pFLENBQUM7S0FBQTtJQUVLLFVBQVU7O1lBQ2QsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUM5RSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRSxDQUFDO0tBQUE7O0FBNUNILG9EQTZDQztBQTVDUSxpQ0FBWSxHQUFHLGlCQUFpQixBQUFwQixDQUFxQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWJ1dHRvbi1ncm91cC9peC1idXR0b24tZ3JvdXAuaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYXNlSGFybmVzc0ZpbHRlcnMsIENvbXBvbmVudEhhcm5lc3MsIEhhcm5lc3NQcmVkaWNhdGUsXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IE1hdEJ1dHRvblRvZ2dsZUdyb3VwSGFybmVzcyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbi10b2dnbGUvdGVzdGluZyc7XG5pbXBvcnQgeyBJeExhYmVsSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtbGFiZWwvaXgtbGFiZWwuaGFybmVzcyc7XG5pbXBvcnQgeyBJeEZvcm1Db250cm9sSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2ludGVyZmFjZXMvaXgtZm9ybS1jb250cm9sLWhhcm5lc3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldEVycm9yVGV4dCB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL3V0aWxzL2hhcm5lc3MudXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEl4QnV0dG9uR3JvdXBIYXJuZXNzRmlsdGVycyBleHRlbmRzIEJhc2VIYXJuZXNzRmlsdGVycyB7XG4gIGxhYmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhCdXR0b25Hcm91cEhhcm5lc3MgZXh0ZW5kcyBDb21wb25lbnRIYXJuZXNzIGltcGxlbWVudHMgSXhGb3JtQ29udHJvbEhhcm5lc3Mge1xuICBzdGF0aWMgaG9zdFNlbGVjdG9yID0gJ2l4LWJ1dHRvbi1ncm91cCc7XG5cbiAgc3RhdGljIHdpdGgob3B0aW9uczogSXhCdXR0b25Hcm91cEhhcm5lc3NGaWx0ZXJzKTogSGFybmVzc1ByZWRpY2F0ZTxJeEJ1dHRvbkdyb3VwSGFybmVzcz4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZShJeEJ1dHRvbkdyb3VwSGFybmVzcywgb3B0aW9ucylcbiAgICAgIC5hZGRPcHRpb24oXG4gICAgICAgICdsYWJlbCcsXG4gICAgICAgIG9wdGlvbnMubGFiZWwsXG4gICAgICAgIChoYXJuZXNzLCBsYWJlbCkgPT4gSGFybmVzc1ByZWRpY2F0ZS5zdHJpbmdNYXRjaGVzKGhhcm5lc3MuZ2V0TGFiZWxUZXh0KCksIGxhYmVsKSxcbiAgICAgICk7XG4gIH1cblxuICBnZXRCdXR0b25Ub2dnbGVHcm91cEhhcm5lc3MgPSB0aGlzLmxvY2F0b3JGb3IoTWF0QnV0dG9uVG9nZ2xlR3JvdXBIYXJuZXNzKTtcbiAgZ2V0RXJyb3JUZXh0ID0gZ2V0RXJyb3JUZXh0O1xuXG4gIGFzeW5jIGdldExhYmVsVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGxhYmVsID0gYXdhaXQgdGhpcy5sb2NhdG9yRm9yT3B0aW9uYWwoSXhMYWJlbEhhcm5lc3MpKCk7XG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWwuZ2V0TGFiZWwoKTtcbiAgfVxuXG4gIGFzeW5jIGdldFZhbHVlKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgYnV0dG9ucyA9IGF3YWl0IChhd2FpdCB0aGlzLmdldEJ1dHRvblRvZ2dsZUdyb3VwSGFybmVzcygpKS5nZXRUb2dnbGVzKHsgY2hlY2tlZDogdHJ1ZSB9KTtcbiAgICByZXR1cm4gYnV0dG9uc1swXT8uZ2V0VGV4dCgpO1xuICB9XG5cbiAgYXN5bmMgc2V0VmFsdWUodmFsdWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBhd2FpdCAoYXdhaXQgdGhpcy5nZXRCdXR0b25Ub2dnbGVHcm91cEhhcm5lc3MoKSkuZ2V0VG9nZ2xlcyh7IHRleHQ6IHZhbHVlIH0pO1xuICAgIGlmICghYnV0dG9ucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gYnV0dG9uIHdpdGggdGV4dCBcIiR7dmFsdWV9XCIgZm91bmRgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnV0dG9uc1swXS5jaGVjaygpO1xuICB9XG5cbiAgYXN5bmMgaXNEaXNhYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0QnV0dG9uVG9nZ2xlR3JvdXBIYXJuZXNzKCkpLmlzRGlzYWJsZWQoKTtcbiAgfVxuXG4gIGFzeW5jIGdldE9wdGlvbnMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBhd2FpdCAoYXdhaXQgdGhpcy5nZXRCdXR0b25Ub2dnbGVHcm91cEhhcm5lc3MoKSkuZ2V0VG9nZ2xlcygpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChidXR0b25zLm1hcCgoYnV0dG9uKSA9PiBidXR0b24uZ2V0VGV4dCgpKSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==