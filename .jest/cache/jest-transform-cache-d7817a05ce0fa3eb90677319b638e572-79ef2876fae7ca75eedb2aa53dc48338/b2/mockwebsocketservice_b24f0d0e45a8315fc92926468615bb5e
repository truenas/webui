4093e2d501aa8523c7ad20425f85b3f6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockWebSocketService = void 0;
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const core_2 = require("@ngx-translate/core");
const jest_when_1 = require("jest-when");
const rxjs_1 = require("rxjs");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const ws_service_1 = require("app/services/ws.service");
/**
 * Better than just expect.anything() because it allows null and undefined.
 */
const anyArgument = (0, jest_when_1.when)((_) => true);
/**
 * MockWebSocketService can be used to update websocket mocks on the fly.
 * For initial setup prefer mockWebSocket();
 *
 * To update on the fly:
 * @example
 * ```
 * // In test case:
 * const websocketService = spectator.inject(MockWebSocketService);
 * websocketService.mockCallOnce('filesystem.stat', { gid: 5 } as FileSystemStat);
 * ```
 */
let MockWebSocketService = class MockWebSocketService extends ws_service_1.WebSocketService {
    constructor(router, wsManager, translate) {
        super(router, wsManager, translate);
        this.router = router;
        this.wsManager = wsManager;
        this.translate = translate;
        this.subscribeStream$ = new rxjs_1.Subject();
        this.jobIdCounter = 1;
        this.call = jest.fn();
        this.job = jest.fn();
        this.startJob = jest.fn();
        this.subscribe = jest.fn(() => this.subscribeStream$.asObservable());
        this.callAndSubscribe = jest.fn();
        (0, jest_when_1.when)(this.call).mockImplementation((method, args) => {
            throw Error(`Unmocked websocket call ${method} with ${JSON.stringify(args)}`);
        });
        (0, jest_when_1.when)(this.callAndSubscribe).mockImplementation((method, args) => {
            throw Error(`Unmocked websocket callAndSubscribe ${method} with ${JSON.stringify(args)}`);
        });
        (0, jest_when_1.when)(this.job).mockImplementation((method, args) => {
            throw Error(`Unmocked websocket job call ${method} with ${JSON.stringify(args)}`);
        });
    }
    mockCall(method, response) {
        const mockedImplementation = (_, params) => {
            let preparedResponse = response;
            if (response instanceof Function) {
                preparedResponse = response(params);
            }
            Object.freeze(preparedResponse);
            return (0, rxjs_1.of)(preparedResponse);
        };
        (0, jest_when_1.when)(this.call).calledWith(method).mockImplementation(mockedImplementation);
        (0, jest_when_1.when)(this.call)
            .calledWith(method, anyArgument)
            .mockImplementation(mockedImplementation);
        (0, jest_when_1.when)(this.callAndSubscribe)
            .calledWith(method)
            .mockImplementation(mockedImplementation);
        (0, jest_when_1.when)(this.callAndSubscribe)
            .calledWith(method)
            .mockImplementation(mockedImplementation);
    }
    mockCallOnce(method, response) {
        (0, jest_when_1.when)(this.call)
            .calledWith(method, anyArgument)
            .mockReturnValueOnce((0, rxjs_1.of)(response));
    }
    mockJob(method, response) {
        const getJobResponse = (params = undefined) => {
            let job;
            if (response instanceof Function) {
                job = response(params);
            }
            else {
                job = response;
            }
            job = Object.assign(Object.assign({}, job), { id: this.jobIdCounter });
            Object.freeze(job);
            return job;
        };
        (0, jest_when_1.when)(this.startJob).calledWith(method).mockReturnValue((0, rxjs_1.of)(this.jobIdCounter));
        (0, jest_when_1.when)(this.startJob).calledWith(method, anyArgument).mockReturnValue((0, rxjs_1.of)(this.jobIdCounter));
        (0, jest_when_1.when)(this.job).calledWith(method).mockImplementation(() => (0, rxjs_1.of)(getJobResponse()));
        (0, jest_when_1.when)(this.job).calledWith(method, anyArgument)
            .mockImplementation((_, params) => (0, rxjs_1.of)(getJobResponse(params)));
        (0, jest_when_1.when)(this.call)
            .calledWith('core.get_jobs', [[['id', '=', this.jobIdCounter]]])
            .mockImplementation(() => (0, rxjs_1.of)([getJobResponse()]));
        this.jobIdCounter += 1;
    }
    emitSubscribeEvent(event) {
        this.subscribeStream$.next(event);
    }
};
exports.MockWebSocketService = MockWebSocketService;
MockWebSocketService.ctorParameters = () => [
    { type: router_1.Router },
    { type: websocket_connection_service_1.WebSocketConnectionService },
    { type: core_2.TranslateService }
];
exports.MockWebSocketService = MockWebSocketService = __decorate([
    (0, core_1.Injectable)()
], MockWebSocketService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,