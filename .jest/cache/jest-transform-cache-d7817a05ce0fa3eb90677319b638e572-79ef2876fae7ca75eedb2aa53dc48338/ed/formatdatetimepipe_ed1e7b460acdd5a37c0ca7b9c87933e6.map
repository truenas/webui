{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/pipes/format-date-time/format-datetime.pipe.ts","mappings":";;;;;;;;;AAAA,wCAEuB;AACvB,yDAAqE;AACrE,2CAAgD;AAChD,8CAAuD;AACvD,6CAAqC;AACrC,+BAA4C;AAC5C,6DAAyD;AACzD,6DAAmD;AACnD,mFAAsF;AAQ/E,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAI7B,YACU,QAAiB,EACjB,GAAsB,EACtB,SAA2B,EACX,MAAc;QAH9B,aAAQ,GAAR,QAAQ,CAAS;QACjB,QAAG,GAAH,GAAG,CAAmB;QACtB,cAAS,GAAT,SAAS,CAAkB;QACX,WAAM,GAAN,MAAM,CAAQ;QAPxC,eAAU,GAAG,YAAY,CAAC;QAC1B,eAAU,GAAG,UAAU,CAAC;QAQtB,IAAI,CAAC,4BAA4B,EAAE,CAAC;QACpC,IAAI,CAAC,QAAQ;aACV,IAAI,CACH,IAAA,gBAAM,EAAC,+CAAyB,CAAC,EACjC,IAAA,2BAAoB,GAAE,EACtB,IAAA,8BAAc,EAAC,IAAI,CAAC,CACrB,CAAC,SAAS,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,4BAA4B,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,4BAA4B;QAClC,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC7C,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC;gBACpC,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7D,IAAI,CAAC;oBACH,IAAI,IAAA,oBAAM,EAAC,IAAI,IAAI,EAAE,EAAE,YAAY,CAAC,EAAE,CAAC;wBACrC,IAAI,KAAK,KAAK,YAAY,EAAE,CAAC;4BAC3B,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;wBACjC,CAAC;6BAAM,CAAC;4BACN,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;wBACjC,CAAC;oBACH,CAAC;oBACD,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;gBAC1B,CAAC;gBAAC,WAAM,CAAC;oBACP,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC7C,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,KAA6B,EAAE,UAAmB,EAAE,UAAmB;QAC/E,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC/B,CAAC;QACD,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC/B,CAAC;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAChD,CAAC;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEO,cAAc,CAAC,IAAmB;QACxC,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,IAAI,CAAC;YAEvB,wGAAwG;YACxG,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;qBAC9B,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;qBACvB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;qBAClB,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;qBACnB,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;qBACjB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC1B,CAAC;YACD,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACzD,CAAC;YACD,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;gBAC5B,OAAO,IAAA,oBAAM,EAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5C,CAAC;YACD,OAAO,IAAA,oBAAM,EAAC,SAAS,EAAE,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACpE,CAAC;QAAC,WAAM,CAAC;YACP,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,0BAAW,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;;AA9EU,gDAAkB;;;;;yCAQ1B,aAAM,SAAC,sBAAM;;6BARL,kBAAkB;IAN9B,IAAA,4BAAY,GAAE;IACd,IAAA,WAAI,EAAC;QACJ,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,KAAK;QACX,UAAU,EAAE,IAAI;KACjB,CAAC;GACW,kBAAkB,CA+E9B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/pipes/format-date-time/format-datetime.pipe.ts"],"sourcesContent":["import {\n  ChangeDetectorRef, Inject, Pipe, PipeTransform,\n} from '@angular/core';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { TranslateService } from '@ngx-translate/core';\nimport { format } from 'date-fns-tz';\nimport { distinctUntilChanged } from 'rxjs';\nimport { invalidDate } from 'app/constants/invalid-date';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { localizationFormSubmitted } from 'app/store/preferences/preferences.actions';\n\n@UntilDestroy()\n@Pipe({\n  name: 'formatDateTime',\n  pure: false,\n  standalone: true,\n})\nexport class FormatDateTimePipe implements PipeTransform {\n  dateFormat = 'yyyy-MM-dd';\n  timeFormat = 'HH:mm:ss';\n\n  constructor(\n    private actions$: Actions,\n    private cdr: ChangeDetectorRef,\n    private translate: TranslateService,\n    @Inject(WINDOW) private window: Window,\n  ) {\n    this.checkFormatsFromLocalStorage();\n    this.actions$\n      .pipe(\n        ofType(localizationFormSubmitted),\n        distinctUntilChanged(),\n        untilDestroyed(this),\n      ).subscribe(() => {\n        this.checkFormatsFromLocalStorage();\n      });\n  }\n\n  private checkFormatsFromLocalStorage(): void {\n    ['dateFormat', 'timeFormat'].forEach((value) => {\n      if (this.window.localStorage[value]) {\n        const storedFormat = this.window.localStorage.getItem(value);\n        try {\n          if (format(new Date(), storedFormat)) {\n            if (value === 'dateFormat') {\n              this.dateFormat = storedFormat;\n            } else {\n              this.timeFormat = storedFormat;\n            }\n          }\n          this.cdr.markForCheck();\n        } catch {\n          this.window.localStorage.removeItem(value);\n        }\n      }\n    });\n  }\n\n  transform(value: Date | number | string, dateFormat?: string, timeFormat?: string): string {\n    if (dateFormat) {\n      this.dateFormat = dateFormat;\n    }\n    if (timeFormat) {\n      this.timeFormat = timeFormat;\n    }\n    if (typeof value === 'string') {\n      return this.formatDateTime(Date.parse(value));\n    }\n\n    return this.formatDateTime(value);\n  }\n\n  private formatDateTime(date: Date | number): string {\n    try {\n      const localDate = date;\n\n      // Reason for below replacements: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n      if (this.dateFormat) {\n        this.dateFormat = this.dateFormat\n          .replace('YYYY', 'yyyy')\n          .replace('YY', 'y')\n          .replace('DD', 'dd')\n          .replace('D', 'd')\n          .replace(' A', ' aa');\n      }\n      if (this.timeFormat) {\n        this.timeFormat = this.timeFormat.replace(' A', ' aa');\n      }\n      if (this.dateFormat === ' ') {\n        return format(localDate, this.timeFormat);\n      }\n      return format(localDate, `${this.dateFormat} ${this.timeFormat}`);\n    } catch {\n      return this.translate.instant(invalidDate);\n    }\n  }\n}\n"],"version":3}