affce67f1740034ae7bb4348c9d2ebb4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
const core_1 = require("@angular/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const ws_service_1 = require("app/services/ws.service");
let UserService = class UserService {
    constructor(ws) {
        this.ws = ws;
        this.uncachedUserQuery = 'user.get_user_obj';
        this.uncachedGroupQuery = 'group.get_group_obj';
        this.userQuery = 'user.query';
        this.groupQuery = 'group.query';
        this.queryOptions = { limit: 50 };
    }
    groupQueryDsCacheByName(name) {
        if (!(name === null || name === void 0 ? void 0 : name.length)) {
            return (0, rxjs_1.of)([]);
        }
        let queryArgs = [];
        name = name.trim();
        if (name.length > 0) {
            queryArgs = [['name', '=', name]];
        }
        return this.ws.call(this.groupQuery, [queryArgs, Object.assign({}, this.queryOptions)]);
    }
    groupQueryDsCache(search = '', hideBuiltIn = false, offset = 0) {
        let queryArgs = [];
        search = search.trim();
        if (search.length > 0) {
            queryArgs = [['group', '^', search]];
        }
        if (hideBuiltIn) {
            queryArgs = queryArgs.concat([['builtin', '=', false]]);
        }
        return (0, rxjs_1.combineLatest)([
            this.groupQueryDsCacheByName(search),
            this.ws.call(this.groupQuery, [queryArgs, Object.assign(Object.assign({}, this.queryOptions), { offset, order_by: ['builtin'] })]),
        ]).pipe((0, operators_1.map)(([groupSearchedByName, groups]) => {
            const groupIds = groupSearchedByName.map((groupsByName) => groupsByName.id);
            groups = groups.filter((group) => {
                return !groupIds.some((gid) => gid === group.id);
            });
            return [...groups, ...groupSearchedByName];
        }));
    }
    smbGroupQueryDsCache(search = '', hideBuiltIn = false, offset = 0) {
        const queryArgs = [['smb', '=', true]];
        search = search.trim();
        if (search.length > 0) {
            queryArgs.push(['group', '^', search]);
        }
        if (hideBuiltIn) {
            queryArgs.push(['builtin', '=', false]);
        }
        return (0, rxjs_1.combineLatest)([
            this.groupQueryDsCacheByName(search),
            this.ws.call(this.groupQuery, [queryArgs, Object.assign(Object.assign({}, this.queryOptions), { offset, order_by: ['builtin'] })]),
        ]).pipe((0, operators_1.map)(([groupSearchedByName, groups]) => {
            const groupIds = groupSearchedByName.map((groupsByName) => groupsByName.id);
            groups = groups.filter((group) => {
                return !groupIds.some((gid) => gid === group.id);
            });
            return [...groups, ...groupSearchedByName];
        }));
    }
    getGroupByName(groupname) {
        return this.ws.call(this.uncachedGroupQuery, [{ groupname }]);
    }
    userQueryDsCache(search = '', offset = 0) {
        let queryArgs = [];
        search = search.trim();
        if (search.length > 0) {
            queryArgs = [['username', '^', search]];
        }
        return this.ws.call(this.userQuery, [queryArgs, Object.assign(Object.assign({}, this.queryOptions), { offset, order_by: ['builtin'] })]);
    }
    getUserByName(username) {
        return this.ws.call(this.uncachedUserQuery, [{ username }]);
    }
    smbUserQueryDsCache(search = '', offset = 0) {
        const queryArgs = [['smb', '=', true]];
        search = search.trim();
        if (search.length > 0) {
            queryArgs.push(['username', '^', search]);
        }
        return this.ws.call(this.userQuery, [queryArgs, Object.assign(Object.assign({}, this.queryOptions), { offset, order_by: ['builtin'] })]);
    }
};
exports.UserService = UserService;
UserService.namePattern = /^[a-zA-Z0-9_][a-zA-Z0-9_.-]*[$]?$/;
UserService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.UserService = UserService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], UserService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,