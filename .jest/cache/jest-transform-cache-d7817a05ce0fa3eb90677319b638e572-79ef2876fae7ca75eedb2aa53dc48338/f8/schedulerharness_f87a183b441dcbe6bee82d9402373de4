037d7cbc30bde2bae6b61b10dcdd66c6
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/select/testing");
const cronParser = __importStar(require("cron-parser"));
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
const scheduler_modal_harness_1 = require("app/modules/scheduler/components/scheduler-modal/scheduler-modal.harness");
class SchedulerHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getSelectHarness = this.locatorFor(testing_2.MatSelectHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(SchedulerHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    openCustomModal() {
        return __awaiter(this, void 0, void 0, function* () {
            const select = yield this.getSelectHarness();
            yield select.open();
            yield select.clickOptions({ text: /Create/ });
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getSelectHarness()).getValueText();
        });
    }
    setValue(crontab) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.openCustomModal();
            const locator = this.documentRootLocatorFactory();
            try {
                const modal = yield locator.locatorFor(scheduler_modal_harness_1.SchedulerModalHarness)();
                const parts = crontab.split(' ');
                const hasMinutes = parts.length === 5;
                if (hasMinutes) {
                    yield modal.setMinutes(parts[0]);
                    yield modal.setHours(parts[1]);
                    yield modal.setDays(parts[2]);
                }
                else {
                    yield modal.setHours(parts[0]);
                    yield modal.setDays(parts[1]);
                }
                const parsed = cronParser.parseExpression(hasMinutes ? crontab : `0 ${crontab}`);
                yield modal.setMonths(parsed.fields.month);
                yield modal.setDaysOfWeek(parsed.fields.dayOfWeek);
                yield modal.pressDone();
            }
            catch (error) {
                if (error.message.includes('Failed to find element')
                    && error.message.includes('ix-scheduler-modal')) {
                    throw new Error('Failed to find ix-scheduler-modal. This may happen if Store with timezone is not provided.');
                }
                throw error;
            }
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getSelectHarness()).isDisabled();
        });
    }
}
exports.SchedulerHarness = SchedulerHarness;
SchedulerHarness.hostSelector = 'ix-scheduler';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvc2NoZWR1bGVyL2NvbXBvbmVudHMvc2NoZWR1bGVyL3NjaGVkdWxlci5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0RBQTBFO0FBQzFFLDhEQUEwRjtBQUMxRix3REFBMEM7QUFDMUMsc0dBQWlHO0FBRWpHLGtGQUE4RTtBQUM5RSxzSEFBaUg7QUFNakgsTUFBYSxnQkFBaUIsU0FBUSwwQkFBZ0I7SUFBdEQ7O1FBUUUscUJBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQywwQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JELGlCQUFZLEdBQUcsNEJBQVksQ0FBQztJQXdEOUIsQ0FBQztJQTlEQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQXlCO1FBQ25DLE9BQU8sSUFBSSwwQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUM7YUFDbkQsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFILENBQUM7SUFLSyxZQUFZOztZQUNoQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQ0FBYyxDQUFDLEVBQUUsQ0FBQztZQUM5RCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUIsQ0FBQztLQUFBO0lBRUssZUFBZTs7WUFDbkIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUM3QyxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDO0tBQUE7SUFFSyxRQUFROztZQUNaLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEQsQ0FBQztLQUFBO0lBRUssUUFBUSxDQUFDLE9BQWU7O1lBQzVCLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBRTdCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO1lBQ2xELElBQUksQ0FBQztnQkFDSCxNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxVQUFVLENBQUMsK0NBQXFCLENBQUMsRUFBRSxDQUFDO2dCQUVoRSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztnQkFFdEMsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDZixNQUFNLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0IsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO3FCQUFNLENBQUM7b0JBQ04sTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvQixNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLENBQUM7Z0JBRUQsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUNqRixNQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0MsTUFBTSxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ25ELE1BQU0sS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzFCLENBQUM7WUFBQyxPQUFPLEtBQWMsRUFBRSxDQUFDO2dCQUN4QixJQUFLLEtBQWUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO3VCQUN6RCxLQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUM7b0JBQzdELE1BQU0sSUFBSSxLQUFLLENBQUMsNEZBQTRGLENBQUMsQ0FBQztnQkFDaEgsQ0FBQztnQkFFRCxNQUFNLEtBQUssQ0FBQztZQUNkLENBQUM7UUFDSCxDQUFDO0tBQUE7SUFFSyxVQUFVOztZQUNkLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEQsQ0FBQztLQUFBOztBQWhFSCw0Q0FpRUM7QUFoRVEsNkJBQVksR0FBRyxjQUFjLEFBQWpCLENBQWtCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL3NjaGVkdWxlci9jb21wb25lbnRzL3NjaGVkdWxlci9zY2hlZHVsZXIuaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRIYXJuZXNzLCBIYXJuZXNzUHJlZGljYXRlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWF0U2VsZWN0SGFybmVzcywgU2VsZWN0SGFybmVzc0ZpbHRlcnMgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QvdGVzdGluZyc7XG5pbXBvcnQgKiBhcyBjcm9uUGFyc2VyIGZyb20gJ2Nyb24tcGFyc2VyJztcbmltcG9ydCB7IEl4TGFiZWxIYXJuZXNzIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1sYWJlbC9peC1sYWJlbC5oYXJuZXNzJztcbmltcG9ydCB7IEl4Rm9ybUNvbnRyb2xIYXJuZXNzIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvaW50ZXJmYWNlcy9peC1mb3JtLWNvbnRyb2wtaGFybmVzcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgZ2V0RXJyb3JUZXh0IH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdXRpbHMvaGFybmVzcy51dGlscyc7XG5pbXBvcnQgeyBTY2hlZHVsZXJNb2RhbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9zY2hlZHVsZXIvY29tcG9uZW50cy9zY2hlZHVsZXItbW9kYWwvc2NoZWR1bGVyLW1vZGFsLmhhcm5lc3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVkdWxlckZpbHRlcnMgZXh0ZW5kcyBTZWxlY3RIYXJuZXNzRmlsdGVycyB7XG4gIGxhYmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVySGFybmVzcyBleHRlbmRzIENvbXBvbmVudEhhcm5lc3MgaW1wbGVtZW50cyBJeEZvcm1Db250cm9sSGFybmVzcyB7XG4gIHN0YXRpYyBob3N0U2VsZWN0b3IgPSAnaXgtc2NoZWR1bGVyJztcblxuICBzdGF0aWMgd2l0aChvcHRpb25zOiBTY2hlZHVsZXJGaWx0ZXJzKTogSGFybmVzc1ByZWRpY2F0ZTxTY2hlZHVsZXJIYXJuZXNzPiB7XG4gICAgcmV0dXJuIG5ldyBIYXJuZXNzUHJlZGljYXRlKFNjaGVkdWxlckhhcm5lc3MsIG9wdGlvbnMpXG4gICAgICAuYWRkT3B0aW9uKCdsYWJlbCcsIG9wdGlvbnMubGFiZWwsIChoYXJuZXNzLCBsYWJlbCkgPT4gSGFybmVzc1ByZWRpY2F0ZS5zdHJpbmdNYXRjaGVzKGhhcm5lc3MuZ2V0TGFiZWxUZXh0KCksIGxhYmVsKSk7XG4gIH1cblxuICBnZXRTZWxlY3RIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yKE1hdFNlbGVjdEhhcm5lc3MpO1xuICBnZXRFcnJvclRleHQgPSBnZXRFcnJvclRleHQ7XG5cbiAgYXN5bmMgZ2V0TGFiZWxUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgbGFiZWwgPSBhd2FpdCB0aGlzLmxvY2F0b3JGb3JPcHRpb25hbChJeExhYmVsSGFybmVzcykoKTtcbiAgICBpZiAoIWxhYmVsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbC5nZXRMYWJlbCgpO1xuICB9XG5cbiAgYXN5bmMgb3BlbkN1c3RvbU1vZGFsKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlbGVjdCA9IGF3YWl0IHRoaXMuZ2V0U2VsZWN0SGFybmVzcygpO1xuICAgIGF3YWl0IHNlbGVjdC5vcGVuKCk7XG4gICAgYXdhaXQgc2VsZWN0LmNsaWNrT3B0aW9ucyh7IHRleHQ6IC9DcmVhdGUvIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0VmFsdWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0U2VsZWN0SGFybmVzcygpKS5nZXRWYWx1ZVRleHQoKTtcbiAgfVxuXG4gIGFzeW5jIHNldFZhbHVlKGNyb250YWI6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMub3BlbkN1c3RvbU1vZGFsKCk7XG5cbiAgICBjb25zdCBsb2NhdG9yID0gdGhpcy5kb2N1bWVudFJvb3RMb2NhdG9yRmFjdG9yeSgpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtb2RhbCA9IGF3YWl0IGxvY2F0b3IubG9jYXRvckZvcihTY2hlZHVsZXJNb2RhbEhhcm5lc3MpKCk7XG5cbiAgICAgIGNvbnN0IHBhcnRzID0gY3JvbnRhYi5zcGxpdCgnICcpO1xuICAgICAgY29uc3QgaGFzTWludXRlcyA9IHBhcnRzLmxlbmd0aCA9PT0gNTtcblxuICAgICAgaWYgKGhhc01pbnV0ZXMpIHtcbiAgICAgICAgYXdhaXQgbW9kYWwuc2V0TWludXRlcyhwYXJ0c1swXSk7XG4gICAgICAgIGF3YWl0IG1vZGFsLnNldEhvdXJzKHBhcnRzWzFdKTtcbiAgICAgICAgYXdhaXQgbW9kYWwuc2V0RGF5cyhwYXJ0c1syXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBtb2RhbC5zZXRIb3VycyhwYXJ0c1swXSk7XG4gICAgICAgIGF3YWl0IG1vZGFsLnNldERheXMocGFydHNbMV0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXJzZWQgPSBjcm9uUGFyc2VyLnBhcnNlRXhwcmVzc2lvbihoYXNNaW51dGVzID8gY3JvbnRhYiA6IGAwICR7Y3JvbnRhYn1gKTtcbiAgICAgIGF3YWl0IG1vZGFsLnNldE1vbnRocyhwYXJzZWQuZmllbGRzLm1vbnRoKTtcbiAgICAgIGF3YWl0IG1vZGFsLnNldERheXNPZldlZWsocGFyc2VkLmZpZWxkcy5kYXlPZldlZWspO1xuICAgICAgYXdhaXQgbW9kYWwucHJlc3NEb25lKCk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgIGlmICgoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UuaW5jbHVkZXMoJ0ZhaWxlZCB0byBmaW5kIGVsZW1lbnQnKVxuICAgICAgICAmJiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UuaW5jbHVkZXMoJ2l4LXNjaGVkdWxlci1tb2RhbCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZpbmQgaXgtc2NoZWR1bGVyLW1vZGFsLiBUaGlzIG1heSBoYXBwZW4gaWYgU3RvcmUgd2l0aCB0aW1lem9uZSBpcyBub3QgcHJvdmlkZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGlzRGlzYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldFNlbGVjdEhhcm5lc3MoKSkuaXNEaXNhYmxlZCgpO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=