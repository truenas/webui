32b279f467c6e84c307e07baa78f2d38
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxSelectHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const select_harness_1 = require("app/modules/forms/ix-forms/components/ix-select/select.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxSelectHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getSelectHarness = this.locatorFor(select_harness_1.SelectHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxSelectHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const select = yield this.getSelectHarness();
            yield select.open();
            if (yield select.isMultiple()) {
                const options = yield select.getOptions({ isSelected: true });
                const optionTexts = options.map((option) => option.getText());
                return Promise.all(optionTexts);
            }
            return select.getValueText();
        });
    }
    /**
     * @param newLabels option label or labels to be selected
     */
    setValue(newLabels) {
        return __awaiter(this, void 0, void 0, function* () {
            const select = yield this.getSelectHarness();
            yield select.open();
            if (!(yield this.hasOptions(newLabels))) {
                throw new Error(`Option with label "${String(newLabels)}" not found in select ${yield this.getLabelText()}`);
            }
            if (yield select.isMultiple()) {
                // Unselect old options manually
                if (!(yield select.isEmpty())) {
                    const selectedOptions = yield select.getOptions({ isSelected: true });
                    yield (0, testing_1.parallel)(() => selectedOptions.map((option) => option.click()));
                }
                const labelsToClick = Array.isArray(newLabels) ? newLabels : [newLabels];
                yield (0, testing_1.parallel)(() => {
                    return (labelsToClick).map((label) => select.clickOptions({ text: label }));
                });
                return;
            }
            yield select.clickOptions({ text: newLabels });
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getSelectHarness()).isDisabled();
        });
    }
    getOptionLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            const matSelect = yield this.getSelectHarness();
            yield matSelect.open();
            const options = yield matSelect.getOptions();
            return (0, testing_1.parallel)(() => options.map((option) => option.getText()));
        });
    }
    hasOptions(labels) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionLabels = yield this.getOptionLabels();
            const labelsToCheck = Array.isArray(labels) ? labels : [labels];
            return labelsToCheck.every((label) => optionLabels.includes(label));
        });
    }
    selectAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const labels = yield this.getOptionLabels();
            return this.setValue(labels);
        });
    }
    unselectAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.setValue([]);
        });
    }
}
exports.IxSelectHarness = IxSelectHarness;
IxSelectHarness.hostSelector = 'ix-select';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,