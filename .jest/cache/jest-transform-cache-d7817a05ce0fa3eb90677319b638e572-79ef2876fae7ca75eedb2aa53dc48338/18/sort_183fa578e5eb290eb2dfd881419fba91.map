{
  "version": 3,
  "sources": ["/Users/macbook/karpov-work/TrueNAS/webui/node_modules/@angular/material/fesm2022/sort.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/cdk/a11y';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { ReplaySubject, Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\n\n/** @docs-private */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort {\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        if (direction &&\n            direction !== 'asc' &&\n            direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    constructor(_defaultOptions) {\n        this._defaultOptions = _defaultOptions;\n        this._initializedStream = new ReplaySubject(1);\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overridden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Whether the sortable is disabled. */\n        this.disabled = false;\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n        /** Emits when the paginator is initialized. */\n        this.initialized = this._initializedStream;\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = sortable?.disableClear ?? this.disableClear ?? !!this._defaultOptions?.disableClear;\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._initializedStream.next();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._initializedStream.complete();\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSort, deps: [{ token: MAT_SORT_DEFAULT_OPTIONS, optional: true }], target: i0.\u0275\u0275FactoryTarget.Directive }); }\n    static { this.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatSort, isStandalone: true, selector: \"[matSort]\", inputs: { active: [\"matSortActive\", \"active\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\", booleanAttribute], disabled: [\"matSortDisabled\", \"disabled\", booleanAttribute] }, outputs: { sortChange: \"matSortChange\" }, host: { classAttribute: \"mat-sort\" }, exportAs: [\"matSort\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSort, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSort]',\n                    exportAs: 'matSort',\n                    host: {\n                        'class': 'mat-sort',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SORT_DEFAULT_OPTIONS]\n                }] }], propDecorators: { active: [{\n                type: Input,\n                args: ['matSortActive']\n            }], start: [{\n                type: Input,\n                args: ['matSortStart']\n            }], direction: [{\n                type: Input,\n                args: ['matSortDirection']\n            }], disableClear: [{\n                type: Input,\n                args: [{ alias: 'matSortDisableClear', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matSortDisabled', transform: booleanAttribute }]\n            }], sortChange: [{\n                type: Output,\n                args: ['matSortChange']\n            }] } });\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: 0.54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(-25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(25%)' })]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(-25%)' })]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [query('@*', animateChild(), { optional: true })]),\n    ]),\n};\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortHeaderIntl, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortHeaderIntl, providedIn: 'root' }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortHeaderIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader {\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n        return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n        this._updateSortActionDescription(value);\n    }\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, \n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber, defaultOptions) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        /** whether the sort header is disabled. */\n        this.disabled = false;\n        // Default the action description to \"Sort\" because it's better than nothing.\n        // Without a description, the button's label comes from the sort header text content,\n        // which doesn't give any indication that it performs a sorting operation.\n        this._sortActionDescription = 'Sort';\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        if (defaultOptions?.arrowPosition) {\n            this.arrowPosition = defaultOptions?.arrowPosition;\n        }\n        this._handleStateChanges();\n    }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({\n            toState: this._isSorted() ? 'active' : this._arrowDirection,\n        });\n        this._sort.register(this);\n        this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n        this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n        if (this._sortButton) {\n            this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n        }\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return (this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc'));\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n        // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n        // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n        // for every *cell* in the table, creating a lot of unnecessary noise.\n        // If _sortButton is undefined, the component hasn't been initialized yet so there's\n        // nothing to update in the DOM.\n        if (this._sortButton) {\n            // removeDescription will no-op if there is no existing message.\n            // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n            this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n            this._ariaDescriber?.describe(this._sortButton, newDescription);\n        }\n        this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n                // Do not show the animation if the header was already shown in the right position.\n                if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = true;\n                }\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                this._showIndicatorHint = false;\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortHeader, deps: [{ token: MatSortHeaderIntl }, { token: i0.ChangeDetectorRef }, { token: MatSort, optional: true }, { token: 'MAT_SORT_HEADER_COLUMN_DEF', optional: true }, { token: i3.FocusMonitor }, { token: i0.ElementRef }, { token: i3.AriaDescriber, optional: true }, { token: MAT_SORT_DEFAULT_OPTIONS, optional: true }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatSortHeader, isStandalone: true, selector: \"[mat-sort-header]\", inputs: { id: [\"mat-sort-header\", \"id\"], arrowPosition: \"arrowPosition\", start: \"start\", disabled: [\"disabled\", \"disabled\", booleanAttribute], sortActionDescription: \"sortActionDescription\", disableClear: [\"disableClear\", \"disableClear\", booleanAttribute] }, host: { listeners: { \"click\": \"_handleClick()\", \"keydown\": \"_handleKeydown($event)\", \"mouseenter\": \"_setIndicatorHintVisible(true)\", \"mouseleave\": \"_setIndicatorHintVisible(false)\" }, properties: { \"attr.aria-sort\": \"_getAriaSortAttribute()\", \"class.mat-sort-header-disabled\": \"_isDisabled()\" }, classAttribute: \"mat-sort-header\" }, exportAs: [\"matSortHeader\"], ngImport: i0, template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition === 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  @if (_renderArrow()) {\\n    <div class=\\\"mat-sort-header-arrow\\\"\\n        [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n        [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n        [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n        (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n        (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n      <div class=\\\"mat-sort-header-stem\\\"></div>\\n      <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n        <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n        <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n        <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n      </div>\\n    </div>\\n  }\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-container::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;color:var(--mat-sort-arrow-color, var(--mat-app-on-surface));opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"], animations: [\n            matSortAnimations.indicator,\n            matSortAnimations.leftPointer,\n            matSortAnimations.rightPointer,\n            matSortAnimations.arrowOpacity,\n            matSortAnimations.arrowPosition,\n            matSortAnimations.allowChildren,\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortHeader, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-sort-header]', exportAs: 'matSortHeader', host: {\n                        'class': 'mat-sort-header',\n                        '(click)': '_handleClick()',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(mouseenter)': '_setIndicatorHintVisible(true)',\n                        '(mouseleave)': '_setIndicatorHintVisible(false)',\n                        '[attr.aria-sort]': '_getAriaSortAttribute()',\n                        '[class.mat-sort-header-disabled]': '_isDisabled()',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        matSortAnimations.indicator,\n                        matSortAnimations.leftPointer,\n                        matSortAnimations.rightPointer,\n                        matSortAnimations.arrowOpacity,\n                        matSortAnimations.arrowPosition,\n                        matSortAnimations.allowChildren,\n                    ], standalone: true, template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition === 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  @if (_renderArrow()) {\\n    <div class=\\\"mat-sort-header-arrow\\\"\\n        [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n        [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n        [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n        (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n        (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n      <div class=\\\"mat-sort-header-stem\\\"></div>\\n      <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n        <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n        <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n        <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n      </div>\\n    </div>\\n  }\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-container::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;color:var(--mat-sort-arrow-color, var(--mat-app-on-surface));opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"] }]\n        }], ctorParameters: () => [{ type: MatSortHeaderIntl }, { type: i0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['MAT_SORT_HEADER_COLUMN_DEF']\n                }, {\n                    type: Optional\n                }] }, { type: i3.FocusMonitor }, { type: i0.ElementRef }, { type: i3.AriaDescriber, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SORT_DEFAULT_OPTIONS]\n                }] }], propDecorators: { id: [{\n                type: Input,\n                args: ['mat-sort-header']\n            }], arrowPosition: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], sortActionDescription: [{\n                type: Input\n            }], disableClear: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass MatSortModule {\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortModule, imports: [MatCommonModule, MatSort, MatSortHeader], exports: [MatSort, MatSortHeader] }); }\n    static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortModule, providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [MatCommonModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSortModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatSort, MatSortHeader],\n                    exports: [MatSort, MatSortHeader],\n                    providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n//# sourceMappingURL=sort.mjs.map\n"],
  "mappings": "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",
  "names": ["import_core"]
}
