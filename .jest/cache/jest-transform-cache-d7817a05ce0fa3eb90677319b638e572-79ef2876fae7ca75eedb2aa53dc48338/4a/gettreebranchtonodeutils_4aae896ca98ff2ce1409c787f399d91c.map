{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/utils/get-tree-branch-to-node.utils.ts","mappings":";;AAQA,kDAsBC;AA9BD;;;;;;;GAOG;AACH,SAAgB,mBAAmB,CACjC,KAAU,EACV,SAA+B;IAE/B,IAAI,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAA,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;YACpB,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,QAAQ,GAAG,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAC/D,IAAI,QAAQ,EAAE,CAAC;gBACb,OAAO,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/utils/get-tree-branch-to-node.utils.ts"],"sourcesContent":["/**\n * Given an array of something nested will return an object matching predicate\n * and all the parents.\n * E.g. given datasets and predicate matching 'root/parent/child',\n * returns an array of datasets: [root, parent, child].\n *\n * Returns null if element is not gound.\n */\nexport function getTreeBranchToNode<T extends { children?: T[] }>(\n  items: T[],\n  predicate: (item: T) => boolean,\n): T[] | null {\n  if (!items?.length) {\n    return null;\n  }\n\n  for (const item of items) {\n    if (predicate(item)) {\n      return [item];\n    }\n\n    if (item.children) {\n      const children = getTreeBranchToNode(item.children, predicate);\n      if (children) {\n        return [item, ...children];\n      }\n    }\n  }\n\n  return null;\n}\n"],"version":3}