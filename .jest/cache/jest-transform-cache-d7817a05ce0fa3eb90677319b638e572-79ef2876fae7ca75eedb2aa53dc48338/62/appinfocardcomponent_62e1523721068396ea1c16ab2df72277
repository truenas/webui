3fb217fb450a2db061632c16e6bf9082
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppInfoCardComponent = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const catalog_constants_1 = require("app/constants/catalog.constants");
const app_state_enum_1 = require("app/enums/app-state.enum");
const role_enum_1 = require("app/enums/role.enum");
const window_helper_1 = require("app/helpers/window.helper");
const apps_1 = require("app/helptext/apps/apps");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const custom_app_form_component_1 = require("app/pages/apps/components/custom-app-form/custom-app-form.component");
const app_rollback_modal_component_1 = require("app/pages/apps/components/installed-apps/app-rollback-modal/app-rollback-modal.component");
const app_upgrade_dialog_component_1 = require("app/pages/apps/components/installed-apps/app-upgrade-dialog/app-upgrade-dialog.component");
const applications_service_1 = require("app/pages/apps/services/applications.service");
const installed_apps_store_service_1 = require("app/pages/apps/store/installed-apps-store.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const redirect_service_1 = require("app/services/redirect.service");
const ws_service_1 = require("app/services/ws.service");
const i0 = __importStar(require("@angular/core"));
let AppInfoCardComponent = class AppInfoCardComponent {
    constructor(ws, loader, redirect, errorHandler, appService, matDialog, dialogService, translate, router, installedAppsStore, slideIn, window) {
        this.ws = ws;
        this.loader = loader;
        this.redirect = redirect;
        this.errorHandler = errorHandler;
        this.appService = appService;
        this.matDialog = matDialog;
        this.dialogService = dialogService;
        this.translate = translate;
        this.router = router;
        this.installedAppsStore = installedAppsStore;
        this.slideIn = slideIn;
        this.window = window;
        this.app = (0, core_1.input)();
        this.startApp = (0, core_1.output)();
        this.stopApp = (0, core_1.output)();
        this.isCustomApp = (0, core_1.computed)(() => { var _a, _b; return ((_b = (_a = this.app()) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.name) === catalog_constants_1.customApp; });
        this.requiredRoles = [role_enum_1.Role.AppsWrite];
        this.isAppStopped = (0, core_1.computed)(() => { var _a; return ((_a = this.app()) === null || _a === void 0 ? void 0 : _a.state) === app_state_enum_1.AppState.Stopped; });
        this.inProgress = (0, core_1.computed)(() => { var _a; return [app_state_enum_1.AppState.Deploying].includes((_a = this.app()) === null || _a === void 0 ? void 0 : _a.state); });
        this.imagePlaceholder = catalog_constants_1.appImagePlaceholder;
        this.isEmpty = lodash_es_1.isEmpty;
        this.isRollbackPossible = (0, core_1.signal)(false);
        this.rollbackUpdateButtonSetEffect = (0, core_1.effect)(() => {
            const app = this.app();
            this.isRollbackPossible.set(false);
            this.updateRollbackSetup(app.name);
        }, { allowSignalWrites: true });
        this.appDetailsRouterUrl = (0, core_1.computed)(() => {
            const app = this.app();
            return ['/apps', 'available', app.metadata.train, app.id];
        });
    }
    openPortalLink(app, name = 'web_portal') {
        const portalUrl = new URL(app.portals[name]);
        if (portalUrl.hostname === '0.0.0.0') {
            portalUrl.hostname = this.window.location.hostname;
        }
        this.redirect.openWindow(portalUrl.href);
    }
    updateButtonPressed() {
        const name = this.app().name;
        this.appService.getAppUpgradeSummary(name).pipe(this.loader.withLoader(), (0, rxjs_1.switchMap)((summary) => this.matDialog.open(app_upgrade_dialog_component_1.AppUpgradeDialogComponent, {
            width: '50vw',
            minWidth: '500px',
            maxWidth: '750px',
            data: {
                appInfo: this.app(),
                upgradeSummary: summary,
            },
        }).afterClosed()), (0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)((version) => this.dialogService.jobDialog(this.ws.job('app.upgrade', [name, { app_version: version }]), { title: apps_1.helptextApps.apps.upgrade_dialog.job }).afterClosed()), this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
    }
    editButtonPressed() {
        const app = this.app();
        if (app.custom_app) {
            this.slideIn.open(custom_app_form_component_1.CustomAppFormComponent, { data: app });
        }
        else {
            this.router.navigate(['/apps', 'installed', app.metadata.train, app.id, 'edit']);
        }
    }
    deleteButtonPressed() {
        const name = this.app().name;
        this.dialogService.confirm({
            title: apps_1.helptextApps.apps.delete_dialog.title,
            message: this.translate.instant('Delete {name}?', { name }),
            secondaryCheckbox: true,
            secondaryCheckboxText: this.translate.instant('Remove iX Volumes'),
        })
            .pipe((0, rxjs_1.filter)(({ confirmed }) => Boolean(confirmed)), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(({ secondaryCheckbox }) => this.executeDelete(name, secondaryCheckbox));
    }
    executeDelete(name, removeIxVolumes = false) {
        this.dialogService.jobDialog(this.ws.job('app.delete', [name, { remove_images: true, remove_ix_volumes: removeIxVolumes }]), { title: apps_1.helptextApps.apps.delete_dialog.job })
            .afterClosed()
            .pipe((0, rxjs_1.filter)(Boolean), this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.installedAppsStore.installedApps$.pipe((0, rxjs_1.map)((apps) => !apps.length), (0, rxjs_1.filter)(Boolean), (0, rxjs_1.take)(1), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                this.router.navigate(['/apps', 'installed'], { state: { hideMobileDetails: true } });
            });
        });
    }
    rollbackApp() {
        this.matDialog
            .open(app_rollback_modal_component_1.AppRollbackModalComponent, { data: this.app() })
            .afterClosed()
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe();
    }
    updateRollbackSetup(appName) {
        this.ws.call('app.rollback_versions', [appName]).pipe((0, rxjs_1.tap)((versions) => this.isRollbackPossible.set(versions.length > 0)), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
    }
};
exports.AppInfoCardComponent = AppInfoCardComponent;
AppInfoCardComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: app_loader_service_1.AppLoaderService },
    { type: redirect_service_1.RedirectService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: applications_service_1.ApplicationsService },
    { type: dialog_1.MatDialog },
    { type: dialog_service_1.DialogService },
    { type: core_2.TranslateService },
    { type: router_1.Router },
    { type: installed_apps_store_service_1.InstalledAppsStore },
    { type: ix_slide_in_service_1.IxSlideInService },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
AppInfoCardComponent.propDecorators = {
    app: [{ type: i0.Input, args: [{ isSignal: true, alias: "app", required: false, transform: undefined },] }],
    startApp: [{ type: i0.Output, args: ["startApp",] }],
    stopApp: [{ type: i0.Output, args: ["stopApp",] }]
};
exports.AppInfoCardComponent = AppInfoCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-app-info-card',
        template: require("./app-info-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], AppInfoCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,