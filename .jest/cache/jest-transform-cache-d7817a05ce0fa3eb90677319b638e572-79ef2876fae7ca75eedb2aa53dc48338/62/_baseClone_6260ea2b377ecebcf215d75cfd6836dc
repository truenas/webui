7df7dfbdbe77e639138afb3bf37e861a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _Stack_js_1 = __importDefault(require("./_Stack.js"));
const _arrayEach_js_1 = __importDefault(require("./_arrayEach.js"));
const _assignValue_js_1 = __importDefault(require("./_assignValue.js"));
const _baseAssign_js_1 = __importDefault(require("./_baseAssign.js"));
const _baseAssignIn_js_1 = __importDefault(require("./_baseAssignIn.js"));
const _cloneBuffer_js_1 = __importDefault(require("./_cloneBuffer.js"));
const _copyArray_js_1 = __importDefault(require("./_copyArray.js"));
const _copySymbols_js_1 = __importDefault(require("./_copySymbols.js"));
const _copySymbolsIn_js_1 = __importDefault(require("./_copySymbolsIn.js"));
const _getAllKeys_js_1 = __importDefault(require("./_getAllKeys.js"));
const _getAllKeysIn_js_1 = __importDefault(require("./_getAllKeysIn.js"));
const _getTag_js_1 = __importDefault(require("./_getTag.js"));
const _initCloneArray_js_1 = __importDefault(require("./_initCloneArray.js"));
const _initCloneByTag_js_1 = __importDefault(require("./_initCloneByTag.js"));
const _initCloneObject_js_1 = __importDefault(require("./_initCloneObject.js"));
const isArray_js_1 = __importDefault(require("./isArray.js"));
const isBuffer_js_1 = __importDefault(require("./isBuffer.js"));
const isMap_js_1 = __importDefault(require("./isMap.js"));
const isObject_js_1 = __importDefault(require("./isObject.js"));
const isSet_js_1 = __importDefault(require("./isSet.js"));
const keys_js_1 = __importDefault(require("./keys.js"));
const keysIn_js_1 = __importDefault(require("./keysIn.js"));
/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */
var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
        cloneableTags[boolTag] = cloneableTags[dateTag] =
            cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                    cloneableTags[int32Tag] = cloneableTags[mapTag] =
                        cloneableTags[numberTag] = cloneableTags[objectTag] =
                            cloneableTags[regexpTag] = cloneableTags[setTag] =
                                cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                        cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
        return result;
    }
    if (!(0, isObject_js_1.default)(value)) {
        return value;
    }
    var isArr = (0, isArray_js_1.default)(value);
    if (isArr) {
        result = (0, _initCloneArray_js_1.default)(value);
        if (!isDeep) {
            return (0, _copyArray_js_1.default)(value, result);
        }
    }
    else {
        var tag = (0, _getTag_js_1.default)(value), isFunc = tag == funcTag || tag == genTag;
        if ((0, isBuffer_js_1.default)(value)) {
            return (0, _cloneBuffer_js_1.default)(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = (isFlat || isFunc) ? {} : (0, _initCloneObject_js_1.default)(value);
            if (!isDeep) {
                return isFlat
                    ? (0, _copySymbolsIn_js_1.default)(value, (0, _baseAssignIn_js_1.default)(result, value))
                    : (0, _copySymbols_js_1.default)(value, (0, _baseAssign_js_1.default)(result, value));
            }
        }
        else {
            if (!cloneableTags[tag]) {
                return object ? value : {};
            }
            result = (0, _initCloneByTag_js_1.default)(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _Stack_js_1.default);
    var stacked = stack.get(value);
    if (stacked) {
        return stacked;
    }
    stack.set(value, result);
    if ((0, isSet_js_1.default)(value)) {
        value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
    }
    else if ((0, isMap_js_1.default)(value)) {
        value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
    }
    var keysFunc = isFull
        ? (isFlat ? _getAllKeysIn_js_1.default : _getAllKeys_js_1.default)
        : (isFlat ? keysIn_js_1.default : keys_js_1.default);
    var props = isArr ? undefined : keysFunc(value);
    (0, _arrayEach_js_1.default)(props || value, function (subValue, key) {
        if (props) {
            key = subValue;
            subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        (0, _assignValue_js_1.default)(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
}
exports.default = baseClone;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,