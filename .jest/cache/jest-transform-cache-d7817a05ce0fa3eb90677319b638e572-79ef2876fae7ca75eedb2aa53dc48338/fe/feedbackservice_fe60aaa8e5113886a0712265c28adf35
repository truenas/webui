2c914a2a546829201f12c0c09775d6ab
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackService = void 0;
const http_1 = require("@angular/common/http");
const core_1 = require("@angular/core");
const snack_bar_1 = require("@angular/material/snack-bar");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const environment_1 = require("environments/environment");
const html2canvas_1 = __importDefault(require("html2canvas"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const job_state_enum_1 = require("app/enums/job-state.enum");
const window_helper_1 = require("app/helpers/window.helper");
const support_1 = require("app/helptext/system/support");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const feedback_interface_1 = require("app/modules/feedback/interfaces/feedback.interface");
const snackbar_component_1 = require("app/modules/snackbar/components/snackbar/snackbar.component");
const sentry_service_1 = require("app/services/sentry.service");
const system_general_service_1 = require("app/services/system-general.service");
const upload_service_1 = require("app/services/upload.service");
const ws_service_1 = require("app/services/ws.service");
const system_info_selectors_1 = require("app/store/system-info/system-info.selectors");
let FeedbackService = class FeedbackService {
    constructor(httpClient, ws, store$, systemGeneralService, sentryService, fileUpload, matSnackBar, translate, dialogService, window) {
        this.httpClient = httpClient;
        this.ws = ws;
        this.store$ = store$;
        this.systemGeneralService = systemGeneralService;
        this.sentryService = sentryService;
        this.fileUpload = fileUpload;
        this.matSnackBar = matSnackBar;
        this.translate = translate;
        this.dialogService = dialogService;
        this.window = window;
        this.hostname = 'https://feedback.ui.truenas.com';
    }
    createReview(data) {
        return this.prepareReview(data).pipe((0, rxjs_1.switchMap)((review) => this.addReview(review)), (0, rxjs_1.switchMap)((response) => {
            if (!response.success) {
                return (0, rxjs_1.throwError)(() => new Error(this.translate.instant('An error occurred while sending the review. Please try again later.')));
            }
            return (0, rxjs_1.of)(response);
        }), (0, rxjs_1.switchMap)((reviewAdded) => {
            return this.addReviewAttachmentsIfNeeded(reviewAdded.review_id, data).pipe((0, operators_1.catchError)(() => {
                // Silently fail if attachments were not uploaded.
                return rxjs_1.EMPTY;
            }));
        }));
    }
    createTicket(token, type, data) {
        return this.prepareTicket(token, type, data).pipe((0, rxjs_1.switchMap)((ticket) => this.addTicket(ticket)), (0, rxjs_1.switchMap)((createdTicket) => {
            return this.addTicketAttachmentsIfNeeded(createdTicket.ticket, data, token).pipe((0, rxjs_1.switchMap)(() => (0, rxjs_1.of)(createdTicket)));
        }));
    }
    createTicketLicensed(data) {
        return this.prepareTicketLicensed(data).pipe((0, rxjs_1.switchMap)((ticket) => this.addTicket(ticket)), (0, rxjs_1.switchMap)((createdTicket) => {
            return this.addTicketAttachmentsIfNeeded(createdTicket.ticket, data).pipe((0, rxjs_1.switchMap)(() => (0, rxjs_1.of)(createdTicket)));
        }));
    }
    takeScreenshot(filename = `${Date.now()}.png`, type = 'image/png', options) {
        return new rxjs_1.Observable((observer) => {
            (0, html2canvas_1.default)(document.body, Object.assign({ allowTaint: true, useCORS: true, imageTimeout: 0, ignoreElements: (element) => element.classList.contains('cdk-overlay-container') }, options)).then((canvas) => {
                canvas.toBlob((blob) => {
                    const file = new File([blob], filename, { type });
                    observer.next(file);
                    observer.complete();
                }, type);
            }).catch((error) => {
                observer.error(error);
            });
        });
    }
    checkIfReviewAllowed() {
        if (this.isFeedbackAllowed !== undefined) {
            return (0, rxjs_1.of)(this.isFeedbackAllowed);
        }
        return (0, rxjs_1.combineLatest)([
            this.store$.pipe(system_info_selectors_1.waitForSystemInfo),
            this.systemGeneralService.getProductType$,
        ]).pipe((0, rxjs_1.first)(), (0, rxjs_1.switchMap)(([systemInfo, productType]) => {
            const params = new http_1.HttpParams()
                .set('version', systemInfo.version)
                .set('product_type', productType);
            return this.httpClient
                .get(`${this.hostname}/api/collect-blacklist/check/`, { params })
                .pipe((0, rxjs_1.map)((response) => {
                this.isFeedbackAllowed = !response.value;
                return !response.value;
            }), (0, operators_1.catchError)(() => {
                this.isFeedbackAllowed = false;
                return (0, rxjs_1.of)(false);
            }));
        }));
    }
    getSimilarIssues(query) {
        return this.ws.call('support.similar_issues', [query]);
    }
    addDebugInfoToMessage(message) {
        return this.sentryService.sessionId$.pipe((0, operators_1.take)(1), (0, rxjs_1.map)((sessionId) => {
            const sessionText = `Session ID: ${sessionId}`;
            return [message, sessionText].join('\n\n');
        }));
    }
    showTicketSuccessMsg(ticketUrl) {
        return this.matSnackBar.openFromComponent(snackbar_component_1.SnackbarComponent, {
            data: {
                message: this.translate.instant('Thank you. Ticket was submitted succesfully.'),
                icon: 'check',
                iconCssColor: 'var(--green)',
                button: {
                    title: this.translate.instant('Open ticket'),
                    action: () => this.window.open(ticketUrl, '_blank'),
                },
            },
            duration: 10000,
        });
    }
    showFeedbackSuccessMsg() {
        return this.matSnackBar.openFromComponent(snackbar_component_1.SnackbarComponent, {
            data: {
                message: this.translate.instant('Thank you for sharing your feedback with us! Your insights are valuable in helping us improve our product.'),
                icon: 'check',
                iconCssColor: 'var(--green)',
            },
        });
    }
    addReview(body) {
        return this.httpClient.post(`${this.hostname}/api/reviews/add/`, body);
    }
    prepareReview(data) {
        return this.getSystemInfo().pipe((0, rxjs_1.map)(([{ systemInfo, isIxHardware }, systemHostId]) => {
            return {
                host_u_id: systemHostId,
                rating: data.rating,
                message: data.message,
                page: this.window.location.pathname,
                user_agent: this.window.navigator.userAgent,
                environment: environment_1.environment.production ? feedback_interface_1.FeedbackEnvironment.Production : feedback_interface_1.FeedbackEnvironment.Development,
                release: systemInfo.version,
                product_type: this.systemGeneralService.getProductType(),
                product_model: systemInfo.system_product && isIxHardware ? systemInfo.system_product : 'Generic',
                extra: {},
            };
        }));
    }
    addReviewAttachmentsIfNeeded(reviewId, data) {
        var _a;
        const operations = [];
        if (data.take_screenshot) {
            operations.push(this.takeScreenshot().pipe((0, rxjs_1.switchMap)((file) => this.addReviewAttachment(reviewId, file))));
        }
        if (data.attach_images && ((_a = data.images) === null || _a === void 0 ? void 0 : _a.length)) {
            operations.push(...data.images.map((image) => this.addReviewAttachment(reviewId, image)));
        }
        if (!operations.length) {
            return (0, rxjs_1.of)(undefined);
        }
        return (0, rxjs_1.forkJoin)(operations);
    }
    addReviewAttachment(reviewId, image) {
        const formData = new FormData();
        formData.append('image', image);
        return this.httpClient.post(`${this.hostname}/api/reviews/${reviewId}/add-attachment/`, formData);
    }
    getSystemInfo() {
        return (0, rxjs_1.forkJoin)([
            this.store$.pipe((0, store_1.select)(system_info_selectors_1.selectSystemInfoState), (0, rxjs_1.filter)((systemInfoState) => Boolean(systemInfoState.systemInfo)), (0, operators_1.take)(1)),
            this.ws.call('system.host_id'),
        ]);
    }
    addTicket(ticket) {
        return this.ws.job('support.new_ticket', [ticket]).pipe((0, rxjs_1.filter)((job) => job.state === job_state_enum_1.JobState.Success), (0, rxjs_1.map)((job) => job.result));
    }
    prepareTicket(token, type, data) {
        return this.addDebugInfoToMessage(data.message).pipe((0, rxjs_1.map)((body) => ({
            body,
            token,
            attach_debug: data.attach_debug,
            type,
            title: data.title,
        })));
    }
    prepareTicketLicensed(data) {
        return this.addDebugInfoToMessage(data.message).pipe((0, rxjs_1.map)((body) => ({
            body,
            name: data.name,
            email: data.email,
            phone: data.phone,
            cc: data.cc,
            environment: data.environment,
            criticality: data.criticality,
            category: data.category,
            title: data.title,
            attach_debug: data.attach_debug,
        })));
    }
    addTicketAttachmentsIfNeeded(ticketId, data, token) {
        const takeScreenshot = data.take_screenshot;
        const images = data.images;
        // Make requests and map to boolean for successful uploads.
        const requests = images.map((attachment) => {
            return this.addTicketAttachment({ ticketId, attachment, token });
        });
        if (takeScreenshot) {
            const takeScreenshotRequest$ = this.takeScreenshot().pipe((0, rxjs_1.switchMap)((screenshot) => this.addTicketAttachment({ ticketId, attachment: screenshot, token })));
            requests.push(takeScreenshotRequest$);
        }
        if (requests.length === 0) {
            return (0, rxjs_1.of)(undefined);
        }
        // TODO: Check what happens if more than 20 attachments are uploaded at the same time.
        return (0, rxjs_1.forkJoin)(requests).pipe((0, rxjs_1.switchMap)((results) => {
            const wereAllImagesUploaded = results.every(Boolean);
            if (wereAllImagesUploaded) {
                return (0, rxjs_1.of)(undefined);
            }
            return (0, rxjs_1.throwError)(() => new Error('Not all images were uploaded.'));
        }), (0, operators_1.catchError)(() => {
            // Do not fail if attachments were not uploaded.
            this.dialogService.error({
                title: this.translate.instant(support_1.helptextSystemSupport.attachmentsFailed.title),
                message: this.translate.instant(support_1.helptextSystemSupport.attachmentsFailed.message),
            });
            return (0, rxjs_1.of)(undefined);
        }));
    }
    addTicketAttachment({ ticketId, attachment, token, }) {
        return this.fileUpload.upload({
            file: attachment,
            method: 'support.attach_ticket',
            params: [{
                    token,
                    ticket: ticketId,
                    filename: attachment.name,
                }],
        }).pipe((0, rxjs_1.filter)((event) => event instanceof http_1.HttpResponse), (0, operators_1.take)(1), (0, rxjs_1.map)(() => true), (0, operators_1.catchError)((error) => {
            console.error(error);
            return (0, rxjs_1.of)(false);
        }));
    }
};
exports.FeedbackService = FeedbackService;
FeedbackService.ctorParameters = () => [
    { type: http_1.HttpClient },
    { type: ws_service_1.WebSocketService },
    { type: store_1.Store },
    { type: system_general_service_1.SystemGeneralService },
    { type: sentry_service_1.SentryService },
    { type: upload_service_1.UploadService },
    { type: snack_bar_1.MatSnackBar },
    { type: core_2.TranslateService },
    { type: dialog_service_1.DialogService },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.FeedbackService = FeedbackService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], FeedbackService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,