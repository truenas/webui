{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/store/apps-stats.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,yDAAqE;AACrE,2DAAuD;AAEvD,8CAAqC;AAErC,wDAA2D;AAMpD,IAAM,gBAAgB,GAAtB,MAAM,gBAAiB,SAAQ,gCAAqB;IACzD,YACU,EAAoB;QAE5B,KAAK,CAAC,EAAE,CAAC,CAAC;QAFF,OAAE,GAAF,EAAE,CAAkB;IAG9B,CAAC;IAED,cAAc,CAAC,OAAe;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAA,eAAG,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC;aAC3B,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC;aAC1B,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IACnE,CAAC;IAEO,oBAAoB,CAAC,MAAkB;QAC7C,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YAC9C,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;YAC5B,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAA8B,CAAC,CAAC;QAEnC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC5B,CAAC;;AAxBU,4CAAgB;;;;2BAAhB,gBAAgB;IAF5B,IAAA,4BAAY,GAAE;IACd,IAAA,iBAAU,GAAE;GACA,gBAAgB,CAyB5B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/apps/store/apps-stats.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AppStats } from 'app/interfaces/app.interface';\nimport { WebSocketService } from 'app/services/ws.service';\n\ntype State = Record<string, AppStats>;\n\n@UntilDestroy()\n@Injectable()\nexport class AppsStatsService extends ComponentStore<State> {\n  constructor(\n    private ws: WebSocketService,\n  ) {\n    super({});\n  }\n\n  getStatsForApp(appName: string): Observable<AppStats> {\n    return this.state$.pipe(map((stats) => stats[appName]));\n  }\n\n  subscribeToUpdates(): void {\n    this.ws.subscribe('app.stats')\n      .pipe(untilDestroyed(this))\n      .subscribe((event) => this.onStatisticsReceived(event.fields));\n  }\n\n  private onStatisticsReceived(update: AppStats[]): void {\n    const statsByApp = update.reduce((acc, stats) => {\n      acc[stats.app_name] = stats;\n      return acc;\n    }, {} as Record<string, AppStats>);\n\n    this.setState(statsByApp);\n  }\n}\n"],"version":3}