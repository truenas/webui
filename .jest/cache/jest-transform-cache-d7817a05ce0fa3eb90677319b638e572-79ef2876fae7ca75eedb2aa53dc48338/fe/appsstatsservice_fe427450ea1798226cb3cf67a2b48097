93930f7204441a907c81505e7cac8dc2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsStatsService = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const component_store_1 = require("@ngrx/component-store");
const operators_1 = require("rxjs/operators");
const ws_service_1 = require("app/services/ws.service");
let AppsStatsService = class AppsStatsService extends component_store_1.ComponentStore {
    constructor(ws) {
        super({});
        this.ws = ws;
    }
    getStatsForApp(appName) {
        return this.state$.pipe((0, operators_1.map)((stats) => stats[appName]));
    }
    subscribeToUpdates() {
        this.ws.subscribe('app.stats')
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((event) => this.onStatisticsReceived(event.fields));
    }
    onStatisticsReceived(update) {
        const statsByApp = update.reduce((acc, stats) => {
            acc[stats.app_name] = stats;
            return acc;
        }, {});
        this.setState(statsByApp);
    }
};
exports.AppsStatsService = AppsStatsService;
AppsStatsService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.AppsStatsService = AppsStatsService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)()
], AppsStatsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2FwcHMvc3RvcmUvYXBwcy1zdGF0cy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUEyQztBQUMzQyx5REFBcUU7QUFDckUsMkRBQXVEO0FBRXZELDhDQUFxQztBQUVyQyx3REFBMkQ7QUFNcEQsSUFBTSxnQkFBZ0IsR0FBdEIsTUFBTSxnQkFBaUIsU0FBUSxnQ0FBcUI7SUFDekQsWUFDVSxFQUFvQjtRQUU1QixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFGRixPQUFFLEdBQUYsRUFBRSxDQUFrQjtJQUc5QixDQUFDO0lBRUQsY0FBYyxDQUFDLE9BQWU7UUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFBLGVBQUcsRUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQzthQUMzQixJQUFJLENBQUMsSUFBQSw4QkFBYyxFQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFCLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxNQUFrQjtRQUM3QyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzlDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQzVCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQThCLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7O0FBeEJVLDRDQUFnQjs7OzsyQkFBaEIsZ0JBQWdCO0lBRjVCLElBQUEsNEJBQVksR0FBRTtJQUNkLElBQUEsaUJBQVUsR0FBRTtHQUNBLGdCQUFnQixDQXlCNUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2FwcHMvc3RvcmUvYXBwcy1zdGF0cy5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgQ29tcG9uZW50U3RvcmUgfSBmcm9tICdAbmdyeC9jb21wb25lbnQtc3RvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXBwU3RhdHMgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9hcHAuaW50ZXJmYWNlJztcbmltcG9ydCB7IFdlYlNvY2tldFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvd3Muc2VydmljZSc7XG5cbnR5cGUgU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBBcHBTdGF0cz47XG5cbkBVbnRpbERlc3Ryb3koKVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcHNTdGF0c1NlcnZpY2UgZXh0ZW5kcyBDb21wb25lbnRTdG9yZTxTdGF0ZT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHdzOiBXZWJTb2NrZXRTZXJ2aWNlLFxuICApIHtcbiAgICBzdXBlcih7fSk7XG4gIH1cblxuICBnZXRTdGF0c0ZvckFwcChhcHBOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFwcFN0YXRzPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUkLnBpcGUobWFwKChzdGF0cykgPT4gc3RhdHNbYXBwTmFtZV0pKTtcbiAgfVxuXG4gIHN1YnNjcmliZVRvVXBkYXRlcygpOiB2b2lkIHtcbiAgICB0aGlzLndzLnN1YnNjcmliZSgnYXBwLnN0YXRzJylcbiAgICAgIC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKVxuICAgICAgLnN1YnNjcmliZSgoZXZlbnQpID0+IHRoaXMub25TdGF0aXN0aWNzUmVjZWl2ZWQoZXZlbnQuZmllbGRzKSk7XG4gIH1cblxuICBwcml2YXRlIG9uU3RhdGlzdGljc1JlY2VpdmVkKHVwZGF0ZTogQXBwU3RhdHNbXSk6IHZvaWQge1xuICAgIGNvbnN0IHN0YXRzQnlBcHAgPSB1cGRhdGUucmVkdWNlKChhY2MsIHN0YXRzKSA9PiB7XG4gICAgICBhY2Nbc3RhdHMuYXBwX25hbWVdID0gc3RhdHM7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIEFwcFN0YXRzPik7XG5cbiAgICB0aGlzLnNldFN0YXRlKHN0YXRzQnlBcHApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=