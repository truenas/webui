{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/testing/utils/mock-websocket.utils.ts","mappings":";;AA4CA,sCA+BC;AAED,4BASC;AAMD,0BASC;AArGD,wCAEuB;AACvB,4CAAyC;AACzC,8CAAuD;AACvD,4FAAuF;AACvF,uHAIwE;AAIxE,4FAAuF;AACvF,wDAA2D;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AAEH,SAAgB,aAAa,CAC3B,aAAwE;IAExE,OAAO;QACL;YACE,OAAO,EAAE,6BAAgB;YACzB,UAAU,EAAE,CAAC,MAAc,EAAE,SAAqC,EAAE,SAA2B,EAAE,EAAE;gBACjG,MAAM,oBAAoB,GAAG,IAAI,6CAAoB,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;gBACpF,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;oBAC7C,IAAI,YAAY,CAAC,IAAI,KAAK,8DAAyB,CAAC,IAAI,EAAE,CAAC;wBACzD,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAC5E,CAAC;yBAAM,IAAI,YAAY,CAAC,IAAI,KAAK,8DAAyB,CAAC,GAAG,EAAE,CAAC;wBAC/D,oBAAoB,CAAC,OAAO,CAC1B,YAAY,CAAC,MAAM,EACnB,YAAY,CAAC,QAA0D,CACxE,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC,CAAC;gBACH,OAAO,oBAAoB,CAAC;YAC9B,CAAC;YACD,IAAI,EAAE,CAAC,eAAM,EAAE,yDAA0B,EAAE,uBAAgB,CAAC;SAC7D;QACD;YACE,OAAO,EAAE,6CAAoB;YAC7B,WAAW,EAAE,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,6BAAgB,CAAC;SAChD;QACD;YACE,OAAO,EAAE,yDAA0B;YACnC,QAAQ,EAAG,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EAA4C;SACzE;KACF,CAAC;AACJ,CAAC;AAED,SAAgB,QAAQ,CACtB,MAAS,EACT,WAAqC,SAAS;IAE9C,OAAO;QACL,QAAQ;QACR,MAAM;QACN,IAAI,EAAE,8DAAyB,CAAC,IAAI;KACrC,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAgB,OAAO,CACrB,MAAS,EACT,WAAoC,SAAS;IAE7C,OAAO;QACL,QAAQ;QACR,MAAM;QACN,IAAI,EAAE,8DAAyB,CAAC,GAAG;KACpC,CAAC;AACJ,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/testing/utils/mock-websocket.utils.ts"],"sourcesContent":["import {\n  ExistingProvider, FactoryProvider, forwardRef, ValueProvider,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MockWebSocketService } from 'app/core/testing/classes/mock-websocket.service';\nimport {\n  CallResponseOrFactory, JobResponseOrFactory,\n  MockWebSocketCallResponse, MockWebSocketJobResponse,\n  MockWebSocketResponseType,\n} from 'app/core/testing/interfaces/mock-websocket-responses.interface';\nimport { ApiCallMethod } from 'app/interfaces/api/api-call-directory.interface';\nimport { ApiJobDirectory, ApiJobMethod } from 'app/interfaces/api/api-job-directory.interface';\nimport { Job } from 'app/interfaces/job.interface';\nimport { WebSocketConnectionService } from 'app/services/websocket-connection.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\n/**\n * This is a sugar syntax for creating simple websocket mocks.\n * @example\n * providers: [\n *   mockWebSocket([\n *     mockCall('filesystem.stat': { gid: 0 } as FileSystemStat),\n *     mockCall('filesystem.stat', () => ({ gid: 0 } as FileSystemStat)),\n *     mockJob('filesystem.setacl', fakeSuccessfulJob()),\n *     ...\n *   }),\n * ]\n *\n * It also makes available MockWebSocketService, which allows customizing calls on the fly.\n *\n * If you need more customization, use ordinary mockProvider().\n * @example\n * providers: [\n *   mockProvider(WebSocketService, {\n *     call: jest.fn((method) => {\n *       if (method === 'filesystem.stat') {\n *         return of({ user: 'john' } as FileSystemStat);\n *       }\n *     })\n *   }),\n * ]\n */\n\nexport function mockWebSocket(\n  mockResponses?: (MockWebSocketCallResponse | MockWebSocketJobResponse)[],\n): (FactoryProvider | ExistingProvider | ValueProvider)[] {\n  return [\n    {\n      provide: WebSocketService,\n      useFactory: (router: Router, wsManager: WebSocketConnectionService, translate: TranslateService) => {\n        const mockWebSocketService = new MockWebSocketService(router, wsManager, translate);\n        (mockResponses || []).forEach((mockResponse) => {\n          if (mockResponse.type === MockWebSocketResponseType.Call) {\n            mockWebSocketService.mockCall(mockResponse.method, mockResponse.response);\n          } else if (mockResponse.type === MockWebSocketResponseType.Job) {\n            mockWebSocketService.mockJob(\n              mockResponse.method,\n              mockResponse.response as Job<ApiJobDirectory[ApiJobMethod]['response']>,\n            );\n          }\n        });\n        return mockWebSocketService;\n      },\n      deps: [Router, WebSocketConnectionService, TranslateService],\n    },\n    {\n      provide: MockWebSocketService,\n      useExisting: forwardRef(() => WebSocketService),\n    },\n    {\n      provide: WebSocketConnectionService,\n      useValue: ({ send: jest.fn() } as unknown as WebSocketConnectionService),\n    },\n  ];\n}\n\nexport function mockCall<M extends ApiCallMethod>(\n  method: M,\n  response: CallResponseOrFactory<M> = undefined,\n): MockWebSocketCallResponse {\n  return {\n    response,\n    method,\n    type: MockWebSocketResponseType.Call,\n  };\n}\n\n/**\n * Mocks immediate call() and job() responses and core.get_jobs when id is queried.\n * @see MockWebSocketService.mockJob()\n */\nexport function mockJob<M extends ApiJobMethod>(\n  method: M,\n  response: JobResponseOrFactory<M> = undefined,\n): MockWebSocketJobResponse {\n  return {\n    response,\n    method,\n    type: MockWebSocketResponseType.Job,\n  };\n}\n"],"version":3}