53e3cc1b1eb39661c09dfd92747f74f2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxPermissionsComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const checkbox_1 = require("@angular/material/checkbox");
const core_2 = require("@ngx-translate/core");
const posix_acl_enum_1 = require("app/enums/posix-acl.enum");
const mode_helper_1 = require("app/helpers/mode.helper");
const ix_errors_component_1 = require("app/modules/forms/ix-forms/components/ix-errors/ix-errors.component");
const ix_label_component_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.component");
const test_override_directive_1 = require("app/modules/test-id/test-override/test-override.directive");
const test_directive_1 = require("app/modules/test-id/test.directive");
let IxPermissionsComponent = class IxPermissionsComponent {
    constructor(controlDirective, cdr) {
        this.controlDirective = controlDirective;
        this.cdr = cdr;
        this.hideOthersPermissions = false;
        this.isDisabled = false;
        this.ownerRead = false;
        this.ownerWrite = false;
        this.ownerExec = false;
        this.groupRead = false;
        this.groupWrite = false;
        this.groupExec = false;
        this.otherRead = false;
        this.otherWrite = false;
        this.otherExec = false;
        this.owner = 0;
        this.grp = 0;
        this.other = 0;
        this.formatRe = /^[0-7][0-7][0-7]$/;
        this.onChange = () => { };
        this.onTouched = () => { };
        this.controlDirective.valueAccessor = this;
    }
    writeValue(value) {
        this.setPermissionsAndUpdateValue(value);
    }
    setPermissionsAndUpdateValue(value = '000') {
        if (value && this.formatRe.test(value)) {
            this.value = value;
        }
        else {
            this.value = '000';
            console.error('Invalid value format for ', this.label);
        }
        this.owner = parseInt(this.value[0]);
        this.grp = parseInt(this.value[1]);
        this.other = parseInt(this.value[2]);
        const permissions = (0, mode_helper_1.parseMode)(this.value);
        this.ownerRead = permissions.owner[posix_acl_enum_1.PosixPermission.Read];
        this.ownerWrite = permissions.owner[posix_acl_enum_1.PosixPermission.Write];
        this.ownerExec = permissions.owner[posix_acl_enum_1.PosixPermission.Execute];
        this.groupRead = permissions.group[posix_acl_enum_1.PosixPermission.Read];
        this.groupWrite = permissions.group[posix_acl_enum_1.PosixPermission.Write];
        this.groupExec = permissions.group[posix_acl_enum_1.PosixPermission.Execute];
        this.otherRead = permissions.other[posix_acl_enum_1.PosixPermission.Read];
        this.otherWrite = permissions.other[posix_acl_enum_1.PosixPermission.Write];
        this.otherExec = permissions.other[posix_acl_enum_1.PosixPermission.Execute];
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.cdr.markForCheck();
    }
    toggleOwnerRead() {
        if (this.ownerRead) {
            this.ownerRead = false;
            this.owner -= 4;
        }
        else {
            this.ownerRead = true;
            this.owner += 4;
        }
        this.updateValue();
    }
    toggleOwnerWrite() {
        if (this.ownerWrite) {
            this.ownerWrite = false;
            this.owner -= 2;
        }
        else {
            this.ownerWrite = true;
            this.owner += 2;
        }
        this.updateValue();
    }
    toggleOwnerExec() {
        if (this.ownerExec) {
            this.ownerExec = false;
            this.owner -= 1;
        }
        else {
            this.ownerExec = true;
            this.owner += 1;
        }
        this.updateValue();
    }
    toggleGroupRead() {
        if (this.groupRead) {
            this.groupRead = false;
            this.grp -= 4;
        }
        else {
            this.groupRead = true;
            this.grp += 4;
        }
        this.updateValue();
    }
    toggleGroupWrite() {
        if (this.groupWrite) {
            this.groupWrite = false;
            this.grp -= 2;
        }
        else {
            this.groupWrite = true;
            this.grp += 2;
        }
        this.updateValue();
    }
    toggleGroupExec() {
        if (this.groupExec) {
            this.groupExec = false;
            this.grp -= 1;
        }
        else {
            this.groupExec = true;
            this.grp += 1;
        }
        this.updateValue();
    }
    toggleOtherRead() {
        if (this.otherRead) {
            this.otherRead = false;
            this.other -= 4;
        }
        else {
            this.otherRead = true;
            this.other += 4;
        }
        this.updateValue();
    }
    toggleOtherWrite() {
        if (this.otherWrite) {
            this.otherWrite = false;
            this.other -= 2;
        }
        else {
            this.otherWrite = true;
            this.other += 2;
        }
        this.updateValue();
    }
    toggleOtherExec() {
        if (this.otherExec) {
            this.otherExec = false;
            this.other -= 1;
        }
        else {
            this.otherExec = true;
            this.other += 1;
        }
        this.updateValue();
    }
    updateValue() {
        this.value = this.owner.toString() + this.grp.toString() + this.other.toString();
        this.onChange(this.value);
    }
};
exports.IxPermissionsComponent = IxPermissionsComponent;
IxPermissionsComponent.ctorParameters = () => [
    { type: forms_1.NgControl },
    { type: core_1.ChangeDetectorRef }
];
IxPermissionsComponent.propDecorators = {
    label: [{ type: core_1.Input }],
    tooltip: [{ type: core_1.Input }],
    required: [{ type: core_1.Input }],
    hideOthersPermissions: [{ type: core_1.Input }]
};
exports.IxPermissionsComponent = IxPermissionsComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-permissions',
        template: require("./ix-permissions.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_label_component_1.IxLabelComponent,
            checkbox_1.MatCheckbox,
            ix_errors_component_1.IxErrorsComponent,
            core_2.TranslateModule,
            test_override_directive_1.TestOverrideDirective,
            test_directive_1.TestDirective,
        ],
    })
], IxPermissionsComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,