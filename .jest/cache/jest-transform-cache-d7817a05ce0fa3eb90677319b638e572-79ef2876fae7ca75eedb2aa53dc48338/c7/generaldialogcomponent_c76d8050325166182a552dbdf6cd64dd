31c5183e699a2c86e68e4e5c3e3c17b9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralDialogComponent = void 0;
const scrolling_1 = require("@angular/cdk/scrolling");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const core_2 = require("@ngx-translate/core");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
/**
 * General Dialog Component
 *
 * - able to be used as simple dialog to display text content, alert dialog with icon,
 * confirm dialog with single checkbox, able to display text as html or not
 * - works with MatDialogConf
 * - use interface GeneralDialogConfig for general config
 */
let GeneralDialogComponent = class GeneralDialogComponent {
    constructor(dialogRef) {
        this.dialogRef = dialogRef;
    }
};
exports.GeneralDialogComponent = GeneralDialogComponent;
GeneralDialogComponent.ctorParameters = () => [
    { type: dialog_1.MatDialogRef }
];
GeneralDialogComponent.propDecorators = {
    conf: [{ type: core_1.Input }]
};
exports.GeneralDialogComponent = GeneralDialogComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-general-dialog',
        template: require("./general-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            dialog_1.MatDialogTitle,
            ix_icon_component_1.IxIconComponent,
            scrolling_1.CdkScrollable,
            dialog_1.MatDialogContent,
            dialog_1.MatDialogActions,
            button_1.MatButton,
            core_2.TranslateModule,
            test_directive_1.TestDirective,
        ],
    })
], GeneralDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZGlhbG9nL2NvbXBvbmVudHMvZ2VuZXJhbC1kaWFsb2cvZ2VuZXJhbC1kaWFsb2cuY29tcG9uZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNEQUF1RDtBQUN2RCx3Q0FBMEU7QUFDMUUscURBQXFEO0FBQ3JELHFEQUVrQztBQUNsQyw4Q0FBc0Q7QUFFdEQsNkVBQXdFO0FBQ3hFLHVFQUFtRTtBQVduRTs7Ozs7OztHQU9HO0FBa0JJLElBQU0sc0JBQXNCLEdBQTVCLE1BQU0sc0JBQXNCO0lBR2pDLFlBQ1MsU0FBK0M7UUFBL0MsY0FBUyxHQUFULFNBQVMsQ0FBc0M7SUFDcEQsQ0FBQzs7QUFMTSx3REFBc0I7Ozs7O21CQUNoQyxZQUFLOztpQ0FESyxzQkFBc0I7SUFqQmxDLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7UUFDN0Isb0RBQThDO1FBRTlDLGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLE9BQU8sRUFBRTtZQUNQLHVCQUFjO1lBQ2QsbUNBQWU7WUFDZix5QkFBYTtZQUNiLHlCQUFnQjtZQUNoQix5QkFBZ0I7WUFDaEIsa0JBQVM7WUFDVCxzQkFBZTtZQUNmLDhCQUFhO1NBQ2Q7S0FDRixDQUFDO0dBQ1csc0JBQXNCLENBTWxDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2RpYWxvZy9jb21wb25lbnRzL2dlbmVyYWwtZGlhbG9nL2dlbmVyYWwtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtTY3JvbGxhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0QnV0dG9uIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYnV0dG9uJztcbmltcG9ydCB7XG4gIE1hdERpYWxvZ1JlZiwgTWF0RGlhbG9nVGl0bGUsIE1hdERpYWxvZ0NvbnRlbnQsIE1hdERpYWxvZ0FjdGlvbnMsXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IE1hcmtlZEljb24gfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2ljb24tbWFya2VyLnV0aWwnO1xuaW1wb3J0IHsgSXhJY29uQ29tcG9uZW50IH0gZnJvbSAnYXBwL21vZHVsZXMvaXgtaWNvbi9peC1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUZXN0RGlyZWN0aXZlIH0gZnJvbSAnYXBwL21vZHVsZXMvdGVzdC1pZC90ZXN0LmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhbERpYWxvZ0NvbmZpZyB7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGljb24/OiBNYXJrZWRJY29uO1xuICBpc19odG1sPzogYm9vbGVhbjtcbiAgaGlkZUNhbmNlbD86IGJvb2xlYW47XG4gIGNhbmNlbEJ0bk1zZz86IHN0cmluZztcbiAgY29uZmlybUJ0bk1zZz86IHN0cmluZztcbn1cbi8qKlxuICogR2VuZXJhbCBEaWFsb2cgQ29tcG9uZW50XG4gKlxuICogLSBhYmxlIHRvIGJlIHVzZWQgYXMgc2ltcGxlIGRpYWxvZyB0byBkaXNwbGF5IHRleHQgY29udGVudCwgYWxlcnQgZGlhbG9nIHdpdGggaWNvbixcbiAqIGNvbmZpcm0gZGlhbG9nIHdpdGggc2luZ2xlIGNoZWNrYm94LCBhYmxlIHRvIGRpc3BsYXkgdGV4dCBhcyBodG1sIG9yIG5vdFxuICogLSB3b3JrcyB3aXRoIE1hdERpYWxvZ0NvbmZcbiAqIC0gdXNlIGludGVyZmFjZSBHZW5lcmFsRGlhbG9nQ29uZmlnIGZvciBnZW5lcmFsIGNvbmZpZ1xuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpeC1nZW5lcmFsLWRpYWxvZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9nZW5lcmFsLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2dlbmVyYWwtZGlhbG9nLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbXG4gICAgTWF0RGlhbG9nVGl0bGUsXG4gICAgSXhJY29uQ29tcG9uZW50LFxuICAgIENka1Njcm9sbGFibGUsXG4gICAgTWF0RGlhbG9nQ29udGVudCxcbiAgICBNYXREaWFsb2dBY3Rpb25zLFxuICAgIE1hdEJ1dHRvbixcbiAgICBUcmFuc2xhdGVNb2R1bGUsXG4gICAgVGVzdERpcmVjdGl2ZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgR2VuZXJhbERpYWxvZ0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGNvbmY6IEdlbmVyYWxEaWFsb2dDb25maWc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPEdlbmVyYWxEaWFsb2dDb21wb25lbnQ+LFxuICApIHsgfVxufVxuIl0sInZlcnNpb24iOjN9