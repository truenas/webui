1dbb825de07f62c5f877e8b61e272f67
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewNfsPermissionsComponent = void 0;
const accordion_1 = require("@angular/cdk/accordion");
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const nfs_acl_enum_1 = require("app/enums/nfs-acl.enum");
const acl_interface_1 = require("app/interfaces/acl.interface");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const permissions_item_component_1 = require("app/pages/datasets/modules/permissions/components/permissions-item/permissions-item.component");
const nfs_ace_to_permission_item_utils_1 = require("app/pages/datasets/modules/permissions/utils/nfs-ace-to-permission-item.utils");
let ViewNfsPermissionsComponent = class ViewNfsPermissionsComponent {
    constructor(translate) {
        this.translate = translate;
        this.permissionItems = [];
        this.permissionDetails = [];
    }
    ngOnChanges() {
        this.transformAcl();
    }
    transformAcl() {
        this.permissionItems = [];
        this.permissionDetails = [];
        this.acl.acl.forEach((ace) => {
            this.permissionItems.push((0, nfs_ace_to_permission_item_utils_1.nfsAceToPermissionItem)(this.translate, ace));
            this.permissionDetails.push(this.aceToPermissionDetails(ace));
        });
    }
    aceToPermissionDetails(ace) {
        // Permissions
        let arePermissionsBasic;
        let permissions;
        if ((0, acl_interface_1.areNfsPermissionsBasic)(ace.perms)) {
            arePermissionsBasic = true;
            permissions = [this.translate.instant(nfs_acl_enum_1.nfsBasicPermissionLabels.get(ace.perms.BASIC))];
        }
        else {
            arePermissionsBasic = false;
            permissions = Object.entries(ace.perms)
                .filter(([, isOn]) => isOn)
                .map(([permission]) => {
                return this.translate.instant(nfs_acl_enum_1.nfsAdvancedPermissionLabels.get(permission));
            });
        }
        // Flags
        let areFlagsBasic;
        let flags;
        if ((0, acl_interface_1.areNfsFlagsBasic)(ace.flags)) {
            areFlagsBasic = true;
            flags = [this.translate.instant(nfs_acl_enum_1.nfsBasicFlagLabels.get(ace.flags.BASIC))];
        }
        else {
            areFlagsBasic = false;
            flags = Object.entries(ace.flags)
                .filter(([, isOn]) => isOn)
                .map(([flag]) => {
                return this.translate.instant(nfs_acl_enum_1.nfsAdvancedFlagLabels.get(flag));
            });
        }
        return {
            flags,
            permissions,
            areFlagsBasic,
            arePermissionsBasic,
        };
    }
};
exports.ViewNfsPermissionsComponent = ViewNfsPermissionsComponent;
ViewNfsPermissionsComponent.ctorParameters = () => [
    { type: core_2.TranslateService }
];
ViewNfsPermissionsComponent.propDecorators = {
    acl: [{ type: core_1.Input }]
};
exports.ViewNfsPermissionsComponent = ViewNfsPermissionsComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-view-nfs-permissions',
        template: require("./view-nfs-permissions.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            accordion_1.CdkAccordion,
            accordion_1.CdkAccordionItem,
            permissions_item_component_1.PermissionsItemComponent,
            ix_icon_component_1.IxIconComponent,
            core_2.TranslateModule,
        ],
    })
], ViewNfsPermissionsComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvcGVybWlzc2lvbnMvY29tcG9uZW50cy92aWV3LW5mcy1wZXJtaXNzaW9ucy92aWV3LW5mcy1wZXJtaXNzaW9ucy5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsc0RBQXdFO0FBQ3hFLHdDQUV1QjtBQUN2Qiw4Q0FBd0U7QUFDeEUseURBR2dDO0FBQ2hDLGdFQUlzQztBQUN0Qyw2RUFBd0U7QUFDeEUsOElBQXlJO0FBRXpJLG9JQUF1SDtBQXdCaEgsSUFBTSwyQkFBMkIsR0FBakMsTUFBTSwyQkFBMkI7SUFNdEMsWUFDVSxTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUpyQyxvQkFBZSxHQUFxQixFQUFFLENBQUM7UUFDdkMsc0JBQWlCLEdBQXdCLEVBQUUsQ0FBQztJQUl6QyxDQUFDO0lBRUosV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sWUFBWTtRQUNsQixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUEseURBQXNCLEVBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sc0JBQXNCLENBQUMsR0FBZTtRQUM1QyxjQUFjO1FBQ2QsSUFBSSxtQkFBNEIsQ0FBQztRQUNqQyxJQUFJLFdBQXFCLENBQUM7UUFFMUIsSUFBSSxJQUFBLHNDQUFzQixFQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3RDLG1CQUFtQixHQUFHLElBQUksQ0FBQztZQUMzQixXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyx1Q0FBd0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEYsQ0FBQzthQUFNLENBQUM7WUFDTixtQkFBbUIsR0FBRyxLQUFLLENBQUM7WUFDNUIsV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztpQkFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7aUJBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQywwQ0FBMkIsQ0FBQyxHQUFHLENBQUMsVUFBbUMsQ0FBQyxDQUFDLENBQUM7WUFDdEcsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsUUFBUTtRQUNSLElBQUksYUFBc0IsQ0FBQztRQUMzQixJQUFJLEtBQWUsQ0FBQztRQUVwQixJQUFJLElBQUEsZ0NBQWdCLEVBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDaEMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUNyQixLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQ0FBa0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUUsQ0FBQzthQUFNLENBQUM7WUFDTixhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7aUJBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO2lCQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxvQ0FBcUIsQ0FBQyxHQUFHLENBQUMsSUFBdUIsQ0FBQyxDQUFDLENBQUM7WUFDcEYsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsT0FBTztZQUNMLEtBQUs7WUFDTCxXQUFXO1lBQ1gsYUFBYTtZQUNiLG1CQUFtQjtTQUNwQixDQUFDO0lBQ0osQ0FBQzs7QUEvRFUsa0VBQTJCOzs7OztrQkFDckMsWUFBSzs7c0NBREssMkJBQTJCO0lBZHZDLElBQUEsZ0JBQVMsRUFBQztRQUNULFFBQVEsRUFBRSx5QkFBeUI7UUFDbkMsMERBQWtEO1FBRWxELGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLE9BQU8sRUFBRTtZQUNQLHdCQUFZO1lBQ1osNEJBQWdCO1lBQ2hCLHFEQUF3QjtZQUN4QixtQ0FBZTtZQUNmLHNCQUFlO1NBQ2hCO0tBQ0YsQ0FBQztHQUNXLDJCQUEyQixDQWdFdkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvcGVybWlzc2lvbnMvY29tcG9uZW50cy92aWV3LW5mcy1wZXJtaXNzaW9ucy92aWV3LW5mcy1wZXJtaXNzaW9ucy5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2RrQWNjb3JkaW9uLCBDZGtBY2NvcmRpb25JdGVtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2FjY29yZGlvbic7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UsIFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHtcbiAgTmZzQWR2YW5jZWRGbGFnLCBuZnNBZHZhbmNlZEZsYWdMYWJlbHMsXG4gIE5mc0FkdmFuY2VkUGVybWlzc2lvbiwgbmZzQWR2YW5jZWRQZXJtaXNzaW9uTGFiZWxzLCBuZnNCYXNpY0ZsYWdMYWJlbHMsIG5mc0Jhc2ljUGVybWlzc2lvbkxhYmVscyxcbn0gZnJvbSAnYXBwL2VudW1zL25mcy1hY2wuZW51bSc7XG5pbXBvcnQge1xuICBhcmVOZnNGbGFnc0Jhc2ljLFxuICBhcmVOZnNQZXJtaXNzaW9uc0Jhc2ljLFxuICBOZnNBY2wsIE5mc0FjbEl0ZW0sXG59IGZyb20gJ2FwcC9pbnRlcmZhY2VzL2FjbC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSXhJY29uQ29tcG9uZW50IH0gZnJvbSAnYXBwL21vZHVsZXMvaXgtaWNvbi9peC1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQZXJtaXNzaW9uc0l0ZW1Db21wb25lbnQgfSBmcm9tICdhcHAvcGFnZXMvZGF0YXNldHMvbW9kdWxlcy9wZXJtaXNzaW9ucy9jb21wb25lbnRzL3Blcm1pc3Npb25zLWl0ZW0vcGVybWlzc2lvbnMtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGVybWlzc2lvbkl0ZW0gfSBmcm9tICdhcHAvcGFnZXMvZGF0YXNldHMvbW9kdWxlcy9wZXJtaXNzaW9ucy9pbnRlcmZhY2VzL3Blcm1pc3Npb24taXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgbmZzQWNlVG9QZXJtaXNzaW9uSXRlbSB9IGZyb20gJ2FwcC9wYWdlcy9kYXRhc2V0cy9tb2R1bGVzL3Blcm1pc3Npb25zL3V0aWxzL25mcy1hY2UtdG8tcGVybWlzc2lvbi1pdGVtLnV0aWxzJztcblxuaW50ZXJmYWNlIFBlcm1pc3Npb25EZXRhaWxzIHtcbiAgYXJlUGVybWlzc2lvbnNCYXNpYzogYm9vbGVhbjtcbiAgcGVybWlzc2lvbnM6IHN0cmluZ1tdO1xuXG4gIGFyZUZsYWdzQmFzaWM6IGJvb2xlYW47XG4gIGZsYWdzOiBzdHJpbmdbXTtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXgtdmlldy1uZnMtcGVybWlzc2lvbnMnLFxuICB0ZW1wbGF0ZVVybDogJ3ZpZXctbmZzLXBlcm1pc3Npb25zLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdmlldy1uZnMtcGVybWlzc2lvbnMuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBDZGtBY2NvcmRpb24sXG4gICAgQ2RrQWNjb3JkaW9uSXRlbSxcbiAgICBQZXJtaXNzaW9uc0l0ZW1Db21wb25lbnQsXG4gICAgSXhJY29uQ29tcG9uZW50LFxuICAgIFRyYW5zbGF0ZU1vZHVsZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVmlld05mc1Blcm1pc3Npb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgYWNsOiBOZnNBY2w7XG5cbiAgcGVybWlzc2lvbkl0ZW1zOiBQZXJtaXNzaW9uSXRlbVtdID0gW107XG4gIHBlcm1pc3Npb25EZXRhaWxzOiBQZXJtaXNzaW9uRGV0YWlsc1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICkge31cblxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLnRyYW5zZm9ybUFjbCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB0cmFuc2Zvcm1BY2woKTogdm9pZCB7XG4gICAgdGhpcy5wZXJtaXNzaW9uSXRlbXMgPSBbXTtcbiAgICB0aGlzLnBlcm1pc3Npb25EZXRhaWxzID0gW107XG5cbiAgICB0aGlzLmFjbC5hY2wuZm9yRWFjaCgoYWNlKSA9PiB7XG4gICAgICB0aGlzLnBlcm1pc3Npb25JdGVtcy5wdXNoKG5mc0FjZVRvUGVybWlzc2lvbkl0ZW0odGhpcy50cmFuc2xhdGUsIGFjZSkpO1xuICAgICAgdGhpcy5wZXJtaXNzaW9uRGV0YWlscy5wdXNoKHRoaXMuYWNlVG9QZXJtaXNzaW9uRGV0YWlscyhhY2UpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWNlVG9QZXJtaXNzaW9uRGV0YWlscyhhY2U6IE5mc0FjbEl0ZW0pOiBQZXJtaXNzaW9uRGV0YWlscyB7XG4gICAgLy8gUGVybWlzc2lvbnNcbiAgICBsZXQgYXJlUGVybWlzc2lvbnNCYXNpYzogYm9vbGVhbjtcbiAgICBsZXQgcGVybWlzc2lvbnM6IHN0cmluZ1tdO1xuXG4gICAgaWYgKGFyZU5mc1Blcm1pc3Npb25zQmFzaWMoYWNlLnBlcm1zKSkge1xuICAgICAgYXJlUGVybWlzc2lvbnNCYXNpYyA9IHRydWU7XG4gICAgICBwZXJtaXNzaW9ucyA9IFt0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KG5mc0Jhc2ljUGVybWlzc2lvbkxhYmVscy5nZXQoYWNlLnBlcm1zLkJBU0lDKSldO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmVQZXJtaXNzaW9uc0Jhc2ljID0gZmFsc2U7XG4gICAgICBwZXJtaXNzaW9ucyA9IE9iamVjdC5lbnRyaWVzKGFjZS5wZXJtcylcbiAgICAgICAgLmZpbHRlcigoWywgaXNPbl0pID0+IGlzT24pXG4gICAgICAgIC5tYXAoKFtwZXJtaXNzaW9uXSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KG5mc0FkdmFuY2VkUGVybWlzc2lvbkxhYmVscy5nZXQocGVybWlzc2lvbiBhcyBOZnNBZHZhbmNlZFBlcm1pc3Npb24pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRmxhZ3NcbiAgICBsZXQgYXJlRmxhZ3NCYXNpYzogYm9vbGVhbjtcbiAgICBsZXQgZmxhZ3M6IHN0cmluZ1tdO1xuXG4gICAgaWYgKGFyZU5mc0ZsYWdzQmFzaWMoYWNlLmZsYWdzKSkge1xuICAgICAgYXJlRmxhZ3NCYXNpYyA9IHRydWU7XG4gICAgICBmbGFncyA9IFt0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KG5mc0Jhc2ljRmxhZ0xhYmVscy5nZXQoYWNlLmZsYWdzLkJBU0lDKSldO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmVGbGFnc0Jhc2ljID0gZmFsc2U7XG4gICAgICBmbGFncyA9IE9iamVjdC5lbnRyaWVzKGFjZS5mbGFncylcbiAgICAgICAgLmZpbHRlcigoWywgaXNPbl0pID0+IGlzT24pXG4gICAgICAgIC5tYXAoKFtmbGFnXSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KG5mc0FkdmFuY2VkRmxhZ0xhYmVscy5nZXQoZmxhZyBhcyBOZnNBZHZhbmNlZEZsYWcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZsYWdzLFxuICAgICAgcGVybWlzc2lvbnMsXG4gICAgICBhcmVGbGFnc0Jhc2ljLFxuICAgICAgYXJlUGVybWlzc2lvbnNCYXNpYyxcbiAgICB9O1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=