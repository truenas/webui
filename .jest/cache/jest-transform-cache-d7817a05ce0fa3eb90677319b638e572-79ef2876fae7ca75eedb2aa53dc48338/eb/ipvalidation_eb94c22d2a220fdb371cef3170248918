30f02bf5ba43a1a1c05436bd0042939b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ipv4or6Validator = ipv4or6Validator;
exports.ipv4or6cidrValidator = ipv4or6cidrValidator;
exports.ipv4or6OptionalCidrValidator = ipv4or6OptionalCidrValidator;
exports.ipv4Validator = ipv4Validator;
exports.ipv6Validator = ipv6Validator;
exports.ipValidator = ipValidator;
const ip_regex_1 = __importDefault(require("ip-regex"));
const is_cidr_1 = __importDefault(require("is-cidr"));
const lodash_es_1 = require("lodash-es");
// Accepts ipv4 or ipv6 addresses with no CIDR (ie, /24)
function ipv4or6Validator() {
    let thisControl;
    return function ipValidate(control) {
        if (!control.parent) {
            return null;
        }
        // Initializing the validator.
        if (!thisControl) {
            thisControl = control;
        }
        if (thisControl.value === '' || thisControl.value === undefined) {
            return null;
        }
        if (!(0, ip_regex_1.default)({ exact: true, includeBoundaries: true }).test(thisControl.value)) {
            return { ip2: true };
        }
        return null;
    };
}
// Accepts ipv4 or ipv6 addresses with a CIDR (ie, /24)
function ipv4or6cidrValidator() {
    let thisControl;
    return function ipValidate(control) {
        if (!control.parent) {
            return null;
        }
        // Initializing the validator.
        if (!thisControl) {
            thisControl = control;
        }
        if (thisControl.value === '' || thisControl.value === undefined) {
            return null;
        }
        if (!is_cidr_1.default.v4(thisControl.value) && !is_cidr_1.default.v6(thisControl.value)) {
            return { ip2: true };
        }
        return null;
    };
}
// Accepts ipv4 or ipv6 addresses with an OPTIONAL CIDR (ie, /24)
function ipv4or6OptionalCidrValidator() {
    let thisControl;
    return function ipValidate(control) {
        if (!control.parent) {
            return null;
        }
        // Initializing the validator.
        if (!thisControl) {
            thisControl = control;
        }
        if (thisControl.value === '' || thisControl.value === undefined) {
            return null;
        }
        if (!is_cidr_1.default.v4(thisControl.value) && !is_cidr_1.default.v6(thisControl.value)
            && !(0, ip_regex_1.default)({ exact: true, includeBoundaries: true }).test(thisControl.value)) {
            return { ip2: true };
        }
        return null;
    };
}
// Accepts ipv4 addresses with no CIDR (ie, /24)
function ipv4Validator() {
    let thisControl;
    return function ipValidate(control) {
        if (!control.parent) {
            return null;
        }
        // Initializing the validator.
        if (!thisControl) {
            thisControl = control;
        }
        if (thisControl.value === '' || thisControl.value === undefined) {
            return null;
        }
        if (!ip_regex_1.default.v4({ exact: true }).test(thisControl.value)) {
            return { ip2: true };
        }
        return null;
    };
}
// Accepts ipv6 addresses with no CIDR (ie, /24)
function ipv6Validator() {
    let thisControl;
    return function ipValidate(control) {
        if (!control.parent) {
            return null;
        }
        // Initializing the validator.
        if (!thisControl) {
            thisControl = control;
        }
        if (thisControl.value === '' || thisControl.value === undefined) {
            return null;
        }
        if (!ip_regex_1.default.v6({ exact: true }).test(thisControl.value)) {
            return { ip2: true };
        }
        return null;
    };
}
// Used only on sharing/iscsi/portal/portal-form
// TODO: Check what difference with ipv4or6Validator
function ipValidator(type = 'ipv4' || 'ipv6' || 'all') {
    const ipv4Regex = ip_regex_1.default.v4();
    const ipv6Regex = ip_regex_1.default.v6();
    let thisControl;
    return function isValidIp(control) {
        let error = null;
        if (!control.parent) {
            return null;
        }
        thisControl = control;
        if (thisControl.value === '' || thisControl.value === undefined) {
            return null;
        }
        function checkIp(ipType = 'ipv4' || 'ipv6') {
            const regex = ipType === 'ipv4' ? ipv4Regex : ipv6Regex;
            const wildcard = ipType === 'ipv4' ? '0.0.0.0' : '::';
            if ((0, lodash_es_1.indexOf)(thisControl.value, wildcard) !== -1) {
                for (const ip of thisControl.value) {
                    if (ip !== wildcard && regex.test(ip)) {
                        error = [ipType === 'ipv4' ? 'IPv4' : 'IPv6', wildcard, ip];
                        return false;
                    }
                }
            }
            return true;
        }
        if (thisControl.value.length > 1) {
            if (type === 'all') {
                if (!checkIp('ipv4') || !checkIp('ipv6')) {
                    return { ip: true, info: error };
                }
            }
            else if (!checkIp(type)) {
                return { ip: true, info: error };
            }
        }
        return null;
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdmFsaWRhdG9ycy9pcC12YWxpZGF0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBTUEsNENBdUJDO0FBR0Qsb0RBc0JDO0FBR0Qsb0VBdUJDO0FBR0Qsc0NBdUJDO0FBR0Qsc0NBc0JDO0FBSUQsa0NBNENDO0FBbExELHdEQUErQjtBQUMvQixzREFBNkI7QUFDN0IseUNBQW9DO0FBRXBDLHdEQUF3RDtBQUN4RCxTQUFnQixnQkFBZ0I7SUFDOUIsSUFBSSxXQUFnQyxDQUFDO0lBRXJDLE9BQU8sU0FBUyxVQUFVLENBQUMsT0FBNEI7UUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDeEIsQ0FBQztRQUVELElBQUksV0FBVyxDQUFDLEtBQUssS0FBSyxFQUFFLElBQUksV0FBVyxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNoRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxJQUFJLENBQUMsSUFBQSxrQkFBTyxFQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMvRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCx1REFBdUQ7QUFDdkQsU0FBZ0Isb0JBQW9CO0lBQ2xDLElBQUksV0FBZ0MsQ0FBQztJQUVyQyxPQUFPLFNBQVMsVUFBVSxDQUFDLE9BQTRCO1FBQ3JELElB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QixPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7WUFDbkMsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztBQUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvdmFsaWRhdG9ycy9pcC12YWxpZGF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Db250cm9sLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCBpcFJlZ2V4IGZyb20gJ2lwLXJlZ2V4JztcbmltcG9ydCBpc0NpZHIgZnJvbSAnaXMtY2lkcic7XG5pbXBvcnQgeyBpbmRleE9mIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuLy8gQWNjZXB0cyBpcHY0IG9yIGlwdjYgYWRkcmVzc2VzIHdpdGggbm8gQ0lEUiAoaWUsIC8yNClcbmV4cG9ydCBmdW5jdGlvbiBpcHY0b3I2VmFsaWRhdG9yKCk6IFZhbGlkYXRvckZuIHtcbiAgbGV0IHRoaXNDb250cm9sOiBGb3JtQ29udHJvbDxzdHJpbmc+O1xuXG4gIHJldHVybiBmdW5jdGlvbiBpcFZhbGlkYXRlKGNvbnRyb2w6IEZvcm1Db250cm9sPHN0cmluZz4pIHtcbiAgICBpZiAoIWNvbnRyb2wucGFyZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXppbmcgdGhlIHZhbGlkYXRvci5cbiAgICBpZiAoIXRoaXNDb250cm9sKSB7XG4gICAgICB0aGlzQ29udHJvbCA9IGNvbnRyb2w7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNDb250cm9sLnZhbHVlID09PSAnJyB8fCB0aGlzQ29udHJvbC52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWlwUmVnZXgoeyBleGFjdDogdHJ1ZSwgaW5jbHVkZUJvdW5kYXJpZXM6IHRydWUgfSkudGVzdCh0aGlzQ29udHJvbC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB7IGlwMjogdHJ1ZSB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG4vLyBBY2NlcHRzIGlwdjQgb3IgaXB2NiBhZGRyZXNzZXMgd2l0aCBhIENJRFIgKGllLCAvMjQpXG5leHBvcnQgZnVuY3Rpb24gaXB2NG9yNmNpZHJWYWxpZGF0b3IoKTogVmFsaWRhdG9yRm4ge1xuICBsZXQgdGhpc0NvbnRyb2w6IEZvcm1Db250cm9sPHN0cmluZz47XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGlwVmFsaWRhdGUoY29udHJvbDogRm9ybUNvbnRyb2w8c3RyaW5nPikge1xuICAgIGlmICghY29udHJvbC5wYXJlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemluZyB0aGUgdmFsaWRhdG9yLlxuICAgIGlmICghdGhpc0NvbnRyb2wpIHtcbiAgICAgIHRoaXNDb250cm9sID0gY29udHJvbDtcbiAgICB9XG4gICAgaWYgKHRoaXNDb250cm9sLnZhbHVlID09PSAnJyB8fCB0aGlzQ29udHJvbC52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWlzQ2lkci52NCh0aGlzQ29udHJvbC52YWx1ZSkgJiYgIWlzQ2lkci52Nih0aGlzQ29udHJvbC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB7IGlwMjogdHJ1ZSB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG4vLyBBY2NlcHRzIGlwdjQgb3IgaXB2NiBhZGRyZXNzZXMgd2l0aCBhbiBPUFRJT05BTCBDSURSIChpZSwgLzI0KVxuZXhwb3J0IGZ1bmN0aW9uIGlwdjRvcjZPcHRpb25hbENpZHJWYWxpZGF0b3IoKTogVmFsaWRhdG9yRm4ge1xuICBsZXQgdGhpc0NvbnRyb2w6IEZvcm1Db250cm9sPHN0cmluZz47XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGlwVmFsaWRhdGUoY29udHJvbDogRm9ybUNvbnRyb2w8c3RyaW5nPikge1xuICAgIGlmICghY29udHJvbC5wYXJlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemluZyB0aGUgdmFsaWRhdG9yLlxuICAgIGlmICghdGhpc0NvbnRyb2wpIHtcbiAgICAgIHRoaXNDb250cm9sID0gY29udHJvbDtcbiAgICB9XG4gICAgaWYgKHRoaXNDb250cm9sLnZhbHVlID09PSAnJyB8fCB0aGlzQ29udHJvbC52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWlzQ2lkci52NCh0aGlzQ29udHJvbC52YWx1ZSkgJiYgIWlzQ2lkci52Nih0aGlzQ29udHJvbC52YWx1ZSlcbiAgICAgICAgICAmJiAhaXBSZWdleCh7IGV4YWN0OiB0cnVlLCBpbmNsdWRlQm91bmRhcmllczogdHJ1ZSB9KS50ZXN0KHRoaXNDb250cm9sLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIHsgaXAyOiB0cnVlIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbi8vIEFjY2VwdHMgaXB2NCBhZGRyZXNzZXMgd2l0aCBubyBDSURSIChpZSwgLzI0KVxuZXhwb3J0IGZ1bmN0aW9uIGlwdjRWYWxpZGF0b3IoKTogVmFsaWRhdG9yRm4ge1xuICBsZXQgdGhpc0NvbnRyb2w6IEZvcm1Db250cm9sPHN0cmluZz47XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGlwVmFsaWRhdGUoY29udHJvbDogRm9ybUNvbnRyb2w8c3RyaW5nPikge1xuICAgIGlmICghY29udHJvbC5wYXJlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemluZyB0aGUgdmFsaWRhdG9yLlxuICAgIGlmICghdGhpc0NvbnRyb2wpIHtcbiAgICAgIHRoaXNDb250cm9sID0gY29udHJvbDtcbiAgICB9XG5cbiAgICBpZiAodGhpc0NvbnRyb2wudmFsdWUgPT09ICcnIHx8IHRoaXNDb250cm9sLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghaXBSZWdleC52NCh7IGV4YWN0OiB0cnVlIH0pLnRlc3QodGhpc0NvbnRyb2wudmFsdWUpKSB7XG4gICAgICByZXR1cm4geyBpcDI6IHRydWUgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuLy8gQWNjZXB0cyBpcHY2IGFkZHJlc3NlcyB3aXRoIG5vIENJRFIgKGllLCAvMjQpXG5leHBvcnQgZnVuY3Rpb24gaXB2NlZhbGlkYXRvcigpOiBWYWxpZGF0b3JGbiB7XG4gIGxldCB0aGlzQ29udHJvbDogRm9ybUNvbnRyb2w8c3RyaW5nPjtcblxuICByZXR1cm4gZnVuY3Rpb24gaXBWYWxpZGF0ZShjb250cm9sOiBGb3JtQ29udHJvbDxzdHJpbmc+KSB7XG4gICAgaWYgKCFjb250cm9sLnBhcmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHRoZSB2YWxpZGF0b3IuXG4gICAgaWYgKCF0aGlzQ29udHJvbCkge1xuICAgICAgdGhpc0NvbnRyb2wgPSBjb250cm9sO1xuICAgIH1cbiAgICBpZiAodGhpc0NvbnRyb2wudmFsdWUgPT09ICcnIHx8IHRoaXNDb250cm9sLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghaXBSZWdleC52Nih7IGV4YWN0OiB0cnVlIH0pLnRlc3QodGhpc0NvbnRyb2wudmFsdWUpKSB7XG4gICAgICByZXR1cm4geyBpcDI6IHRydWUgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuLy8gVXNlZCBvbmx5IG9uIHNoYXJpbmcvaXNjc2kvcG9ydGFsL3BvcnRhbC1mb3JtXG4vLyBUT0RPOiBDaGVjayB3aGF0IGRpZmZlcmVuY2Ugd2l0aCBpcHY0b3I2VmFsaWRhdG9yXG5leHBvcnQgZnVuY3Rpb24gaXBWYWxpZGF0b3IodHlwZTogc3RyaW5nID0gJ2lwdjQnIHx8ICdpcHY2JyB8fCAnYWxsJyk6IFZhbGlkYXRvckZuIHtcbiAgY29uc3QgaXB2NFJlZ2V4ID0gaXBSZWdleC52NCgpO1xuICBjb25zdCBpcHY2UmVnZXggPSBpcFJlZ2V4LnY2KCk7XG4gIGxldCB0aGlzQ29udHJvbDogRm9ybUNvbnRyb2w8c3RyaW5nPjtcblxuICByZXR1cm4gZnVuY3Rpb24gaXNWYWxpZElwKGNvbnRyb2w6IEZvcm1Db250cm9sPHN0cmluZz4pIHtcbiAgICBsZXQgZXJyb3IgPSBudWxsO1xuXG4gICAgaWYgKCFjb250cm9sLnBhcmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdGhpc0NvbnRyb2wgPSBjb250cm9sO1xuXG4gICAgaWYgKHRoaXNDb250cm9sLnZhbHVlID09PSAnJyB8fCB0aGlzQ29udHJvbC52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0lwKGlwVHlwZSA9ICdpcHY0JyB8fCAnaXB2NicpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IHJlZ2V4ID0gaXBUeXBlID09PSAnaXB2NCcgPyBpcHY0UmVnZXggOiBpcHY2UmVnZXg7XG4gICAgICBjb25zdCB3aWxkY2FyZCA9IGlwVHlwZSA9PT0gJ2lwdjQnID8gJzAuMC4wLjAnIDogJzo6JztcbiAgICAgIGlmIChpbmRleE9mKHRoaXNDb250cm9sLnZhbHVlLCB3aWxkY2FyZCkgIT09IC0xKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXAgb2YgdGhpc0NvbnRyb2wudmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXAgIT09IHdpbGRjYXJkICYmIHJlZ2V4LnRlc3QoaXApKSB7XG4gICAgICAgICAgICBlcnJvciA9IFtpcFR5cGUgPT09ICdpcHY0JyA/ICdJUHY0JyA6ICdJUHY2Jywgd2lsZGNhcmQsIGlwXTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzQ29udHJvbC52YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ2FsbCcpIHtcbiAgICAgICAgaWYgKCFjaGVja0lwKCdpcHY0JykgfHwgIWNoZWNrSXAoJ2lwdjYnKSkge1xuICAgICAgICAgIHJldHVybiB7IGlwOiB0cnVlLCBpbmZvOiBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFjaGVja0lwKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiB7IGlwOiB0cnVlLCBpbmZvOiBlcnJvciB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuIl0sInZlcnNpb24iOjN9