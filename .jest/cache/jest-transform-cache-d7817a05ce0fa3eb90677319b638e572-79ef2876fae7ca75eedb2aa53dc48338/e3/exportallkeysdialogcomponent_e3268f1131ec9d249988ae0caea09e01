dad893267128080698a038631ef716cd
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportAllKeysDialogComponent = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const operators_1 = require("rxjs/operators");
const dataset_interface_1 = require("app/interfaces/dataset.interface");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const download_service_1 = require("app/services/download.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let ExportAllKeysDialogComponent = class ExportAllKeysDialogComponent {
    constructor(errorHandler, ws, loader, dialogRef, download, dataset) {
        this.errorHandler = errorHandler;
        this.ws = ws;
        this.loader = loader;
        this.dialogRef = dialogRef;
        this.download = download;
        this.dataset = dataset;
    }
    onDownload() {
        const fileName = 'dataset_' + this.dataset.name + '_keys.json';
        const mimetype = 'application/json';
        this.ws.call('core.download', ['pool.dataset.export_keys', [this.dataset.name], fileName])
            .pipe(this.loader.withLoader(), this.errorHandler.catchError(), (0, operators_1.switchMap)(([, url]) => this.download.downloadUrl(url, fileName, mimetype)), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.dialogRef.close();
        });
    }
};
exports.ExportAllKeysDialogComponent = ExportAllKeysDialogComponent;
ExportAllKeysDialogComponent.ctorParameters = () => [
    { type: error_handler_service_1.ErrorHandlerService },
    { type: ws_service_1.WebSocketService },
    { type: app_loader_service_1.AppLoaderService },
    { type: dialog_1.MatDialogRef },
    { type: download_service_1.DownloadService },
    { type: dataset_interface_1.Dataset, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.ExportAllKeysDialogComponent = ExportAllKeysDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-export-all-keys-dialog',
        template: require("./export-all-keys-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], ExportAllKeysDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvZW5jcnlwdGlvbi9jb21wb25lbnRzL2V4cG9ydC1hbGwta2V5cy1kaWFsb2cvZXhwb3J0LWFsbC1rZXlzLWRpYWxvZy5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBQTJFO0FBQzNFLHFEQUF5RTtBQUN6RSx5REFBcUU7QUFDckUsOENBQTJDO0FBQzNDLHdFQUEyRDtBQUMzRCw4RUFBeUU7QUFDekUsb0VBQWdFO0FBQ2hFLDhFQUF5RTtBQUN6RSx3REFBMkQ7QUFTcEQsSUFBTSw0QkFBNEIsR0FBbEMsTUFBTSw0QkFBNEI7SUFDdkMsWUFDVSxZQUFpQyxFQUNqQyxFQUFvQixFQUNwQixNQUF3QixFQUN4QixTQUFxRCxFQUNyRCxRQUF5QixFQUNELE9BQWdCO1FBTHhDLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNqQyxPQUFFLEdBQUYsRUFBRSxDQUFrQjtRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUE0QztRQUNyRCxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUNELFlBQU8sR0FBUCxPQUFPLENBQVM7SUFDOUMsQ0FBQztJQUVMLFVBQVU7UUFDUixNQUFNLFFBQVEsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO1FBQy9ELE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDO1FBQ3BDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLDBCQUEwQixFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUN2RixJQUFJLENBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsRUFDOUIsSUFBQSxxQkFBUyxFQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQzFFLElBQUEsOEJBQWMsRUFBQyxJQUFJLENBQUMsQ0FDckI7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O0FBdkJVLG9FQUE0Qjs7Ozs7Ozs4REFPcEMsYUFBTSxTQUFDLHdCQUFlOzt1Q0FQZCw0QkFBNEI7SUFQeEMsSUFBQSw0QkFBWSxHQUFFO0lBQ2QsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLDJCQUEyQjtRQUNyQyw0REFBc0Q7UUFFdEQsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztHQUNXLDRCQUE0QixDQXdCeEMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2RhdGFzZXRzL21vZHVsZXMvZW5jcnlwdGlvbi9jb21wb25lbnRzL2V4cG9ydC1hbGwta2V5cy1kaWFsb2cvZXhwb3J0LWFsbC1rZXlzLWRpYWxvZy5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEsIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBVbnRpbERlc3Ryb3ksIHVudGlsRGVzdHJveWVkIH0gZnJvbSAnQG5nbmVhdC91bnRpbC1kZXN0cm95JztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IERhdGFzZXQgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9kYXRhc2V0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBBcHBMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvbG9hZGVyL2FwcC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEb3dubG9hZFNlcnZpY2UgfSBmcm9tICdhcHAvc2VydmljZXMvZG93bmxvYWQuc2VydmljZSc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL2Vycm9yLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dzLnNlcnZpY2UnO1xuXG5AVW50aWxEZXN0cm95KClcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LWV4cG9ydC1hbGwta2V5cy1kaWFsb2cnLFxuICB0ZW1wbGF0ZVVybDogJy4vZXhwb3J0LWFsbC1rZXlzLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2V4cG9ydC1hbGwta2V5cy1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEV4cG9ydEFsbEtleXNEaWFsb2dDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyU2VydmljZSxcbiAgICBwcml2YXRlIHdzOiBXZWJTb2NrZXRTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9hZGVyOiBBcHBMb2FkZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8RXhwb3J0QWxsS2V5c0RpYWxvZ0NvbXBvbmVudD4sXG4gICAgcHJpdmF0ZSBkb3dubG9hZDogRG93bmxvYWRTZXJ2aWNlLFxuICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YXNldDogRGF0YXNldCxcbiAgKSB7IH1cblxuICBvbkRvd25sb2FkKCk6IHZvaWQge1xuICAgIGNvbnN0IGZpbGVOYW1lID0gJ2RhdGFzZXRfJyArIHRoaXMuZGF0YXNldC5uYW1lICsgJ19rZXlzLmpzb24nO1xuICAgIGNvbnN0IG1pbWV0eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgIHRoaXMud3MuY2FsbCgnY29yZS5kb3dubG9hZCcsIFsncG9vbC5kYXRhc2V0LmV4cG9ydF9rZXlzJywgW3RoaXMuZGF0YXNldC5uYW1lXSwgZmlsZU5hbWVdKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRoaXMubG9hZGVyLndpdGhMb2FkZXIoKSxcbiAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIuY2F0Y2hFcnJvcigpLFxuICAgICAgICBzd2l0Y2hNYXAoKFssIHVybF0pID0+IHRoaXMuZG93bmxvYWQuZG93bmxvYWRVcmwodXJsLCBmaWxlTmFtZSwgbWltZXR5cGUpKSxcbiAgICAgICAgdW50aWxEZXN0cm95ZWQodGhpcyksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoKTtcbiAgICAgIH0pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=