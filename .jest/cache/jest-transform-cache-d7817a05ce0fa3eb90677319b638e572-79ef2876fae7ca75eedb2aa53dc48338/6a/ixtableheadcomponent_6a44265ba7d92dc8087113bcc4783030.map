{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/components/ix-table-head/ix-table-head.component.ts","mappings":";;;;;;;;;AAAA,4CAAmD;AACnD,wCAEuB;AACvB,uDAAuD;AACvD,yDAAqE;AACrE,6EAAwE;AACxE,uGAAsG;AACtG,wFAA+E;AAG/E,uEAAmE;AAkB5D,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAM/B,IAAI,gBAAgB;;QAClB,OAAO,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,CAAA,CAAC,CAAC;IAC3D,CAAC;IAED,YACU,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;QAPvB,kBAAa,GAAG,mCAAa,CAAC;IAQpC,CAAC;IAEJ,eAAe;QACb,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YACvE,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAgB;;QACrB,IAAI,MAAA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,0CAAE,cAAc,EAAE,CAAC;YACpD,OAAO;QACT,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC;QAC7D,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC;QAEvD,IAAI,SAAS,GAAG,gBAAgB,CAAC;QACjC,IAAI,MAAM,GAAG,aAAa,CAAC;QAE3B,IAAI,aAAa,KAAK,QAAQ,EAAE,CAAC;YAC/B,SAAS,GAAG,IAAI,CAAC;YACjB,MAAM,GAAG,QAAQ,CAAC;QACpB,CAAC;QACD,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;YACvB,SAAS,GAAG,mCAAa,CAAC,GAAG,CAAC;QAChC,CAAC;aAAM,IAAI,gBAAgB,KAAK,mCAAa,CAAC,GAAG,EAAE,CAAC;YAClD,SAAS,GAAG,mCAAa,CAAC,IAAI,CAAC;QACjC,CAAC;aAAM,IAAI,gBAAgB,KAAK,mCAAa,CAAC,IAAI,EAAE,CAAC;YACnD,SAAS,GAAG,IAAI,CAAC;QACnB,CAAC;QAED,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,MAAM;eACjD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAgC,CAAC;QAE9E,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;YAC3B,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,YAAY;YAC1D,MAAM;YACN,SAAS;YACT,MAAM;SACP,CAAC,CAAC;IACL,CAAC;;AApDU,oDAAoB;;;;;sBAC9B,YAAK;2BACL,YAAK;;+BAFK,oBAAoB;IAhBhC,IAAA,4BAAY,GAAE;IACd,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,qCAAqC;QAC/C,mDAA6C;QAE7C,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE;YACP,gBAAO;YACP,oBAAU;YACV,gBAAO;YACP,qDAA0B;YAC1B,mCAAe;YACf,8BAAa;SACd;KACF,CAAC;GACW,oBAAoB,CAqDhC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/components/ix-table-head/ix-table-head.component.ts"],"sourcesContent":["import { NgClass, NgStyle } from '@angular/common';\nimport {\n  AfterViewInit, ChangeDetectorRef, ChangeDetectionStrategy, Component, Input,\n} from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { IxIconComponent } from 'app/modules/ix-icon/ix-icon.component';\nimport { IxTableHeaderCellDirective } from 'app/modules/ix-table/directives/ix-header-cell.directive';\nimport { SortDirection } from 'app/modules/ix-table/enums/sort-direction.enum';\nimport { Column, ColumnComponent } from 'app/modules/ix-table/interfaces/column-component.class';\nimport { DataProvider } from 'app/modules/ix-table/interfaces/data-provider.interface';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-table-head, thead[ix-table-head]',\n  templateUrl: './ix-table-head.component.html',\n  styleUrls: ['ix-table-head.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    NgClass,\n    MatTooltip,\n    NgStyle,\n    IxTableHeaderCellDirective,\n    IxIconComponent,\n    TestDirective,\n  ],\n})\nexport class IxTableHeadComponent<T> implements AfterViewInit {\n  @Input() columns: Column<T, ColumnComponent<T>>[];\n  @Input() dataProvider: DataProvider<T>;\n\n  readonly SortDirection = SortDirection;\n\n  get displayedColumns(): Column<T, ColumnComponent<T>>[] {\n    return this.columns?.filter((column) => !column?.hidden);\n  }\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.dataProvider.currentPage$.pipe(untilDestroyed(this)).subscribe(() => {\n      this.cdr.detectChanges();\n    });\n  }\n\n  onSort(columnId: number): void {\n    if (this.displayedColumns[columnId]?.disableSorting) {\n      return;\n    }\n\n    const currentDirection = this.dataProvider.sorting.direction;\n    const currentActive = this.dataProvider.sorting.active;\n\n    let direction = currentDirection;\n    let active = currentActive;\n\n    if (currentActive !== columnId) {\n      direction = null;\n      active = columnId;\n    }\n    if (direction === null) {\n      direction = SortDirection.Asc;\n    } else if (currentDirection === SortDirection.Asc) {\n      direction = SortDirection.Desc;\n    } else if (currentDirection === SortDirection.Desc) {\n      direction = null;\n    }\n\n    const sortBy = (this.displayedColumns[columnId].sortBy\n      || this.displayedColumns[columnId].getValue) as (row: T) => string | number;\n\n    this.dataProvider.setSorting({\n      propertyName: this.displayedColumns[columnId].propertyName,\n      sortBy,\n      direction,\n      active,\n    });\n  }\n}\n"],"version":3}