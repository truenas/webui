c143c98dcb428685e4d7553cd9a81afc
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportedFormControlSelectors = void 0;
exports.indexControlsByLabel = indexControlsByLabel;
exports.getControlValues = getControlValues;
exports.fillControlValues = fillControlValues;
exports.getDisabledStates = getDisabledStates;
const ix_button_group_harness_1 = require("app/modules/forms/ix-forms/components/ix-button-group/ix-button-group.harness");
const ix_checkbox_harness_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.harness");
const ix_checkbox_list_harness_1 = require("app/modules/forms/ix-forms/components/ix-checkbox-list/ix-checkbox-list.harness");
const ix_chips_harness_1 = require("app/modules/forms/ix-forms/components/ix-chips/ix-chips.harness");
const ix_combobox_harness_1 = require("app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.harness");
const ix_explorer_harness_1 = require("app/modules/forms/ix-forms/components/ix-explorer/ix-explorer.harness");
const ix_file_input_harness_1 = require("app/modules/forms/ix-forms/components/ix-file-input/ix-file-input.harness");
const ix_icon_group_harness_1 = require("app/modules/forms/ix-forms/components/ix-icon-group/ix-icon-group.harness");
const ix_input_harness_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.harness");
const ix_ip_input_with_netmask_harness_1 = require("app/modules/forms/ix-forms/components/ix-ip-input-with-netmask/ix-ip-input-with-netmask.harness");
const ix_permissions_harness_1 = require("app/modules/forms/ix-forms/components/ix-permissions/ix-permissions.harness");
const ix_radio_group_harness_1 = require("app/modules/forms/ix-forms/components/ix-radio-group/ix-radio-group.harness");
const ix_select_harness_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.harness");
const ix_slide_toggle_harness_1 = require("app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.harness");
const ix_star_rating_harness_1 = require("app/modules/forms/ix-forms/components/ix-star-rating/ix-star-rating.harness");
const ix_textarea_harness_1 = require("app/modules/forms/ix-forms/components/ix-textarea/ix-textarea.harness");
const scheduler_harness_1 = require("app/modules/scheduler/components/scheduler/scheduler.harness");
exports.supportedFormControlSelectors = [
    ix_input_harness_1.IxInputHarness,
    ix_checkbox_harness_1.IxCheckboxHarness,
    ix_permissions_harness_1.IxPermissionsHarness,
    ix_select_harness_1.IxSelectHarness,
    ix_textarea_harness_1.IxTextareaHarness,
    ix_combobox_harness_1.IxComboboxHarness,
    ix_chips_harness_1.IxChipsHarness,
    ix_explorer_harness_1.IxExplorerHarness,
    ix_slide_toggle_harness_1.IxSlideToggleHarness,
    ix_radio_group_harness_1.IxRadioGroupHarness,
    ix_checkbox_list_harness_1.IxCheckboxListHarness,
    scheduler_harness_1.SchedulerHarness,
    ix_ip_input_with_netmask_harness_1.IxIpInputWithNetmaskHarness,
    ix_file_input_harness_1.IxFileInputHarness,
    ix_star_rating_harness_1.IxStarRatingHarness,
    ix_button_group_harness_1.IxButtonGroupHarness,
    ix_icon_group_harness_1.IxIconGroupHarness,
];
function indexControlsByLabel(controls) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = {};
        for (const control of controls) {
            const label = yield control.getLabelText();
            result[label] = control;
        }
        return result;
    });
}
function getControlValues(controlsDict) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = {};
        // eslint-disable-next-line guard-for-in,no-restricted-syntax
        for (const label in controlsDict) {
            const control = controlsDict[label];
            result[label] = (yield control.getValue());
        }
        return result;
    });
}
function fillControlValues(controlsDict, values) {
    return __awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line guard-for-in,no-restricted-syntax
        for (const label in values) {
            const control = controlsDict[label];
            if (!control) {
                throw new Error(`Could not find control with label ${label}.`);
            }
            yield control.setValue(values[label]);
        }
    });
}
function getDisabledStates(controlsDict) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = {};
        // eslint-disable-next-line guard-for-in,no-restricted-syntax
        for (const label in controlsDict) {
            const control = controlsDict[label];
            result[label] = yield control.isDisabled();
        }
        return result;
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,