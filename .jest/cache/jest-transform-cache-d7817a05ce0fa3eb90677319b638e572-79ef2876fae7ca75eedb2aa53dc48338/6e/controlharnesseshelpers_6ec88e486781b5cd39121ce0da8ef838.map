{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/testing/control-harnesses.helpers.ts","mappings":";;;;;;;;;;;;AA6CA,oDAUC;AAED,4CAYC;AAED,8CAcC;AAED,8CAYC;AAnGD,2HAAqH;AACrH,+GAA0G;AAC1G,8HAAwH;AACxH,sGAAiG;AACjG,+GAA0G;AAC1G,+GAA0G;AAC1G,qHAA+G;AAC/G,qHAA+G;AAC/G,sGAAiG;AACjG,sJAEyG;AACzG,wHAAmH;AACnH,wHAAkH;AAClH,yGAAoG;AACpG,2HAAqH;AACrH,wHAAkH;AAClH,+GAA0G;AAE1G,oGAAgG;AAEnF,QAAA,6BAA6B,GAAG;IAC3C,iCAAc;IACd,uCAAiB;IACjB,6CAAoB;IACpB,mCAAe;IACf,uCAAiB;IACjB,uCAAiB;IACjB,iCAAc;IACd,uCAAiB;IACjB,8CAAoB;IACpB,4CAAmB;IACnB,gDAAqB;IACrB,oCAAgB;IAChB,8DAA2B;IAC3B,0CAAkB;IAClB,4CAAmB;IACnB,8CAAoB;IACpB,0CAAkB;CACV,CAAC;AAMX,SAAsB,oBAAoB,CACxC,QAAuC;;QAEvC,MAAM,MAAM,GAAgD,EAAE,CAAC;QAC/D,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC/B,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,YAAY,EAAE,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;QAC1B,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAED,SAAsB,gBAAgB,CACpC,YAAyD;;QAEzD,MAAM,MAAM,GAAyC,EAAE,CAAC;QACxD,6DAA6D;QAC7D,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE,CAAC;YACjC,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAyB,CAAC;YAE5D,MAAM,CAAC,KAAK,CAAC,IAAG,MAAM,OAAO,CAAC,QAAQ,EAA0B,CAAA,CAAC;QACnE,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAED,SAAsB,iBAAiB,CACrC,YAAyD,EACzD,MAA+B;;QAE/B,6DAA6D;QAC7D,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAyB,CAAC;YAE5D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,KAAK,CAAC,qCAAqC,KAAK,GAAG,CAAC,CAAC;YACjE,CAAC;YAED,MAAM,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;CAAA;AAED,SAAsB,iBAAiB,CACrC,YAAyD;;QAEzD,MAAM,MAAM,GAA4B,EAAE,CAAC;QAC3C,6DAA6D;QAC7D,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE,CAAC;YACjC,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAyB,CAAC;YAE5D,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;QAC7C,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/testing/control-harnesses.helpers.ts"],"sourcesContent":["import { IxButtonGroupHarness } from 'app/modules/forms/ix-forms/components/ix-button-group/ix-button-group.harness';\nimport { IxCheckboxHarness } from 'app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.harness';\nimport { IxCheckboxListHarness } from 'app/modules/forms/ix-forms/components/ix-checkbox-list/ix-checkbox-list.harness';\nimport { IxChipsHarness } from 'app/modules/forms/ix-forms/components/ix-chips/ix-chips.harness';\nimport { IxComboboxHarness } from 'app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.harness';\nimport { IxExplorerHarness } from 'app/modules/forms/ix-forms/components/ix-explorer/ix-explorer.harness';\nimport { IxFileInputHarness } from 'app/modules/forms/ix-forms/components/ix-file-input/ix-file-input.harness';\nimport { IxIconGroupHarness } from 'app/modules/forms/ix-forms/components/ix-icon-group/ix-icon-group.harness';\nimport { IxInputHarness } from 'app/modules/forms/ix-forms/components/ix-input/ix-input.harness';\nimport {\n  IxIpInputWithNetmaskHarness,\n} from 'app/modules/forms/ix-forms/components/ix-ip-input-with-netmask/ix-ip-input-with-netmask.harness';\nimport { IxPermissionsHarness } from 'app/modules/forms/ix-forms/components/ix-permissions/ix-permissions.harness';\nimport { IxRadioGroupHarness } from 'app/modules/forms/ix-forms/components/ix-radio-group/ix-radio-group.harness';\nimport { IxSelectHarness } from 'app/modules/forms/ix-forms/components/ix-select/ix-select.harness';\nimport { IxSlideToggleHarness } from 'app/modules/forms/ix-forms/components/ix-slide-toggle/ix-slide-toggle.harness';\nimport { IxStarRatingHarness } from 'app/modules/forms/ix-forms/components/ix-star-rating/ix-star-rating.harness';\nimport { IxTextareaHarness } from 'app/modules/forms/ix-forms/components/ix-textarea/ix-textarea.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { SchedulerHarness } from 'app/modules/scheduler/components/scheduler/scheduler.harness';\n\nexport const supportedFormControlSelectors = [\n  IxInputHarness,\n  IxCheckboxHarness,\n  IxPermissionsHarness,\n  IxSelectHarness,\n  IxTextareaHarness,\n  IxComboboxHarness,\n  IxChipsHarness,\n  IxExplorerHarness,\n  IxSlideToggleHarness,\n  IxRadioGroupHarness,\n  IxCheckboxListHarness,\n  SchedulerHarness,\n  IxIpInputWithNetmaskHarness,\n  IxFileInputHarness,\n  IxStarRatingHarness,\n  IxButtonGroupHarness,\n  IxIconGroupHarness,\n] as const;\n\nexport type SupportedFormControlHarness = InstanceType<(typeof supportedFormControlSelectors)[number]>;\n\nexport type IxFormBasicValueType = string | number | boolean | string[] | number[];\n\nexport async function indexControlsByLabel(\n  controls: SupportedFormControlHarness[],\n): Promise<Record<string, SupportedFormControlHarness>> {\n  const result: Record<string, SupportedFormControlHarness> = {};\n  for (const control of controls) {\n    const label = await control.getLabelText();\n    result[label] = control;\n  }\n\n  return result;\n}\n\nexport async function getControlValues(\n  controlsDict: Record<string, SupportedFormControlHarness>,\n): Promise<Record<string, IxFormBasicValueType>> {\n  const result: Record<string, IxFormBasicValueType> = {};\n  // eslint-disable-next-line guard-for-in,no-restricted-syntax\n  for (const label in controlsDict) {\n    const control = controlsDict[label] as IxFormControlHarness;\n\n    result[label] = await control.getValue() as IxFormBasicValueType;\n  }\n\n  return result;\n}\n\nexport async function fillControlValues(\n  controlsDict: Record<string, SupportedFormControlHarness>,\n  values: Record<string, unknown>,\n): Promise<void> {\n  // eslint-disable-next-line guard-for-in,no-restricted-syntax\n  for (const label in values) {\n    const control = controlsDict[label] as IxFormControlHarness;\n\n    if (!control) {\n      throw new Error(`Could not find control with label ${label}.`);\n    }\n\n    await control.setValue(values[label]);\n  }\n}\n\nexport async function getDisabledStates(\n  controlsDict: Record<string, SupportedFormControlHarness>,\n): Promise<Record<string, boolean>> {\n  const result: Record<string, boolean> = {};\n  // eslint-disable-next-line guard-for-in,no-restricted-syntax\n  for (const label in controlsDict) {\n    const control = controlsDict[label] as IxFormControlHarness;\n\n    result[label] = await control.isDisabled();\n  }\n\n  return result;\n}\n"],"version":3}