1d50c952b5b0798d9b4c1981d00c6bf0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedirectService = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const window_helper_1 = require("app/helpers/window.helper");
const redirect_dialog_component_1 = require("app/modules/dialog/components/redirect-dialog/redirect-dialog.component");
const ws_service_1 = require("app/services/ws.service");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
let RedirectService = class RedirectService {
    constructor(ws, translate, matDialog, store$, window) {
        this.ws = ws;
        this.translate = translate;
        this.matDialog = matDialog;
        this.store$ = store$;
        this.window = window;
    }
    openWindow(url, target) {
        if (!url.includes('http://')) {
            this.window.open(url, target);
            return;
        }
        this.store$.pipe(system_config_selectors_1.waitForGeneralConfig, (0, operators_1.take)(1), (0, until_destroy_1.untilDestroyed)(this)).subscribe((config) => {
            if (!config.ui_httpsredirect) {
                this.window.open(url, target);
                return;
            }
            this.matDialog.open(redirect_dialog_component_1.RedirectDialogComponent, {
                data: {
                    title: this.translate.instant('Enabled HTTPS Redirect'),
                    message: this.translate.instant(`You are trying to open:<br>
{url}<br><br>
Because HTTP to HTTPS redirect is enabled in settings your browser will force HTTPS connection for this URL.<br>
This may create issues if app does not support secure connections.<br>
<br>
You can try opening app url in an incognito mode.<br>
Alternatively you can disable redirect in Settings, clear browser cache and try again.`, { url }),
                    url,
                },
            }).afterClosed().pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
                this.window.open(url, target);
            });
        });
    }
};
exports.RedirectService = RedirectService;
RedirectService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: core_2.TranslateService },
    { type: dialog_1.MatDialog },
    { type: store_1.Store },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.RedirectService = RedirectService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], RedirectService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL3JlZGlyZWN0LnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBQW1EO0FBQ25ELHFEQUFxRDtBQUNyRCx5REFBcUU7QUFDckUsdUNBQW9DO0FBQ3BDLDhDQUF1RDtBQUN2RCw4Q0FBOEM7QUFDOUMsNkRBQW1EO0FBRW5ELHVIQUFrSDtBQUNsSCx3REFBMkQ7QUFFM0QsNkZBQXVGO0FBTWhGLElBQU0sZUFBZSxHQUFyQixNQUFNLGVBQWU7SUFDMUIsWUFDWSxFQUFvQixFQUN0QixTQUEyQixFQUMzQixTQUFvQixFQUNwQixNQUF1QixFQUNQLE1BQWM7UUFKNUIsT0FBRSxHQUFGLEVBQUUsQ0FBa0I7UUFDdEIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUNQLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDckMsQ0FBQztJQUVKLFVBQVUsQ0FBQyxHQUFXLEVBQUUsTUFBZTtRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5QixPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDhDQUFvQixFQUFFLElBQUEsZ0JBQUksRUFBQyxDQUFDLENBQUMsRUFBRSxJQUFBLDhCQUFjLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6RixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDOUIsT0FBTztZQUNULENBQUM7WUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxtREFBdUIsRUFBRTtnQkFDM0MsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztvQkFDdkQsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDOzs7Ozs7dUZBTTZDLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQztvQkFDdkYsR0FBRztpQkFDa0I7YUFDeEIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFBLGtCQUFNLEVBQUMsT0FBTyxDQUFDLEVBQUUsSUFBQSw4QkFBYyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDMUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQW5DVSwwQ0FBZTs7Ozs7O3lDQU12QixhQUFNLFNBQUMsc0JBQU07OzBCQU5MLGVBQWU7SUFKM0IsSUFBQSw0QkFBWSxHQUFFO0lBQ2QsSUFBQSxpQkFBVSxFQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLGVBQWUsQ0FvQzNCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9yZWRpcmVjdC5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICdhcHAvaGVscGVycy93aW5kb3cuaGVscGVyJztcbmltcG9ydCB7IFJlZGlyZWN0RGlhbG9nRGF0YSB9IGZyb20gJ2FwcC9tb2R1bGVzL2RpYWxvZy9jb21wb25lbnRzL3JlZGlyZWN0LWRpYWxvZy9yZWRpcmVjdC1kaWFsb2ctZGF0YS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUmVkaXJlY3REaWFsb2dDb21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9kaWFsb2cvY29tcG9uZW50cy9yZWRpcmVjdC1kaWFsb2cvcmVkaXJlY3QtZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwU3RhdGUgfSBmcm9tICdhcHAvc3RvcmUnO1xuaW1wb3J0IHsgd2FpdEZvckdlbmVyYWxDb25maWcgfSBmcm9tICdhcHAvc3RvcmUvc3lzdGVtLWNvbmZpZy9zeXN0ZW0tY29uZmlnLnNlbGVjdG9ycyc7XG5cbkBVbnRpbERlc3Ryb3koKVxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFJlZGlyZWN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCB3czogV2ViU29ja2V0U2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcml2YXRlIG1hdERpYWxvZzogTWF0RGlhbG9nLFxuICAgIHByaXZhdGUgc3RvcmUkOiBTdG9yZTxBcHBTdGF0ZT4sXG4gICAgQEluamVjdChXSU5ET1cpIHByaXZhdGUgd2luZG93OiBXaW5kb3csXG4gICkge31cblxuICBvcGVuV2luZG93KHVybDogc3RyaW5nLCB0YXJnZXQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoIXVybC5pbmNsdWRlcygnaHR0cDovLycpKSB7XG4gICAgICB0aGlzLndpbmRvdy5vcGVuKHVybCwgdGFyZ2V0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdG9yZSQucGlwZSh3YWl0Rm9yR2VuZXJhbENvbmZpZywgdGFrZSgxKSwgdW50aWxEZXN0cm95ZWQodGhpcykpLnN1YnNjcmliZSgoY29uZmlnKSA9PiB7XG4gICAgICBpZiAoIWNvbmZpZy51aV9odHRwc3JlZGlyZWN0KSB7XG4gICAgICAgIHRoaXMud2luZG93Lm9wZW4odXJsLCB0YXJnZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm1hdERpYWxvZy5vcGVuKFJlZGlyZWN0RGlhbG9nQ29tcG9uZW50LCB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0aXRsZTogdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnRW5hYmxlZCBIVFRQUyBSZWRpcmVjdCcpLFxuICAgICAgICAgIG1lc3NhZ2U6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoYFlvdSBhcmUgdHJ5aW5nIHRvIG9wZW46PGJyPlxue3VybH08YnI+PGJyPlxuQmVjYXVzZSBIVFRQIHRvIEhUVFBTIHJlZGlyZWN0IGlzIGVuYWJsZWQgaW4gc2V0dGluZ3MgeW91ciBicm93c2VyIHdpbGwgZm9yY2UgSFRUUFMgY29ubmVjdGlvbiBmb3IgdGhpcyBVUkwuPGJyPlxuVGhpcyBtYXkgY3JlYXRlIGlzc3VlcyBpZiBhcHAgZG9lcyBub3Qgc3VwcG9ydCBzZWN1cmUgY29ubmVjdGlvbnMuPGJyPlxuPGJyPlxuWW91IGNhbiB0cnkgb3BlbmluZyBhcHAgdXJsIGluIGFuIGluY29nbml0byBtb2RlLjxicj5cbkFsdGVybmF0aXZlbHkgeW91IGNhbiBkaXNhYmxlIHJlZGlyZWN0IGluIFNldHRpbmdzLCBjbGVhciBicm93c2VyIGNhY2hlIGFuZCB0cnkgYWdhaW4uYCwgeyB1cmwgfSksXG4gICAgICAgICAgdXJsLFxuICAgICAgICB9IGFzIFJlZGlyZWN0RGlhbG9nRGF0YSxcbiAgICAgIH0pLmFmdGVyQ2xvc2VkKCkucGlwZShmaWx0ZXIoQm9vbGVhbiksIHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLndpbmRvdy5vcGVuKHVybCwgdGFyZ2V0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=