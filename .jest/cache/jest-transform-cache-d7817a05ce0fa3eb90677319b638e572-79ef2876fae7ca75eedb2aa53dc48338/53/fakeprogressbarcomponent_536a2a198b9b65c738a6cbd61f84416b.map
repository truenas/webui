{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/loader/components/fake-progress-bar/fake-progress-bar.component.ts","mappings":";;;;;;;;;AAAA,oDAE6B;AAC7B,wCAOuB;AACvB,iEAAgE;AAChE,+BAAyC;AACzC,8CAAgD;AAGhD;;;GAGG;AAgBI,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IAoBnC,YACU,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;QAdvB,aAAQ,GAAG,IAAI;QAKf,mBAAc,GAAG,IAAI;QAG9B,gBAAW,GAAG,KAAK,CAAC;QAEZ,SAAI,GAAG,IAAI,cAAO,EAAQ,CAAC;QAClB,eAAU,GAAG,GAAG,CAAC;IAI/B,CAAC;IAEJ,WAAW,CAAC,OAA8B;QACxC,IAAI,CAAC,CAAC,SAAS,IAAI,OAAO,CAAC,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACnB,CAAC;IAEO,KAAK;QACX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QACxB,IAAA,eAAQ,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAC5B,IAAA,eAAG,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAC/C,IAAA,qBAAS,EAAC,IAAI,CAAC,IAAI,CAAC,CACrB,CAAC,SAAS,CAAC;YACV,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YAC1B,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE;gBACb,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpB,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;oBACzB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;gBAC1B,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YAC1B,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAEO,aAAa,CAAC,QAAgB;QACpC,IAAI,QAAQ,KAAK,CAAC,EAAE,CAAC;YACnB,OAAO,CAAC,CAAC;QACX,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;QAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE5B,OAAO,GAAG,GAAG,WAAW,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;IACnD,CAAC;;AAvEU,4DAAwB;;;;;sBAClC,YAAK;uBAML,YAAK;6BAKL,YAAK;;mCAZK,wBAAwB;IAfpC,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,uDAAiD;QAEjD,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE;YACV,IAAA,oBAAO,EAAC,SAAS,EAAE;gBACjB,IAAA,uBAAU,EAAC,QAAQ,EAAE;oBACnB,IAAA,oBAAO,EAAC,aAAa,EAAE,IAAA,kBAAK,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC9C,CAAC;aACH,CAAC;SACH;QACD,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,CAAC,6BAAc,CAAC;KAC1B,CAAC;GACW,wBAAwB,CAwEpC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/loader/components/fake-progress-bar/fake-progress-bar.component.ts"],"sourcesContent":["import {\n  animate, style, transition, trigger,\n} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport { MatProgressBar } from '@angular/material/progress-bar';\nimport { interval, Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { IxSimpleChanges } from 'app/interfaces/simple-changes.interface';\n\n/**\n * Show a bar that will show like it's doing something\n * and never complete until [loading] is set to false again.\n */\n@Component({\n  selector: 'ix-fake-progress-bar',\n  templateUrl: './fake-progress-bar.component.html',\n  styleUrls: ['./fake-progress-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('fadeOut', [\n      transition(':leave', [\n        animate('150ms 100ms', style({ opacity: 0 })),\n      ]),\n    ]),\n  ],\n  standalone: true,\n  imports: [MatProgressBar],\n})\nexport class FakeProgressBarComponent implements OnChanges, OnDestroy {\n  @Input() loading: boolean;\n\n  /**\n   * Pretend time for the whole progress bar.\n   * Will never reach it, getting slower and slower.\n   */\n  @Input() duration = 1000;\n\n  /**\n   * Automatically fades out progress bar when loading becomes false.\n   */\n  @Input() hideOnComplete = true;\n\n  progress: number;\n  isAnimating = false;\n\n  private stop = new Subject<void>();\n  private readonly redrawTime = 200;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  ngOnChanges(changes: IxSimpleChanges<this>): void {\n    if (!('loading' in changes)) {\n      return;\n    }\n\n    if (this.loading) {\n      this.start();\n    } else {\n      this.stop.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stop.next();\n  }\n\n  private start(): void {\n    this.isAnimating = true;\n    this.cdr.markForCheck();\n    interval(this.redrawTime).pipe(\n      map((sequence) => this.getPercentage(sequence)),\n      takeUntil(this.stop),\n    ).subscribe({\n      next: (progress) => {\n        this.progress = progress;\n        this.cdr.markForCheck();\n      },\n      complete: () => {\n        this.progress = 100;\n        setTimeout(() => {\n          this.isAnimating = false;\n          this.cdr.markForCheck();\n        });\n        this.cdr.markForCheck();\n      },\n    });\n  }\n\n  private getPercentage(sequence: number): number {\n    if (sequence === 0) {\n      return 0;\n    }\n\n    const timeElapsed = this.redrawTime * sequence;\n    const scale = this.duration;\n\n    return 100 * timeElapsed / (timeElapsed + scale);\n  }\n}\n"],"version":3}