{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/dataset-service/dataset.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,8CAAuD;AACvD,yCAAiC;AACjC,+BAAsC;AACtC,8CAAqC;AACrC,qEAAgE;AAEhE,sEAAkE;AAElE,iEAAgE;AAChE,wDAA2D;AAGpD,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YACU,EAAoB,EACpB,MAAqB,EACrB,SAA2B;QAF3B,OAAE,GAAF,EAAE,CAAkB;QACpB,WAAM,GAAN,MAAM,CAAe;QACrB,cAAS,GAAT,SAAS,CAAkB;IAClC,CAAC;IAEJ,sBAAsB;QACpB,OAAO,GAAG,EAAE;YACV,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,IAAI,CACjD,IAAA,eAAG,EAAC,CAAC,WAAW,EAAE,EAAE;gBAClB,MAAM,KAAK,GAAuB,EAAE,CAAC;gBACrC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;oBACjC,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC3C,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBAC9B,KAAK,CAAC,IAAI,CAAC;4BACT,IAAI,EAAE,UAAU;4BAChB,WAAW,EAAE,KAAK;4BAClB,IAAI,EAAE,UAAU;4BAChB,IAAI,EAAE,qCAAgB,CAAC,SAAS;4BAChC,QAAQ,EAAE,EAAE;yBACb,CAAC,CAAC;wBACH,OAAO;oBACT,CAAC;oBAED,IAAI,MAAM,GAAG,IAAA,gBAAI,EAAC,KAAK,EAAE,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBACpD,IAAI,CAAC,GAAG,CAAC,CAAC;oBACV,OAAO,IAAA,gBAAI,EAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;wBACxD,MAAM,GAAG,IAAA,gBAAI,EAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;oBAC9D,CAAC;oBAED,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;wBACnB,IAAI,EAAE,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;wBAC3C,QAAQ,EAAE,EAAE;wBACZ,WAAW,EAAE,KAAK;wBAClB,IAAI,EAAE,qCAAgB,CAAC,SAAS;wBAChC,IAAI,EAAE,UAAU;qBACjB,CAAC,CAAC;oBACH,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC5B,CAAC,CAAC,CAAC;gBAEH,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,uBAAuB,CAAC,IAAY,EAAE,OAAe,EAAE,IAAI,GAAG,KAAK;QACjE,OAAO,IAAA,uBAAW,EAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YACtD,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC;YACxC,OAAO;SACR,CAAC,CAAC,CAAC,CAAC,IAAA,SAAE,EAAC,IAAI,CAAC,CAAC;IAChB,CAAC;;AApDU,wCAAc;;;;;;yBAAd,cAAc;IAD1B,IAAA,iBAAU,EAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,cAAc,CAqD1B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/dataset-service/dataset.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find } from 'lodash-es';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ExplorerNodeType } from 'app/enums/explorer-type.enum';\nimport { ExplorerNodeData } from 'app/interfaces/tree-node.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { TreeNodeProvider } from 'app/modules/forms/ix-forms/components/ix-explorer/tree-node-provider.interface';\nimport { isRootShare } from 'app/pages/sharing/utils/smb.utils';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@Injectable({ providedIn: 'root' })\nexport class DatasetService {\n  constructor(\n    private ws: WebSocketService,\n    private dialog: DialogService,\n    private translate: TranslateService,\n  ) {}\n\n  getDatasetNodeProvider(): TreeNodeProvider {\n    return () => {\n      return this.ws.call('pool.filesystem_choices').pipe(\n        map((filesystems) => {\n          const nodes: ExplorerNodeData[] = [];\n          filesystems.forEach((filesystem) => {\n            const pathSegments = filesystem.split('/');\n            if (pathSegments.length === 1) {\n              nodes.push({\n                name: filesystem,\n                hasChildren: false,\n                path: filesystem,\n                type: ExplorerNodeType.Directory,\n                children: [],\n              });\n              return;\n            }\n\n            let parent = find(nodes, { name: pathSegments[0] });\n            let i = 1;\n            while (find(parent.children, { name: pathSegments[i] })) {\n              parent = find(parent.children, { name: pathSegments[i++] });\n            }\n\n            parent.children.push({\n              name: pathSegments[pathSegments.length - 1],\n              children: [],\n              hasChildren: false,\n              type: ExplorerNodeType.Directory,\n              path: filesystem,\n            });\n            parent.hasChildren = true;\n          });\n\n          return nodes;\n        }),\n      );\n    };\n  }\n\n  rootLevelDatasetWarning(path: string, message: string, skip = false): Observable<boolean> {\n    return isRootShare(path) && !skip ? this.dialog.confirm({\n      title: this.translate.instant('Warning'),\n      message,\n    }) : of(true);\n  }\n}\n"],"version":3}