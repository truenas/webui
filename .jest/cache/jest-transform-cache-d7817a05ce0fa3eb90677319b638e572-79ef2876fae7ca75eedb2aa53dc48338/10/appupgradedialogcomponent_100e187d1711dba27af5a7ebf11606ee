464792ba5bd78e9758722f0b41280c04
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppUpgradeDialogComponent = void 0;
const core_1 = require("@angular/core");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const catalog_constants_1 = require("app/constants/catalog.constants");
const role_enum_1 = require("app/enums/role.enum");
const apps_1 = require("app/helptext/apps/apps");
const app_upgrade_dialog_config_interface_1 = require("app/interfaces/app-upgrade-dialog-config.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const app_loader_service_1 = require("app/modules/loader/app-loader.service");
const applications_service_1 = require("app/pages/apps/services/applications.service");
const error_handler_service_1 = require("app/services/error-handler.service");
let AppUpgradeDialogComponent = class AppUpgradeDialogComponent {
    constructor(dialogRef, loader, errorHandler, appService, dialogService, data) {
        this.dialogRef = dialogRef;
        this.loader = loader;
        this.errorHandler = errorHandler;
        this.appService = appService;
        this.dialogService = dialogService;
        this.data = data;
        this.imagePlaceholder = catalog_constants_1.appImagePlaceholder;
        this.helptext = apps_1.helptextApps;
        this.versionOptions = new Map();
        this.requiredRoles = [role_enum_1.Role.AppsWrite];
        this.dialogConfig = data;
        this.versionOptions.set(this.dialogConfig.upgradeSummary.latest_version, Object.assign(Object.assign({}, this.dialogConfig.upgradeSummary), { fetched: true }));
        if (this.dialogConfig.upgradeSummary.available_versions_for_upgrade) {
            this.dialogConfig.upgradeSummary.available_versions_for_upgrade.forEach((availableVersion) => {
                if (!this.versionOptions.has(availableVersion.version)) {
                    this.versionOptions.set(availableVersion.version, {
                        latest_version: availableVersion.version,
                        latest_human_version: availableVersion.human_version,
                        changelog: null,
                        available_versions_for_upgrade: null,
                    });
                }
            });
        }
        this.selectedVersionKey = Array.from(this.versionOptions.keys())[0];
        this.selectedVersion = this.versionOptions.get(this.selectedVersionKey);
    }
    onVersionOptionChanged() {
        this.selectedVersion = this.versionOptions.get(this.selectedVersionKey);
        if (!this.selectedVersion.fetched) {
            this.appService.getAppUpgradeSummary(this.dialogConfig.appInfo.name, this.selectedVersionKey)
                .pipe(this.loader.withLoader(), this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this)).subscribe((summary) => {
                this.selectedVersion.changelog = summary.changelog;
                this.selectedVersion.fetched = true;
            });
        }
    }
    originalOrder() {
        return 0;
    }
    containerImagesOrder(a, b) {
        return a.value.id.localeCompare(b.value.id);
    }
};
exports.AppUpgradeDialogComponent = AppUpgradeDialogComponent;
AppUpgradeDialogComponent.ctorParameters = () => [
    { type: dialog_1.MatDialogRef },
    { type: app_loader_service_1.AppLoaderService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: applications_service_1.ApplicationsService },
    { type: dialog_service_1.DialogService },
    { type: app_upgrade_dialog_config_interface_1.AppUpgradeDialogConfig, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.AppUpgradeDialogComponent = AppUpgradeDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-app-upgrade-dialog',
        template: require("./app-upgrade-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], AppUpgradeDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,