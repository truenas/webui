274d89b0d78a7e154019ad75f5849dcf
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxValidatorsService = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const core_2 = require("@ngx-translate/core");
const is_cidr_1 = __importDefault(require("is-cidr"));
let IxValidatorsService = class IxValidatorsService {
    constructor(translate) {
        this.translate = translate;
        this.validateOnCondition = (condition, validator) => {
            return (control) => {
                if (condition(control)) {
                    return validator(control);
                }
                return null;
            };
        };
        /**
         * This function returns a validator
         * @param errMessage The error message applied if the validator fails
         * @returns a validator function that checks if the control value
         * is valid Cidr notation ip v4 or v6
         */
        this.ipCidrV4orCidrV6 = {
            forProperty: 'ip',
            validatorFn: () => {
                return (control) => {
                    if (!control.parent) {
                        return null;
                    }
                    if (control.value === '' || control.value === undefined) {
                        return null;
                    }
                    if (!is_cidr_1.default.v4(control.value) && !is_cidr_1.default.v6(control.value)) {
                        return { ip: true };
                    }
                    return null;
                };
            },
        };
    }
    makeErrorMessage(key, message) {
        return {
            [key]: {
                message,
            },
        };
    }
    withMessage(validatorFn, errorMessage) {
        return (control) => {
            const errors = validatorFn(control);
            if (!errors || Object.keys(errors).length === 0) {
                return null;
            }
            const errorKey = Object.keys(errors)[0];
            return this.makeErrorMessage(errorKey, errorMessage);
        };
    }
    confirmValidator(name, validationMessage) {
        return forms_1.Validators.compose([
            this.withMessage(forms_1.Validators.pattern(new RegExp(`^${name}$`)), validationMessage),
            this.withMessage(forms_1.Validators.required, validationMessage),
        ]);
    }
    /**
     * Specify simple validator function returning false for invalid value and an error message.
     */
    customValidator(validatorFn, message) {
        return this.withMessage((control) => {
            const isValid = validatorFn(control);
            if (isValid) {
                return null;
            }
            return { customValidator: true };
        }, message);
    }
};
exports.IxValidatorsService = IxValidatorsService;
IxValidatorsService.ctorParameters = () => [
    { type: core_2.TranslateService }
];
exports.IxValidatorsService = IxValidatorsService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], IxValidatorsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvc2VydmljZXMvaXgtdmFsaWRhdG9ycy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUEyQztBQUMzQywwQ0FFd0I7QUFDeEIsOENBQXVEO0FBQ3ZELHNEQUE2QjtBQUt0QixJQUFNLG1CQUFtQixHQUF6QixNQUFNLG1CQUFtQjtJQUM5QixZQUFzQixTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQXNCeEMsd0JBQW1CLEdBQUcsQ0FDN0IsU0FBZ0QsRUFDaEQsU0FBc0IsRUFDVCxFQUFFO1lBQ2YsT0FBTyxDQUFDLE9BQXdCLEVBQW9CLEVBQUU7Z0JBQ3BELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7b0JBQ3ZCLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDO1FBRUY7Ozs7O1dBS0c7UUFDTSxxQkFBZ0IsR0FBMEQ7WUFDakYsV0FBVyxFQUFFLElBQUk7WUFDakIsV0FBVyxFQUFFLEdBQWdCLEVBQUU7Z0JBQzdCLE9BQU8sQ0FBQyxPQUE0QixFQUFFLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7d0JBQ3BCLE9BQU8sSUFBSSxDQUFDO29CQUNkLENBQUM7b0JBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLEVBQUUsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO3dCQUN4RCxPQUFPLElBQUksQ0FBQztvQkFDZCxDQUFDO29CQUVELElBQUksQ0FBQyxpQkFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzt3QkFDM0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQztvQkFDdEIsQ0FBQztvQkFFRCxPQUFPLElBQUksQ0FBQztnQkFDZCxDQUFDLENBQUM7WUFDSixDQUFDO1NBQ0YsQ0FBQztJQTNEa0QsQ0FBQztJQUVyRCxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsT0FBZTtRQUMzQyxPQUFPO1lBQ0wsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDTCxPQUFPO2FBQ1I7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVcsQ0FBQyxXQUF3QixFQUFFLFlBQW9CO1FBQ3hELE9BQU8sQ0FBQyxPQUF3QixFQUEyQixFQUFFO1lBQzNELE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUNoRCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7WUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUM7SUFDSixDQUFDO0lBeUNELGdCQUFnQixDQUFDLElBQVksRUFBRSxpQkFBeUI7UUFDdEQsT0FBTyxrQkFBVSxDQUFDLE9BQU8sQ0FBQztZQUN4QixJQUFJLENBQUMsV0FBVyxDQUNkLGtCQUFVLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUMzQyxpQkFBaUIsQ0FDbEI7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUNkLGtCQUFVLENBQUMsUUFBUSxFQUNuQixpQkFBaUIsQ0FDbEI7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlLENBQUMsV0FBa0QsRUFBRSxPQUFlO1FBQ2pGLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FDckIsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNWLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVyQyxJQUFJLE9BQU8sRUFBRSxDQUFDO2dCQUNaLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELE9BQU8sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQzs7QUEzRlUsa0RBQW1COzs7OzhCQUFuQixtQkFBbUI7SUFIL0IsSUFBQSxpQkFBVSxFQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLG1CQUFtQixDQTRGL0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvc2VydmljZXMvaXgtdmFsaWRhdG9ycy5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCwgRm9ybUNvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzLFxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgaXNDaWRyIGZyb20gJ2lzLWNpZHInO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSXhWYWxpZGF0b3JzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cbiAgbWFrZUVycm9yTWVzc2FnZShrZXk6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogVmFsaWRhdGlvbkVycm9ycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtrZXldOiB7XG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICB3aXRoTWVzc2FnZSh2YWxpZGF0b3JGbjogVmFsaWRhdG9yRm4sIGVycm9yTWVzc2FnZTogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdG9yRm4oY29udHJvbCk7XG4gICAgICBpZiAoIWVycm9ycyB8fCBPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JLZXkgPSBPYmplY3Qua2V5cyhlcnJvcnMpWzBdO1xuICAgICAgcmV0dXJuIHRoaXMubWFrZUVycm9yTWVzc2FnZShlcnJvcktleSwgZXJyb3JNZXNzYWdlKTtcbiAgICB9O1xuICB9XG5cbiAgcmVhZG9ubHkgdmFsaWRhdGVPbkNvbmRpdGlvbiA9IChcbiAgICBjb25kaXRpb246IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IGJvb2xlYW4sXG4gICAgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbixcbiAgKTogVmFsaWRhdG9yRm4gPT4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyA9PiB7XG4gICAgICBpZiAoY29uZGl0aW9uKGNvbnRyb2wpKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3IoY29udHJvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSB2YWxpZGF0b3JcbiAgICogQHBhcmFtIGVyck1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UgYXBwbGllZCBpZiB0aGUgdmFsaWRhdG9yIGZhaWxzXG4gICAqIEByZXR1cm5zIGEgdmFsaWRhdG9yIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZSBjb250cm9sIHZhbHVlXG4gICAqIGlzIHZhbGlkIENpZHIgbm90YXRpb24gaXAgdjQgb3IgdjZcbiAgICovXG4gIHJlYWRvbmx5IGlwQ2lkclY0b3JDaWRyVjY6IHsgZm9yUHJvcGVydHk6ICdpcCc7IHZhbGlkYXRvckZuOiAoKSA9PiBWYWxpZGF0b3JGbiB9ID0ge1xuICAgIGZvclByb3BlcnR5OiAnaXAnLFxuICAgIHZhbGlkYXRvckZuOiAoKTogVmFsaWRhdG9yRm4gPT4ge1xuICAgICAgcmV0dXJuIChjb250cm9sOiBGb3JtQ29udHJvbDxzdHJpbmc+KSA9PiB7XG4gICAgICAgIGlmICghY29udHJvbC5wYXJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250cm9sLnZhbHVlID09PSAnJyB8fCBjb250cm9sLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNDaWRyLnY0KGNvbnRyb2wudmFsdWUpICYmICFpc0NpZHIudjYoY29udHJvbC52YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4geyBpcDogdHJ1ZSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gIH07XG5cbiAgY29uZmlybVZhbGlkYXRvcihuYW1lOiBzdHJpbmcsIHZhbGlkYXRpb25NZXNzYWdlOiBzdHJpbmcpOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIFZhbGlkYXRvcnMuY29tcG9zZShbXG4gICAgICB0aGlzLndpdGhNZXNzYWdlKFxuICAgICAgICBWYWxpZGF0b3JzLnBhdHRlcm4obmV3IFJlZ0V4cChgXiR7bmFtZX0kYCkpLFxuICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZSxcbiAgICAgICksXG4gICAgICB0aGlzLndpdGhNZXNzYWdlKFxuICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZSxcbiAgICAgICksXG4gICAgXSk7XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lmeSBzaW1wbGUgdmFsaWRhdG9yIGZ1bmN0aW9uIHJldHVybmluZyBmYWxzZSBmb3IgaW52YWxpZCB2YWx1ZSBhbmQgYW4gZXJyb3IgbWVzc2FnZS5cbiAgICovXG4gIGN1c3RvbVZhbGlkYXRvcih2YWxpZGF0b3JGbjogKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4gYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiB0aGlzLndpdGhNZXNzYWdlKFxuICAgICAgKGNvbnRyb2wpID0+IHtcbiAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRvckZuKGNvbnRyb2wpO1xuXG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBjdXN0b21WYWxpZGF0b3I6IHRydWUgfTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlLFxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==