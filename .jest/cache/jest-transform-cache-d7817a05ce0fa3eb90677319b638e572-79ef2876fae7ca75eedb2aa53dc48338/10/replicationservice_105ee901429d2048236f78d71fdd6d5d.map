{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/replication.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/replication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ExplorerNodeType } from 'app/enums/explorer-type.enum';\nimport { Role } from 'app/enums/role.enum';\nimport { TransportMode } from 'app/enums/transport-mode.enum';\nimport { ReplicationTask } from 'app/interfaces/replication-task.interface';\nimport { ExplorerNodeData, TreeNode } from 'app/interfaces/tree-node.interface';\nimport { TreeNodeProvider } from 'app/modules/forms/ix-forms/components/ix-explorer/tree-node-provider.interface';\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@Injectable()\nexport class ReplicationService {\n  constructor(\n    protected ws: WebSocketService,\n    private authService: AuthService,\n  ) { }\n\n  getTreeNodeProvider(providerOptions: {\n    transport: TransportMode;\n    sshCredential: number;\n  }): TreeNodeProvider {\n    let cachedDatasets: string[] = null;\n\n    return (node: TreeNode<ExplorerNodeData>) => {\n      const searchPath = node.data.path;\n      const childDatasets$ = cachedDatasets\n        ? of(cachedDatasets)\n        : this.authService.hasRole([\n          Role.ReplicationTaskWrite,\n          Role.ReplicationTaskWritePull,\n        ]).pipe(\n          switchMap((hasRole) => {\n            if (hasRole) {\n              return this.ws.call(\n                'replication.list_datasets',\n                [providerOptions.transport, providerOptions.sshCredential],\n              ).pipe(tap((datasets) => cachedDatasets = datasets));\n            }\n            return of([] as string[]);\n          }),\n        );\n\n      return childDatasets$.pipe(map((datasets) => {\n        return datasets\n          .filter((dataset) => {\n            const currentLevel = searchPath.split('/').length;\n            const datasetLevel = dataset.split('/').length;\n            if (!searchPath && datasetLevel === 1) {\n              return true;\n            }\n\n            return dataset.startsWith(`${searchPath}/`) && datasetLevel === currentLevel + 1;\n          })\n          .map((dataset) => {\n            return {\n              path: dataset,\n              name: dataset.split('/').pop(),\n              type: ExplorerNodeType.Directory,\n              hasChildren: cachedDatasets.some((cachedDataset) => {\n                return cachedDataset.startsWith(`${dataset}/`) && cachedDataset !== dataset;\n              }),\n            };\n          });\n      }));\n    };\n  }\n\n  getReplicationTasks(): Observable<ReplicationTask[]> {\n    return this.ws.call('replication.query');\n  }\n\n  generateEncryptionHexKey(length: number): string {\n    const characters = '0123456789abcdef';\n    let encryptionKey = '';\n    for (let i = 0; i < length; i++) {\n      encryptionKey += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return encryptionKey;\n  }\n}\n"],"version":3}