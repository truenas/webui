{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-radio-group/ix-radio-group.harness.ts","mappings":";;;;;;;;;;;;AAAA,kDAE8B;AAC9B,6DAAuE;AACvE,sGAAiG;AAEjG,kFAA8E;AAM9E,MAAa,mBAAoB,SAAQ,0BAAgB;IAAzD;;QAQE,4BAAuB,GAAG,IAAI,CAAC,UAAU,CAAC,8BAAoB,CAAC,CAAC;QAChE,iBAAY,GAAG,4BAAY,CAAC;IA4B9B,CAAC;IAlCC,MAAM,CAAC,IAAI,CAAC,OAAmC;QAC7C,OAAO,IAAI,0BAAgB,CAAC,mBAAmB,EAAE,OAAO,CAAC;aACtD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,0BAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1H,CAAC;IAKK,YAAY;;YAChB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,iCAAc,CAAC,EAAE,CAAC;YAC9D,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,QAAQ;;YACZ,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,qBAAqB,EAAE,CAAC;YAC1F,OAAO,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,YAAY,EAAE,CAAC;QACtC,CAAC;KAAA;IAEK,QAAQ,CAAC,KAAa;;YAC1B,MAAM,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;YACvD,OAAO,OAAO,CAAC,gBAAgB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QACpD,CAAC;KAAA;IAEK,UAAU;;YACd,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;YACpF,MAAM,UAAU,GAAG,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAE7F,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC7B,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;;AApCH,kDAqCC;AApCQ,gCAAY,GAAG,gBAAgB,AAAnB,CAAoB","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/components/ix-radio-group/ix-radio-group.harness.ts"],"sourcesContent":["import {\n  BaseHarnessFilters, ComponentHarness, HarnessPredicate, parallel,\n} from '@angular/cdk/testing';\nimport { MatRadioGroupHarness } from '@angular/material/radio/testing';\nimport { IxLabelHarness } from 'app/modules/forms/ix-forms/components/ix-label/ix-label.harness';\nimport { IxFormControlHarness } from 'app/modules/forms/ix-forms/interfaces/ix-form-control-harness.interface';\nimport { getErrorText } from 'app/modules/forms/ix-forms/utils/harness.utils';\n\nexport interface IxRadioGroupHarnessFilters extends BaseHarnessFilters {\n  label?: string;\n}\n\nexport class IxRadioGroupHarness extends ComponentHarness implements IxFormControlHarness {\n  static hostSelector = 'ix-radio-group';\n\n  static with(options: IxRadioGroupHarnessFilters): HarnessPredicate<IxRadioGroupHarness> {\n    return new HarnessPredicate(IxRadioGroupHarness, options)\n      .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  getMatRadioGroupHarness = this.locatorFor(MatRadioGroupHarness);\n  getErrorText = getErrorText;\n\n  async getLabelText(): Promise<string> {\n    const label = await this.locatorForOptional(IxLabelHarness)();\n    if (!label) {\n      return '';\n    }\n    return label.getLabel();\n  }\n\n  async getValue(): Promise<string | undefined> {\n    const checkedRadio = await (await this.getMatRadioGroupHarness()).getCheckedRadioButton();\n    return checkedRadio?.getLabelText();\n  }\n\n  async setValue(value: string): Promise<void> {\n    const harness = (await this.getMatRadioGroupHarness());\n    return harness.checkRadioButton({ label: value });\n  }\n\n  async isDisabled(): Promise<boolean> {\n    const radioButtons = await (await this.getMatRadioGroupHarness()).getRadioButtons();\n    const inputState = await parallel(() => radioButtons.map((control) => control.isDisabled()));\n\n    return new Promise((resolve) => {\n      resolve(inputState.every((control) => !!control));\n    });\n  }\n}\n"],"version":3}