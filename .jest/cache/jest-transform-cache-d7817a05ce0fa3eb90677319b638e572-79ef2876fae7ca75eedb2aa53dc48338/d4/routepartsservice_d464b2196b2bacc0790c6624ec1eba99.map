{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/route-parts/route-parts.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,4CAEyB;AACzB,8CAAwC;AAajC,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAG5B,YAAoB,cAA8B,EAAU,MAAc;QAAtD,mBAAc,GAAd,cAAc,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QACxE,gCAAgC;QAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CACrB,IAAA,kBAAM,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,YAAY,sBAAa,CAAC,CAClD,CAAC,SAAS,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,kBAAkB,CAAC,KAAqB,EAAE,GAAG,GAAG,EAAE,EAAE,aAA0B,EAAE;QACtF,MAAM,QAAQ,GAAqB,KAAK,CAAC,QAAQ,CAAC;QAClD,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1B,OAAO,UAAU,CAAC;QACpB,CAAC;QAED,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAW,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrF,IAAI,QAAQ,EAAE,CAAC;gBACb,GAAG,IAAI,IAAI,QAAQ,EAAE,CAAC;gBACtB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClB,CAAC;YAED,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAiB,CAAC;YAEtE,UAAU,CAAC,IAAI,CAAC;gBACd,KAAK;gBACL,UAAU;gBACV,GAAG;gBACH,KAAK;gBACL,KAAK;aACN,CAAC,CAAC;YAEH,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;;AA9CU,8CAAiB;;;;;4BAAjB,iBAAiB;IAH7B,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,iBAAiB,CA+C7B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/route-parts/route-parts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRoute, NavigationEnd, Router,\n} from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nexport interface RoutePart {\n  title: string;\n  breadcrumb: string;\n  url: string;\n  ngUrl?: string[];\n  isNew?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutePartsService {\n  private fullRouteParts: RoutePart[] | null;\n\n  constructor(private activatedRoute: ActivatedRoute, private router: Router) {\n    // only execute when routechange\n    this.fullRouteParts = this.generateRouteParts(this.activatedRoute.root);\n    this.router.events.pipe(\n      filter((event) => event instanceof NavigationEnd),\n    ).subscribe(() => {\n      this.fullRouteParts = this.generateRouteParts(this.activatedRoute.root);\n    });\n  }\n\n  private generateRouteParts(route: ActivatedRoute, url = '', routeParts: RoutePart[] = []): RoutePart[] | null {\n    const children: ActivatedRoute[] = route.children;\n    const ngUrl: string[] = [];\n\n    if (children.length === 0) {\n      return routeParts;\n    }\n\n    for (const child of children) {\n      const routeUrl: string = child.snapshot.url.map((segment) => segment.path).join('/');\n      if (routeUrl) {\n        url += `/${routeUrl}`;\n        ngUrl.push(url);\n      }\n\n      const { title, breadcrumb, isNew } = child.snapshot.data as RoutePart;\n\n      routeParts.push({\n        title,\n        breadcrumb,\n        url,\n        ngUrl,\n        isNew,\n      });\n\n      this.generateRouteParts(child, url, routeParts);\n    }\n\n    return routeParts;\n  }\n\n  get routeParts(): RoutePart[] | null {\n    return this.fullRouteParts;\n  }\n}\n"],"version":3}