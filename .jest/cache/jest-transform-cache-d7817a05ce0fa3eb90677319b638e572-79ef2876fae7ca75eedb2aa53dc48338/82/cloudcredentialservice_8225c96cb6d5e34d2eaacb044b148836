c52b798930201684c8ae2a986cb33af2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudCredentialService = void 0;
const core_1 = require("@angular/core");
const ws_service_1 = require("app/services/ws.service");
let CloudCredentialService = class CloudCredentialService {
    constructor(ws) {
        this.ws = ws;
    }
    getProviders() {
        return this.ws.call('cloudsync.providers');
    }
    getCloudSyncCredentials() {
        return this.ws.call('cloudsync.credentials.query');
    }
    getBuckets(credentialId) {
        return this.ws.call('cloudsync.list_buckets', [credentialId]);
    }
};
exports.CloudCredentialService = CloudCredentialService;
CloudCredentialService.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.CloudCredentialService = CloudCredentialService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], CloudCredentialService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3NlcnZpY2VzL2Nsb3VkLWNyZWRlbnRpYWwuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBMkM7QUFJM0Msd0RBQTJEO0FBS3BELElBQU0sc0JBQXNCLEdBQTVCLE1BQU0sc0JBQXNCO0lBQ2pDLFlBQXNCLEVBQW9CO1FBQXBCLE9BQUUsR0FBRixFQUFFLENBQWtCO0lBQUcsQ0FBQztJQUU5QyxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxVQUFVLENBQUMsWUFBb0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7QUFiVSx3REFBc0I7Ozs7aUNBQXRCLHNCQUFzQjtJQUhsQyxJQUFBLGlCQUFVLEVBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csc0JBQXNCLENBY2xDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9zZXJ2aWNlcy9jbG91ZC1jcmVkZW50aWFsLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2xvdWRTeW5jQnVja2V0LCBDbG91ZFN5bmNDcmVkZW50aWFsIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvY2xvdWRzeW5jLWNyZWRlbnRpYWwuaW50ZXJmYWNlJztcbmltcG9ydCB7IENsb3VkU3luY1Byb3ZpZGVyIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvY2xvdWRzeW5jLXByb3ZpZGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL3dzLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ2xvdWRDcmVkZW50aWFsU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB3czogV2ViU29ja2V0U2VydmljZSkge31cblxuICBnZXRQcm92aWRlcnMoKTogT2JzZXJ2YWJsZTxDbG91ZFN5bmNQcm92aWRlcltdPiB7XG4gICAgcmV0dXJuIHRoaXMud3MuY2FsbCgnY2xvdWRzeW5jLnByb3ZpZGVycycpO1xuICB9XG5cbiAgZ2V0Q2xvdWRTeW5jQ3JlZGVudGlhbHMoKTogT2JzZXJ2YWJsZTxDbG91ZFN5bmNDcmVkZW50aWFsW10+IHtcbiAgICByZXR1cm4gdGhpcy53cy5jYWxsKCdjbG91ZHN5bmMuY3JlZGVudGlhbHMucXVlcnknKTtcbiAgfVxuXG4gIGdldEJ1Y2tldHMoY3JlZGVudGlhbElkOiBudW1iZXIpOiBPYnNlcnZhYmxlPENsb3VkU3luY0J1Y2tldFtdPiB7XG4gICAgcmV0dXJuIHRoaXMud3MuY2FsbCgnY2xvdWRzeW5jLmxpc3RfYnVja2V0cycsIFtjcmVkZW50aWFsSWRdKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9