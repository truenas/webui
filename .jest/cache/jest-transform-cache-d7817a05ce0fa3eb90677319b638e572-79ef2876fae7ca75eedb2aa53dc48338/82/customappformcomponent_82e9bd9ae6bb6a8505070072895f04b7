c1394ca8427c83216c31c1f9a797f3e5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomAppFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const code_editor_language_enum_1 = require("app/enums/code-editor-language.enum");
const role_enum_1 = require("app/enums/role.enum");
const json_to_yaml_helper_1 = require("app/helpers/json-to-yaml.helper");
const app_interface_1 = require("app/interfaces/app.interface");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const forbidden_values_validation_1 = require("app/modules/forms/ix-forms/validators/forbidden-values-validation/forbidden-values-validation");
const applications_service_1 = require("app/pages/apps/services/applications.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let CustomAppFormComponent = class CustomAppFormComponent {
    constructor(fb, translate, ws, errorHandler, dialogService, appService, dialogRef, router, data) {
        this.fb = fb;
        this.translate = translate;
        this.ws = ws;
        this.errorHandler = errorHandler;
        this.dialogService = dialogService;
        this.appService = appService;
        this.dialogRef = dialogRef;
        this.router = router;
        this.data = data;
        this.isNew = (0, core_1.signal)(true);
        this.requiredRoles = [role_enum_1.Role.AppsWrite];
        this.CodeEditorLanguage = code_editor_language_enum_1.CodeEditorLanguage;
        this.form = this.fb.group({
            release_name: ['', forms_1.Validators.required],
            custom_compose_config_string: ['\n\n', forms_1.Validators.required],
        });
        this.isLoading = (0, core_1.signal)(false);
        this.forbiddenAppNames$ = this.appService.getAllApps().pipe((0, rxjs_1.map)((apps) => apps.map((app) => app.name)));
    }
    ngOnInit() {
        if (this.data) {
            this.setAppForEdit(this.data);
        }
        else {
            this.setNewApp();
        }
    }
    setNewApp() {
        this.addForbiddenAppNamesValidator();
    }
    setAppForEdit(app) {
        this.isNew.set(false);
        this.form.patchValue({
            release_name: app.id,
            custom_compose_config_string: (0, json_to_yaml_helper_1.jsonToYaml)(app.config),
        });
    }
    addForbiddenAppNamesValidator() {
        this.form.controls.release_name.setAsyncValidators((0, forbidden_values_validation_1.forbiddenAsyncValues)(this.forbiddenAppNames$));
        this.form.controls.release_name.updateValueAndValidity();
    }
    onSubmit() {
        this.isLoading.set(true);
        const data = this.form.value;
        const appCreate$ = this.ws.job('app.create', [{
                custom_app: true,
                app_name: data.release_name,
                custom_compose_config_string: data.custom_compose_config_string,
            }]);
        const appUpdate$ = this.ws.job('app.update', [
            data.release_name,
            { custom_compose_config_string: data.custom_compose_config_string },
        ]);
        const job$ = this.isNew() ? appCreate$ : appUpdate$;
        this.dialogService.jobDialog(job$, {
            title: this.translate.instant('Custom App'),
            canMinimize: false,
            description: this.isNew()
                ? this.translate.instant('Creating custom app')
                : this.translate.instant('Updating custom app'),
        }).afterClosed().pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                this.dialogRef.close();
                if (this.isNew()) {
                    this.router.navigate(['/apps', 'installed']);
                }
                else {
                    this.router.navigate(['/apps', 'installed', this.data.metadata.train, this.data.name]);
                }
            },
            error: (error) => {
                this.isLoading.set(false);
                this.errorHandler.showErrorModal(error);
            },
        });
    }
};
exports.CustomAppFormComponent = CustomAppFormComponent;
CustomAppFormComponent.ctorParameters = () => [
    { type: reactive_forms_1.FormBuilder },
    { type: core_2.TranslateService },
    { type: ws_service_1.WebSocketService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_service_1.DialogService },
    { type: applications_service_1.ApplicationsService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: router_1.Router },
    { type: app_interface_1.App, decorators: [{ type: core_1.Inject, args: [ix_slide_in_token_1.SLIDE_IN_DATA,] }] }
];
exports.CustomAppFormComponent = CustomAppFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-custom-app-form',
        template: require("./custom-app-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], CustomAppFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,