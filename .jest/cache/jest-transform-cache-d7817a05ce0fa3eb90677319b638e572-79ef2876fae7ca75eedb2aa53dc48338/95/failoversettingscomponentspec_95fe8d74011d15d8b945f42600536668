59051f928dbb0b789e78288c35ade3bb
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const testing_2 = require("@angular/material/checkbox/testing");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const failover_1 = require("app/helptext/system/failover");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const search_input1_component_1 = require("app/modules/forms/search-input1/search-input1.component");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const failover_settings_component_1 = require("app/pages/system/failover-settings/failover-settings.component");
const websocket_connection_service_1 = require("app/services/websocket-connection.service");
const ws_service_1 = require("app/services/ws.service");
describe('FailoverComponent', () => {
    let spectator;
    let loader;
    let rootLoader;
    let form;
    const createComponent = (0, jest_1.createComponentFactory)({
        component: failover_settings_component_1.FailoverSettingsComponent,
        imports: [
            forms_1.ReactiveFormsModule,
            search_input1_component_1.SearchInput1Component,
        ],
        providers: [
            (0, mock_auth_utils_1.mockAuth)(),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('failover.update'),
                (0, mock_websocket_utils_1.mockCall)('failover.sync_to_peer'),
                (0, mock_websocket_utils_1.mockCall)('failover.sync_from_peer'),
                (0, mock_websocket_utils_1.mockCall)('failover.config', {
                    id: 3,
                    master: true,
                    disabled: false,
                    timeout: 0,
                }),
            ]),
            (0, jest_1.mockProvider)(snackbar_service_1.SnackbarService),
            (0, jest_1.mockProvider)(websocket_connection_service_1.WebSocketConnectionService, {
                isConnected$: (0, rxjs_1.of)(true),
            }),
        ],
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        rootLoader = testbed_1.TestbedHarnessEnvironment.documentRootLoader(spectator.fixture);
        form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
        jest.spyOn(spectator.inject(dialog_service_1.DialogService), 'confirm');
    }));
    it('loads and shows current failover settings', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('failover.config');
        expect(yield form.getValues()).toEqual({
            'Disable Failover': false,
            'Default TrueNAS controller': true,
            'Network Timeout Before Initiating Failover': '0',
        });
    }));
    it('updates failover settings when form is submitted', () => __awaiter(void 0, void 0, void 0, function* () {
        yield form.fillForm({
            'Network Timeout Before Initiating Failover': 20,
        });
        const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
        yield saveButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('failover.update', [{
                disabled: false,
                master: true,
                timeout: 20,
            }]);
    }));
    it('syncs to peer when Sync To Peer is pressed and confirmed', () => __awaiter(void 0, void 0, void 0, function* () {
        const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Sync To Peer' }));
        yield saveButton.click();
        const rebootCheckbox = yield rootLoader.getHarness(testing_2.MatCheckboxHarness.with({ label: 'Restart standby TrueNAS controller' }));
        yield rebootCheckbox.check();
        const confirmCheckbox = yield rootLoader.getHarness(testing_2.MatCheckboxHarness.with({ label: 'Confirm' }));
        yield confirmCheckbox.check();
        const proceedButton = yield rootLoader.getHarness(testing_1.MatButtonHarness.with({ text: 'Proceed' }));
        yield proceedButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('failover.sync_to_peer', [{ reboot: true }]);
        expect(spectator.inject(snackbar_service_1.SnackbarService).success).toHaveBeenCalledWith(failover_1.helptextSystemFailover.confirm_dialogs.sync_to_message);
    }));
    it('syncs from peer when Sync From Peer is pressed and confirmed', () => __awaiter(void 0, void 0, void 0, function* () {
        const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Sync From Peer' }));
        yield saveButton.click();
        const confirmCheckbox = yield rootLoader.getHarness(testing_2.MatCheckboxHarness.with({ label: 'Confirm' }));
        yield confirmCheckbox.check();
        const proceedButton = yield rootLoader.getHarness(testing_1.MatButtonHarness.with({ text: 'Proceed' }));
        yield proceedButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('failover.sync_from_peer');
        expect(spectator.inject(snackbar_service_1.SnackbarService).success).toHaveBeenCalledWith(failover_1.helptextSystemFailover.confirm_dialogs.sync_from_message);
    }));
    it(`warns when Default TrueNAS controller checkbox is ticked off
    and changes Save button to Save And Failover`, () => __awaiter(void 0, void 0, void 0, function* () {
        yield form.fillForm({
            'Disable Failover': true,
            'Default TrueNAS controller': false,
        });
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith(expect.objectContaining({
            title: failover_1.helptextSystemFailover.master_dialog_title,
            message: failover_1.helptextSystemFailover.master_dialog_warning,
        }));
        const confirmCheckbox = yield rootLoader.getHarness(testing_2.MatCheckboxHarness.with({ label: 'Confirm' }));
        yield confirmCheckbox.check();
        const proceedButton = yield rootLoader.getHarness(testing_1.MatButtonHarness.with({ text: 'Continue' }));
        yield proceedButton.click();
        const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save And Failover' }));
        expect(saveButton).toExist();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,