{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/detect-browser.service.spec.ts","mappings":";;AAAA,iDAAgF;AAChF,gFAAsE;AACtE,gFAA2E;AAE3E,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,SAAiD,CAAC;IACtD,MAAM,aAAa,GAAG,IAAA,2BAAoB,EAAC;QACzC,OAAO,EAAE,6CAAoB;QAC7B,SAAS,EAAE;YACT,IAAA,8BAAU,EAAC;gBACT,SAAS,EAAE;oBACT,SAAS,EAAE,uHAAuH;iBACnI;aACF,CAAC;SACH;KACF,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,aAAa,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/detect-browser.service.spec.ts"],"sourcesContent":["import { createServiceFactory, SpectatorService } from '@ngneat/spectator/jest';\nimport { mockWindow } from 'app/core/testing/utils/mock-window.utils';\nimport { DetectBrowserService } from 'app/services/detect-browser.service';\n\ndescribe('DetectBrowserService', () => {\n  let spectator: SpectatorService<DetectBrowserService>;\n  const createService = createServiceFactory({\n    service: DetectBrowserService,\n    providers: [\n      mockWindow({\n        navigator: {\n          userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',\n        },\n      }),\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createService();\n  });\n\n  describe('matchesBrowser', () => {\n    it('returns true when browser matches specified string', () => {\n      expect(spectator.service.matchesBrowser('Chrome')).toBe(true);\n      expect(spectator.service.matchesBrowser('Safari')).toBe(false);\n    });\n  });\n\n  describe('isMacOs', () => {\n    it('returns true when user agent includes Macintosh', () => {\n      expect(spectator.service.isMacOs()).toBe(true);\n    });\n  });\n});\n"],"version":3}