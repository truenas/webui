06870d55427413e75029a36fb2a5df5d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetTreeStore = void 0;
const core_1 = require("@angular/core");
const component_store_1 = require("@ngrx/component-store");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const get_tree_branch_to_node_utils_1 = require("app/pages/datasets/utils/get-tree-branch-to-node.utils");
const ws_service_1 = require("app/services/ws.service");
const initialState = {
    isLoading: false,
    error: null,
    datasets: [],
    selectedDatasetId: null,
};
let DatasetTreeStore = class DatasetTreeStore extends component_store_1.ComponentStore {
    constructor(ws) {
        super(initialState);
        this.ws = ws;
        this.isLoading$ = this.select((state) => state.isLoading);
        this.error$ = this.select((state) => state.error);
        this.datasets$ = this.select((state) => state.datasets);
        this.selectedBranch$ = this.select((state) => {
            if (!state.selectedDatasetId) {
                return null;
            }
            const selectedBranch = (0, get_tree_branch_to_node_utils_1.getTreeBranchToNode)(state.datasets, (dataset) => dataset.id === state.selectedDatasetId);
            if (!selectedBranch) {
                return null;
            }
            return selectedBranch;
        });
        this.selectedDataset$ = this.select(this.selectedBranch$, (selectedBranch) => (selectedBranch ? selectedBranch[selectedBranch.length - 1] : null));
        this.selectedParentDataset$ = this.select(this.selectedBranch$, (selectedBranch) => (selectedBranch ? selectedBranch[selectedBranch.length - 2] : null));
        this.loadDatasets = this.effect((triggers$) => {
            return triggers$.pipe((0, operators_1.tap)(() => {
                // Not clearing the state on reload on purpose.
                this.patchState({
                    error: null,
                    isLoading: true,
                });
            }), (0, operators_1.switchMap)(() => {
                return this.ws.call('pool.dataset.details')
                    .pipe((0, operators_1.tap)((datasets) => {
                    this.patchState({
                        isLoading: false,
                        datasets,
                    });
                }), (0, operators_1.catchError)((error) => {
                    this.patchState({
                        isLoading: false,
                        error,
                    });
                    return rxjs_1.EMPTY;
                }));
            }));
        });
        this.resetDatasets = this.effect((triggers$) => {
            return triggers$.pipe((0, operators_1.tap)(() => {
                this.patchState({
                    isLoading: false,
                    selectedDatasetId: null,
                    datasets: [],
                });
            }));
        });
        this.datasetUpdated = this.effect((triggers$) => {
            return triggers$.pipe((0, operators_1.tap)(() => this.loadDatasets()));
        });
        this.selectDatasetById = this.updater((state, selectedDatasetId) => {
            return Object.assign(Object.assign({}, state), { selectedDatasetId });
        });
    }
};
exports.DatasetTreeStore = DatasetTreeStore;
DatasetTreeStore.ctorParameters = () => [
    { type: ws_service_1.WebSocketService }
];
exports.DatasetTreeStore = DatasetTreeStore = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], DatasetTreeStore);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,