{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/store/dataset-store.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/datasets/store/dataset-store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { EMPTY, Observable } from 'rxjs';\nimport {\n  catchError, switchMap, tap,\n} from 'rxjs/operators';\nimport { DatasetDetails } from 'app/interfaces/dataset.interface';\nimport { WebSocketError } from 'app/interfaces/websocket-error.interface';\nimport { getTreeBranchToNode } from 'app/pages/datasets/utils/get-tree-branch-to-node.utils';\nimport { WebSocketService } from 'app/services/ws.service';\n\nexport interface DatasetTreeState {\n  isLoading: boolean;\n  error: WebSocketError | null;\n  datasets: DatasetDetails[];\n  selectedDatasetId: string | null;\n}\n\nconst initialState: DatasetTreeState = {\n  isLoading: false,\n  error: null,\n  datasets: [],\n  selectedDatasetId: null,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DatasetTreeStore extends ComponentStore<DatasetTreeState> {\n  readonly isLoading$ = this.select((state) => state.isLoading);\n  readonly error$ = this.select((state) => state.error);\n  readonly datasets$ = this.select((state) => state.datasets);\n  readonly selectedBranch$ = this.select((state) => {\n    if (!state.selectedDatasetId) {\n      return null;\n    }\n\n    const selectedBranch = getTreeBranchToNode(state.datasets, (dataset) => dataset.id === state.selectedDatasetId);\n    if (!selectedBranch) {\n      return null;\n    }\n\n    return selectedBranch;\n  });\n\n  readonly selectedDataset$ = this.select(\n    this.selectedBranch$,\n    (selectedBranch) => (selectedBranch ? selectedBranch[selectedBranch.length - 1] : null),\n  );\n\n  readonly selectedParentDataset$ = this.select(\n    this.selectedBranch$,\n    (selectedBranch) => (selectedBranch ? selectedBranch[selectedBranch.length - 2] : null),\n  );\n\n  readonly loadDatasets = this.effect((triggers$: Observable<void>) => {\n    return triggers$.pipe(\n      tap(() => {\n        // Not clearing the state on reload on purpose.\n        this.patchState({\n          error: null,\n          isLoading: true,\n        });\n      }),\n      switchMap(() => {\n        return this.ws.call('pool.dataset.details')\n          .pipe(\n            tap((datasets: DatasetDetails[]) => {\n              this.patchState({\n                isLoading: false,\n                datasets,\n              });\n            }),\n            catchError((error: WebSocketError) => {\n              this.patchState({\n                isLoading: false,\n                error,\n              });\n\n              return EMPTY;\n            }),\n          );\n      }),\n    );\n  });\n\n  readonly resetDatasets = this.effect((triggers$: Observable<void>) => {\n    return triggers$.pipe(\n      tap(() => {\n        this.patchState({\n          isLoading: false,\n          selectedDatasetId: null,\n          datasets: [],\n        });\n      }),\n    );\n  });\n\n  readonly datasetUpdated = this.effect((triggers$: Observable<void>) => {\n    return triggers$.pipe(\n      tap(() => this.loadDatasets()),\n    );\n  });\n\n  readonly selectDatasetById = this.updater((state, selectedDatasetId: string) => {\n    return {\n      ...state,\n      selectedDatasetId,\n    };\n  });\n\n  constructor(\n    private ws: WebSocketService,\n  ) {\n    super(initialState);\n  }\n}\n"],"version":3}