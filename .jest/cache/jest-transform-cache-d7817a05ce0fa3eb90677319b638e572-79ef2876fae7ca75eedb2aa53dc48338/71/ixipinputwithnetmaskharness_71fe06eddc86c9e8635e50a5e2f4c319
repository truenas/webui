c3d52becffc567b023c5c4d709cfc4e6
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxIpInputWithNetmaskHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/input/testing");
const testing_3 = require("@angular/material/select/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxIpInputWithNetmaskHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getAddressHarness = this.locatorFor(testing_2.MatInputHarness);
        this.getNetmaskHarness = this.locatorFor(testing_3.MatSelectHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxIpInputWithNetmaskHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const addressInput = yield this.getAddressHarness();
            const netmaskSelect = yield this.getNetmaskHarness();
            const address = yield addressInput.getValue();
            const netmask = yield netmaskSelect.getValueText();
            return `${address}/${netmask}`;
        });
    }
    setValue(addressAndNetmask) {
        return __awaiter(this, void 0, void 0, function* () {
            const [address, netmask] = addressAndNetmask.split('/');
            const addressInput = yield this.getAddressHarness();
            const netmaskSelect = yield this.getNetmaskHarness();
            yield addressInput.setValue(address);
            yield netmaskSelect.open();
            yield netmaskSelect.clickOptions({ text: netmask });
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getNetmaskHarness()).isDisabled();
        });
    }
}
exports.IxIpInputWithNetmaskHarness = IxIpInputWithNetmaskHarness;
IxIpInputWithNetmaskHarness.hostSelector = 'ix-ip-input-with-netmask';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1pcC1pbnB1dC13aXRoLW5ldG1hc2svaXgtaXAtaW5wdXQtd2l0aC1uZXRtYXNrLmhhcm5lc3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsa0RBRThCO0FBQzlCLDZEQUFrRTtBQUNsRSw4REFBb0U7QUFDcEUsc0dBQWlHO0FBRWpHLGtGQUE4RTtBQU05RSxNQUFhLDJCQUE0QixTQUFRLDBCQUFnQjtJQUFqRTs7UUFRRSxzQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUFlLENBQUMsQ0FBQztRQUNyRCxzQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLDBCQUFnQixDQUFDLENBQUM7UUFDdEQsaUJBQVksR0FBRyw0QkFBWSxDQUFDO0lBaUM5QixDQUFDO0lBeENDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBMkM7UUFDckQsT0FBTyxJQUFJLDBCQUFnQixDQUFDLDJCQUEyQixFQUFFLE9BQU8sQ0FBQzthQUM5RCxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQywwQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUgsQ0FBQztJQU1LLFlBQVk7O1lBQ2hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlDQUFjLENBQUMsRUFBRSxDQUFDO1lBQzlELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDWCxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQixDQUFDO0tBQUE7SUFFSyxRQUFROztZQUNaLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDcEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUVyRCxNQUFNLE9BQU8sR0FBRyxNQUFNLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM5QyxNQUFNLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUVuRCxPQUFPLEdBQUcsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLENBQUM7S0FBQTtJQUVLLFFBQVEsQ0FBQyxpQkFBeUI7O1lBQ3RDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDcEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUVyRCxNQUFNLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckMsTUFBTSxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsTUFBTSxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDdEQsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZELENBQUM7S0FBQTs7QUExQ0gsa0VBMkNDO0FBMUNRLHdDQUFZLEdBQUcsMEJBQTBCLEFBQTdCLENBQThCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtaXAtaW5wdXQtd2l0aC1uZXRtYXNrL2l4LWlwLWlucHV0LXdpdGgtbmV0bWFzay5oYXJuZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhc2VIYXJuZXNzRmlsdGVycywgQ29tcG9uZW50SGFybmVzcywgSGFybmVzc1ByZWRpY2F0ZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWF0SW5wdXRIYXJuZXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQvdGVzdGluZyc7XG5pbXBvcnQgeyBNYXRTZWxlY3RIYXJuZXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2VsZWN0L3Rlc3RpbmcnO1xuaW1wb3J0IHsgSXhMYWJlbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWxhYmVsL2l4LWxhYmVsLmhhcm5lc3MnO1xuaW1wb3J0IHsgSXhGb3JtQ29udHJvbEhhcm5lc3MgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9pbnRlcmZhY2VzL2l4LWZvcm0tY29udHJvbC1oYXJuZXNzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBnZXRFcnJvclRleHQgfSBmcm9tICdhcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy91dGlscy9oYXJuZXNzLnV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBJeElwSW5wdXRXaXRoTmV0bWFza0hhcm5lc3NGaWx0ZXJzIGV4dGVuZHMgQmFzZUhhcm5lc3NGaWx0ZXJzIHtcbiAgbGFiZWw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBJeElwSW5wdXRXaXRoTmV0bWFza0hhcm5lc3MgZXh0ZW5kcyBDb21wb25lbnRIYXJuZXNzIGltcGxlbWVudHMgSXhGb3JtQ29udHJvbEhhcm5lc3Mge1xuICBzdGF0aWMgaG9zdFNlbGVjdG9yID0gJ2l4LWlwLWlucHV0LXdpdGgtbmV0bWFzayc7XG5cbiAgc3RhdGljIHdpdGgob3B0aW9uczogSXhJcElucHV0V2l0aE5ldG1hc2tIYXJuZXNzRmlsdGVycyk6IEhhcm5lc3NQcmVkaWNhdGU8SXhJcElucHV0V2l0aE5ldG1hc2tIYXJuZXNzPiB7XG4gICAgcmV0dXJuIG5ldyBIYXJuZXNzUHJlZGljYXRlKEl4SXBJbnB1dFdpdGhOZXRtYXNrSGFybmVzcywgb3B0aW9ucylcbiAgICAgIC5hZGRPcHRpb24oJ2xhYmVsJywgb3B0aW9ucy5sYWJlbCwgKGhhcm5lc3MsIGxhYmVsKSA9PiBIYXJuZXNzUHJlZGljYXRlLnN0cmluZ01hdGNoZXMoaGFybmVzcy5nZXRMYWJlbFRleHQoKSwgbGFiZWwpKTtcbiAgfVxuXG4gIGdldEFkZHJlc3NIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yKE1hdElucHV0SGFybmVzcyk7XG4gIGdldE5ldG1hc2tIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yKE1hdFNlbGVjdEhhcm5lc3MpO1xuICBnZXRFcnJvclRleHQgPSBnZXRFcnJvclRleHQ7XG5cbiAgYXN5bmMgZ2V0TGFiZWxUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgbGFiZWwgPSBhd2FpdCB0aGlzLmxvY2F0b3JGb3JPcHRpb25hbChJeExhYmVsSGFybmVzcykoKTtcbiAgICBpZiAoIWxhYmVsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbC5nZXRMYWJlbCgpO1xuICB9XG5cbiAgYXN5bmMgZ2V0VmFsdWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBhZGRyZXNzSW5wdXQgPSBhd2FpdCB0aGlzLmdldEFkZHJlc3NIYXJuZXNzKCk7XG4gICAgY29uc3QgbmV0bWFza1NlbGVjdCA9IGF3YWl0IHRoaXMuZ2V0TmV0bWFza0hhcm5lc3MoKTtcblxuICAgIGNvbnN0IGFkZHJlc3MgPSBhd2FpdCBhZGRyZXNzSW5wdXQuZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBuZXRtYXNrID0gYXdhaXQgbmV0bWFza1NlbGVjdC5nZXRWYWx1ZVRleHQoKTtcblxuICAgIHJldHVybiBgJHthZGRyZXNzfS8ke25ldG1hc2t9YDtcbiAgfVxuXG4gIGFzeW5jIHNldFZhbHVlKGFkZHJlc3NBbmROZXRtYXNrOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBbYWRkcmVzcywgbmV0bWFza10gPSBhZGRyZXNzQW5kTmV0bWFzay5zcGxpdCgnLycpO1xuICAgIGNvbnN0IGFkZHJlc3NJbnB1dCA9IGF3YWl0IHRoaXMuZ2V0QWRkcmVzc0hhcm5lc3MoKTtcbiAgICBjb25zdCBuZXRtYXNrU2VsZWN0ID0gYXdhaXQgdGhpcy5nZXROZXRtYXNrSGFybmVzcygpO1xuXG4gICAgYXdhaXQgYWRkcmVzc0lucHV0LnNldFZhbHVlKGFkZHJlc3MpO1xuICAgIGF3YWl0IG5ldG1hc2tTZWxlY3Qub3BlbigpO1xuICAgIGF3YWl0IG5ldG1hc2tTZWxlY3QuY2xpY2tPcHRpb25zKHsgdGV4dDogbmV0bWFzayB9KTtcbiAgfVxuXG4gIGFzeW5jIGlzRGlzYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldE5ldG1hc2tIYXJuZXNzKCkpLmlzRGlzYWJsZWQoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9