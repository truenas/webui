{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/classes/user-combobox-provider.ts","mappings":";;;AACA,8CAAqC;AAMrC,MAAa,oBAAoB;IAI/B,KAAK,CAAC,WAAmB;QACvB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAEzC,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC;aAC1D,IAAI,CACH,IAAA,eAAG,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAClD,CAAC;IACN,CAAC;IAED,qBAAqB,CAAC,KAAa;QACjC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACxB,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,CAAC,WAAmB;QAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QACzC,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC;aAC1D,IAAI,CACH,IAAA,eAAG,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAClD,CAAC;IACN,CAAC;IAED,YACY,WAAwB,EACxB,oBAA+C,UAAU;QADzD,gBAAW,GAAX,WAAW,CAAa;QACxB,sBAAiB,GAAjB,iBAAiB,CAAwC;QA9B3D,SAAI,GAAG,CAAC,CAAC;QACV,aAAQ,GAAG,EAAE,CAAC;IA8BpB,CAAC;CACL;AAjCD,oDAiCC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/forms/ix-forms/classes/user-combobox-provider.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Option } from 'app/interfaces/option.interface';\nimport { User } from 'app/interfaces/user.interface';\nimport { IxComboboxProvider } from 'app/modules/forms/ix-forms/components/ix-combobox/ix-combobox-provider';\nimport { UserService } from 'app/services/user.service';\n\nexport class UserComboboxProvider implements IxComboboxProvider {\n  protected page = 1;\n  readonly pageSize = 50;\n\n  fetch(filterValue: string): Observable<Option[]> {\n    this.page = 0;\n    const offset = this.page * this.pageSize;\n\n    return this.userService.userQueryDsCache(filterValue, offset)\n      .pipe(\n        map((users) => this.userQueryResToOptions(users)),\n      );\n  }\n\n  userQueryResToOptions(users: User[]): Option[] {\n    return users.map((user) => {\n      return { label: user.username, value: user[this.optionsValueField] };\n    });\n  }\n\n  nextPage(filterValue: string): Observable<Option[]> {\n    this.page++;\n    const offset = this.page * this.pageSize;\n    return this.userService.userQueryDsCache(filterValue, offset)\n      .pipe(\n        map((users) => this.userQueryResToOptions(users)),\n      );\n  }\n\n  constructor(\n    protected userService: UserService,\n    protected optionsValueField: 'username' | 'uid' | 'id' = 'username',\n  ) {}\n}\n"],"version":3}