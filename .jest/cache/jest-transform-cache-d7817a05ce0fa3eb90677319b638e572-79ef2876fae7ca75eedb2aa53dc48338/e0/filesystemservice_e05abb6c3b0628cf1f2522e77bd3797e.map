{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/filesystem.service.ts","mappings":";;;;;;;;;AAAA,wCAA2C;AAC3C,+BAA2B;AAC3B,qEAAgE;AAChE,uEAA8D;AAC9D,6DAAoD;AAKpD,wDAA2D;AAGpD,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YACU,EAAoB;QAApB,OAAE,GAAF,EAAE,CAAkB;IAC3B,CAAC;IAEJ;;OAEG;IACH,yBAAyB,CAAC,eAIzB;QACC,MAAM,OAAO,mBACX,eAAe,EAAE,KAAK,EACtB,eAAe,EAAE,KAAK,EACtB,gBAAgB,EAAE,IAAI,IACnB,eAAe,CACnB,CAAC;QAEF,OAAO,CAAC,IAAgC,EAAE,EAAE;YAC1C,MAAM,UAAU,GAA+B,EAAE,CAAC;YAClD,IAAI,OAAO,CAAC,eAAe,EAAE,CAAC;gBAC5B,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,yBAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YACrD,CAAC;YAED,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;gBAC9B,UAAU,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;YAC7C,CAAC;YAED,MAAM,YAAY,GAA6B;gBAC7C,MAAM,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;gBAC3D,QAAQ,EAAE,CAAC,MAAM,CAAC;gBAClB,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC,IAAI,CACxF,IAAA,UAAG,EAAC,CAAC,KAAK,EAAE,EAAE;gBACZ,MAAM,QAAQ,GAAuB,EAAE,CAAC;gBACxC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBACrB,IAAI,IAAI,CAAC,IAAI,KAAK,yBAAQ,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;wBACnE,OAAO;oBACT,CAAC;oBAED,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;wBAC1D,OAAO;oBACT,CAAC;oBAED,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,mCAAa,CAAC,SAAS,CAAC;wBAC/D,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,mCAAa,CAAC,SAAS,CAAC;wBACzD,IAAI,EAAE,IAAI,CAAC,IAAI,KAAK,yBAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,qCAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,qCAAgB,CAAC,IAAI;wBAC3F,WAAW,EAAE,IAAI,CAAC,IAAI,KAAK,yBAAQ,CAAC,SAAS;qBAC9C,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBAEH,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;;AA9DU,8CAAiB;;;;4BAAjB,iBAAiB;IAD7B,IAAA,iBAAU,EAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,iBAAiB,CA+D7B","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/filesystem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\nimport { ExplorerNodeType } from 'app/enums/explorer-type.enum';\nimport { FileAttribute } from 'app/enums/file-attribute.enum';\nimport { FileType } from 'app/enums/file-type.enum';\nimport { FileRecord } from 'app/interfaces/file-record.interface';\nimport { QueryFilter, QueryOptions } from 'app/interfaces/query-api.interface';\nimport { ExplorerNodeData, TreeNode } from 'app/interfaces/tree-node.interface';\nimport { TreeNodeProvider } from 'app/modules/forms/ix-forms/components/ix-explorer/tree-node-provider.interface';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@Injectable({ providedIn: 'root' })\nexport class FilesystemService {\n  constructor(\n    private ws: WebSocketService,\n  ) {}\n\n  /**\n   * Returns a pre-configured node provider for files and directories.\n   */\n  getFilesystemNodeProvider(providerOptions?: {\n    directoriesOnly?: boolean;\n    showHiddenFiles?: boolean;\n    includeSnapshots?: boolean;\n  }): TreeNodeProvider {\n    const options = {\n      directoriesOnly: false,\n      showHiddenFiles: false,\n      includeSnapshots: true,\n      ...providerOptions,\n    };\n\n    return (node: TreeNode<ExplorerNodeData>) => {\n      const typeFilter: [QueryFilter<FileRecord>?] = [];\n      if (options.directoriesOnly) {\n        typeFilter.push(['type', '=', FileType.Directory]);\n      }\n\n      if (!options.includeSnapshots) {\n        typeFilter.push(['is_ctldir', '=', false]);\n      }\n\n      const queryOptions: QueryOptions<FileRecord> = {\n        select: ['attributes', 'is_ctldir', 'name', 'path', 'type'],\n        order_by: ['name'],\n        limit: 1000,\n      };\n\n      return this.ws.call('filesystem.listdir', [node.data.path, typeFilter, queryOptions]).pipe(\n        map((files) => {\n          const children: ExplorerNodeData[] = [];\n          files.forEach((file) => {\n            if (file.type === FileType.Symlink || !file.hasOwnProperty('name')) {\n              return;\n            }\n\n            if (!options.showHiddenFiles && file.name.startsWith('.')) {\n              return;\n            }\n\n            children.push({\n              path: file.path,\n              name: file.name,\n              isMountpoint: file.attributes.includes(FileAttribute.MountRoot),\n              isLock: file.attributes.includes(FileAttribute.Immutable),\n              type: file.type === FileType.Directory ? ExplorerNodeType.Directory : ExplorerNodeType.File,\n              hasChildren: file.type === FileType.Directory,\n            });\n          });\n\n          return children;\n        }),\n      );\n    };\n  }\n}\n"],"version":3}