5e380d2f8ec17aa8472fe1085ec8b4ea
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxIconGroupHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/button/testing");
const testing_3 = require("@angular/material/icon/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxIconGroupHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getButtons = this.locatorForAll(testing_2.MatButtonHarness);
        this.getIcons = this.locatorForAll(testing_3.MatIconHarness.with({ ancestor: '.icon-group' }));
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxIconGroupHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.locatorForOptional(ix_label_harness_1.IxLabelHarness)();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const selectedButton = yield this.locatorForOptional(testing_2.MatButtonHarness.with({ selector: '.selected' }))();
            if (!selectedButton) {
                return '';
            }
            return (yield selectedButton.host()).getAttribute('data-value');
        });
    }
    setValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const button = this.locatorFor(testing_2.MatButtonHarness.with({ selector: `[data-value="${value}"]` }))();
            (_a = (yield button)) === null || _a === void 0 ? void 0 : _a.click();
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            const buttons = yield this.getButtons();
            const inputState = yield (0, testing_1.parallel)(() => buttons.map((control) => control.isDisabled()));
            return new Promise((resolve) => {
                resolve(inputState.every(Boolean));
            });
        });
    }
}
exports.IxIconGroupHarness = IxIconGroupHarness;
IxIconGroupHarness.hostSelector = 'ix-icon-group';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1pY29uLWdyb3VwL2l4LWljb24tZ3JvdXAuaGFybmVzcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxrREFFOEI7QUFDOUIsOERBQW9FO0FBQ3BFLDREQUFnRTtBQUNoRSxzR0FBaUc7QUFFakcsa0ZBQThFO0FBTTlFLE1BQWEsa0JBQW1CLFNBQVEsMEJBQWdCO0lBQXhEOztRQVFFLGVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLDBCQUFnQixDQUFDLENBQUM7UUFDbEQsYUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsd0JBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLGlCQUFZLEdBQUcsNEJBQVksQ0FBQztJQWdDOUIsQ0FBQztJQXZDQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQTJCO1FBQ3JDLE9BQU8sSUFBSSwwQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUM7YUFDckQsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFILENBQUM7SUFNSyxZQUFZOztZQUNoQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQ0FBYyxDQUFDLEVBQUUsQ0FBQztZQUM5RCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUIsQ0FBQztLQUFBO0lBRUssUUFBUTs7WUFDWixNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQywwQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDekcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUNwQixPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFFRCxPQUFPLENBQUMsTUFBTSxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEUsQ0FBQztLQUFBO0lBRUssUUFBUSxDQUFDLEtBQWE7OztZQUMxQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLDBCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNqRyxNQUFBLENBQUMsTUFBTSxNQUFNLENBQUMsMENBQUUsS0FBSyxFQUFFLENBQUM7UUFDMUIsQ0FBQztLQUFBO0lBRUssVUFBVTs7WUFDZCxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN4QyxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUEsa0JBQVEsRUFBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXhGLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDN0IsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTs7QUF6Q0gsZ0RBMENDO0FBekNRLCtCQUFZLEdBQUcsZUFBZSxBQUFsQixDQUFtQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvbW9kdWxlcy9mb3Jtcy9peC1mb3Jtcy9jb21wb25lbnRzL2l4LWljb24tZ3JvdXAvaXgtaWNvbi1ncm91cC5oYXJuZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhc2VIYXJuZXNzRmlsdGVycywgQ29tcG9uZW50SGFybmVzcywgSGFybmVzc1ByZWRpY2F0ZSwgcGFyYWxsZWwsXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IE1hdEJ1dHRvbkhhcm5lc3MgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9idXR0b24vdGVzdGluZyc7XG5pbXBvcnQgeyBNYXRJY29uSGFybmVzcyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24vdGVzdGluZyc7XG5pbXBvcnQgeyBJeExhYmVsSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtbGFiZWwvaXgtbGFiZWwuaGFybmVzcyc7XG5pbXBvcnQgeyBJeEZvcm1Db250cm9sSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2ludGVyZmFjZXMvaXgtZm9ybS1jb250cm9sLWhhcm5lc3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldEVycm9yVGV4dCB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL3V0aWxzL2hhcm5lc3MudXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEl4SWNvbkdyb3VwRmlsdGVycyBleHRlbmRzIEJhc2VIYXJuZXNzRmlsdGVycyB7XG4gIGxhYmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSXhJY29uR3JvdXBIYXJuZXNzIGV4dGVuZHMgQ29tcG9uZW50SGFybmVzcyBpbXBsZW1lbnRzIEl4Rm9ybUNvbnRyb2xIYXJuZXNzIHtcbiAgc3RhdGljIGhvc3RTZWxlY3RvciA9ICdpeC1pY29uLWdyb3VwJztcblxuICBzdGF0aWMgd2l0aChvcHRpb25zOiBJeEljb25Hcm91cEZpbHRlcnMpOiBIYXJuZXNzUHJlZGljYXRlPEl4SWNvbkdyb3VwSGFybmVzcz4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZShJeEljb25Hcm91cEhhcm5lc3MsIG9wdGlvbnMpXG4gICAgICAuYWRkT3B0aW9uKCdsYWJlbCcsIG9wdGlvbnMubGFiZWwsIChoYXJuZXNzLCBsYWJlbCkgPT4gSGFybmVzc1ByZWRpY2F0ZS5zdHJpbmdNYXRjaGVzKGhhcm5lc3MuZ2V0TGFiZWxUZXh0KCksIGxhYmVsKSk7XG4gIH1cblxuICBnZXRCdXR0b25zID0gdGhpcy5sb2NhdG9yRm9yQWxsKE1hdEJ1dHRvbkhhcm5lc3MpO1xuICBnZXRJY29ucyA9IHRoaXMubG9jYXRvckZvckFsbChNYXRJY29uSGFybmVzcy53aXRoKHsgYW5jZXN0b3I6ICcuaWNvbi1ncm91cCcgfSkpO1xuICBnZXRFcnJvclRleHQgPSBnZXRFcnJvclRleHQ7XG5cbiAgYXN5bmMgZ2V0TGFiZWxUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgbGFiZWwgPSBhd2FpdCB0aGlzLmxvY2F0b3JGb3JPcHRpb25hbChJeExhYmVsSGFybmVzcykoKTtcbiAgICBpZiAoIWxhYmVsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbC5nZXRMYWJlbCgpO1xuICB9XG5cbiAgYXN5bmMgZ2V0VmFsdWUoKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCBzZWxlY3RlZEJ1dHRvbiA9IGF3YWl0IHRoaXMubG9jYXRvckZvck9wdGlvbmFsKE1hdEJ1dHRvbkhhcm5lc3Mud2l0aCh7IHNlbGVjdG9yOiAnLnNlbGVjdGVkJyB9KSkoKTtcbiAgICBpZiAoIXNlbGVjdGVkQnV0dG9uKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChhd2FpdCBzZWxlY3RlZEJ1dHRvbi5ob3N0KCkpLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICB9XG5cbiAgYXN5bmMgc2V0VmFsdWUodmFsdWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMubG9jYXRvckZvcihNYXRCdXR0b25IYXJuZXNzLndpdGgoeyBzZWxlY3RvcjogYFtkYXRhLXZhbHVlPVwiJHt2YWx1ZX1cIl1gIH0pKSgpO1xuICAgIChhd2FpdCBidXR0b24pPy5jbGljaygpO1xuICB9XG5cbiAgYXN5bmMgaXNEaXNhYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBidXR0b25zID0gYXdhaXQgdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgY29uc3QgaW5wdXRTdGF0ZSA9IGF3YWl0IHBhcmFsbGVsKCgpID0+IGJ1dHRvbnMubWFwKChjb250cm9sKSA9PiBjb250cm9sLmlzRGlzYWJsZWQoKSkpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICByZXNvbHZlKGlucHV0U3RhdGUuZXZlcnkoQm9vbGVhbikpO1xuICAgIH0pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=