4c1fe5fbe647edf015e69af1b586ca9e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimilarIssuesComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const feedback_service_1 = require("app/modules/feedback/services/feedback.service");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
let SimilarIssuesComponent = class SimilarIssuesComponent {
    set query(value) {
        this.query$.next(value);
    }
    constructor(feedbackService) {
        this.feedbackService = feedbackService;
        this.similarIssues$ = new rxjs_1.BehaviorSubject([]);
        this.isLoading$ = new rxjs_1.BehaviorSubject(false);
        this.query$ = new rxjs_1.BehaviorSubject(null);
        this.jiraHostname = 'https://ixsystems.atlassian.net';
        this.listenForQueryChanges();
    }
    listenForQueryChanges() {
        this.query$.pipe((0, rxjs_1.filter)((query) => (query === null || query === void 0 ? void 0 : query.length) >= 3), (0, rxjs_1.debounceTime)(300), (0, rxjs_1.distinctUntilChanged)(), (0, rxjs_1.switchMap)((query) => this.fetchAndCombineSimilarIssues(query)), (0, until_destroy_1.untilDestroyed)(this)).subscribe();
        this.query$.pipe((0, rxjs_1.debounceTime)(300), (0, rxjs_1.distinctUntilChanged)(), (0, rxjs_1.pairwise)(), (0, until_destroy_1.untilDestroyed)(this)).subscribe(([oldQuery, newQuery]) => {
            if (!(newQuery === null || newQuery === void 0 ? void 0 : newQuery.length)) {
                this.similarIssues$.next([]);
            }
            if ((oldQuery === null || oldQuery === void 0 ? void 0 : oldQuery.length) && (newQuery === null || newQuery === void 0 ? void 0 : newQuery.length)) {
                const resetSimilarIssues = !newQuery.trim().includes(oldQuery);
                if (resetSimilarIssues) {
                    this.similarIssues$.next([]);
                }
            }
        });
    }
    fetchAndCombineSimilarIssues(query) {
        this.isLoading$.next(true);
        return this.feedbackService.getSimilarIssues(query).pipe((0, rxjs_1.switchMap)((newIssues) => {
            const combinedUniqueIssues = (0, lodash_es_1.sortBy)((0, lodash_es_1.uniqBy)([
                ...this.similarIssues$.value,
                ...newIssues,
            ], 'id'), { summaryText: query });
            this.similarIssues$.next(combinedUniqueIssues);
            this.isLoading$.next(false);
            return this.similarIssues$;
        }));
    }
};
exports.SimilarIssuesComponent = SimilarIssuesComponent;
SimilarIssuesComponent.ctorParameters = () => [
    { type: feedback_service_1.FeedbackService }
];
SimilarIssuesComponent.propDecorators = {
    query: [{ type: core_1.Input }]
};
exports.SimilarIssuesComponent = SimilarIssuesComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-similar-issues',
        template: require("./similar-issues.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            test_directive_1.TestDirective,
            ix_icon_component_1.IxIconComponent,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], SimilarIssuesComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZmVlZGJhY2svY29tcG9uZW50cy9zaW1pbGFyLWlzc3Vlcy9zaW1pbGFyLWlzc3Vlcy5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNENBQTRDO0FBQzVDLHdDQUV1QjtBQUN2Qix5REFBcUU7QUFDckUsOENBQXNEO0FBQ3RELHlDQUEyQztBQUMzQywrQkFFYztBQUVkLHFGQUFpRjtBQUNqRiw2RUFBd0U7QUFDeEUsdUVBQW1FO0FBZ0I1RCxJQUFNLHNCQUFzQixHQUE1QixNQUFNLHNCQUFzQjtRQUNwQixLQUFLLENBQUMsS0FBYTtRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBUUQsWUFDVSxlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFQaEMsbUJBQWMsR0FBRyxJQUFJLHNCQUFlLENBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELGVBQVUsR0FBRyxJQUFJLHNCQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFDbkQsV0FBTSxHQUFHLElBQUksc0JBQWUsQ0FBUyxJQUFJLENBQUMsQ0FBQztRQUVoQyxpQkFBWSxHQUFHLGlDQUFpQyxDQUFDO1FBS2xFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFTyxxQkFBcUI7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QsSUFBQSxhQUFNLEVBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLE1BQU0sS0FBSSxDQUFDLENBQUMsRUFDckMsSUFBQSxtQkFBWSxFQUFDLEdBQUcsQ0FBQyxFQUNqQixJQUFBLDJCQUFvQixHQUFFLEVBQ3RCLElBQUEsZ0JBQVMsRUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQzlELElBQUEsOEJBQWMsRUFBQyxJQUFJLENBQUMsQ0FDckIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNkLElBQUEsbUJBQVksRUFBQyxHQUFHLENBQUMsRUFDakIsSUFBQSwyQkFBb0IsR0FBRSxFQUN0QixJQUFBLGVBQVEsR0FBRSxFQUNWLElBQUEsOEJBQWMsRUFBQyxJQUFJLENBQUMsQ0FDckIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxDQUFBLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxNQUFNLENBQUEsRUFBRSxDQUFDO2dCQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQ0QsSUFBSSxDQUFBLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxNQUFNLE1BQUksUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLE1BQU0sQ0FBQSxFQUFFLENBQUM7Z0JBQ3pDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMvRCxJQUFJLGtCQUFrQixFQUFFLENBQUM7b0JBQ3ZCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQixDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDRCQUE0QixDQUFDLEtBQWE7UUFDaEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDdEQsSUFBQSxnQkFBUyxFQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDdEIsTUFBTSxvQkFBb0IsR0FBRyxJQUFBLGtCQUFNLEVBQUMsSUFBQSxrQkFBTSxFQUFDO2dCQUN6QyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSztnQkFDNUIsR0FBRyxTQUFTO2FBQ2IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOztBQXpEVSx3REFBc0I7Ozs7O29CQUNoQyxZQUFLOztpQ0FESyxzQkFBc0I7SUFkbEMsSUFBQSw0QkFBWSxHQUFFO0lBQ2QsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLG1CQUFtQjtRQUU3QixvREFBOEM7UUFDOUMsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFO1lBQ1AsOEJBQWE7WUFDYixtQ0FBZTtZQUNmLHNCQUFlO1lBQ2Ysa0JBQVM7U0FDVjtLQUNGLENBQUM7R0FDVyxzQkFBc0IsQ0EwRGxDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2ZlZWRiYWNrL2NvbXBvbmVudHMvc2ltaWxhci1pc3N1ZXMvc2ltaWxhci1pc3N1ZXMuY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVbnRpbERlc3Ryb3ksIHVudGlsRGVzdHJveWVkIH0gZnJvbSAnQG5nbmVhdC91bnRpbC1kZXN0cm95JztcbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgc29ydEJ5LCB1bmlxQnkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHtcbiAgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIHBhaXJ3aXNlLCBzd2l0Y2hNYXAsXG59IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU2ltaWxhcklzc3VlIH0gZnJvbSAnYXBwL21vZHVsZXMvZmVlZGJhY2svaW50ZXJmYWNlcy9maWxlLXRpY2tldC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRmVlZGJhY2tTZXJ2aWNlIH0gZnJvbSAnYXBwL21vZHVsZXMvZmVlZGJhY2svc2VydmljZXMvZmVlZGJhY2suc2VydmljZSc7XG5pbXBvcnQgeyBJeEljb25Db21wb25lbnQgfSBmcm9tICdhcHAvbW9kdWxlcy9peC1pY29uL2l4LWljb24uY29tcG9uZW50JztcbmltcG9ydCB7IFRlc3REaXJlY3RpdmUgfSBmcm9tICdhcHAvbW9kdWxlcy90ZXN0LWlkL3Rlc3QuZGlyZWN0aXZlJztcblxuQFVudGlsRGVzdHJveSgpXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpeC1zaW1pbGFyLWlzc3VlcycsXG4gIHN0eWxlVXJsczogWycuL3NpbWlsYXItaXNzdWVzLmNvbXBvbmVudC5zY3NzJ10sXG4gIHRlbXBsYXRlVXJsOiAnLi9zaW1pbGFyLWlzc3Vlcy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbXG4gICAgVGVzdERpcmVjdGl2ZSxcbiAgICBJeEljb25Db21wb25lbnQsXG4gICAgVHJhbnNsYXRlTW9kdWxlLFxuICAgIEFzeW5jUGlwZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgU2ltaWxhcklzc3Vlc0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNldCBxdWVyeSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5xdWVyeSQubmV4dCh2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2ltaWxhcklzc3VlcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFNpbWlsYXJJc3N1ZVtdPihbXSk7XG4gIHByb3RlY3RlZCBpc0xvYWRpbmckID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gIHByaXZhdGUgcXVlcnkkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KG51bGwpO1xuXG4gIHByb3RlY3RlZCByZWFkb25seSBqaXJhSG9zdG5hbWUgPSAnaHR0cHM6Ly9peHN5c3RlbXMuYXRsYXNzaWFuLm5ldCc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBmZWVkYmFja1NlcnZpY2U6IEZlZWRiYWNrU2VydmljZSxcbiAgKSB7XG4gICAgdGhpcy5saXN0ZW5Gb3JRdWVyeUNoYW5nZXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgbGlzdGVuRm9yUXVlcnlDaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMucXVlcnkkLnBpcGUoXG4gICAgICBmaWx0ZXIoKHF1ZXJ5KSA9PiBxdWVyeT8ubGVuZ3RoID49IDMpLFxuICAgICAgZGVib3VuY2VUaW1lKDMwMCksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgc3dpdGNoTWFwKChxdWVyeSkgPT4gdGhpcy5mZXRjaEFuZENvbWJpbmVTaW1pbGFySXNzdWVzKHF1ZXJ5KSksXG4gICAgICB1bnRpbERlc3Ryb3llZCh0aGlzKSxcbiAgICApLnN1YnNjcmliZSgpO1xuXG4gICAgdGhpcy5xdWVyeSQucGlwZShcbiAgICAgIGRlYm91bmNlVGltZSgzMDApLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIHBhaXJ3aXNlKCksXG4gICAgICB1bnRpbERlc3Ryb3llZCh0aGlzKSxcbiAgICApLnN1YnNjcmliZSgoW29sZFF1ZXJ5LCBuZXdRdWVyeV0pID0+IHtcbiAgICAgIGlmICghbmV3UXVlcnk/Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLnNpbWlsYXJJc3N1ZXMkLm5leHQoW10pO1xuICAgICAgfVxuICAgICAgaWYgKG9sZFF1ZXJ5Py5sZW5ndGggJiYgbmV3UXVlcnk/Lmxlbmd0aCkge1xuICAgICAgICBjb25zdCByZXNldFNpbWlsYXJJc3N1ZXMgPSAhbmV3UXVlcnkudHJpbSgpLmluY2x1ZGVzKG9sZFF1ZXJ5KTtcbiAgICAgICAgaWYgKHJlc2V0U2ltaWxhcklzc3Vlcykge1xuICAgICAgICAgIHRoaXMuc2ltaWxhcklzc3VlcyQubmV4dChbXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZmV0Y2hBbmRDb21iaW5lU2ltaWxhcklzc3VlcyhxdWVyeTogc3RyaW5nKTogT2JzZXJ2YWJsZTxTaW1pbGFySXNzdWVbXT4ge1xuICAgIHRoaXMuaXNMb2FkaW5nJC5uZXh0KHRydWUpO1xuICAgIHJldHVybiB0aGlzLmZlZWRiYWNrU2VydmljZS5nZXRTaW1pbGFySXNzdWVzKHF1ZXJ5KS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChuZXdJc3N1ZXMpID0+IHtcbiAgICAgICAgY29uc3QgY29tYmluZWRVbmlxdWVJc3N1ZXMgPSBzb3J0QnkodW5pcUJ5KFtcbiAgICAgICAgICAuLi50aGlzLnNpbWlsYXJJc3N1ZXMkLnZhbHVlLFxuICAgICAgICAgIC4uLm5ld0lzc3VlcyxcbiAgICAgICAgXSwgJ2lkJyksIHsgc3VtbWFyeVRleHQ6IHF1ZXJ5IH0pO1xuICAgICAgICB0aGlzLnNpbWlsYXJJc3N1ZXMkLm5leHQoY29tYmluZWRVbmlxdWVJc3N1ZXMpO1xuICAgICAgICB0aGlzLmlzTG9hZGluZyQubmV4dChmYWxzZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnNpbWlsYXJJc3N1ZXMkO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9