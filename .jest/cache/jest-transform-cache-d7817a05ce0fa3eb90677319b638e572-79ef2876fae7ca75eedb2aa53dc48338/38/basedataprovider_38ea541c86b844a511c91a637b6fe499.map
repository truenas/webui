{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/classes/base-data-provider.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/ix-table/classes/base-data-provider.ts"],"sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { orderBy, sortBy } from 'lodash-es';\nimport {\n  BehaviorSubject, Observable, Subscription, map,\n} from 'rxjs';\nimport { EmptyType } from 'app/enums/empty-type.enum';\nimport { SortDirection } from 'app/modules/ix-table/enums/sort-direction.enum';\nimport { DataProvider } from 'app/modules/ix-table/interfaces/data-provider.interface';\nimport { TableFilter } from 'app/modules/ix-table/interfaces/table-filter.interface';\nimport { TablePagination } from 'app/modules/ix-table/interfaces/table-pagination.interface';\nimport { TableSort } from 'app/modules/ix-table/interfaces/table-sort.interface';\nimport { filterTableRows } from 'app/modules/ix-table/utils';\n\nexport class BaseDataProvider<T> implements DataProvider<T> {\n  readonly emptyType$ = new BehaviorSubject<EmptyType>(EmptyType.Loading);\n  readonly controlsStateUpdated = new EventEmitter<void>();\n\n  get isLoading$(): Observable<boolean> {\n    return this.emptyType$.pipe(map((emptyType) => emptyType === EmptyType.Loading));\n  }\n\n  get isError$(): Observable<boolean> {\n    return this.emptyType$.pipe(map((emptyType) => emptyType === EmptyType.Errors));\n  }\n\n  get currentPageCount$(): Observable<number> {\n    return this.currentPage$.pipe(map((currentPage) => currentPage.length));\n  }\n\n  currentPage$ = new BehaviorSubject<T[]>([]);\n  expandedRow$ = new BehaviorSubject<T>(null);\n  expandedRow: T;\n  totalRows = 0;\n\n  sorting: TableSort<T> = {\n    propertyName: null,\n    direction: null,\n    active: null,\n  };\n\n  pagination: TablePagination = {\n    pageNumber: null,\n    pageSize: null,\n  };\n\n  protected subscription = new Subscription();\n  private allRows: T[] = [];\n\n  unsubscribe(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  setRows(rows: T[]): void {\n    this.allRows = rows;\n    this.totalRows = rows.length;\n    this.updateCurrentPage(this.allRows);\n  }\n\n  setSorting(sorting: TableSort<T>): void {\n    this.sorting = sorting;\n    this.updateCurrentPage(this.allRows);\n    this.controlsStateUpdated.emit();\n  }\n\n  setFilter(filter: TableFilter<T>): void {\n    const filteredRows = filterTableRows(filter);\n    this.totalRows = filteredRows.length;\n    this.setRows(filteredRows);\n  }\n\n  setPagination(pagination: TablePagination): void {\n    this.pagination = pagination;\n    this.updateCurrentPage(this.allRows);\n    this.controlsStateUpdated.emit();\n  }\n\n  protected updateCurrentPage(rows: T[]): void {\n    this.currentPage$.next(paginate(sort(rows, this.sorting), this.pagination));\n  }\n}\n\nexport function sort<T>(rows: T[], sorting: TableSort<T>): T[] {\n  const sorted = rows;\n  const direction = sorting.direction;\n  const propertyName = sorting.propertyName;\n\n  if (direction === null || propertyName === null) {\n    return sorted;\n  }\n  if (sorting.sortBy) {\n    return direction === SortDirection.Desc ? sortBy(sorted, sorting.sortBy).reverse() : sortBy(sorted, sorting.sortBy);\n  }\n\n  return orderBy(sorted, propertyName, direction);\n}\n\nexport function paginate<T>(rows: T[], pagination: TablePagination): T[] {\n  const paginated = rows;\n  const pageNumber = pagination.pageNumber;\n  const pageSize = pagination.pageSize;\n\n  if (pageNumber === null || pageSize === null) {\n    return paginated;\n  }\n\n  return paginated.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);\n}\n"],"version":3}