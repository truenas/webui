3f03358353740282f3eed704baac7b3a
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxComboboxHarness = void 0;
const testing_1 = require("@angular/cdk/testing");
const testing_2 = require("@angular/material/autocomplete/testing");
const testing_3 = require("@angular/material/input/testing");
const ix_label_harness_1 = require("app/modules/forms/ix-forms/components/ix-label/ix-label.harness");
const harness_utils_1 = require("app/modules/forms/ix-forms/utils/harness.utils");
class IxComboboxHarness extends testing_1.ComponentHarness {
    constructor() {
        super(...arguments);
        this.getAutoCompleteHarness = this.locatorFor(testing_2.MatAutocompleteHarness);
        this.getMatInputHarness = this.locatorFor(testing_3.MatInputHarness);
        this.getLabelHarness = this.locatorForOptional(ix_label_harness_1.IxLabelHarness);
        this.getErrorText = harness_utils_1.getErrorText;
    }
    static with(options) {
        return new testing_1.HarnessPredicate(IxComboboxHarness, options)
            .addOption('label', options.label, (harness, label) => testing_1.HarnessPredicate.stringMatches(harness.getLabelText(), label));
    }
    focusInput() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMatInputHarness()).focus();
        });
    }
    getAutocompleteOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = yield (yield this.getAutoCompleteHarness()).getOptions();
            return (0, testing_1.parallel)(() => options.map((option) => option.getText()));
        });
    }
    getLabelText() {
        return __awaiter(this, void 0, void 0, function* () {
            const label = yield this.getLabelHarness();
            if (!label) {
                return '';
            }
            return label.getLabel();
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAutoCompleteHarness()).getValue();
        });
    }
    /**
     *
     * @param optionLabel label of the option that is to be assigned
     */
    setValue(optionLabel) {
        return __awaiter(this, void 0, void 0, function* () {
            const harness = yield this.getAutoCompleteHarness();
            yield harness.focus();
            yield harness.selectOption({ text: optionLabel });
        });
    }
    writeCustomValue(text) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield this.getMatInputHarness();
            return input.setValue(text);
        });
    }
    isDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAutoCompleteHarness()).isDisabled();
        });
    }
}
exports.IxComboboxHarness = IxComboboxHarness;
IxComboboxHarness.hostSelector = 'ix-combobox';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1jb21ib2JveC9peC1jb21ib2JveC5oYXJuZXNzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUFvRjtBQUNwRixvRUFBNEc7QUFDNUcsNkRBQWtFO0FBQ2xFLHNHQUFpRztBQUVqRyxrRkFBOEU7QUFPOUUsTUFBYSxpQkFBa0IsU0FBUSwwQkFBZ0I7SUFBdkQ7O1FBUUUsMkJBQXNCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQ0FBc0IsQ0FBQyxDQUFDO1FBQ2pFLHVCQUFrQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMseUJBQWUsQ0FBQyxDQUFDO1FBQ3RELG9CQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlDQUFjLENBQUMsQ0FBQztRQUMxRCxpQkFBWSxHQUFHLDRCQUFZLENBQUM7SUF5QzlCLENBQUM7SUFqREMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFpQztRQUMzQyxPQUFPLElBQUksMEJBQWdCLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDO2FBQ3BELFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLDBCQUFnQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMxSCxDQUFDO0lBT0ssVUFBVTs7WUFDZCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25ELENBQUM7S0FBQTtJQUVLLHNCQUFzQjs7WUFDMUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN6RSxPQUFPLElBQUEsa0JBQVEsRUFBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25FLENBQUM7S0FBQTtJQUVLLFlBQVk7O1lBQ2hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQzNDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDWCxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQixDQUFDO0tBQUE7SUFFSyxRQUFROztZQUNaLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUQsQ0FBQztLQUFBO0lBRUQ7OztPQUdHO0lBQ0csUUFBUSxDQUFDLFdBQW1COztZQUNoQyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBQ3BELE1BQU0sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3RCLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELENBQUM7S0FBQTtJQUVLLGdCQUFnQixDQUFDLElBQVk7O1lBQ2pDLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDOUMsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUM7S0FBQTtJQUVLLFVBQVU7O1lBQ2QsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUM1RCxDQUFDO0tBQUE7O0FBbkRILDhDQW9EQztBQW5EaUIsOEJBQVksR0FBRyxhQUFhLEFBQWhCLENBQWlCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rL2thcnBvdi13b3JrL1RydWVOQVMvd2VidWkvc3JjL2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtY29tYm9ib3gvaXgtY29tYm9ib3guaGFybmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRIYXJuZXNzLCBIYXJuZXNzUHJlZGljYXRlLCBwYXJhbGxlbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7IE1hdEF1dG9jb21wbGV0ZUhhcm5lc3MsIEF1dG9jb21wbGV0ZUhhcm5lc3NGaWx0ZXJzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYXV0b2NvbXBsZXRlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWF0SW5wdXRIYXJuZXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQvdGVzdGluZyc7XG5pbXBvcnQgeyBJeExhYmVsSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtbGFiZWwvaXgtbGFiZWwuaGFybmVzcyc7XG5pbXBvcnQgeyBJeEZvcm1Db250cm9sSGFybmVzcyB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2ludGVyZmFjZXMvaXgtZm9ybS1jb250cm9sLWhhcm5lc3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldEVycm9yVGV4dCB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL3V0aWxzL2hhcm5lc3MudXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEl4Q29tYm9ib3hIYXJuZXNzRmlsdGVycyBleHRlbmRzIEF1dG9jb21wbGV0ZUhhcm5lc3NGaWx0ZXJzIHtcbiAgbGFiZWw6IHN0cmluZztcbiAgYWxsb3dDdXN0b21WYWx1ZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBJeENvbWJvYm94SGFybmVzcyBleHRlbmRzIENvbXBvbmVudEhhcm5lc3MgaW1wbGVtZW50cyBJeEZvcm1Db250cm9sSGFybmVzcyB7XG4gIHN0YXRpYyByZWFkb25seSBob3N0U2VsZWN0b3IgPSAnaXgtY29tYm9ib3gnO1xuXG4gIHN0YXRpYyB3aXRoKG9wdGlvbnM6IEl4Q29tYm9ib3hIYXJuZXNzRmlsdGVycyk6IEhhcm5lc3NQcmVkaWNhdGU8SXhDb21ib2JveEhhcm5lc3M+IHtcbiAgICByZXR1cm4gbmV3IEhhcm5lc3NQcmVkaWNhdGUoSXhDb21ib2JveEhhcm5lc3MsIG9wdGlvbnMpXG4gICAgICAuYWRkT3B0aW9uKCdsYWJlbCcsIG9wdGlvbnMubGFiZWwsIChoYXJuZXNzLCBsYWJlbCkgPT4gSGFybmVzc1ByZWRpY2F0ZS5zdHJpbmdNYXRjaGVzKGhhcm5lc3MuZ2V0TGFiZWxUZXh0KCksIGxhYmVsKSk7XG4gIH1cblxuICBnZXRBdXRvQ29tcGxldGVIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yKE1hdEF1dG9jb21wbGV0ZUhhcm5lc3MpO1xuICBnZXRNYXRJbnB1dEhhcm5lc3MgPSB0aGlzLmxvY2F0b3JGb3IoTWF0SW5wdXRIYXJuZXNzKTtcbiAgZ2V0TGFiZWxIYXJuZXNzID0gdGhpcy5sb2NhdG9yRm9yT3B0aW9uYWwoSXhMYWJlbEhhcm5lc3MpO1xuICBnZXRFcnJvclRleHQgPSBnZXRFcnJvclRleHQ7XG5cbiAgYXN5bmMgZm9jdXNJbnB1dCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0TWF0SW5wdXRIYXJuZXNzKCkpLmZvY3VzKCk7XG4gIH1cblxuICBhc3luYyBnZXRBdXRvY29tcGxldGVPcHRpb25zKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgKGF3YWl0IHRoaXMuZ2V0QXV0b0NvbXBsZXRlSGFybmVzcygpKS5nZXRPcHRpb25zKCk7XG4gICAgcmV0dXJuIHBhcmFsbGVsKCgpID0+IG9wdGlvbnMubWFwKChvcHRpb24pID0+IG9wdGlvbi5nZXRUZXh0KCkpKTtcbiAgfVxuXG4gIGFzeW5jIGdldExhYmVsVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGxhYmVsID0gYXdhaXQgdGhpcy5nZXRMYWJlbEhhcm5lc3MoKTtcbiAgICBpZiAoIWxhYmVsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbC5nZXRMYWJlbCgpO1xuICB9XG5cbiAgYXN5bmMgZ2V0VmFsdWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0QXV0b0NvbXBsZXRlSGFybmVzcygpKS5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25MYWJlbCBsYWJlbCBvZiB0aGUgb3B0aW9uIHRoYXQgaXMgdG8gYmUgYXNzaWduZWRcbiAgICovXG4gIGFzeW5jIHNldFZhbHVlKG9wdGlvbkxhYmVsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBoYXJuZXNzID0gYXdhaXQgdGhpcy5nZXRBdXRvQ29tcGxldGVIYXJuZXNzKCk7XG4gICAgYXdhaXQgaGFybmVzcy5mb2N1cygpO1xuICAgIGF3YWl0IGhhcm5lc3Muc2VsZWN0T3B0aW9uKHsgdGV4dDogb3B0aW9uTGFiZWwgfSk7XG4gIH1cblxuICBhc3luYyB3cml0ZUN1c3RvbVZhbHVlKHRleHQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGlucHV0ID0gYXdhaXQgdGhpcy5nZXRNYXRJbnB1dEhhcm5lc3MoKTtcbiAgICByZXR1cm4gaW5wdXQuc2V0VmFsdWUodGV4dCk7XG4gIH1cblxuICBhc3luYyBpc0Rpc2FibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRBdXRvQ29tcGxldGVIYXJuZXNzKCkpLmlzRGlzYWJsZWQoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9