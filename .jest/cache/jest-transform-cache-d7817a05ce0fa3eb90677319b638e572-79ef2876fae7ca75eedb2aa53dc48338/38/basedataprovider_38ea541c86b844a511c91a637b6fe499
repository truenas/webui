8978de4293226bb9a7002b23146ea4c1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseDataProvider = void 0;
exports.sort = sort;
exports.paginate = paginate;
const core_1 = require("@angular/core");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const empty_type_enum_1 = require("app/enums/empty-type.enum");
const sort_direction_enum_1 = require("app/modules/ix-table/enums/sort-direction.enum");
const utils_1 = require("app/modules/ix-table/utils");
class BaseDataProvider {
    constructor() {
        this.emptyType$ = new rxjs_1.BehaviorSubject(empty_type_enum_1.EmptyType.Loading);
        this.controlsStateUpdated = new core_1.EventEmitter();
        this.currentPage$ = new rxjs_1.BehaviorSubject([]);
        this.expandedRow$ = new rxjs_1.BehaviorSubject(null);
        this.totalRows = 0;
        this.sorting = {
            propertyName: null,
            direction: null,
            active: null,
        };
        this.pagination = {
            pageNumber: null,
            pageSize: null,
        };
        this.subscription = new rxjs_1.Subscription();
        this.allRows = [];
    }
    get isLoading$() {
        return this.emptyType$.pipe((0, rxjs_1.map)((emptyType) => emptyType === empty_type_enum_1.EmptyType.Loading));
    }
    get isError$() {
        return this.emptyType$.pipe((0, rxjs_1.map)((emptyType) => emptyType === empty_type_enum_1.EmptyType.Errors));
    }
    get currentPageCount$() {
        return this.currentPage$.pipe((0, rxjs_1.map)((currentPage) => currentPage.length));
    }
    unsubscribe() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    setRows(rows) {
        this.allRows = rows;
        this.totalRows = rows.length;
        this.updateCurrentPage(this.allRows);
    }
    setSorting(sorting) {
        this.sorting = sorting;
        this.updateCurrentPage(this.allRows);
        this.controlsStateUpdated.emit();
    }
    setFilter(filter) {
        const filteredRows = (0, utils_1.filterTableRows)(filter);
        this.totalRows = filteredRows.length;
        this.setRows(filteredRows);
    }
    setPagination(pagination) {
        this.pagination = pagination;
        this.updateCurrentPage(this.allRows);
        this.controlsStateUpdated.emit();
    }
    updateCurrentPage(rows) {
        this.currentPage$.next(paginate(sort(rows, this.sorting), this.pagination));
    }
}
exports.BaseDataProvider = BaseDataProvider;
function sort(rows, sorting) {
    const sorted = rows;
    const direction = sorting.direction;
    const propertyName = sorting.propertyName;
    if (direction === null || propertyName === null) {
        return sorted;
    }
    if (sorting.sortBy) {
        return direction === sort_direction_enum_1.SortDirection.Desc ? (0, lodash_es_1.sortBy)(sorted, sorting.sortBy).reverse() : (0, lodash_es_1.sortBy)(sorted, sorting.sortBy);
    }
    return (0, lodash_es_1.orderBy)(sorted, propertyName, direction);
}
function paginate(rows, pagination) {
    const paginated = rows;
    const pageNumber = pagination.pageNumber;
    const pageSize = pagination.pageSize;
    if (pageNumber === null || pageSize === null) {
        return paginated;
    }
    return paginated.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,