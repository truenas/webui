2629cd304d327db26a5b2b7e91412722
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxSlideInComponent = void 0;
const a11y_1 = require("@angular/cdk/a11y");
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const angular2_uuid_1 = require("angular2-uuid");
const rxjs_1 = require("rxjs");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
let IxSlideInComponent = class IxSlideInComponent {
    onKeydownHandler() {
        this.onBackdropClicked();
    }
    constructor(el, slideInService, renderer, cdr, defaultInjector) {
        this.el = el;
        this.slideInService = slideInService;
        this.renderer = renderer;
        this.cdr = cdr;
        this.defaultInjector = defaultInjector;
        this.isSlideInOpen = false;
        this.wide = false;
        this.wasBodyCleared = false;
        this.element = this.el.nativeElement;
    }
    ngOnInit() {
        // ensure id attribute exists
        if (!this.id) {
            return;
        }
        // move element to bottom of page (just before </body>) so it can be displayed above everything else
        document.body.appendChild(this.element);
        this.slideInService.setSlideComponent(this);
    }
    onBackdropClicked() {
        if (!this.element || !this.isSlideInOpen) {
            return;
        }
        this.slideInService.closeLast();
    }
    closeSlideIn() {
        this.isSlideInOpen = false;
        this.renderer.removeStyle(document.body, 'overflow');
        this.wasBodyCleared = true;
        this.cdr.markForCheck();
        this.timeOutOfClear = (0, rxjs_1.timer)(200).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            // Destroying child component later improves performance a little bit.
            // 200ms matches transition duration
            this.slideInBody.clear();
            this.wasBodyCleared = false;
            this.cdr.markForCheck();
        });
    }
    openSlideIn(componentType, params) {
        if (this.isSlideInOpen) {
            console.error('SlideIn is already open');
        }
        this.isSlideInOpen = true;
        this.renderer.setStyle(document.body, 'overflow', 'hidden');
        this.wide = !!(params === null || params === void 0 ? void 0 : params.wide);
        if (this.wasBodyCleared) {
            this.timeOutOfClear.unsubscribe();
        }
        this.slideInBody.clear();
        this.wasBodyCleared = false;
        // clear body and close all slides
        this.cdr.markForCheck();
        return this.createSlideInRef(componentType, params === null || params === void 0 ? void 0 : params.data, (params === null || params === void 0 ? void 0 : params.injector) || this.defaultInjector);
    }
    createSlideInRef(componentType, data, parentInjector) {
        const slideInRef = new ix_slide_in_ref_1.IxSlideInRef();
        const injector = core_1.Injector.create({
            providers: [
                { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: data },
                { provide: ix_slide_in_ref_1.IxSlideInRef, useValue: slideInRef },
            ],
            parent: parentInjector,
        });
        slideInRef.componentRef = this.slideInBody.createComponent(componentType, { injector });
        slideInRef.id = angular2_uuid_1.UUID.UUID();
        return slideInRef;
    }
    ngOnDestroy() {
        this.element.remove();
        this.slideInService.closeAll();
    }
};
exports.IxSlideInComponent = IxSlideInComponent;
IxSlideInComponent.ctorParameters = () => [
    { type: core_1.ElementRef },
    { type: ix_slide_in_service_1.IxSlideInService },
    { type: core_1.Renderer2 },
    { type: core_1.ChangeDetectorRef },
    { type: core_1.Injector }
];
IxSlideInComponent.propDecorators = {
    id: [{ type: core_1.Input }],
    slideInBody: [{ type: core_1.ViewChild, args: ['body', { static: true, read: core_1.ViewContainerRef },] }],
    onKeydownHandler: [{ type: core_1.HostListener, args: ['document:keydown.escape',] }]
};
exports.IxSlideInComponent = IxSlideInComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-slide-in',
        template: require("./ix-slide-in.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [a11y_1.CdkTrapFocus],
    })
], IxSlideInComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,