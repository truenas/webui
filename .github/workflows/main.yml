name: WebUI
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'src/assets/i18n/**'
      - 'tests/**'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'src/assets/i18n/**'
      - 'tests/**'

jobs:
  check-permissions:
    name: Check PR creator permissions
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      is_ux_team: ${{ steps.check.outputs.is_ux_team }}
    steps:
      - name: Check if PR creator is in ux-team
        id: check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: membership } = await github.rest.teams.getMembershipForUserInOrg({
                org: 'truenas',
                team_slug: 'ux-team',
                username: context.payload.pull_request.user.login
              });
              core.setOutput('is_ux_team', membership.state === 'active');
            } catch (error) {
              // User is not in the team or error occurred
              core.setOutput('is_ux_team', 'false');
            }

  install:
    name: Checkout and Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare

  build:
    name: Build
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare
      - name: Build
        run: yarn build:prod
      - name: Check strict null checks
        run: yarn run check-env && yarn run strict-null-checks

  lint:
    name: Validate code style
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare
      - name: Generate default environment file
        run: yarn run check-env
      - name: Run linter
        run: yarn lint

  test:
    name: Run tests
    needs: [install, check-permissions]
    if: always() && needs.install.result == 'success'
    strategy:
      fail-fast: false
    runs-on: ${{ (github.event_name == 'pull_request' && needs.check-permissions.outputs.is_ux_team == 'true') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare
      - name: Run tests (self-hosted for ux-team)
        if: (github.event_name == 'pull_request' && needs.check-permissions.outputs.is_ux_team == 'true')
        run: yarn test:pr --maxWorkers=20
      - name: Run tests (standard for non-ux-team)
        if: !(github.event_name == 'pull_request' && needs.check-permissions.outputs.is_ux_team == 'true')
        run: yarn test:pr --maxWorkers=2
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
         name: coverage
         path: coverage/webui/coverage-final.json
      - name: Upload test data
        uses: actions/upload-artifact@v4
        with:
         name: coverage-junit
         path: coverage/webui/junit.xml

  report-coverage:
    name: Collect coverage
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: [test]
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download coverage and test data
        uses: actions/download-artifact@v4
        with:
          pattern: 'coverage*'
          path: coverage
          merge-multiple: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          name: webui
          token: ${{ env.CODECOV_TOKEN }}
          files: coverage/coverage-final.json
          fail_ci_if_error: true
      - name: Upload extra test data to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/junit.xml
