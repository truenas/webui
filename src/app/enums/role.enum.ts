import { marker as T } from '@biesbjerg/ngx-translate-extract-marker';

export enum Role {
  FullAdmin = 'FULL_ADMIN',
  Readonly = 'READONLY',
  HasAllowList = 'HAS_ALLOW_LIST',
  SharingIscsiExtentRead = 'SHARING_ISCSI_EXTENT_READ',
  SharingIscsiExtentWrite = 'SHARING_ISCSI_EXTENT_WRITE',
  SharingNfsRead = 'SHARING_NFS_READ',
  SharingNfsWrite = 'SHARING_NFS_WRITE',
  SharingSmbRead = 'SHARING_SMB_READ',
  SharingSmbWrite = 'SHARING_SMB_WRITE',
  SharingRead = 'SHARING_READ',
  SharingWrite = 'SHARING_WRITE',
  KeychainCredentialRead = 'KEYCHAIN_CREDENTIAL_READ',
  KeychainCredentialWrite = 'KEYCHAIN_CREDENTIAL_WRITE',
  ReplicationTaskConfigRead = 'REPLICATION_TASK_CONFIG_READ',
  ReplicationTaskConfigWrite = 'REPLICATION_TASK_CONFIG_WRITE',
  ReplicationTaskRead = 'REPLICATION_TASK_READ',
  ReplicationTaskWrite = 'REPLICATION_TASK_WRITE',
  ReplicationTaskWritePull = 'REPLICATION_TASK_WRITE_PULL',
  SnapshotTaskRead = 'SNAPSHOT_TASK_READ',
  SnapshotTaskWrite = 'SNAPSHOT_TASK_WRITE',
  DatasetRead = 'DATASET_READ',
  DatasetWrite = 'DATASET_WRITE',
  DatasetDelete = 'DATASET_DELETE',
  SnapshotRead = 'SNAPSHOT_READ',
  SnapshotWrite = 'SNAPSHOT_WRITE',
  SnapshotDelete = 'SNAPSHOT_DELETE',
  ReplicationManager = 'REPLICATION_MANAGER',
  SharingManager = 'SHARING_MANAGER',
  FilesystemAttrsRead = 'FILESYSTEM_ATTRS_READ',
  FilesystemAttrsWrite = 'FILESYSTEM_ATTRS_WRITE',
  FilesystemDataRead = 'FILESYSTEM_DATA_READ',
  FilesystemDataWrite = 'FILESYSTEM_DATA_WRITE',
  FilesystemFullControl = 'FILESYSTEM_FULL_CONTROL',
  SharingIscsiAuthRead = 'SHARING_ISCSI_AUTH_READ',
  SharingIscsiAuthWrite = 'SHARING_ISCSI_AUTH_WRITE',
  SharingIscsiGlobalRead = 'SHARING_ISCSI_GLOBAL_READ',
  SharingIscsiGlobalWrite = 'SHARING_ISCSI_GLOBAL_WRITE',
  SharingIscsiHostRead = 'SHARING_ISCSI_HOST_READ',
  SharingIscsiHostWrite = 'SHARING_ISCSI_HOST_WRITE',
  SharingIscsiInitiatorRead = 'SHARING_ISCSI_INITIATOR_READ',
  SharingIscsiInitiatorWrite = 'SHARING_ISCSI_INITIATOR_WRITE',
  SharingIscsiPortalRead = 'SHARING_ISCSI_PORTAL_READ',
  SharingIscsiPortalWrite = 'SHARING_ISCSI_PORTAL_WRITE',
  SharingIscsiTargetRead = 'SHARING_ISCSI_TARGET_READ',
  SharingIscsiTargetWrite = 'SHARING_ISCSI_TARGET_WRITE',
  SharingIscsiTargetExtentRead = 'SHARING_ISCSI_TARGETEXTENT_READ',
  SharingIscsiTargetExtentWrite = 'SHARING_ISCSI_TARGETEXTENT_WRITE',
  SharingIscsiRead = 'SHARING_ISCSI_READ',
  SharingIscsiWrite = 'SHARING_ISCSI_WRITE',
}

export const roleNames = new Map<Role, string>([
  [Role.FullAdmin, T('Full Admin')],
  [Role.Readonly, T('Readonly')],
  [Role.SharingManager, T('Sharing Manager')],
  [Role.HasAllowList, T('Has Allow List')],
  [Role.SharingIscsiExtentRead, T('Sharing iSCSI Extent Read')],
  [Role.SharingIscsiExtentWrite, T('Sharing iSCSI Extent Write')],
  [Role.SharingNfsRead, T('Sharing NFS Read')],
  [Role.SharingNfsWrite, T('Sharing NFS Write')],
  [Role.SharingSmbRead, T('Sharing SMB Read')],
  [Role.SharingSmbWrite, T('Sharing SMB Write')],
  [Role.SharingRead, T('Sharing Read')],
  [Role.SharingWrite, T('Sharing Write')],
  [Role.KeychainCredentialRead, T('Keychain Credential Read')],
  [Role.KeychainCredentialWrite, T('Keychain Credential Write')],
  [Role.ReplicationTaskConfigRead, T('Replication Task Config Read')],
  [Role.ReplicationTaskConfigWrite, T('Replication Task Config Write')],
  [Role.ReplicationTaskRead, T('Replication Task Read')],
  [Role.ReplicationTaskWrite, T('Replication Task Write')],
  [Role.ReplicationTaskWritePull, T('Replication Task Write Pull')],
  [Role.SnapshotTaskRead, T('Snapshot Task Read')],
  [Role.SnapshotTaskWrite, T('Snapshot Task Write')],
  [Role.DatasetRead, T('Dataset Read')],
  [Role.DatasetWrite, T('Dataset Write')],
  [Role.DatasetDelete, T('Dataset Delete')],
  [Role.SnapshotRead, T('Snapshot Read')],
  [Role.SnapshotWrite, T('Snapshot Write')],
  [Role.SnapshotDelete, T('Snapshot Delete')],
  [Role.ReplicationManager, T('Replication Manager')],
  [Role.FilesystemAttrsRead, T('Filesystem Attrs Read')],
  [Role.FilesystemAttrsWrite, T('Filesystem Attrs Write')],
  [Role.FilesystemDataRead, T('Filesystem Data Read')],
  [Role.FilesystemDataWrite, T('Filesystem Data Write')],
  [Role.FilesystemFullControl, T('Filesystem Full Control')],
  [Role.SharingIscsiAuthRead, T('Sharing iSCSI Auth Read')],
  [Role.SharingIscsiAuthWrite, T('Sharing iSCSI Auth Write')],
  [Role.SharingIscsiGlobalRead, T('Sharing iSCSI Global Read')],
  [Role.SharingIscsiGlobalWrite, T('Sharing iSCSI Global Write')],
  [Role.SharingIscsiHostRead, T('Sharing iSCSI Host Read')],
  [Role.SharingIscsiHostWrite, T('Sharing iSCSI Host Write')],
  [Role.SharingIscsiInitiatorRead, T('Sharing iSCSI Initiator Read')],
  [Role.SharingIscsiInitiatorWrite, T('Sharing iSCSI Initiator Write')],
  [Role.SharingIscsiPortalRead, T('Sharing iSCSI Portal Read')],
  [Role.SharingIscsiPortalWrite, T('Sharing iSCSI Portal Write')],
  [Role.SharingIscsiTargetRead, T('Sharing iSCSI Target Read')],
  [Role.SharingIscsiTargetWrite, T('Sharing iSCSI Target Write')],
  [Role.SharingIscsiTargetExtentRead, T('Sharing iSCSI Target Extent Read')],
  [Role.SharingIscsiTargetExtentWrite, T('Sharing iSCSI Target Extent Write')],
  [Role.SharingIscsiRead, T('Sharing iSCSI Read')],
  [Role.SharingIscsiWrite, T('Sharing iSCSI Write')],
]);

export function rolesListToString(roles: Role[]): string {
  return roles.map((role) => roleNames.get(role)).join(', ') || T('N/A');
}
