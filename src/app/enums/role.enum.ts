import { marker as T } from '@biesbjerg/ngx-translate-extract-marker';

export enum Role {
  FullAdmin = 'FULL_ADMIN',
  Readonly = 'READONLY',
  HasAllowList = 'HAS_ALLOW_LIST',
  SharingIscsiExtentRead = 'SHARING_ISCSI_EXTENT_READ',
  SharingIscsiExtentWrite = 'SHARING_ISCSI_EXTENT_WRITE',
  SharingNfsRead = 'SHARING_NFS_READ',
  SharingNfsWrite = 'SHARING_NFS_WRITE',
  SharingSmbRead = 'SHARING_SMB_READ',
  SharingSmbWrite = 'SHARING_SMB_WRITE',
  SharingRead = 'SHARING_READ',
  SharingWrite = 'SHARING_WRITE',
  KeychainCredentialRead = 'KEYCHAIN_CREDENTIAL_READ',
  KeychainCredentialWrite = 'KEYCHAIN_CREDENTIAL_WRITE',
  ReplicationTaskConfigRead = 'REPLICATION_TASK_CONFIG_READ',
  ReplicationTaskConfigWrite = 'REPLICATION_TASK_CONFIG_WRITE',
  ReplicationTaskRead = 'REPLICATION_TASK_READ',
  ReplicationTaskWrite = 'REPLICATION_TASK_WRITE',
  ReplicationTaskWritePull = 'REPLICATION_TASK_WRITE_PULL',
  SnapshotTaskRead = 'SNAPSHOT_TASK_READ',
  SnapshotTaskWrite = 'SNAPSHOT_TASK_WRITE',
  DatasetRead = 'DATASET_READ',
  DatasetWrite = 'DATASET_WRITE',
  DatasetDelete = 'DATASET_DELETE',
  SnapshotRead = 'SNAPSHOT_READ',
  SnapshotWrite = 'SNAPSHOT_WRITE',
  SnapshotDelete = 'SNAPSHOT_DELETE',
  ReplicationManager = 'REPLICATION_MANAGER',
  SharingManager = 'SHARING_MANAGER',
}

export const roleNames = new Map<Role, string>([
  [Role.FullAdmin, T('Full Admin')],
  [Role.Readonly, T('Readonly')],
  [Role.SharingManager, T('Sharing Manager')],
  [Role.FullAdmin, T('Full Admin')],
  [Role.HasAllowList, T('Has Allow List')],
  [Role.Readonly, T('Readonly')],
  [Role.SharingIscsiExtentRead, T('Sharing iSCSI Extent Read')],
  [Role.SharingIscsiExtentWrite, T('Sharing iSCSI Extent Write')],
  [Role.SharingNfsRead, T('Sharing NFS Read')],
  [Role.SharingNfsWrite, T('Sharing NFS Write')],
  [Role.SharingSmbRead, T('Sharing SMB Read')],
  [Role.SharingSmbWrite, T('Sharing SMB Write')],
  [Role.SharingRead, T('Sharing Read')],
  [Role.SharingWrite, T('Sharing Write')],
  [Role.KeychainCredentialRead, T('Keychain Credential Read')],
  [Role.KeychainCredentialWrite, T('Keychain Credential Write')],
  [Role.ReplicationTaskConfigRead, T('Replication Task Config Read')],
  [Role.ReplicationTaskConfigWrite, T('Replication Task Config Write')],
  [Role.ReplicationTaskRead, T('Replication Task Read')],
  [Role.ReplicationTaskWrite, T('Replication Task Write')],
  [Role.ReplicationTaskWritePull, T('Replication Task Write Pull')],
  [Role.SnapshotTaskRead, T('Snapshot Task Read')],
  [Role.SnapshotTaskWrite, T('Snapshot Task Write')],
  [Role.DatasetRead, T('Dataset Read')],
  [Role.DatasetWrite, T('Dataset Write')],
  [Role.DatasetDelete, T('Dataset Delete')],
  [Role.SnapshotRead, T('Snapshot Read')],
  [Role.SnapshotWrite, T('Snapshot Write')],
  [Role.SnapshotDelete, T('Snapshot Delete')],
  [Role.ReplicationManager, T('Replication Manager')],
  [Role.SharingManager, T('Sharing Manager')],
]);

export function rolesListToString(roles: Role[]): string {
  return roles.map((role) => roleNames.get(role)).join(', ') || T('N/A');
}
